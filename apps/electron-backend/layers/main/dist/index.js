"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var require$$0$4 = require("path");
var require$$0$1 = require("electron");
var crypto = require("crypto");
var require$$0$5 = require("url");
var require$$0$2 = require("fs");
var require$$0$3 = require("util");
var express = require("express");
var require$$0$6 = require("http");
var require$$1 = require("https");
var require$$3 = require("stream");
var require$$4 = require("assert");
var require$$0$7 = require("zlib");
var require$$0$8 = require("querystring");
function _interopDefaultLegacy(e) {
  return e && typeof e === "object" && "default" in e ? e : { "default": e };
}
var require$$0__default$3 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$4);
var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0$1);
var crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto);
var require$$0__default$4 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$5);
var require$$0__default$1 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$2);
var require$$0__default$2 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$3);
var express__default = /* @__PURE__ */ _interopDefaultLegacy(express);
var require$$0__default$5 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$6);
var require$$1__default = /* @__PURE__ */ _interopDefaultLegacy(require$$1);
var require$$3__default = /* @__PURE__ */ _interopDefaultLegacy(require$$3);
var require$$4__default = /* @__PURE__ */ _interopDefaultLegacy(require$$4);
var require$$0__default$6 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$7);
var require$$0__default$7 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$8);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const electron$2 = require$$0__default["default"];
if (typeof electron$2 === "string") {
  throw new TypeError("Not running in an Electron environment!");
}
const app$1 = electron$2.app || electron$2.remote.app;
const isEnvSet$1 = "ELECTRON_IS_DEV" in process.env;
const getFromEnv$1 = parseInt({}.ELECTRON_IS_DEV, 10) === 1;
var electronIsDev$1 = isEnvSet$1 ? getFromEnv$1 : !app$1.isPackaged;
const isMacOS = process.platform === "darwin";
function uuid() {
  return crypto__default["default"].randomUUID();
}
var isFullwidthCodePoint$3 = { exports: {} };
const isFullwidthCodePoint$2 = (codePoint) => {
  if (Number.isNaN(codePoint)) {
    return false;
  }
  if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
    return true;
  }
  return false;
};
isFullwidthCodePoint$3.exports = isFullwidthCodePoint$2;
isFullwidthCodePoint$3.exports.default = isFullwidthCodePoint$2;
const regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
const astralRegex$1 = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
var astralRegex_1 = astralRegex$1;
var ansiStyles$1 = { exports: {} };
var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
const cssKeywords = colorName;
const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
  reverseKeywords[cssKeywords[key]] = key;
}
const convert$1 = {
  rgb: { channels: 3, labels: "rgb" },
  hsl: { channels: 3, labels: "hsl" },
  hsv: { channels: 3, labels: "hsv" },
  hwb: { channels: 3, labels: "hwb" },
  cmyk: { channels: 4, labels: "cmyk" },
  xyz: { channels: 3, labels: "xyz" },
  lab: { channels: 3, labels: "lab" },
  lch: { channels: 3, labels: "lch" },
  hex: { channels: 1, labels: ["hex"] },
  keyword: { channels: 1, labels: ["keyword"] },
  ansi16: { channels: 1, labels: ["ansi16"] },
  ansi256: { channels: 1, labels: ["ansi256"] },
  hcg: { channels: 3, labels: ["h", "c", "g"] },
  apple: { channels: 3, labels: ["r16", "g16", "b16"] },
  gray: { channels: 1, labels: ["gray"] }
};
var conversions$2 = convert$1;
for (const model of Object.keys(convert$1)) {
  if (!("channels" in convert$1[model])) {
    throw new Error("missing channels property: " + model);
  }
  if (!("labels" in convert$1[model])) {
    throw new Error("missing channel labels property: " + model);
  }
  if (convert$1[model].labels.length !== convert$1[model].channels) {
    throw new Error("channel and label counts mismatch: " + model);
  }
  const { channels, labels } = convert$1[model];
  delete convert$1[model].channels;
  delete convert$1[model].labels;
  Object.defineProperty(convert$1[model], "channels", { value: channels });
  Object.defineProperty(convert$1[model], "labels", { value: labels });
}
convert$1.rgb.hsl = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const min = Math.min(r, g, b);
  const max = Math.max(r, g, b);
  const delta = max - min;
  let h;
  let s;
  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }
  h = Math.min(h * 60, 360);
  if (h < 0) {
    h += 360;
  }
  const l = (min + max) / 2;
  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }
  return [h, s * 100, l * 100];
};
convert$1.rgb.hsv = function(rgb) {
  let rdif;
  let gdif;
  let bdif;
  let h;
  let s;
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const v = Math.max(r, g, b);
  const diff = v - Math.min(r, g, b);
  const diffc = function(c) {
    return (v - c) / 6 / diff + 1 / 2;
  };
  if (diff === 0) {
    h = 0;
    s = 0;
  } else {
    s = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);
    if (r === v) {
      h = bdif - gdif;
    } else if (g === v) {
      h = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h = 2 / 3 + gdif - rdif;
    }
    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }
  }
  return [
    h * 360,
    s * 100,
    v * 100
  ];
};
convert$1.rgb.hwb = function(rgb) {
  const r = rgb[0];
  const g = rgb[1];
  let b = rgb[2];
  const h = convert$1.rgb.hsl(rgb)[0];
  const w = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h, w * 100, b * 100];
};
convert$1.rgb.cmyk = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const k = Math.min(1 - r, 1 - g, 1 - b);
  const c = (1 - r - k) / (1 - k) || 0;
  const m = (1 - g - k) / (1 - k) || 0;
  const y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
};
function comparativeDistance(x, y) {
  return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
}
convert$1.rgb.keyword = function(rgb) {
  const reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }
  let currentClosestDistance = Infinity;
  let currentClosestKeyword;
  for (const keyword of Object.keys(cssKeywords)) {
    const value = cssKeywords[keyword];
    const distance = comparativeDistance(rgb, value);
    if (distance < currentClosestDistance) {
      currentClosestDistance = distance;
      currentClosestKeyword = keyword;
    }
  }
  return currentClosestKeyword;
};
convert$1.keyword.rgb = function(keyword) {
  return cssKeywords[keyword];
};
convert$1.rgb.xyz = function(rgb) {
  let r = rgb[0] / 255;
  let g = rgb[1] / 255;
  let b = rgb[2] / 255;
  r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
  g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
  b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
  const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y * 100, z * 100];
};
convert$1.rgb.lab = function(rgb) {
  const xyz = convert$1.rgb.xyz(rgb);
  let x = xyz[0];
  let y = xyz[1];
  let z = xyz[2];
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
  y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l = 116 * y - 16;
  const a = 500 * (x - y);
  const b = 200 * (y - z);
  return [l, a, b];
};
convert$1.hsl.rgb = function(hsl) {
  const h = hsl[0] / 360;
  const s = hsl[1] / 100;
  const l = hsl[2] / 100;
  let t2;
  let t3;
  let val;
  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }
  const t1 = 2 * l - t2;
  const rgb = [0, 0, 0];
  for (let i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }
    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }
    rgb[i] = val * 255;
  }
  return rgb;
};
convert$1.hsl.hsv = function(hsl) {
  const h = hsl[0];
  let s = hsl[1] / 100;
  let l = hsl[2] / 100;
  let smin = s;
  const lmin = Math.max(l, 0.01);
  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  const v = (l + s) / 2;
  const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
  return [h, sv * 100, v * 100];
};
convert$1.hsv.rgb = function(hsv) {
  const h = hsv[0] / 60;
  const s = hsv[1] / 100;
  let v = hsv[2] / 100;
  const hi = Math.floor(h) % 6;
  const f = h - Math.floor(h);
  const p = 255 * v * (1 - s);
  const q = 255 * v * (1 - s * f);
  const t = 255 * v * (1 - s * (1 - f));
  v *= 255;
  switch (hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
};
convert$1.hsv.hsl = function(hsv) {
  const h = hsv[0];
  const s = hsv[1] / 100;
  const v = hsv[2] / 100;
  const vmin = Math.max(v, 0.01);
  let sl;
  let l;
  l = (2 - s) * v;
  const lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
};
convert$1.hwb.rgb = function(hwb) {
  const h = hwb[0] / 360;
  let wh = hwb[1] / 100;
  let bl = hwb[2] / 100;
  const ratio = wh + bl;
  let f;
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }
  const i = Math.floor(6 * h);
  const v = 1 - bl;
  f = 6 * h - i;
  if ((i & 1) !== 0) {
    f = 1 - f;
  }
  const n = wh + f * (v - wh);
  let r;
  let g;
  let b;
  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;
    case 1:
      r = n;
      g = v;
      b = wh;
      break;
    case 2:
      r = wh;
      g = v;
      b = n;
      break;
    case 3:
      r = wh;
      g = n;
      b = v;
      break;
    case 4:
      r = n;
      g = wh;
      b = v;
      break;
    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }
  return [r * 255, g * 255, b * 255];
};
convert$1.cmyk.rgb = function(cmyk) {
  const c = cmyk[0] / 100;
  const m = cmyk[1] / 100;
  const y = cmyk[2] / 100;
  const k = cmyk[3] / 100;
  const r = 1 - Math.min(1, c * (1 - k) + k);
  const g = 1 - Math.min(1, m * (1 - k) + k);
  const b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};
convert$1.xyz.rgb = function(xyz) {
  const x = xyz[0] / 100;
  const y = xyz[1] / 100;
  const z = xyz[2] / 100;
  let r;
  let g;
  let b;
  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.204 + z * 1.057;
  r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
  g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
  b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};
convert$1.xyz.lab = function(xyz) {
  let x = xyz[0];
  let y = xyz[1];
  let z = xyz[2];
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
  y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l = 116 * y - 16;
  const a = 500 * (x - y);
  const b = 200 * (y - z);
  return [l, a, b];
};
convert$1.lab.xyz = function(lab) {
  const l = lab[0];
  const a = lab[1];
  const b = lab[2];
  let x;
  let y;
  let z;
  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;
  const y2 = y ** 3;
  const x2 = x ** 3;
  const z2 = z ** 3;
  y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y *= 100;
  z *= 108.883;
  return [x, y, z];
};
convert$1.lab.lch = function(lab) {
  const l = lab[0];
  const a = lab[1];
  const b = lab[2];
  let h;
  const hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  const c = Math.sqrt(a * a + b * b);
  return [l, c, h];
};
convert$1.lch.lab = function(lch) {
  const l = lch[0];
  const c = lch[1];
  const h = lch[2];
  const hr = h / 360 * 2 * Math.PI;
  const a = c * Math.cos(hr);
  const b = c * Math.sin(hr);
  return [l, a, b];
};
convert$1.rgb.ansi16 = function(args, saturation = null) {
  const [r, g, b] = args;
  let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
  value = Math.round(value / 50);
  if (value === 0) {
    return 30;
  }
  let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
  if (value === 2) {
    ansi += 60;
  }
  return ansi;
};
convert$1.hsv.ansi16 = function(args) {
  return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
};
convert$1.rgb.ansi256 = function(args) {
  const r = args[0];
  const g = args[1];
  const b = args[2];
  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }
    if (r > 248) {
      return 231;
    }
    return Math.round((r - 8) / 247 * 24) + 232;
  }
  const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};
convert$1.ansi16.rgb = function(args) {
  let color = args % 10;
  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }
    color = color / 10.5 * 255;
    return [color, color, color];
  }
  const mult = (~~(args > 50) + 1) * 0.5;
  const r = (color & 1) * mult * 255;
  const g = (color >> 1 & 1) * mult * 255;
  const b = (color >> 2 & 1) * mult * 255;
  return [r, g, b];
};
convert$1.ansi256.rgb = function(args) {
  if (args >= 232) {
    const c = (args - 232) * 10 + 8;
    return [c, c, c];
  }
  args -= 16;
  let rem;
  const r = Math.floor(args / 36) / 5 * 255;
  const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  const b = rem % 6 / 5 * 255;
  return [r, g, b];
};
convert$1.rgb.hex = function(args) {
  const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$1.hex.rgb = function(args) {
  const match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match2) {
    return [0, 0, 0];
  }
  let colorString = match2[0];
  if (match2[0].length === 3) {
    colorString = colorString.split("").map((char) => {
      return char + char;
    }).join("");
  }
  const integer = parseInt(colorString, 16);
  const r = integer >> 16 & 255;
  const g = integer >> 8 & 255;
  const b = integer & 255;
  return [r, g, b];
};
convert$1.rgb.hcg = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const max = Math.max(Math.max(r, g), b);
  const min = Math.min(Math.min(r, g), b);
  const chroma = max - min;
  let grayscale;
  let hue;
  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }
  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma;
  }
  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};
convert$1.hsl.hcg = function(hsl) {
  const s = hsl[1] / 100;
  const l = hsl[2] / 100;
  const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
  let f = 0;
  if (c < 1) {
    f = (l - 0.5 * c) / (1 - c);
  }
  return [hsl[0], c * 100, f * 100];
};
convert$1.hsv.hcg = function(hsv) {
  const s = hsv[1] / 100;
  const v = hsv[2] / 100;
  const c = s * v;
  let f = 0;
  if (c < 1) {
    f = (v - c) / (1 - c);
  }
  return [hsv[0], c * 100, f * 100];
};
convert$1.hcg.rgb = function(hcg) {
  const h = hcg[0] / 360;
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  if (c === 0) {
    return [g * 255, g * 255, g * 255];
  }
  const pure = [0, 0, 0];
  const hi = h % 1 * 6;
  const v = hi % 1;
  const w = 1 - v;
  let mg = 0;
  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;
    case 1:
      pure[0] = w;
      pure[1] = 1;
      pure[2] = 0;
      break;
    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;
    case 3:
      pure[0] = 0;
      pure[1] = w;
      pure[2] = 1;
      break;
    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;
    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w;
  }
  mg = (1 - c) * g;
  return [
    (c * pure[0] + mg) * 255,
    (c * pure[1] + mg) * 255,
    (c * pure[2] + mg) * 255
  ];
};
convert$1.hcg.hsv = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const v = c + g * (1 - c);
  let f = 0;
  if (v > 0) {
    f = c / v;
  }
  return [hcg[0], f * 100, v * 100];
};
convert$1.hcg.hsl = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const l = g * (1 - c) + 0.5 * c;
  let s = 0;
  if (l > 0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1) {
    s = c / (2 * (1 - l));
  }
  return [hcg[0], s * 100, l * 100];
};
convert$1.hcg.hwb = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const v = c + g * (1 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};
convert$1.hwb.hcg = function(hwb) {
  const w = hwb[1] / 100;
  const b = hwb[2] / 100;
  const v = 1 - b;
  const c = v - w;
  let g = 0;
  if (c < 1) {
    g = (v - c) / (1 - c);
  }
  return [hwb[0], c * 100, g * 100];
};
convert$1.apple.rgb = function(apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};
convert$1.rgb.apple = function(rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};
convert$1.gray.rgb = function(args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};
convert$1.gray.hsl = function(args) {
  return [0, 0, args[0]];
};
convert$1.gray.hsv = convert$1.gray.hsl;
convert$1.gray.hwb = function(gray) {
  return [0, 100, gray[0]];
};
convert$1.gray.cmyk = function(gray) {
  return [0, 0, 0, gray[0]];
};
convert$1.gray.lab = function(gray) {
  return [gray[0], 0, 0];
};
convert$1.gray.hex = function(gray) {
  const val = Math.round(gray[0] / 100 * 255) & 255;
  const integer = (val << 16) + (val << 8) + val;
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$1.rgb.gray = function(rgb) {
  const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
const conversions$1 = conversions$2;
function buildGraph() {
  const graph = {};
  const models2 = Object.keys(conversions$1);
  for (let len = models2.length, i = 0; i < len; i++) {
    graph[models2[i]] = {
      distance: -1,
      parent: null
    };
  }
  return graph;
}
function deriveBFS(fromModel) {
  const graph = buildGraph();
  const queue = [fromModel];
  graph[fromModel].distance = 0;
  while (queue.length) {
    const current = queue.pop();
    const adjacents = Object.keys(conversions$1[current]);
    for (let len = adjacents.length, i = 0; i < len; i++) {
      const adjacent = adjacents[i];
      const node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function(args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  const path2 = [graph[toModel].parent, toModel];
  let fn = conversions$1[graph[toModel].parent][toModel];
  let cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path2.unshift(graph[cur].parent);
    fn = link(conversions$1[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }
  fn.conversion = path2;
  return fn;
}
var route$1 = function(fromModel) {
  const graph = deriveBFS(fromModel);
  const conversion = {};
  const models2 = Object.keys(graph);
  for (let len = models2.length, i = 0; i < len; i++) {
    const toModel = models2[i];
    const node = graph[toModel];
    if (node.parent === null) {
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};
const conversions = conversions$2;
const route = route$1;
const convert = {};
const models = Object.keys(conversions);
function wrapRaw(fn) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    return fn(args);
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    const result = fn(args);
    if (typeof result === "object") {
      for (let len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }
    return result;
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
models.forEach((fromModel) => {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
  Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
  const routes = route(fromModel);
  const routeModels = Object.keys(routes);
  routeModels.forEach((toModel) => {
    const fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
var colorConvert = convert;
(function(module) {
  const wrapAnsi16 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => (...args) => {
    const rgb = fn(...args);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n) => n;
  const rgb2rgb = (r, g, b) => [r, g, b];
  const setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert$1;
  const makeDynamicStyles = (wrap2, targetSpace, identity, isBackground) => {
    if (colorConvert$1 === void 0) {
      colorConvert$1 = colorConvert;
    }
    const offset = isBackground ? 10 : 0;
    const styles = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert$1)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles[name] = wrap2(identity, offset);
      } else if (typeof suite === "object") {
        styles[name] = wrap2(suite[targetSpace], offset);
      }
    }
    return styles;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles;
  }
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles$1);
const isFullwidthCodePoint$1 = isFullwidthCodePoint$3.exports;
const astralRegex = astralRegex_1;
const ansiStyles = ansiStyles$1.exports;
const ESCAPES = [
  "",
  "\x9B"
];
const wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
const checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
  let output = [];
  ansiCodes = [...ansiCodes];
  for (let ansiCode of ansiCodes) {
    const ansiCodeOrigin = ansiCode;
    if (ansiCode.match(";")) {
      ansiCode = ansiCode.split(";")[0][0] + "0";
    }
    const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
    if (item) {
      const indexEscape = ansiCodes.indexOf(item.toString());
      if (indexEscape >= 0) {
        ansiCodes.splice(indexEscape, 1);
      } else {
        output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
      }
    } else if (isEscapes) {
      output.push(wrapAnsi(0));
      break;
    } else {
      output.push(wrapAnsi(ansiCodeOrigin));
    }
  }
  if (isEscapes) {
    output = output.filter((element, index) => output.indexOf(element) === index);
    if (endAnsiCode !== void 0) {
      const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
      output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
    }
  }
  return output.join("");
};
var sliceAnsi$1 = (string, begin, end) => {
  const characters = [...string.normalize()];
  const ansiCodes = [];
  end = typeof end === "number" ? end : characters.length;
  let isInsideEscape = false;
  let ansiCode;
  let visible = 0;
  let output = "";
  for (const [index, character] of characters.entries()) {
    let leftEscape = false;
    if (ESCAPES.includes(character)) {
      const code = /\d[^m]*/.exec(string.slice(index, index + 18));
      ansiCode = code && code.length > 0 ? code[0] : void 0;
      if (visible < end) {
        isInsideEscape = true;
        if (ansiCode !== void 0) {
          ansiCodes.push(ansiCode);
        }
      }
    } else if (isInsideEscape && character === "m") {
      isInsideEscape = false;
      leftEscape = true;
    }
    if (!isInsideEscape && !leftEscape) {
      ++visible;
    }
    if (!astralRegex({ exact: true }).test(character) && isFullwidthCodePoint$1(character.codePointAt())) {
      ++visible;
    }
    if (visible > begin && visible <= end) {
      output += character;
    } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
      output = checkAnsi(ansiCodes);
    } else if (visible >= end) {
      output += checkAnsi(ansiCodes, true, ansiCode);
      break;
    }
  }
  return output;
};
var stringWidth$2 = { exports: {} };
var ansiRegex$1 = ({ onlyFirst = false } = {}) => {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
};
const ansiRegex = ansiRegex$1;
var stripAnsi$1 = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
var emojiRegex$1 = function() {
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};
const stripAnsi = stripAnsi$1;
const isFullwidthCodePoint = isFullwidthCodePoint$3.exports;
const emojiRegex = emojiRegex$1;
const stringWidth$1 = (string) => {
  if (typeof string !== "string" || string.length === 0) {
    return 0;
  }
  string = stripAnsi(string);
  if (string.length === 0) {
    return 0;
  }
  string = string.replace(emojiRegex(), "  ");
  let width = 0;
  for (let i = 0; i < string.length; i++) {
    const code = string.codePointAt(i);
    if (code <= 31 || code >= 127 && code <= 159) {
      continue;
    }
    if (code >= 768 && code <= 879) {
      continue;
    }
    if (code > 65535) {
      i++;
    }
    width += isFullwidthCodePoint(code) ? 2 : 1;
  }
  return width;
};
stringWidth$2.exports = stringWidth$1;
stringWidth$2.exports.default = stringWidth$1;
const sliceAnsi = sliceAnsi$1;
const stringWidth = stringWidth$2.exports;
function getIndexOfNearestSpace(string, index, shouldSearchRight) {
  if (string.charAt(index) === " ") {
    return index;
  }
  for (let i = 1; i <= 3; i++) {
    if (shouldSearchRight) {
      if (string.charAt(index + i) === " ") {
        return index + i;
      }
    } else if (string.charAt(index - i) === " ") {
      return index - i;
    }
  }
  return index;
}
var cliTruncate$1 = (text, columns, options) => {
  options = __spreadValues({
    position: "end",
    preferTruncationOnSpace: false
  }, options);
  const { position, space, preferTruncationOnSpace } = options;
  let ellipsis = "\u2026";
  let ellipsisWidth = 1;
  if (typeof text !== "string") {
    throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
  }
  if (typeof columns !== "number") {
    throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
  }
  if (columns < 1) {
    return "";
  }
  if (columns === 1) {
    return ellipsis;
  }
  const length = stringWidth(text);
  if (length <= columns) {
    return text;
  }
  if (position === "start") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
      return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
    }
    if (space === true) {
      ellipsis += " ";
      ellipsisWidth = 2;
    }
    return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
  }
  if (position === "middle") {
    if (space === true) {
      ellipsis = " " + ellipsis + " ";
      ellipsisWidth = 3;
    }
    const half = Math.floor(columns / 2);
    if (preferTruncationOnSpace) {
      const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
      const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
      return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
    }
    return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
  }
  if (position === "end") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
      return sliceAnsi(text, 0, nearestSpace) + ellipsis;
    }
    if (space === true) {
      ellipsis = " " + ellipsis;
      ellipsisWidth = 2;
    }
    return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
  }
  throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
};
var electronDl = { exports: {} };
var unusedFilename$2 = { exports: {} };
var pathExists$1 = { exports: {} };
const fs = require$$0__default$1["default"];
const { promisify } = require$$0__default$2["default"];
const pAccess = promisify(fs.access);
pathExists$1.exports = async (path2) => {
  try {
    await pAccess(path2);
    return true;
  } catch (_) {
    return false;
  }
};
pathExists$1.exports.sync = (path2) => {
  try {
    fs.accessSync(path2);
    return true;
  } catch (_) {
    return false;
  }
};
var path$3 = require$$0__default$3["default"];
var modifyFilename$1 = function modifyFilename2(pth, modifier) {
  if (arguments.length !== 2) {
    throw new Error("`path` and `modifier` required");
  }
  if (Array.isArray(pth)) {
    return pth.map(function(el) {
      return modifyFilename2(el, modifier);
    });
  }
  var ext = path$3.extname(pth);
  return path$3.join(path$3.dirname(pth), modifier(path$3.basename(pth, ext), ext));
};
const pathExists = pathExists$1.exports;
const modifyFilename = modifyFilename$1;
const incrementer = (filePath) => {
  let counter = 0;
  return () => modifyFilename(filePath, (filename, extension) => `${filename} (${++counter})${extension}`);
};
const unusedFilename$1 = (filePath) => {
  const getFilePath = incrementer(filePath);
  const find = async (newFilePath) => await pathExists(newFilePath) ? find(getFilePath()) : newFilePath;
  return find(filePath);
};
unusedFilename$2.exports = unusedFilename$1;
unusedFilename$2.exports.default = unusedFilename$1;
unusedFilename$2.exports.sync = (filePath) => {
  const getFilePath = incrementer(filePath);
  const find = (newFilePath) => pathExists.sync(newFilePath) ? find(getFilePath()) : newFilePath;
  return find(filePath);
};
var escapeGoat = {};
(function(exports) {
  exports.htmlEscape = (string) => string.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  exports.htmlUnescape = (htmlString) => htmlString.replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&#0?39;/g, "'").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
  exports.htmlEscapeTag = (strings, ...values) => {
    let output = strings[0];
    for (let i = 0; i < values.length; i++) {
      output = output + exports.htmlEscape(String(values[i])) + strings[i + 1];
    }
    return output;
  };
  exports.htmlUnescapeTag = (strings, ...values) => {
    let output = strings[0];
    for (let i = 0; i < values.length; i++) {
      output = output + exports.htmlUnescape(String(values[i])) + strings[i + 1];
    }
    return output;
  };
})(escapeGoat);
const { htmlEscape } = escapeGoat;
var pupa$1 = (template, data) => {
  if (typeof template !== "string") {
    throw new TypeError(`Expected a \`string\` in the first argument, got \`${typeof template}\``);
  }
  if (typeof data !== "object") {
    throw new TypeError(`Expected an \`object\` or \`Array\` in the second argument, got \`${typeof data}\``);
  }
  const doubleBraceRegex = /{{(\d+|[a-z$_][a-z\d$_]*?(?:\.[a-z\d$_]*?)*?)}}/gi;
  if (doubleBraceRegex.test(template)) {
    template = template.replace(doubleBraceRegex, (_, key) => {
      let result = data;
      for (const property of key.split(".")) {
        result = result ? result[property] : "";
      }
      return htmlEscape(String(result));
    });
  }
  const braceRegex = /{(\d+|[a-z$_][a-z\d$_]*?(?:\.[a-z\d$_]*?)*?)}/gi;
  return template.replace(braceRegex, (_, key) => {
    let result = data;
    for (const property of key.split(".")) {
      result = result ? result[property] : "";
    }
    return String(result);
  });
};
var extName$1 = { exports: {} };
var require$$0 = {
  "application/1d-interleaved-parityfec": {
    source: "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/3gpp-ims+xml": {
    source: "iana",
    compressible: true
  },
  "application/3gpphal+json": {
    source: "iana",
    compressible: true
  },
  "application/3gpphalforms+json": {
    source: "iana",
    compressible: true
  },
  "application/a2l": {
    source: "iana"
  },
  "application/ace+cbor": {
    source: "iana"
  },
  "application/activemessage": {
    source: "iana"
  },
  "application/activity+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-costmap+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-costmapfilter+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-directory+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointcost+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointcostparams+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointprop+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointpropparams+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-error+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-networkmap+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-networkmapfilter+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-updatestreamcontrol+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-updatestreamparams+json": {
    source: "iana",
    compressible: true
  },
  "application/aml": {
    source: "iana"
  },
  "application/andrew-inset": {
    source: "iana",
    extensions: [
      "ez"
    ]
  },
  "application/applefile": {
    source: "iana"
  },
  "application/applixware": {
    source: "apache",
    extensions: [
      "aw"
    ]
  },
  "application/at+jwt": {
    source: "iana"
  },
  "application/atf": {
    source: "iana"
  },
  "application/atfx": {
    source: "iana"
  },
  "application/atom+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atom"
    ]
  },
  "application/atomcat+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomcat"
    ]
  },
  "application/atomdeleted+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomdeleted"
    ]
  },
  "application/atomicmail": {
    source: "iana"
  },
  "application/atomsvc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomsvc"
    ]
  },
  "application/atsc-dwd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dwd"
    ]
  },
  "application/atsc-dynamic-event-message": {
    source: "iana"
  },
  "application/atsc-held+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "held"
    ]
  },
  "application/atsc-rdt+json": {
    source: "iana",
    compressible: true
  },
  "application/atsc-rsat+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rsat"
    ]
  },
  "application/atxml": {
    source: "iana"
  },
  "application/auth-policy+xml": {
    source: "iana",
    compressible: true
  },
  "application/bacnet-xdd+zip": {
    source: "iana",
    compressible: false
  },
  "application/batch-smtp": {
    source: "iana"
  },
  "application/bdoc": {
    compressible: false,
    extensions: [
      "bdoc"
    ]
  },
  "application/beep+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/calendar+json": {
    source: "iana",
    compressible: true
  },
  "application/calendar+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xcs"
    ]
  },
  "application/call-completion": {
    source: "iana"
  },
  "application/cals-1840": {
    source: "iana"
  },
  "application/captive+json": {
    source: "iana",
    compressible: true
  },
  "application/cbor": {
    source: "iana"
  },
  "application/cbor-seq": {
    source: "iana"
  },
  "application/cccex": {
    source: "iana"
  },
  "application/ccmp+xml": {
    source: "iana",
    compressible: true
  },
  "application/ccxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ccxml"
    ]
  },
  "application/cdfx+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cdfx"
    ]
  },
  "application/cdmi-capability": {
    source: "iana",
    extensions: [
      "cdmia"
    ]
  },
  "application/cdmi-container": {
    source: "iana",
    extensions: [
      "cdmic"
    ]
  },
  "application/cdmi-domain": {
    source: "iana",
    extensions: [
      "cdmid"
    ]
  },
  "application/cdmi-object": {
    source: "iana",
    extensions: [
      "cdmio"
    ]
  },
  "application/cdmi-queue": {
    source: "iana",
    extensions: [
      "cdmiq"
    ]
  },
  "application/cdni": {
    source: "iana"
  },
  "application/cea": {
    source: "iana"
  },
  "application/cea-2018+xml": {
    source: "iana",
    compressible: true
  },
  "application/cellml+xml": {
    source: "iana",
    compressible: true
  },
  "application/cfw": {
    source: "iana"
  },
  "application/city+json": {
    source: "iana",
    compressible: true
  },
  "application/clr": {
    source: "iana"
  },
  "application/clue+xml": {
    source: "iana",
    compressible: true
  },
  "application/clue_info+xml": {
    source: "iana",
    compressible: true
  },
  "application/cms": {
    source: "iana"
  },
  "application/cnrp+xml": {
    source: "iana",
    compressible: true
  },
  "application/coap-group+json": {
    source: "iana",
    compressible: true
  },
  "application/coap-payload": {
    source: "iana"
  },
  "application/commonground": {
    source: "iana"
  },
  "application/conference-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/cose": {
    source: "iana"
  },
  "application/cose-key": {
    source: "iana"
  },
  "application/cose-key-set": {
    source: "iana"
  },
  "application/cpl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cpl"
    ]
  },
  "application/csrattrs": {
    source: "iana"
  },
  "application/csta+xml": {
    source: "iana",
    compressible: true
  },
  "application/cstadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/csvm+json": {
    source: "iana",
    compressible: true
  },
  "application/cu-seeme": {
    source: "apache",
    extensions: [
      "cu"
    ]
  },
  "application/cwt": {
    source: "iana"
  },
  "application/cybercash": {
    source: "iana"
  },
  "application/dart": {
    compressible: true
  },
  "application/dash+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpd"
    ]
  },
  "application/dash-patch+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpp"
    ]
  },
  "application/dashdelta": {
    source: "iana"
  },
  "application/davmount+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "davmount"
    ]
  },
  "application/dca-rft": {
    source: "iana"
  },
  "application/dcd": {
    source: "iana"
  },
  "application/dec-dx": {
    source: "iana"
  },
  "application/dialog-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/dicom": {
    source: "iana"
  },
  "application/dicom+json": {
    source: "iana",
    compressible: true
  },
  "application/dicom+xml": {
    source: "iana",
    compressible: true
  },
  "application/dii": {
    source: "iana"
  },
  "application/dit": {
    source: "iana"
  },
  "application/dns": {
    source: "iana"
  },
  "application/dns+json": {
    source: "iana",
    compressible: true
  },
  "application/dns-message": {
    source: "iana"
  },
  "application/docbook+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "dbk"
    ]
  },
  "application/dots+cbor": {
    source: "iana"
  },
  "application/dskpp+xml": {
    source: "iana",
    compressible: true
  },
  "application/dssc+der": {
    source: "iana",
    extensions: [
      "dssc"
    ]
  },
  "application/dssc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdssc"
    ]
  },
  "application/dvcs": {
    source: "iana"
  },
  "application/ecmascript": {
    source: "iana",
    compressible: true,
    extensions: [
      "es",
      "ecma"
    ]
  },
  "application/edi-consent": {
    source: "iana"
  },
  "application/edi-x12": {
    source: "iana",
    compressible: false
  },
  "application/edifact": {
    source: "iana",
    compressible: false
  },
  "application/efi": {
    source: "iana"
  },
  "application/elm+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/elm+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.cap+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/emergencycalldata.comment+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.control+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.ecall.msd": {
    source: "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.veds+xml": {
    source: "iana",
    compressible: true
  },
  "application/emma+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "emma"
    ]
  },
  "application/emotionml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "emotionml"
    ]
  },
  "application/encaprtp": {
    source: "iana"
  },
  "application/epp+xml": {
    source: "iana",
    compressible: true
  },
  "application/epub+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "epub"
    ]
  },
  "application/eshop": {
    source: "iana"
  },
  "application/exi": {
    source: "iana",
    extensions: [
      "exi"
    ]
  },
  "application/expect-ct-report+json": {
    source: "iana",
    compressible: true
  },
  "application/express": {
    source: "iana",
    extensions: [
      "exp"
    ]
  },
  "application/fastinfoset": {
    source: "iana"
  },
  "application/fastsoap": {
    source: "iana"
  },
  "application/fdt+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "fdt"
    ]
  },
  "application/fhir+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/fhir+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/fido.trusted-apps+json": {
    compressible: true
  },
  "application/fits": {
    source: "iana"
  },
  "application/flexfec": {
    source: "iana"
  },
  "application/font-sfnt": {
    source: "iana"
  },
  "application/font-tdpfr": {
    source: "iana",
    extensions: [
      "pfr"
    ]
  },
  "application/font-woff": {
    source: "iana",
    compressible: false
  },
  "application/framework-attributes+xml": {
    source: "iana",
    compressible: true
  },
  "application/geo+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "geojson"
    ]
  },
  "application/geo+json-seq": {
    source: "iana"
  },
  "application/geopackage+sqlite3": {
    source: "iana"
  },
  "application/geoxacml+xml": {
    source: "iana",
    compressible: true
  },
  "application/gltf-buffer": {
    source: "iana"
  },
  "application/gml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "gml"
    ]
  },
  "application/gpx+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "gpx"
    ]
  },
  "application/gxf": {
    source: "apache",
    extensions: [
      "gxf"
    ]
  },
  "application/gzip": {
    source: "iana",
    compressible: false,
    extensions: [
      "gz"
    ]
  },
  "application/h224": {
    source: "iana"
  },
  "application/held+xml": {
    source: "iana",
    compressible: true
  },
  "application/hjson": {
    extensions: [
      "hjson"
    ]
  },
  "application/http": {
    source: "iana"
  },
  "application/hyperstudio": {
    source: "iana",
    extensions: [
      "stk"
    ]
  },
  "application/ibe-key-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/ibe-pkg-reply+xml": {
    source: "iana",
    compressible: true
  },
  "application/ibe-pp-data": {
    source: "iana"
  },
  "application/iges": {
    source: "iana"
  },
  "application/im-iscomposing+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/index": {
    source: "iana"
  },
  "application/index.cmd": {
    source: "iana"
  },
  "application/index.obj": {
    source: "iana"
  },
  "application/index.response": {
    source: "iana"
  },
  "application/index.vnd": {
    source: "iana"
  },
  "application/inkml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ink",
      "inkml"
    ]
  },
  "application/iotp": {
    source: "iana"
  },
  "application/ipfix": {
    source: "iana",
    extensions: [
      "ipfix"
    ]
  },
  "application/ipp": {
    source: "iana"
  },
  "application/isup": {
    source: "iana"
  },
  "application/its+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "its"
    ]
  },
  "application/java-archive": {
    source: "apache",
    compressible: false,
    extensions: [
      "jar",
      "war",
      "ear"
    ]
  },
  "application/java-serialized-object": {
    source: "apache",
    compressible: false,
    extensions: [
      "ser"
    ]
  },
  "application/java-vm": {
    source: "apache",
    compressible: false,
    extensions: [
      "class"
    ]
  },
  "application/javascript": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "js",
      "mjs"
    ]
  },
  "application/jf2feed+json": {
    source: "iana",
    compressible: true
  },
  "application/jose": {
    source: "iana"
  },
  "application/jose+json": {
    source: "iana",
    compressible: true
  },
  "application/jrd+json": {
    source: "iana",
    compressible: true
  },
  "application/jscalendar+json": {
    source: "iana",
    compressible: true
  },
  "application/json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "json",
      "map"
    ]
  },
  "application/json-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/json-seq": {
    source: "iana"
  },
  "application/json5": {
    extensions: [
      "json5"
    ]
  },
  "application/jsonml+json": {
    source: "apache",
    compressible: true,
    extensions: [
      "jsonml"
    ]
  },
  "application/jwk+json": {
    source: "iana",
    compressible: true
  },
  "application/jwk-set+json": {
    source: "iana",
    compressible: true
  },
  "application/jwt": {
    source: "iana"
  },
  "application/kpml-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/kpml-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/ld+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "jsonld"
    ]
  },
  "application/lgr+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lgr"
    ]
  },
  "application/link-format": {
    source: "iana"
  },
  "application/load-control+xml": {
    source: "iana",
    compressible: true
  },
  "application/lost+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lostxml"
    ]
  },
  "application/lostsync+xml": {
    source: "iana",
    compressible: true
  },
  "application/lpf+zip": {
    source: "iana",
    compressible: false
  },
  "application/lxf": {
    source: "iana"
  },
  "application/mac-binhex40": {
    source: "iana",
    extensions: [
      "hqx"
    ]
  },
  "application/mac-compactpro": {
    source: "apache",
    extensions: [
      "cpt"
    ]
  },
  "application/macwriteii": {
    source: "iana"
  },
  "application/mads+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mads"
    ]
  },
  "application/manifest+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "webmanifest"
    ]
  },
  "application/marc": {
    source: "iana",
    extensions: [
      "mrc"
    ]
  },
  "application/marcxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mrcx"
    ]
  },
  "application/mathematica": {
    source: "iana",
    extensions: [
      "ma",
      "nb",
      "mb"
    ]
  },
  "application/mathml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mathml"
    ]
  },
  "application/mathml-content+xml": {
    source: "iana",
    compressible: true
  },
  "application/mathml-presentation+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-associated-procedure-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-deregister+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-envelope+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-msk+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-msk-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-protection-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-reception-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-register+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-register-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-schedule+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-user-service-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbox": {
    source: "iana",
    extensions: [
      "mbox"
    ]
  },
  "application/media-policy-dataset+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpf"
    ]
  },
  "application/media_control+xml": {
    source: "iana",
    compressible: true
  },
  "application/mediaservercontrol+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mscml"
    ]
  },
  "application/merge-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/metalink+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "metalink"
    ]
  },
  "application/metalink4+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "meta4"
    ]
  },
  "application/mets+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mets"
    ]
  },
  "application/mf4": {
    source: "iana"
  },
  "application/mikey": {
    source: "iana"
  },
  "application/mipc": {
    source: "iana"
  },
  "application/missing-blocks+cbor-seq": {
    source: "iana"
  },
  "application/mmt-aei+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "maei"
    ]
  },
  "application/mmt-usd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "musd"
    ]
  },
  "application/mods+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mods"
    ]
  },
  "application/moss-keys": {
    source: "iana"
  },
  "application/moss-signature": {
    source: "iana"
  },
  "application/mosskey-data": {
    source: "iana"
  },
  "application/mosskey-request": {
    source: "iana"
  },
  "application/mp21": {
    source: "iana",
    extensions: [
      "m21",
      "mp21"
    ]
  },
  "application/mp4": {
    source: "iana",
    extensions: [
      "mp4s",
      "m4p"
    ]
  },
  "application/mpeg4-generic": {
    source: "iana"
  },
  "application/mpeg4-iod": {
    source: "iana"
  },
  "application/mpeg4-iod-xmt": {
    source: "iana"
  },
  "application/mrb-consumer+xml": {
    source: "iana",
    compressible: true
  },
  "application/mrb-publish+xml": {
    source: "iana",
    compressible: true
  },
  "application/msc-ivr+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/msc-mixer+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/msword": {
    source: "iana",
    compressible: false,
    extensions: [
      "doc",
      "dot"
    ]
  },
  "application/mud+json": {
    source: "iana",
    compressible: true
  },
  "application/multipart-core": {
    source: "iana"
  },
  "application/mxf": {
    source: "iana",
    extensions: [
      "mxf"
    ]
  },
  "application/n-quads": {
    source: "iana",
    extensions: [
      "nq"
    ]
  },
  "application/n-triples": {
    source: "iana",
    extensions: [
      "nt"
    ]
  },
  "application/nasdata": {
    source: "iana"
  },
  "application/news-checkgroups": {
    source: "iana",
    charset: "US-ASCII"
  },
  "application/news-groupinfo": {
    source: "iana",
    charset: "US-ASCII"
  },
  "application/news-transmission": {
    source: "iana"
  },
  "application/nlsml+xml": {
    source: "iana",
    compressible: true
  },
  "application/node": {
    source: "iana",
    extensions: [
      "cjs"
    ]
  },
  "application/nss": {
    source: "iana"
  },
  "application/oauth-authz-req+jwt": {
    source: "iana"
  },
  "application/oblivious-dns-message": {
    source: "iana"
  },
  "application/ocsp-request": {
    source: "iana"
  },
  "application/ocsp-response": {
    source: "iana"
  },
  "application/octet-stream": {
    source: "iana",
    compressible: false,
    extensions: [
      "bin",
      "dms",
      "lrf",
      "mar",
      "so",
      "dist",
      "distz",
      "pkg",
      "bpk",
      "dump",
      "elc",
      "deploy",
      "exe",
      "dll",
      "deb",
      "dmg",
      "iso",
      "img",
      "msi",
      "msp",
      "msm",
      "buffer"
    ]
  },
  "application/oda": {
    source: "iana",
    extensions: [
      "oda"
    ]
  },
  "application/odm+xml": {
    source: "iana",
    compressible: true
  },
  "application/odx": {
    source: "iana"
  },
  "application/oebps-package+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "opf"
    ]
  },
  "application/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "ogx"
    ]
  },
  "application/omdoc+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "omdoc"
    ]
  },
  "application/onenote": {
    source: "apache",
    extensions: [
      "onetoc",
      "onetoc2",
      "onetmp",
      "onepkg"
    ]
  },
  "application/opc-nodeset+xml": {
    source: "iana",
    compressible: true
  },
  "application/oscore": {
    source: "iana"
  },
  "application/oxps": {
    source: "iana",
    extensions: [
      "oxps"
    ]
  },
  "application/p21": {
    source: "iana"
  },
  "application/p21+zip": {
    source: "iana",
    compressible: false
  },
  "application/p2p-overlay+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "relo"
    ]
  },
  "application/parityfec": {
    source: "iana"
  },
  "application/passport": {
    source: "iana"
  },
  "application/patch-ops-error+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xer"
    ]
  },
  "application/pdf": {
    source: "iana",
    compressible: false,
    extensions: [
      "pdf"
    ]
  },
  "application/pdx": {
    source: "iana"
  },
  "application/pem-certificate-chain": {
    source: "iana"
  },
  "application/pgp-encrypted": {
    source: "iana",
    compressible: false,
    extensions: [
      "pgp"
    ]
  },
  "application/pgp-keys": {
    source: "iana",
    extensions: [
      "asc"
    ]
  },
  "application/pgp-signature": {
    source: "iana",
    extensions: [
      "asc",
      "sig"
    ]
  },
  "application/pics-rules": {
    source: "apache",
    extensions: [
      "prf"
    ]
  },
  "application/pidf+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/pidf-diff+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/pkcs10": {
    source: "iana",
    extensions: [
      "p10"
    ]
  },
  "application/pkcs12": {
    source: "iana"
  },
  "application/pkcs7-mime": {
    source: "iana",
    extensions: [
      "p7m",
      "p7c"
    ]
  },
  "application/pkcs7-signature": {
    source: "iana",
    extensions: [
      "p7s"
    ]
  },
  "application/pkcs8": {
    source: "iana",
    extensions: [
      "p8"
    ]
  },
  "application/pkcs8-encrypted": {
    source: "iana"
  },
  "application/pkix-attr-cert": {
    source: "iana",
    extensions: [
      "ac"
    ]
  },
  "application/pkix-cert": {
    source: "iana",
    extensions: [
      "cer"
    ]
  },
  "application/pkix-crl": {
    source: "iana",
    extensions: [
      "crl"
    ]
  },
  "application/pkix-pkipath": {
    source: "iana",
    extensions: [
      "pkipath"
    ]
  },
  "application/pkixcmp": {
    source: "iana",
    extensions: [
      "pki"
    ]
  },
  "application/pls+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "pls"
    ]
  },
  "application/poc-settings+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/postscript": {
    source: "iana",
    compressible: true,
    extensions: [
      "ai",
      "eps",
      "ps"
    ]
  },
  "application/ppsp-tracker+json": {
    source: "iana",
    compressible: true
  },
  "application/problem+json": {
    source: "iana",
    compressible: true
  },
  "application/problem+xml": {
    source: "iana",
    compressible: true
  },
  "application/provenance+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "provx"
    ]
  },
  "application/prs.alvestrand.titrax-sheet": {
    source: "iana"
  },
  "application/prs.cww": {
    source: "iana",
    extensions: [
      "cww"
    ]
  },
  "application/prs.cyn": {
    source: "iana",
    charset: "7-BIT"
  },
  "application/prs.hpub+zip": {
    source: "iana",
    compressible: false
  },
  "application/prs.nprend": {
    source: "iana"
  },
  "application/prs.plucker": {
    source: "iana"
  },
  "application/prs.rdf-xml-crypt": {
    source: "iana"
  },
  "application/prs.xsf+xml": {
    source: "iana",
    compressible: true
  },
  "application/pskc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "pskcxml"
    ]
  },
  "application/pvd+json": {
    source: "iana",
    compressible: true
  },
  "application/qsig": {
    source: "iana"
  },
  "application/raml+yaml": {
    compressible: true,
    extensions: [
      "raml"
    ]
  },
  "application/raptorfec": {
    source: "iana"
  },
  "application/rdap+json": {
    source: "iana",
    compressible: true
  },
  "application/rdf+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rdf",
      "owl"
    ]
  },
  "application/reginfo+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rif"
    ]
  },
  "application/relax-ng-compact-syntax": {
    source: "iana",
    extensions: [
      "rnc"
    ]
  },
  "application/remote-printing": {
    source: "iana"
  },
  "application/reputon+json": {
    source: "iana",
    compressible: true
  },
  "application/resource-lists+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rl"
    ]
  },
  "application/resource-lists-diff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rld"
    ]
  },
  "application/rfc+xml": {
    source: "iana",
    compressible: true
  },
  "application/riscos": {
    source: "iana"
  },
  "application/rlmi+xml": {
    source: "iana",
    compressible: true
  },
  "application/rls-services+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rs"
    ]
  },
  "application/route-apd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rapd"
    ]
  },
  "application/route-s-tsid+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sls"
    ]
  },
  "application/route-usd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rusd"
    ]
  },
  "application/rpki-ghostbusters": {
    source: "iana",
    extensions: [
      "gbr"
    ]
  },
  "application/rpki-manifest": {
    source: "iana",
    extensions: [
      "mft"
    ]
  },
  "application/rpki-publication": {
    source: "iana"
  },
  "application/rpki-roa": {
    source: "iana",
    extensions: [
      "roa"
    ]
  },
  "application/rpki-updown": {
    source: "iana"
  },
  "application/rsd+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "rsd"
    ]
  },
  "application/rss+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "rss"
    ]
  },
  "application/rtf": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtf"
    ]
  },
  "application/rtploopback": {
    source: "iana"
  },
  "application/rtx": {
    source: "iana"
  },
  "application/samlassertion+xml": {
    source: "iana",
    compressible: true
  },
  "application/samlmetadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/sarif+json": {
    source: "iana",
    compressible: true
  },
  "application/sarif-external-properties+json": {
    source: "iana",
    compressible: true
  },
  "application/sbe": {
    source: "iana"
  },
  "application/sbml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sbml"
    ]
  },
  "application/scaip+xml": {
    source: "iana",
    compressible: true
  },
  "application/scim+json": {
    source: "iana",
    compressible: true
  },
  "application/scvp-cv-request": {
    source: "iana",
    extensions: [
      "scq"
    ]
  },
  "application/scvp-cv-response": {
    source: "iana",
    extensions: [
      "scs"
    ]
  },
  "application/scvp-vp-request": {
    source: "iana",
    extensions: [
      "spq"
    ]
  },
  "application/scvp-vp-response": {
    source: "iana",
    extensions: [
      "spp"
    ]
  },
  "application/sdp": {
    source: "iana",
    extensions: [
      "sdp"
    ]
  },
  "application/secevent+jwt": {
    source: "iana"
  },
  "application/senml+cbor": {
    source: "iana"
  },
  "application/senml+json": {
    source: "iana",
    compressible: true
  },
  "application/senml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "senmlx"
    ]
  },
  "application/senml-etch+cbor": {
    source: "iana"
  },
  "application/senml-etch+json": {
    source: "iana",
    compressible: true
  },
  "application/senml-exi": {
    source: "iana"
  },
  "application/sensml+cbor": {
    source: "iana"
  },
  "application/sensml+json": {
    source: "iana",
    compressible: true
  },
  "application/sensml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sensmlx"
    ]
  },
  "application/sensml-exi": {
    source: "iana"
  },
  "application/sep+xml": {
    source: "iana",
    compressible: true
  },
  "application/sep-exi": {
    source: "iana"
  },
  "application/session-info": {
    source: "iana"
  },
  "application/set-payment": {
    source: "iana"
  },
  "application/set-payment-initiation": {
    source: "iana",
    extensions: [
      "setpay"
    ]
  },
  "application/set-registration": {
    source: "iana"
  },
  "application/set-registration-initiation": {
    source: "iana",
    extensions: [
      "setreg"
    ]
  },
  "application/sgml": {
    source: "iana"
  },
  "application/sgml-open-catalog": {
    source: "iana"
  },
  "application/shf+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "shf"
    ]
  },
  "application/sieve": {
    source: "iana",
    extensions: [
      "siv",
      "sieve"
    ]
  },
  "application/simple-filter+xml": {
    source: "iana",
    compressible: true
  },
  "application/simple-message-summary": {
    source: "iana"
  },
  "application/simplesymbolcontainer": {
    source: "iana"
  },
  "application/sipc": {
    source: "iana"
  },
  "application/slate": {
    source: "iana"
  },
  "application/smil": {
    source: "iana"
  },
  "application/smil+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "smi",
      "smil"
    ]
  },
  "application/smpte336m": {
    source: "iana"
  },
  "application/soap+fastinfoset": {
    source: "iana"
  },
  "application/soap+xml": {
    source: "iana",
    compressible: true
  },
  "application/sparql-query": {
    source: "iana",
    extensions: [
      "rq"
    ]
  },
  "application/sparql-results+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "srx"
    ]
  },
  "application/spdx+json": {
    source: "iana",
    compressible: true
  },
  "application/spirits-event+xml": {
    source: "iana",
    compressible: true
  },
  "application/sql": {
    source: "iana"
  },
  "application/srgs": {
    source: "iana",
    extensions: [
      "gram"
    ]
  },
  "application/srgs+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "grxml"
    ]
  },
  "application/sru+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sru"
    ]
  },
  "application/ssdl+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "ssdl"
    ]
  },
  "application/ssml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ssml"
    ]
  },
  "application/stix+json": {
    source: "iana",
    compressible: true
  },
  "application/swid+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "swidtag"
    ]
  },
  "application/tamp-apex-update": {
    source: "iana"
  },
  "application/tamp-apex-update-confirm": {
    source: "iana"
  },
  "application/tamp-community-update": {
    source: "iana"
  },
  "application/tamp-community-update-confirm": {
    source: "iana"
  },
  "application/tamp-error": {
    source: "iana"
  },
  "application/tamp-sequence-adjust": {
    source: "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    source: "iana"
  },
  "application/tamp-status-query": {
    source: "iana"
  },
  "application/tamp-status-response": {
    source: "iana"
  },
  "application/tamp-update": {
    source: "iana"
  },
  "application/tamp-update-confirm": {
    source: "iana"
  },
  "application/tar": {
    compressible: true
  },
  "application/taxii+json": {
    source: "iana",
    compressible: true
  },
  "application/td+json": {
    source: "iana",
    compressible: true
  },
  "application/tei+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "tei",
      "teicorpus"
    ]
  },
  "application/tetra_isi": {
    source: "iana"
  },
  "application/thraud+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "tfi"
    ]
  },
  "application/timestamp-query": {
    source: "iana"
  },
  "application/timestamp-reply": {
    source: "iana"
  },
  "application/timestamped-data": {
    source: "iana",
    extensions: [
      "tsd"
    ]
  },
  "application/tlsrpt+gzip": {
    source: "iana"
  },
  "application/tlsrpt+json": {
    source: "iana",
    compressible: true
  },
  "application/tnauthlist": {
    source: "iana"
  },
  "application/token-introspection+jwt": {
    source: "iana"
  },
  "application/toml": {
    compressible: true,
    extensions: [
      "toml"
    ]
  },
  "application/trickle-ice-sdpfrag": {
    source: "iana"
  },
  "application/trig": {
    source: "iana",
    extensions: [
      "trig"
    ]
  },
  "application/ttml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ttml"
    ]
  },
  "application/tve-trigger": {
    source: "iana"
  },
  "application/tzif": {
    source: "iana"
  },
  "application/tzif-leap": {
    source: "iana"
  },
  "application/ubjson": {
    compressible: false,
    extensions: [
      "ubj"
    ]
  },
  "application/ulpfec": {
    source: "iana"
  },
  "application/urc-grpsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/urc-ressheet+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rsheet"
    ]
  },
  "application/urc-targetdesc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "td"
    ]
  },
  "application/urc-uisocketdesc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vcard+json": {
    source: "iana",
    compressible: true
  },
  "application/vcard+xml": {
    source: "iana",
    compressible: true
  },
  "application/vemmi": {
    source: "iana"
  },
  "application/vividence.scriptfile": {
    source: "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "1km"
    ]
  },
  "application/vnd.3gpp-prose+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    source: "iana"
  },
  "application/vnd.3gpp.5gnas": {
    source: "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.bsf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.gmop+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.gtpc": {
    source: "iana"
  },
  "application/vnd.3gpp.interworking-data": {
    source: "iana"
  },
  "application/vnd.3gpp.lpp": {
    source: "iana"
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-payload": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mid-call+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.ngap": {
    source: "iana"
  },
  "application/vnd.3gpp.pfcp": {
    source: "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    source: "iana",
    extensions: [
      "plb"
    ]
  },
  "application/vnd.3gpp.pic-bw-small": {
    source: "iana",
    extensions: [
      "psb"
    ]
  },
  "application/vnd.3gpp.pic-bw-var": {
    source: "iana",
    extensions: [
      "pvb"
    ]
  },
  "application/vnd.3gpp.s1ap": {
    source: "iana"
  },
  "application/vnd.3gpp.sms": {
    source: "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.ussd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp2.sms": {
    source: "iana"
  },
  "application/vnd.3gpp2.tcap": {
    source: "iana",
    extensions: [
      "tcap"
    ]
  },
  "application/vnd.3lightssoftware.imagescal": {
    source: "iana"
  },
  "application/vnd.3m.post-it-notes": {
    source: "iana",
    extensions: [
      "pwn"
    ]
  },
  "application/vnd.accpac.simply.aso": {
    source: "iana",
    extensions: [
      "aso"
    ]
  },
  "application/vnd.accpac.simply.imp": {
    source: "iana",
    extensions: [
      "imp"
    ]
  },
  "application/vnd.acucobol": {
    source: "iana",
    extensions: [
      "acu"
    ]
  },
  "application/vnd.acucorp": {
    source: "iana",
    extensions: [
      "atc",
      "acutc"
    ]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    source: "apache",
    compressible: false,
    extensions: [
      "air"
    ]
  },
  "application/vnd.adobe.flash.movie": {
    source: "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    source: "iana",
    extensions: [
      "fcdt"
    ]
  },
  "application/vnd.adobe.fxp": {
    source: "iana",
    extensions: [
      "fxp",
      "fxpl"
    ]
  },
  "application/vnd.adobe.partial-upload": {
    source: "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdp"
    ]
  },
  "application/vnd.adobe.xfdf": {
    source: "iana",
    extensions: [
      "xfdf"
    ]
  },
  "application/vnd.aether.imp": {
    source: "iana"
  },
  "application/vnd.afpc.afplinedata": {
    source: "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    source: "iana"
  },
  "application/vnd.afpc.cmoca-cmresource": {
    source: "iana"
  },
  "application/vnd.afpc.foca-charset": {
    source: "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    source: "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    source: "iana"
  },
  "application/vnd.afpc.modca": {
    source: "iana"
  },
  "application/vnd.afpc.modca-cmtable": {
    source: "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    source: "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    source: "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    source: "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    source: "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    source: "iana"
  },
  "application/vnd.age": {
    source: "iana",
    extensions: [
      "age"
    ]
  },
  "application/vnd.ah-barcode": {
    source: "iana"
  },
  "application/vnd.ahead.space": {
    source: "iana",
    extensions: [
      "ahead"
    ]
  },
  "application/vnd.airzip.filesecure.azf": {
    source: "iana",
    extensions: [
      "azf"
    ]
  },
  "application/vnd.airzip.filesecure.azs": {
    source: "iana",
    extensions: [
      "azs"
    ]
  },
  "application/vnd.amadeus+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.amazon.ebook": {
    source: "apache",
    extensions: [
      "azw"
    ]
  },
  "application/vnd.amazon.mobi8-ebook": {
    source: "iana"
  },
  "application/vnd.americandynamics.acc": {
    source: "iana",
    extensions: [
      "acc"
    ]
  },
  "application/vnd.amiga.ami": {
    source: "iana",
    extensions: [
      "ami"
    ]
  },
  "application/vnd.amundsen.maze+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.android.ota": {
    source: "iana"
  },
  "application/vnd.android.package-archive": {
    source: "apache",
    compressible: false,
    extensions: [
      "apk"
    ]
  },
  "application/vnd.anki": {
    source: "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    source: "iana",
    extensions: [
      "cii"
    ]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    source: "apache",
    extensions: [
      "fti"
    ]
  },
  "application/vnd.antix.game-component": {
    source: "iana",
    extensions: [
      "atx"
    ]
  },
  "application/vnd.apache.arrow.file": {
    source: "iana"
  },
  "application/vnd.apache.arrow.stream": {
    source: "iana"
  },
  "application/vnd.apache.thrift.binary": {
    source: "iana"
  },
  "application/vnd.apache.thrift.compact": {
    source: "iana"
  },
  "application/vnd.apache.thrift.json": {
    source: "iana"
  },
  "application/vnd.api+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.aplextor.warrp+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.apothekende.reservation+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.apple.installer+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpkg"
    ]
  },
  "application/vnd.apple.keynote": {
    source: "iana",
    extensions: [
      "key"
    ]
  },
  "application/vnd.apple.mpegurl": {
    source: "iana",
    extensions: [
      "m3u8"
    ]
  },
  "application/vnd.apple.numbers": {
    source: "iana",
    extensions: [
      "numbers"
    ]
  },
  "application/vnd.apple.pages": {
    source: "iana",
    extensions: [
      "pages"
    ]
  },
  "application/vnd.apple.pkpass": {
    compressible: false,
    extensions: [
      "pkpass"
    ]
  },
  "application/vnd.arastra.swi": {
    source: "iana"
  },
  "application/vnd.aristanetworks.swi": {
    source: "iana",
    extensions: [
      "swi"
    ]
  },
  "application/vnd.artisan+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.artsquare": {
    source: "iana"
  },
  "application/vnd.astraea-software.iota": {
    source: "iana",
    extensions: [
      "iota"
    ]
  },
  "application/vnd.audiograph": {
    source: "iana",
    extensions: [
      "aep"
    ]
  },
  "application/vnd.autopackage": {
    source: "iana"
  },
  "application/vnd.avalon+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.avistar+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.balsamiq.bmml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "bmml"
    ]
  },
  "application/vnd.balsamiq.bmpr": {
    source: "iana"
  },
  "application/vnd.banana-accounting": {
    source: "iana"
  },
  "application/vnd.bbf.usp.error": {
    source: "iana"
  },
  "application/vnd.bbf.usp.msg": {
    source: "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.bekitzur-stech+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.bint.med-content": {
    source: "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.blink-idb-value-wrapper": {
    source: "iana"
  },
  "application/vnd.blueice.multipass": {
    source: "iana",
    extensions: [
      "mpm"
    ]
  },
  "application/vnd.bluetooth.ep.oob": {
    source: "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    source: "iana"
  },
  "application/vnd.bmi": {
    source: "iana",
    extensions: [
      "bmi"
    ]
  },
  "application/vnd.bpf": {
    source: "iana"
  },
  "application/vnd.bpf3": {
    source: "iana"
  },
  "application/vnd.businessobjects": {
    source: "iana",
    extensions: [
      "rep"
    ]
  },
  "application/vnd.byu.uapi+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cab-jscript": {
    source: "iana"
  },
  "application/vnd.canon-cpdl": {
    source: "iana"
  },
  "application/vnd.canon-lips": {
    source: "iana"
  },
  "application/vnd.capasystems-pg+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    source: "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    source: "iana"
  },
  "application/vnd.chemdraw+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cdxml"
    ]
  },
  "application/vnd.chess-pgn": {
    source: "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    source: "iana",
    extensions: [
      "mmd"
    ]
  },
  "application/vnd.ciedi": {
    source: "iana"
  },
  "application/vnd.cinderella": {
    source: "iana",
    extensions: [
      "cdy"
    ]
  },
  "application/vnd.cirpack.isdn-ext": {
    source: "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "csl"
    ]
  },
  "application/vnd.claymore": {
    source: "iana",
    extensions: [
      "cla"
    ]
  },
  "application/vnd.cloanto.rp9": {
    source: "iana",
    extensions: [
      "rp9"
    ]
  },
  "application/vnd.clonk.c4group": {
    source: "iana",
    extensions: [
      "c4g",
      "c4d",
      "c4f",
      "c4p",
      "c4u"
    ]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    source: "iana",
    extensions: [
      "c11amc"
    ]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    source: "iana",
    extensions: [
      "c11amz"
    ]
  },
  "application/vnd.coffeescript": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    source: "iana"
  },
  "application/vnd.collection+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.collection.doc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.collection.next+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.comicbook+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.comicbook-rar": {
    source: "iana"
  },
  "application/vnd.commerce-battelle": {
    source: "iana"
  },
  "application/vnd.commonspace": {
    source: "iana",
    extensions: [
      "csp"
    ]
  },
  "application/vnd.contact.cmsg": {
    source: "iana",
    extensions: [
      "cdbcmsg"
    ]
  },
  "application/vnd.coreos.ignition+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cosmocaller": {
    source: "iana",
    extensions: [
      "cmc"
    ]
  },
  "application/vnd.crick.clicker": {
    source: "iana",
    extensions: [
      "clkx"
    ]
  },
  "application/vnd.crick.clicker.keyboard": {
    source: "iana",
    extensions: [
      "clkk"
    ]
  },
  "application/vnd.crick.clicker.palette": {
    source: "iana",
    extensions: [
      "clkp"
    ]
  },
  "application/vnd.crick.clicker.template": {
    source: "iana",
    extensions: [
      "clkt"
    ]
  },
  "application/vnd.crick.clicker.wordbank": {
    source: "iana",
    extensions: [
      "clkw"
    ]
  },
  "application/vnd.criticaltools.wbs+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wbs"
    ]
  },
  "application/vnd.cryptii.pipe+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.crypto-shade-file": {
    source: "iana"
  },
  "application/vnd.cryptomator.encrypted": {
    source: "iana"
  },
  "application/vnd.cryptomator.vault": {
    source: "iana"
  },
  "application/vnd.ctc-posml": {
    source: "iana",
    extensions: [
      "pml"
    ]
  },
  "application/vnd.ctct.ws+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cups-pdf": {
    source: "iana"
  },
  "application/vnd.cups-postscript": {
    source: "iana"
  },
  "application/vnd.cups-ppd": {
    source: "iana",
    extensions: [
      "ppd"
    ]
  },
  "application/vnd.cups-raster": {
    source: "iana"
  },
  "application/vnd.cups-raw": {
    source: "iana"
  },
  "application/vnd.curl": {
    source: "iana"
  },
  "application/vnd.curl.car": {
    source: "apache",
    extensions: [
      "car"
    ]
  },
  "application/vnd.curl.pcurl": {
    source: "apache",
    extensions: [
      "pcurl"
    ]
  },
  "application/vnd.cyan.dean.root+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cybank": {
    source: "iana"
  },
  "application/vnd.cyclonedx+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cyclonedx+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.d3m-dataset": {
    source: "iana"
  },
  "application/vnd.d3m-problem": {
    source: "iana"
  },
  "application/vnd.dart": {
    source: "iana",
    compressible: true,
    extensions: [
      "dart"
    ]
  },
  "application/vnd.data-vision.rdz": {
    source: "iana",
    extensions: [
      "rdz"
    ]
  },
  "application/vnd.datapackage+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dataresource+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dbf": {
    source: "iana",
    extensions: [
      "dbf"
    ]
  },
  "application/vnd.debian.binary-package": {
    source: "iana"
  },
  "application/vnd.dece.data": {
    source: "iana",
    extensions: [
      "uvf",
      "uvvf",
      "uvd",
      "uvvd"
    ]
  },
  "application/vnd.dece.ttml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "uvt",
      "uvvt"
    ]
  },
  "application/vnd.dece.unspecified": {
    source: "iana",
    extensions: [
      "uvx",
      "uvvx"
    ]
  },
  "application/vnd.dece.zip": {
    source: "iana",
    extensions: [
      "uvz",
      "uvvz"
    ]
  },
  "application/vnd.denovo.fcselayout-link": {
    source: "iana",
    extensions: [
      "fe_launch"
    ]
  },
  "application/vnd.desmume.movie": {
    source: "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    source: "iana"
  },
  "application/vnd.dm.delegation+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dna": {
    source: "iana",
    extensions: [
      "dna"
    ]
  },
  "application/vnd.document+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dolby.mlp": {
    source: "apache",
    extensions: [
      "mlp"
    ]
  },
  "application/vnd.dolby.mobile.1": {
    source: "iana"
  },
  "application/vnd.dolby.mobile.2": {
    source: "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    source: "iana"
  },
  "application/vnd.dpgraph": {
    source: "iana",
    extensions: [
      "dpg"
    ]
  },
  "application/vnd.dreamfactory": {
    source: "iana",
    extensions: [
      "dfac"
    ]
  },
  "application/vnd.drive+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ds-keypoint": {
    source: "apache",
    extensions: [
      "kpxx"
    ]
  },
  "application/vnd.dtg.local": {
    source: "iana"
  },
  "application/vnd.dtg.local.flash": {
    source: "iana"
  },
  "application/vnd.dtg.local.html": {
    source: "iana"
  },
  "application/vnd.dvb.ait": {
    source: "iana",
    extensions: [
      "ait"
    ]
  },
  "application/vnd.dvb.dvbisl+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.dvbj": {
    source: "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    source: "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    source: "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    source: "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-container+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-generic+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-init+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.pfr": {
    source: "iana"
  },
  "application/vnd.dvb.service": {
    source: "iana",
    extensions: [
      "svc"
    ]
  },
  "application/vnd.dxr": {
    source: "iana"
  },
  "application/vnd.dynageo": {
    source: "iana",
    extensions: [
      "geo"
    ]
  },
  "application/vnd.dzr": {
    source: "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    source: "iana"
  },
  "application/vnd.ecdis-update": {
    source: "iana"
  },
  "application/vnd.ecip.rlp": {
    source: "iana"
  },
  "application/vnd.eclipse.ditto+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ecowin.chart": {
    source: "iana",
    extensions: [
      "mag"
    ]
  },
  "application/vnd.ecowin.filerequest": {
    source: "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    source: "iana"
  },
  "application/vnd.ecowin.series": {
    source: "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    source: "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    source: "iana"
  },
  "application/vnd.efi.img": {
    source: "iana"
  },
  "application/vnd.efi.iso": {
    source: "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.enliven": {
    source: "iana",
    extensions: [
      "nml"
    ]
  },
  "application/vnd.enphase.envoy": {
    source: "iana"
  },
  "application/vnd.eprints.data+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.epson.esf": {
    source: "iana",
    extensions: [
      "esf"
    ]
  },
  "application/vnd.epson.msf": {
    source: "iana",
    extensions: [
      "msf"
    ]
  },
  "application/vnd.epson.quickanime": {
    source: "iana",
    extensions: [
      "qam"
    ]
  },
  "application/vnd.epson.salt": {
    source: "iana",
    extensions: [
      "slt"
    ]
  },
  "application/vnd.epson.ssf": {
    source: "iana",
    extensions: [
      "ssf"
    ]
  },
  "application/vnd.ericsson.quickcall": {
    source: "iana"
  },
  "application/vnd.espass-espass+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.eszigno3+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "es3",
      "et3"
    ]
  },
  "application/vnd.etsi.aoc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.asic-e+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.etsi.asic-s+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.etsi.cug+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvservice+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsync+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.mcid+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.mheg5": {
    source: "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.pstn+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.sci+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.simservs+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.timestamp-token": {
    source: "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.tsl.der": {
    source: "iana"
  },
  "application/vnd.eu.kasparian.car+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.eudora.data": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    source: "iana"
  },
  "application/vnd.exstream-empower+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.exstream-package": {
    source: "iana"
  },
  "application/vnd.ezpix-album": {
    source: "iana",
    extensions: [
      "ez2"
    ]
  },
  "application/vnd.ezpix-package": {
    source: "iana",
    extensions: [
      "ez3"
    ]
  },
  "application/vnd.f-secure.mobile": {
    source: "iana"
  },
  "application/vnd.familysearch.gedcom+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.fastcopy-disk-image": {
    source: "iana"
  },
  "application/vnd.fdf": {
    source: "iana",
    extensions: [
      "fdf"
    ]
  },
  "application/vnd.fdsn.mseed": {
    source: "iana",
    extensions: [
      "mseed"
    ]
  },
  "application/vnd.fdsn.seed": {
    source: "iana",
    extensions: [
      "seed",
      "dataless"
    ]
  },
  "application/vnd.ffsns": {
    source: "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.filmit.zfc": {
    source: "iana"
  },
  "application/vnd.fints": {
    source: "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    source: "iana"
  },
  "application/vnd.flographit": {
    source: "iana",
    extensions: [
      "gph"
    ]
  },
  "application/vnd.fluxtime.clip": {
    source: "iana",
    extensions: [
      "ftc"
    ]
  },
  "application/vnd.font-fontforge-sfd": {
    source: "iana"
  },
  "application/vnd.framemaker": {
    source: "iana",
    extensions: [
      "fm",
      "frame",
      "maker",
      "book"
    ]
  },
  "application/vnd.frogans.fnc": {
    source: "iana",
    extensions: [
      "fnc"
    ]
  },
  "application/vnd.frogans.ltf": {
    source: "iana",
    extensions: [
      "ltf"
    ]
  },
  "application/vnd.fsc.weblaunch": {
    source: "iana",
    extensions: [
      "fsc"
    ]
  },
  "application/vnd.fujifilm.fb.docuworks": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.binder": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.container": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.jfi+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.fujitsu.oasys": {
    source: "iana",
    extensions: [
      "oas"
    ]
  },
  "application/vnd.fujitsu.oasys2": {
    source: "iana",
    extensions: [
      "oa2"
    ]
  },
  "application/vnd.fujitsu.oasys3": {
    source: "iana",
    extensions: [
      "oa3"
    ]
  },
  "application/vnd.fujitsu.oasysgp": {
    source: "iana",
    extensions: [
      "fg5"
    ]
  },
  "application/vnd.fujitsu.oasysprs": {
    source: "iana",
    extensions: [
      "bh2"
    ]
  },
  "application/vnd.fujixerox.art-ex": {
    source: "iana"
  },
  "application/vnd.fujixerox.art4": {
    source: "iana"
  },
  "application/vnd.fujixerox.ddd": {
    source: "iana",
    extensions: [
      "ddd"
    ]
  },
  "application/vnd.fujixerox.docuworks": {
    source: "iana",
    extensions: [
      "xdw"
    ]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    source: "iana",
    extensions: [
      "xbd"
    ]
  },
  "application/vnd.fujixerox.docuworks.container": {
    source: "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    source: "iana"
  },
  "application/vnd.fut-misnet": {
    source: "iana"
  },
  "application/vnd.futoin+cbor": {
    source: "iana"
  },
  "application/vnd.futoin+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.fuzzysheet": {
    source: "iana",
    extensions: [
      "fzs"
    ]
  },
  "application/vnd.genomatix.tuxedo": {
    source: "iana",
    extensions: [
      "txd"
    ]
  },
  "application/vnd.gentics.grd+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geo+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geocube+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geogebra.file": {
    source: "iana",
    extensions: [
      "ggb"
    ]
  },
  "application/vnd.geogebra.slides": {
    source: "iana"
  },
  "application/vnd.geogebra.tool": {
    source: "iana",
    extensions: [
      "ggt"
    ]
  },
  "application/vnd.geometry-explorer": {
    source: "iana",
    extensions: [
      "gex",
      "gre"
    ]
  },
  "application/vnd.geonext": {
    source: "iana",
    extensions: [
      "gxt"
    ]
  },
  "application/vnd.geoplan": {
    source: "iana",
    extensions: [
      "g2w"
    ]
  },
  "application/vnd.geospace": {
    source: "iana",
    extensions: [
      "g3w"
    ]
  },
  "application/vnd.gerber": {
    source: "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    source: "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    source: "iana"
  },
  "application/vnd.gmx": {
    source: "iana",
    extensions: [
      "gmx"
    ]
  },
  "application/vnd.google-apps.document": {
    compressible: false,
    extensions: [
      "gdoc"
    ]
  },
  "application/vnd.google-apps.presentation": {
    compressible: false,
    extensions: [
      "gslides"
    ]
  },
  "application/vnd.google-apps.spreadsheet": {
    compressible: false,
    extensions: [
      "gsheet"
    ]
  },
  "application/vnd.google-earth.kml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "kml"
    ]
  },
  "application/vnd.google-earth.kmz": {
    source: "iana",
    compressible: false,
    extensions: [
      "kmz"
    ]
  },
  "application/vnd.gov.sk.e-form+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.gov.sk.e-form+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.grafeq": {
    source: "iana",
    extensions: [
      "gqf",
      "gqs"
    ]
  },
  "application/vnd.gridmp": {
    source: "iana"
  },
  "application/vnd.groove-account": {
    source: "iana",
    extensions: [
      "gac"
    ]
  },
  "application/vnd.groove-help": {
    source: "iana",
    extensions: [
      "ghf"
    ]
  },
  "application/vnd.groove-identity-message": {
    source: "iana",
    extensions: [
      "gim"
    ]
  },
  "application/vnd.groove-injector": {
    source: "iana",
    extensions: [
      "grv"
    ]
  },
  "application/vnd.groove-tool-message": {
    source: "iana",
    extensions: [
      "gtm"
    ]
  },
  "application/vnd.groove-tool-template": {
    source: "iana",
    extensions: [
      "tpl"
    ]
  },
  "application/vnd.groove-vcard": {
    source: "iana",
    extensions: [
      "vcg"
    ]
  },
  "application/vnd.hal+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hal+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "hal"
    ]
  },
  "application/vnd.handheld-entertainment+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "zmm"
    ]
  },
  "application/vnd.hbci": {
    source: "iana",
    extensions: [
      "hbci"
    ]
  },
  "application/vnd.hc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hcl-bireports": {
    source: "iana"
  },
  "application/vnd.hdt": {
    source: "iana"
  },
  "application/vnd.heroku+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hhe.lesson-player": {
    source: "iana",
    extensions: [
      "les"
    ]
  },
  "application/vnd.hl7cda+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.hl7v2+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.hp-hpgl": {
    source: "iana",
    extensions: [
      "hpgl"
    ]
  },
  "application/vnd.hp-hpid": {
    source: "iana",
    extensions: [
      "hpid"
    ]
  },
  "application/vnd.hp-hps": {
    source: "iana",
    extensions: [
      "hps"
    ]
  },
  "application/vnd.hp-jlyt": {
    source: "iana",
    extensions: [
      "jlt"
    ]
  },
  "application/vnd.hp-pcl": {
    source: "iana",
    extensions: [
      "pcl"
    ]
  },
  "application/vnd.hp-pclxl": {
    source: "iana",
    extensions: [
      "pclxl"
    ]
  },
  "application/vnd.httphone": {
    source: "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    source: "iana",
    extensions: [
      "sfd-hdstx"
    ]
  },
  "application/vnd.hyper+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hyper-item+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hyperdrive+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hzn-3d-crossword": {
    source: "iana"
  },
  "application/vnd.ibm.afplinedata": {
    source: "iana"
  },
  "application/vnd.ibm.electronic-media": {
    source: "iana"
  },
  "application/vnd.ibm.minipay": {
    source: "iana",
    extensions: [
      "mpy"
    ]
  },
  "application/vnd.ibm.modcap": {
    source: "iana",
    extensions: [
      "afp",
      "listafp",
      "list3820"
    ]
  },
  "application/vnd.ibm.rights-management": {
    source: "iana",
    extensions: [
      "irm"
    ]
  },
  "application/vnd.ibm.secure-container": {
    source: "iana",
    extensions: [
      "sc"
    ]
  },
  "application/vnd.iccprofile": {
    source: "iana",
    extensions: [
      "icc",
      "icm"
    ]
  },
  "application/vnd.ieee.1905": {
    source: "iana"
  },
  "application/vnd.igloader": {
    source: "iana",
    extensions: [
      "igl"
    ]
  },
  "application/vnd.imagemeter.folder+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.imagemeter.image+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.immervision-ivp": {
    source: "iana",
    extensions: [
      "ivp"
    ]
  },
  "application/vnd.immervision-ivu": {
    source: "iana",
    extensions: [
      "ivu"
    ]
  },
  "application/vnd.ims.imsccv1p1": {
    source: "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    source: "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    source: "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.informedcontrol.rms+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.informix-visionary": {
    source: "iana"
  },
  "application/vnd.infotech.project": {
    source: "iana"
  },
  "application/vnd.infotech.project+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.innopath.wamp.notification": {
    source: "iana"
  },
  "application/vnd.insors.igm": {
    source: "iana",
    extensions: [
      "igm"
    ]
  },
  "application/vnd.intercon.formnet": {
    source: "iana",
    extensions: [
      "xpw",
      "xpx"
    ]
  },
  "application/vnd.intergeo": {
    source: "iana",
    extensions: [
      "i2g"
    ]
  },
  "application/vnd.intertrust.digibox": {
    source: "iana"
  },
  "application/vnd.intertrust.nncp": {
    source: "iana"
  },
  "application/vnd.intu.qbo": {
    source: "iana",
    extensions: [
      "qbo"
    ]
  },
  "application/vnd.intu.qfx": {
    source: "iana",
    extensions: [
      "qfx"
    ]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ipunplugged.rcprofile": {
    source: "iana",
    extensions: [
      "rcprofile"
    ]
  },
  "application/vnd.irepository.package+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "irp"
    ]
  },
  "application/vnd.is-xpr": {
    source: "iana",
    extensions: [
      "xpr"
    ]
  },
  "application/vnd.isac.fcs": {
    source: "iana",
    extensions: [
      "fcs"
    ]
  },
  "application/vnd.iso11783-10+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.jam": {
    source: "iana",
    extensions: [
      "jam"
    ]
  },
  "application/vnd.japannet-directory-service": {
    source: "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-registration": {
    source: "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-verification": {
    source: "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    source: "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    source: "iana",
    extensions: [
      "rms"
    ]
  },
  "application/vnd.jisp": {
    source: "iana",
    extensions: [
      "jisp"
    ]
  },
  "application/vnd.joost.joda-archive": {
    source: "iana",
    extensions: [
      "joda"
    ]
  },
  "application/vnd.jsk.isdn-ngn": {
    source: "iana"
  },
  "application/vnd.kahootz": {
    source: "iana",
    extensions: [
      "ktz",
      "ktr"
    ]
  },
  "application/vnd.kde.karbon": {
    source: "iana",
    extensions: [
      "karbon"
    ]
  },
  "application/vnd.kde.kchart": {
    source: "iana",
    extensions: [
      "chrt"
    ]
  },
  "application/vnd.kde.kformula": {
    source: "iana",
    extensions: [
      "kfo"
    ]
  },
  "application/vnd.kde.kivio": {
    source: "iana",
    extensions: [
      "flw"
    ]
  },
  "application/vnd.kde.kontour": {
    source: "iana",
    extensions: [
      "kon"
    ]
  },
  "application/vnd.kde.kpresenter": {
    source: "iana",
    extensions: [
      "kpr",
      "kpt"
    ]
  },
  "application/vnd.kde.kspread": {
    source: "iana",
    extensions: [
      "ksp"
    ]
  },
  "application/vnd.kde.kword": {
    source: "iana",
    extensions: [
      "kwd",
      "kwt"
    ]
  },
  "application/vnd.kenameaapp": {
    source: "iana",
    extensions: [
      "htke"
    ]
  },
  "application/vnd.kidspiration": {
    source: "iana",
    extensions: [
      "kia"
    ]
  },
  "application/vnd.kinar": {
    source: "iana",
    extensions: [
      "kne",
      "knp"
    ]
  },
  "application/vnd.koan": {
    source: "iana",
    extensions: [
      "skp",
      "skd",
      "skt",
      "skm"
    ]
  },
  "application/vnd.kodak-descriptor": {
    source: "iana",
    extensions: [
      "sse"
    ]
  },
  "application/vnd.las": {
    source: "iana"
  },
  "application/vnd.las.las+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.las.las+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lasxml"
    ]
  },
  "application/vnd.laszip": {
    source: "iana"
  },
  "application/vnd.leap+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.liberty-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    source: "iana",
    extensions: [
      "lbd"
    ]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lbe"
    ]
  },
  "application/vnd.logipipe.circuit+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.loom": {
    source: "iana"
  },
  "application/vnd.lotus-1-2-3": {
    source: "iana",
    extensions: [
      "123"
    ]
  },
  "application/vnd.lotus-approach": {
    source: "iana",
    extensions: [
      "apr"
    ]
  },
  "application/vnd.lotus-freelance": {
    source: "iana",
    extensions: [
      "pre"
    ]
  },
  "application/vnd.lotus-notes": {
    source: "iana",
    extensions: [
      "nsf"
    ]
  },
  "application/vnd.lotus-organizer": {
    source: "iana",
    extensions: [
      "org"
    ]
  },
  "application/vnd.lotus-screencam": {
    source: "iana",
    extensions: [
      "scm"
    ]
  },
  "application/vnd.lotus-wordpro": {
    source: "iana",
    extensions: [
      "lwp"
    ]
  },
  "application/vnd.macports.portpkg": {
    source: "iana",
    extensions: [
      "portpkg"
    ]
  },
  "application/vnd.mapbox-vector-tile": {
    source: "iana",
    extensions: [
      "mvt"
    ]
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.license+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.mdcf": {
    source: "iana"
  },
  "application/vnd.mason+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.maxar.archive.3tz+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.maxmind.maxmind-db": {
    source: "iana"
  },
  "application/vnd.mcd": {
    source: "iana",
    extensions: [
      "mcd"
    ]
  },
  "application/vnd.medcalcdata": {
    source: "iana",
    extensions: [
      "mc1"
    ]
  },
  "application/vnd.mediastation.cdkey": {
    source: "iana",
    extensions: [
      "cdkey"
    ]
  },
  "application/vnd.meridian-slingshot": {
    source: "iana"
  },
  "application/vnd.mfer": {
    source: "iana",
    extensions: [
      "mwf"
    ]
  },
  "application/vnd.mfmp": {
    source: "iana",
    extensions: [
      "mfm"
    ]
  },
  "application/vnd.micro+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.micrografx.flo": {
    source: "iana",
    extensions: [
      "flo"
    ]
  },
  "application/vnd.micrografx.igx": {
    source: "iana",
    extensions: [
      "igx"
    ]
  },
  "application/vnd.microsoft.portable-executable": {
    source: "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    source: "iana"
  },
  "application/vnd.miele+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.mif": {
    source: "iana",
    extensions: [
      "mif"
    ]
  },
  "application/vnd.minisoft-hp3000-save": {
    source: "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    source: "iana"
  },
  "application/vnd.mobius.daf": {
    source: "iana",
    extensions: [
      "daf"
    ]
  },
  "application/vnd.mobius.dis": {
    source: "iana",
    extensions: [
      "dis"
    ]
  },
  "application/vnd.mobius.mbk": {
    source: "iana",
    extensions: [
      "mbk"
    ]
  },
  "application/vnd.mobius.mqy": {
    source: "iana",
    extensions: [
      "mqy"
    ]
  },
  "application/vnd.mobius.msl": {
    source: "iana",
    extensions: [
      "msl"
    ]
  },
  "application/vnd.mobius.plc": {
    source: "iana",
    extensions: [
      "plc"
    ]
  },
  "application/vnd.mobius.txf": {
    source: "iana",
    extensions: [
      "txf"
    ]
  },
  "application/vnd.mophun.application": {
    source: "iana",
    extensions: [
      "mpn"
    ]
  },
  "application/vnd.mophun.certificate": {
    source: "iana",
    extensions: [
      "mpc"
    ]
  },
  "application/vnd.motorola.flexsuite": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    source: "iana"
  },
  "application/vnd.motorola.iprm": {
    source: "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xul"
    ]
  },
  "application/vnd.ms-3mfdocument": {
    source: "iana"
  },
  "application/vnd.ms-artgalry": {
    source: "iana",
    extensions: [
      "cil"
    ]
  },
  "application/vnd.ms-asf": {
    source: "iana"
  },
  "application/vnd.ms-cab-compressed": {
    source: "iana",
    extensions: [
      "cab"
    ]
  },
  "application/vnd.ms-color.iccprofile": {
    source: "apache"
  },
  "application/vnd.ms-excel": {
    source: "iana",
    compressible: false,
    extensions: [
      "xls",
      "xlm",
      "xla",
      "xlc",
      "xlt",
      "xlw"
    ]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlam"
    ]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlsb"
    ]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlsm"
    ]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "xltm"
    ]
  },
  "application/vnd.ms-fontobject": {
    source: "iana",
    compressible: true,
    extensions: [
      "eot"
    ]
  },
  "application/vnd.ms-htmlhelp": {
    source: "iana",
    extensions: [
      "chm"
    ]
  },
  "application/vnd.ms-ims": {
    source: "iana",
    extensions: [
      "ims"
    ]
  },
  "application/vnd.ms-lrm": {
    source: "iana",
    extensions: [
      "lrm"
    ]
  },
  "application/vnd.ms-office.activex+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-officetheme": {
    source: "iana",
    extensions: [
      "thmx"
    ]
  },
  "application/vnd.ms-opentype": {
    source: "apache",
    compressible: true
  },
  "application/vnd.ms-outlook": {
    compressible: false,
    extensions: [
      "msg"
    ]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    source: "apache"
  },
  "application/vnd.ms-pki.seccat": {
    source: "apache",
    extensions: [
      "cat"
    ]
  },
  "application/vnd.ms-pki.stl": {
    source: "apache",
    extensions: [
      "stl"
    ]
  },
  "application/vnd.ms-playready.initiator+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-powerpoint": {
    source: "iana",
    compressible: false,
    extensions: [
      "ppt",
      "pps",
      "pot"
    ]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    source: "iana",
    extensions: [
      "ppam"
    ]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    source: "iana",
    extensions: [
      "pptm"
    ]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    source: "iana",
    extensions: [
      "sldm"
    ]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    source: "iana",
    extensions: [
      "ppsm"
    ]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "potm"
    ]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-printing.printticket+xml": {
    source: "apache",
    compressible: true
  },
  "application/vnd.ms-printschematicket+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-project": {
    source: "iana",
    extensions: [
      "mpp",
      "mpt"
    ]
  },
  "application/vnd.ms-tnef": {
    source: "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    source: "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    source: "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    source: "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    source: "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    source: "iana",
    extensions: [
      "docm"
    ]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "dotm"
    ]
  },
  "application/vnd.ms-works": {
    source: "iana",
    extensions: [
      "wps",
      "wks",
      "wcm",
      "wdb"
    ]
  },
  "application/vnd.ms-wpl": {
    source: "iana",
    extensions: [
      "wpl"
    ]
  },
  "application/vnd.ms-xpsdocument": {
    source: "iana",
    compressible: false,
    extensions: [
      "xps"
    ]
  },
  "application/vnd.msa-disk-image": {
    source: "iana"
  },
  "application/vnd.mseq": {
    source: "iana",
    extensions: [
      "mseq"
    ]
  },
  "application/vnd.msign": {
    source: "iana"
  },
  "application/vnd.multiad.creator": {
    source: "iana"
  },
  "application/vnd.multiad.creator.cif": {
    source: "iana"
  },
  "application/vnd.music-niff": {
    source: "iana"
  },
  "application/vnd.musician": {
    source: "iana",
    extensions: [
      "mus"
    ]
  },
  "application/vnd.muvee.style": {
    source: "iana",
    extensions: [
      "msty"
    ]
  },
  "application/vnd.mynfc": {
    source: "iana",
    extensions: [
      "taglet"
    ]
  },
  "application/vnd.nacamar.ybrid+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ncd.control": {
    source: "iana"
  },
  "application/vnd.ncd.reference": {
    source: "iana"
  },
  "application/vnd.nearst.inv+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nebumind.line": {
    source: "iana"
  },
  "application/vnd.nervana": {
    source: "iana"
  },
  "application/vnd.netfpx": {
    source: "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    source: "iana",
    extensions: [
      "nlu"
    ]
  },
  "application/vnd.nimn": {
    source: "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    source: "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    source: "iana"
  },
  "application/vnd.nitf": {
    source: "iana",
    extensions: [
      "ntf",
      "nitf"
    ]
  },
  "application/vnd.noblenet-directory": {
    source: "iana",
    extensions: [
      "nnd"
    ]
  },
  "application/vnd.noblenet-sealer": {
    source: "iana",
    extensions: [
      "nns"
    ]
  },
  "application/vnd.noblenet-web": {
    source: "iana",
    extensions: [
      "nnw"
    ]
  },
  "application/vnd.nokia.catalogs": {
    source: "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.conml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.iptv.config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.isds-radio-presets": {
    source: "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ac"
    ]
  },
  "application/vnd.nokia.n-gage.data": {
    source: "iana",
    extensions: [
      "ngdat"
    ]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    source: "iana",
    extensions: [
      "n-gage"
    ]
  },
  "application/vnd.nokia.ncd": {
    source: "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.radio-preset": {
    source: "iana",
    extensions: [
      "rpst"
    ]
  },
  "application/vnd.nokia.radio-presets": {
    source: "iana",
    extensions: [
      "rpss"
    ]
  },
  "application/vnd.novadigm.edm": {
    source: "iana",
    extensions: [
      "edm"
    ]
  },
  "application/vnd.novadigm.edx": {
    source: "iana",
    extensions: [
      "edx"
    ]
  },
  "application/vnd.novadigm.ext": {
    source: "iana",
    extensions: [
      "ext"
    ]
  },
  "application/vnd.ntt-local.content-share": {
    source: "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    source: "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    source: "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    source: "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    source: "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    source: "iana",
    extensions: [
      "odc"
    ]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    source: "iana",
    extensions: [
      "otc"
    ]
  },
  "application/vnd.oasis.opendocument.database": {
    source: "iana",
    extensions: [
      "odb"
    ]
  },
  "application/vnd.oasis.opendocument.formula": {
    source: "iana",
    extensions: [
      "odf"
    ]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    source: "iana",
    extensions: [
      "odft"
    ]
  },
  "application/vnd.oasis.opendocument.graphics": {
    source: "iana",
    compressible: false,
    extensions: [
      "odg"
    ]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    source: "iana",
    extensions: [
      "otg"
    ]
  },
  "application/vnd.oasis.opendocument.image": {
    source: "iana",
    extensions: [
      "odi"
    ]
  },
  "application/vnd.oasis.opendocument.image-template": {
    source: "iana",
    extensions: [
      "oti"
    ]
  },
  "application/vnd.oasis.opendocument.presentation": {
    source: "iana",
    compressible: false,
    extensions: [
      "odp"
    ]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    source: "iana",
    extensions: [
      "otp"
    ]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    source: "iana",
    compressible: false,
    extensions: [
      "ods"
    ]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    source: "iana",
    extensions: [
      "ots"
    ]
  },
  "application/vnd.oasis.opendocument.text": {
    source: "iana",
    compressible: false,
    extensions: [
      "odt"
    ]
  },
  "application/vnd.oasis.opendocument.text-master": {
    source: "iana",
    extensions: [
      "odm"
    ]
  },
  "application/vnd.oasis.opendocument.text-template": {
    source: "iana",
    extensions: [
      "ott"
    ]
  },
  "application/vnd.oasis.opendocument.text-web": {
    source: "iana",
    extensions: [
      "oth"
    ]
  },
  "application/vnd.obn": {
    source: "iana"
  },
  "application/vnd.ocf+cbor": {
    source: "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oftn.l10n+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    source: "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.pae.gem": {
    source: "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.spdlist+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.ueprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.userprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.olpc-sugar": {
    source: "iana",
    extensions: [
      "xo"
    ]
  },
  "application/vnd.oma-scws-config": {
    source: "iana"
  },
  "application/vnd.oma-scws-http-request": {
    source: "iana"
  },
  "application/vnd.oma-scws-http-response": {
    source: "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.imd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.ltkm": {
    source: "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    source: "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    source: "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.sgdu": {
    source: "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    source: "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.stkm": {
    source: "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-pcc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.dcd": {
    source: "iana"
  },
  "application/vnd.oma.dcdc": {
    source: "iana"
  },
  "application/vnd.oma.dd2+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dd2"
    ]
  },
  "application/vnd.oma.drm.risd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.group-usage-list+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.lwm2m+cbor": {
    source: "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.lwm2m+tlv": {
    source: "iana"
  },
  "application/vnd.oma.pal+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.final-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.groups+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.push": {
    source: "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.xcap-directory+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.omads-email+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omads-file+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omads-folder+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omaloc-supl-init": {
    source: "iana"
  },
  "application/vnd.onepager": {
    source: "iana"
  },
  "application/vnd.onepagertamp": {
    source: "iana"
  },
  "application/vnd.onepagertamx": {
    source: "iana"
  },
  "application/vnd.onepagertat": {
    source: "iana"
  },
  "application/vnd.onepagertatp": {
    source: "iana"
  },
  "application/vnd.onepagertatx": {
    source: "iana"
  },
  "application/vnd.openblox.game+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "obgx"
    ]
  },
  "application/vnd.openblox.game-binary": {
    source: "iana"
  },
  "application/vnd.openeye.oeb": {
    source: "iana"
  },
  "application/vnd.openofficeorg.extension": {
    source: "apache",
    extensions: [
      "oxt"
    ]
  },
  "application/vnd.openstreetmap.data+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "osm"
    ]
  },
  "application/vnd.opentimestamps.ots": {
    source: "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    source: "iana",
    compressible: false,
    extensions: [
      "pptx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    source: "iana",
    extensions: [
      "sldx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    source: "iana",
    extensions: [
      "ppsx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    source: "iana",
    extensions: [
      "potx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    source: "iana",
    compressible: false,
    extensions: [
      "xlsx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    source: "iana",
    extensions: [
      "xltx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    source: "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    source: "iana",
    compressible: false,
    extensions: [
      "docx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    source: "iana",
    extensions: [
      "dotx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oracle.resource+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.orange.indata": {
    source: "iana"
  },
  "application/vnd.osa.netdeploy": {
    source: "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    source: "iana",
    extensions: [
      "mgp"
    ]
  },
  "application/vnd.osgi.bundle": {
    source: "iana"
  },
  "application/vnd.osgi.dp": {
    source: "iana",
    extensions: [
      "dp"
    ]
  },
  "application/vnd.osgi.subsystem": {
    source: "iana",
    extensions: [
      "esa"
    ]
  },
  "application/vnd.otps.ct-kip+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oxli.countgraph": {
    source: "iana"
  },
  "application/vnd.pagerduty+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.palm": {
    source: "iana",
    extensions: [
      "pdb",
      "pqa",
      "oprc"
    ]
  },
  "application/vnd.panoply": {
    source: "iana"
  },
  "application/vnd.paos.xml": {
    source: "iana"
  },
  "application/vnd.patentdive": {
    source: "iana"
  },
  "application/vnd.patientecommsdoc": {
    source: "iana"
  },
  "application/vnd.pawaafile": {
    source: "iana",
    extensions: [
      "paw"
    ]
  },
  "application/vnd.pcos": {
    source: "iana"
  },
  "application/vnd.pg.format": {
    source: "iana",
    extensions: [
      "str"
    ]
  },
  "application/vnd.pg.osasli": {
    source: "iana",
    extensions: [
      "ei6"
    ]
  },
  "application/vnd.piaccess.application-licence": {
    source: "iana"
  },
  "application/vnd.picsel": {
    source: "iana",
    extensions: [
      "efif"
    ]
  },
  "application/vnd.pmi.widget": {
    source: "iana",
    extensions: [
      "wg"
    ]
  },
  "application/vnd.poc.group-advertisement+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.pocketlearn": {
    source: "iana",
    extensions: [
      "plf"
    ]
  },
  "application/vnd.powerbuilder6": {
    source: "iana",
    extensions: [
      "pbd"
    ]
  },
  "application/vnd.powerbuilder6-s": {
    source: "iana"
  },
  "application/vnd.powerbuilder7": {
    source: "iana"
  },
  "application/vnd.powerbuilder7-s": {
    source: "iana"
  },
  "application/vnd.powerbuilder75": {
    source: "iana"
  },
  "application/vnd.powerbuilder75-s": {
    source: "iana"
  },
  "application/vnd.preminet": {
    source: "iana"
  },
  "application/vnd.previewsystems.box": {
    source: "iana",
    extensions: [
      "box"
    ]
  },
  "application/vnd.proteus.magazine": {
    source: "iana",
    extensions: [
      "mgz"
    ]
  },
  "application/vnd.psfs": {
    source: "iana"
  },
  "application/vnd.publishare-delta-tree": {
    source: "iana",
    extensions: [
      "qps"
    ]
  },
  "application/vnd.pvi.ptid1": {
    source: "iana",
    extensions: [
      "ptid"
    ]
  },
  "application/vnd.pwg-multiplexed": {
    source: "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.qualcomm.brew-app-res": {
    source: "iana"
  },
  "application/vnd.quarantainenet": {
    source: "iana"
  },
  "application/vnd.quark.quarkxpress": {
    source: "iana",
    extensions: [
      "qxd",
      "qxt",
      "qwd",
      "qwt",
      "qxl",
      "qxb"
    ]
  },
  "application/vnd.quobject-quoxdocument": {
    source: "iana"
  },
  "application/vnd.radisys.moml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-conf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.rainstor.data": {
    source: "iana"
  },
  "application/vnd.rapid": {
    source: "iana"
  },
  "application/vnd.rar": {
    source: "iana",
    extensions: [
      "rar"
    ]
  },
  "application/vnd.realvnc.bed": {
    source: "iana",
    extensions: [
      "bed"
    ]
  },
  "application/vnd.recordare.musicxml": {
    source: "iana",
    extensions: [
      "mxl"
    ]
  },
  "application/vnd.recordare.musicxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "musicxml"
    ]
  },
  "application/vnd.renlearn.rlprint": {
    source: "iana"
  },
  "application/vnd.resilient.logic": {
    source: "iana"
  },
  "application/vnd.restful+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.rig.cryptonote": {
    source: "iana",
    extensions: [
      "cryptonote"
    ]
  },
  "application/vnd.rim.cod": {
    source: "apache",
    extensions: [
      "cod"
    ]
  },
  "application/vnd.rn-realmedia": {
    source: "apache",
    extensions: [
      "rm"
    ]
  },
  "application/vnd.rn-realmedia-vbr": {
    source: "apache",
    extensions: [
      "rmvb"
    ]
  },
  "application/vnd.route66.link66+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "link66"
    ]
  },
  "application/vnd.rs-274x": {
    source: "iana"
  },
  "application/vnd.ruckus.download": {
    source: "iana"
  },
  "application/vnd.s3sms": {
    source: "iana"
  },
  "application/vnd.sailingtracker.track": {
    source: "iana",
    extensions: [
      "st"
    ]
  },
  "application/vnd.sar": {
    source: "iana"
  },
  "application/vnd.sbm.cid": {
    source: "iana"
  },
  "application/vnd.sbm.mid2": {
    source: "iana"
  },
  "application/vnd.scribus": {
    source: "iana"
  },
  "application/vnd.sealed.3df": {
    source: "iana"
  },
  "application/vnd.sealed.csf": {
    source: "iana"
  },
  "application/vnd.sealed.doc": {
    source: "iana"
  },
  "application/vnd.sealed.eml": {
    source: "iana"
  },
  "application/vnd.sealed.mht": {
    source: "iana"
  },
  "application/vnd.sealed.net": {
    source: "iana"
  },
  "application/vnd.sealed.ppt": {
    source: "iana"
  },
  "application/vnd.sealed.tiff": {
    source: "iana"
  },
  "application/vnd.sealed.xls": {
    source: "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    source: "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    source: "iana"
  },
  "application/vnd.seemail": {
    source: "iana",
    extensions: [
      "see"
    ]
  },
  "application/vnd.seis+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.sema": {
    source: "iana",
    extensions: [
      "sema"
    ]
  },
  "application/vnd.semd": {
    source: "iana",
    extensions: [
      "semd"
    ]
  },
  "application/vnd.semf": {
    source: "iana",
    extensions: [
      "semf"
    ]
  },
  "application/vnd.shade-save-file": {
    source: "iana"
  },
  "application/vnd.shana.informed.formdata": {
    source: "iana",
    extensions: [
      "ifm"
    ]
  },
  "application/vnd.shana.informed.formtemplate": {
    source: "iana",
    extensions: [
      "itp"
    ]
  },
  "application/vnd.shana.informed.interchange": {
    source: "iana",
    extensions: [
      "iif"
    ]
  },
  "application/vnd.shana.informed.package": {
    source: "iana",
    extensions: [
      "ipk"
    ]
  },
  "application/vnd.shootproof+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.shopkick+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.shp": {
    source: "iana"
  },
  "application/vnd.shx": {
    source: "iana"
  },
  "application/vnd.sigrok.session": {
    source: "iana"
  },
  "application/vnd.simtech-mindmapper": {
    source: "iana",
    extensions: [
      "twd",
      "twds"
    ]
  },
  "application/vnd.siren+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.smaf": {
    source: "iana",
    extensions: [
      "mmf"
    ]
  },
  "application/vnd.smart.notebook": {
    source: "iana"
  },
  "application/vnd.smart.teacher": {
    source: "iana",
    extensions: [
      "teacher"
    ]
  },
  "application/vnd.snesdev-page-table": {
    source: "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "fo"
    ]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    source: "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sdkm",
      "sdkd"
    ]
  },
  "application/vnd.spotfire.dxp": {
    source: "iana",
    extensions: [
      "dxp"
    ]
  },
  "application/vnd.spotfire.sfs": {
    source: "iana",
    extensions: [
      "sfs"
    ]
  },
  "application/vnd.sqlite3": {
    source: "iana"
  },
  "application/vnd.sss-cod": {
    source: "iana"
  },
  "application/vnd.sss-dtf": {
    source: "iana"
  },
  "application/vnd.sss-ntf": {
    source: "iana"
  },
  "application/vnd.stardivision.calc": {
    source: "apache",
    extensions: [
      "sdc"
    ]
  },
  "application/vnd.stardivision.draw": {
    source: "apache",
    extensions: [
      "sda"
    ]
  },
  "application/vnd.stardivision.impress": {
    source: "apache",
    extensions: [
      "sdd"
    ]
  },
  "application/vnd.stardivision.math": {
    source: "apache",
    extensions: [
      "smf"
    ]
  },
  "application/vnd.stardivision.writer": {
    source: "apache",
    extensions: [
      "sdw",
      "vor"
    ]
  },
  "application/vnd.stardivision.writer-global": {
    source: "apache",
    extensions: [
      "sgl"
    ]
  },
  "application/vnd.stepmania.package": {
    source: "iana",
    extensions: [
      "smzip"
    ]
  },
  "application/vnd.stepmania.stepchart": {
    source: "iana",
    extensions: [
      "sm"
    ]
  },
  "application/vnd.street-stream": {
    source: "iana"
  },
  "application/vnd.sun.wadl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wadl"
    ]
  },
  "application/vnd.sun.xml.calc": {
    source: "apache",
    extensions: [
      "sxc"
    ]
  },
  "application/vnd.sun.xml.calc.template": {
    source: "apache",
    extensions: [
      "stc"
    ]
  },
  "application/vnd.sun.xml.draw": {
    source: "apache",
    extensions: [
      "sxd"
    ]
  },
  "application/vnd.sun.xml.draw.template": {
    source: "apache",
    extensions: [
      "std"
    ]
  },
  "application/vnd.sun.xml.impress": {
    source: "apache",
    extensions: [
      "sxi"
    ]
  },
  "application/vnd.sun.xml.impress.template": {
    source: "apache",
    extensions: [
      "sti"
    ]
  },
  "application/vnd.sun.xml.math": {
    source: "apache",
    extensions: [
      "sxm"
    ]
  },
  "application/vnd.sun.xml.writer": {
    source: "apache",
    extensions: [
      "sxw"
    ]
  },
  "application/vnd.sun.xml.writer.global": {
    source: "apache",
    extensions: [
      "sxg"
    ]
  },
  "application/vnd.sun.xml.writer.template": {
    source: "apache",
    extensions: [
      "stw"
    ]
  },
  "application/vnd.sus-calendar": {
    source: "iana",
    extensions: [
      "sus",
      "susp"
    ]
  },
  "application/vnd.svd": {
    source: "iana",
    extensions: [
      "svd"
    ]
  },
  "application/vnd.swiftview-ics": {
    source: "iana"
  },
  "application/vnd.sycle+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.syft+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.symbian.install": {
    source: "apache",
    extensions: [
      "sis",
      "sisx"
    ]
  },
  "application/vnd.syncml+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "xsm"
    ]
  },
  "application/vnd.syncml.dm+wbxml": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "bdm"
    ]
  },
  "application/vnd.syncml.dm+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "xdm"
    ]
  },
  "application/vnd.syncml.dm.notification": {
    source: "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    source: "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "ddf"
    ]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    source: "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.syncml.ds.notification": {
    source: "iana"
  },
  "application/vnd.tableschema+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tao.intent-module-archive": {
    source: "iana",
    extensions: [
      "tao"
    ]
  },
  "application/vnd.tcpdump.pcap": {
    source: "iana",
    extensions: [
      "pcap",
      "cap",
      "dmp"
    ]
  },
  "application/vnd.think-cell.ppttc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tml": {
    source: "iana"
  },
  "application/vnd.tmobile-livetv": {
    source: "iana",
    extensions: [
      "tmo"
    ]
  },
  "application/vnd.tri.onesource": {
    source: "iana"
  },
  "application/vnd.trid.tpt": {
    source: "iana",
    extensions: [
      "tpt"
    ]
  },
  "application/vnd.triscape.mxs": {
    source: "iana",
    extensions: [
      "mxs"
    ]
  },
  "application/vnd.trueapp": {
    source: "iana",
    extensions: [
      "tra"
    ]
  },
  "application/vnd.truedoc": {
    source: "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    source: "iana"
  },
  "application/vnd.ufdl": {
    source: "iana",
    extensions: [
      "ufd",
      "ufdl"
    ]
  },
  "application/vnd.uiq.theme": {
    source: "iana",
    extensions: [
      "utz"
    ]
  },
  "application/vnd.umajin": {
    source: "iana",
    extensions: [
      "umj"
    ]
  },
  "application/vnd.unity": {
    source: "iana",
    extensions: [
      "unityweb"
    ]
  },
  "application/vnd.uoml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "uoml"
    ]
  },
  "application/vnd.uplanet.alert": {
    source: "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    source: "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.cacheop": {
    source: "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.channel": {
    source: "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.list": {
    source: "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.listcmd": {
    source: "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.signal": {
    source: "iana"
  },
  "application/vnd.uri-map": {
    source: "iana"
  },
  "application/vnd.valve.source.material": {
    source: "iana"
  },
  "application/vnd.vcx": {
    source: "iana",
    extensions: [
      "vcx"
    ]
  },
  "application/vnd.vd-study": {
    source: "iana"
  },
  "application/vnd.vectorworks": {
    source: "iana"
  },
  "application/vnd.vel+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.verimatrix.vcas": {
    source: "iana"
  },
  "application/vnd.veritone.aion+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.veryant.thin": {
    source: "iana"
  },
  "application/vnd.ves.encrypted": {
    source: "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    source: "iana"
  },
  "application/vnd.visio": {
    source: "iana",
    extensions: [
      "vsd",
      "vst",
      "vss",
      "vsw"
    ]
  },
  "application/vnd.visionary": {
    source: "iana",
    extensions: [
      "vis"
    ]
  },
  "application/vnd.vividence.scriptfile": {
    source: "iana"
  },
  "application/vnd.vsf": {
    source: "iana",
    extensions: [
      "vsf"
    ]
  },
  "application/vnd.wap.sic": {
    source: "iana"
  },
  "application/vnd.wap.slc": {
    source: "iana"
  },
  "application/vnd.wap.wbxml": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "wbxml"
    ]
  },
  "application/vnd.wap.wmlc": {
    source: "iana",
    extensions: [
      "wmlc"
    ]
  },
  "application/vnd.wap.wmlscriptc": {
    source: "iana",
    extensions: [
      "wmlsc"
    ]
  },
  "application/vnd.webturbo": {
    source: "iana",
    extensions: [
      "wtb"
    ]
  },
  "application/vnd.wfa.dpp": {
    source: "iana"
  },
  "application/vnd.wfa.p2p": {
    source: "iana"
  },
  "application/vnd.wfa.wsc": {
    source: "iana"
  },
  "application/vnd.windows.devicepairing": {
    source: "iana"
  },
  "application/vnd.wmc": {
    source: "iana"
  },
  "application/vnd.wmf.bootstrap": {
    source: "iana"
  },
  "application/vnd.wolfram.mathematica": {
    source: "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    source: "iana"
  },
  "application/vnd.wolfram.player": {
    source: "iana",
    extensions: [
      "nbp"
    ]
  },
  "application/vnd.wordperfect": {
    source: "iana",
    extensions: [
      "wpd"
    ]
  },
  "application/vnd.wqd": {
    source: "iana",
    extensions: [
      "wqd"
    ]
  },
  "application/vnd.wrq-hp3000-labelled": {
    source: "iana"
  },
  "application/vnd.wt.stf": {
    source: "iana",
    extensions: [
      "stf"
    ]
  },
  "application/vnd.wv.csp+wbxml": {
    source: "iana"
  },
  "application/vnd.wv.csp+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.wv.ssp+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xacml+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xara": {
    source: "iana",
    extensions: [
      "xar"
    ]
  },
  "application/vnd.xfdl": {
    source: "iana",
    extensions: [
      "xfdl"
    ]
  },
  "application/vnd.xfdl.webform": {
    source: "iana"
  },
  "application/vnd.xmi+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xmpie.cpkg": {
    source: "iana"
  },
  "application/vnd.xmpie.dpkg": {
    source: "iana"
  },
  "application/vnd.xmpie.plan": {
    source: "iana"
  },
  "application/vnd.xmpie.ppkg": {
    source: "iana"
  },
  "application/vnd.xmpie.xlim": {
    source: "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    source: "iana",
    extensions: [
      "hvd"
    ]
  },
  "application/vnd.yamaha.hv-script": {
    source: "iana",
    extensions: [
      "hvs"
    ]
  },
  "application/vnd.yamaha.hv-voice": {
    source: "iana",
    extensions: [
      "hvp"
    ]
  },
  "application/vnd.yamaha.openscoreformat": {
    source: "iana",
    extensions: [
      "osf"
    ]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "osfpvg"
    ]
  },
  "application/vnd.yamaha.remote-setup": {
    source: "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    source: "iana",
    extensions: [
      "saf"
    ]
  },
  "application/vnd.yamaha.smaf-phrase": {
    source: "iana",
    extensions: [
      "spf"
    ]
  },
  "application/vnd.yamaha.through-ngn": {
    source: "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    source: "iana"
  },
  "application/vnd.yaoweme": {
    source: "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    source: "iana",
    extensions: [
      "cmp"
    ]
  },
  "application/vnd.youtube.yt": {
    source: "iana"
  },
  "application/vnd.zul": {
    source: "iana",
    extensions: [
      "zir",
      "zirz"
    ]
  },
  "application/vnd.zzazz.deck+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "zaz"
    ]
  },
  "application/voicexml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "vxml"
    ]
  },
  "application/voucher-cms+json": {
    source: "iana",
    compressible: true
  },
  "application/vq-rtcpxr": {
    source: "iana"
  },
  "application/wasm": {
    source: "iana",
    compressible: true,
    extensions: [
      "wasm"
    ]
  },
  "application/watcherinfo+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wif"
    ]
  },
  "application/webpush-options+json": {
    source: "iana",
    compressible: true
  },
  "application/whoispp-query": {
    source: "iana"
  },
  "application/whoispp-response": {
    source: "iana"
  },
  "application/widget": {
    source: "iana",
    extensions: [
      "wgt"
    ]
  },
  "application/winhlp": {
    source: "apache",
    extensions: [
      "hlp"
    ]
  },
  "application/wita": {
    source: "iana"
  },
  "application/wordperfect5.1": {
    source: "iana"
  },
  "application/wsdl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wsdl"
    ]
  },
  "application/wspolicy+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wspolicy"
    ]
  },
  "application/x-7z-compressed": {
    source: "apache",
    compressible: false,
    extensions: [
      "7z"
    ]
  },
  "application/x-abiword": {
    source: "apache",
    extensions: [
      "abw"
    ]
  },
  "application/x-ace-compressed": {
    source: "apache",
    extensions: [
      "ace"
    ]
  },
  "application/x-amf": {
    source: "apache"
  },
  "application/x-apple-diskimage": {
    source: "apache",
    extensions: [
      "dmg"
    ]
  },
  "application/x-arj": {
    compressible: false,
    extensions: [
      "arj"
    ]
  },
  "application/x-authorware-bin": {
    source: "apache",
    extensions: [
      "aab",
      "x32",
      "u32",
      "vox"
    ]
  },
  "application/x-authorware-map": {
    source: "apache",
    extensions: [
      "aam"
    ]
  },
  "application/x-authorware-seg": {
    source: "apache",
    extensions: [
      "aas"
    ]
  },
  "application/x-bcpio": {
    source: "apache",
    extensions: [
      "bcpio"
    ]
  },
  "application/x-bdoc": {
    compressible: false,
    extensions: [
      "bdoc"
    ]
  },
  "application/x-bittorrent": {
    source: "apache",
    extensions: [
      "torrent"
    ]
  },
  "application/x-blorb": {
    source: "apache",
    extensions: [
      "blb",
      "blorb"
    ]
  },
  "application/x-bzip": {
    source: "apache",
    compressible: false,
    extensions: [
      "bz"
    ]
  },
  "application/x-bzip2": {
    source: "apache",
    compressible: false,
    extensions: [
      "bz2",
      "boz"
    ]
  },
  "application/x-cbr": {
    source: "apache",
    extensions: [
      "cbr",
      "cba",
      "cbt",
      "cbz",
      "cb7"
    ]
  },
  "application/x-cdlink": {
    source: "apache",
    extensions: [
      "vcd"
    ]
  },
  "application/x-cfs-compressed": {
    source: "apache",
    extensions: [
      "cfs"
    ]
  },
  "application/x-chat": {
    source: "apache",
    extensions: [
      "chat"
    ]
  },
  "application/x-chess-pgn": {
    source: "apache",
    extensions: [
      "pgn"
    ]
  },
  "application/x-chrome-extension": {
    extensions: [
      "crx"
    ]
  },
  "application/x-cocoa": {
    source: "nginx",
    extensions: [
      "cco"
    ]
  },
  "application/x-compress": {
    source: "apache"
  },
  "application/x-conference": {
    source: "apache",
    extensions: [
      "nsc"
    ]
  },
  "application/x-cpio": {
    source: "apache",
    extensions: [
      "cpio"
    ]
  },
  "application/x-csh": {
    source: "apache",
    extensions: [
      "csh"
    ]
  },
  "application/x-deb": {
    compressible: false
  },
  "application/x-debian-package": {
    source: "apache",
    extensions: [
      "deb",
      "udeb"
    ]
  },
  "application/x-dgc-compressed": {
    source: "apache",
    extensions: [
      "dgc"
    ]
  },
  "application/x-director": {
    source: "apache",
    extensions: [
      "dir",
      "dcr",
      "dxr",
      "cst",
      "cct",
      "cxt",
      "w3d",
      "fgd",
      "swa"
    ]
  },
  "application/x-doom": {
    source: "apache",
    extensions: [
      "wad"
    ]
  },
  "application/x-dtbncx+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "ncx"
    ]
  },
  "application/x-dtbook+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "dtb"
    ]
  },
  "application/x-dtbresource+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "res"
    ]
  },
  "application/x-dvi": {
    source: "apache",
    compressible: false,
    extensions: [
      "dvi"
    ]
  },
  "application/x-envoy": {
    source: "apache",
    extensions: [
      "evy"
    ]
  },
  "application/x-eva": {
    source: "apache",
    extensions: [
      "eva"
    ]
  },
  "application/x-font-bdf": {
    source: "apache",
    extensions: [
      "bdf"
    ]
  },
  "application/x-font-dos": {
    source: "apache"
  },
  "application/x-font-framemaker": {
    source: "apache"
  },
  "application/x-font-ghostscript": {
    source: "apache",
    extensions: [
      "gsf"
    ]
  },
  "application/x-font-libgrx": {
    source: "apache"
  },
  "application/x-font-linux-psf": {
    source: "apache",
    extensions: [
      "psf"
    ]
  },
  "application/x-font-pcf": {
    source: "apache",
    extensions: [
      "pcf"
    ]
  },
  "application/x-font-snf": {
    source: "apache",
    extensions: [
      "snf"
    ]
  },
  "application/x-font-speedo": {
    source: "apache"
  },
  "application/x-font-sunos-news": {
    source: "apache"
  },
  "application/x-font-type1": {
    source: "apache",
    extensions: [
      "pfa",
      "pfb",
      "pfm",
      "afm"
    ]
  },
  "application/x-font-vfont": {
    source: "apache"
  },
  "application/x-freearc": {
    source: "apache",
    extensions: [
      "arc"
    ]
  },
  "application/x-futuresplash": {
    source: "apache",
    extensions: [
      "spl"
    ]
  },
  "application/x-gca-compressed": {
    source: "apache",
    extensions: [
      "gca"
    ]
  },
  "application/x-glulx": {
    source: "apache",
    extensions: [
      "ulx"
    ]
  },
  "application/x-gnumeric": {
    source: "apache",
    extensions: [
      "gnumeric"
    ]
  },
  "application/x-gramps-xml": {
    source: "apache",
    extensions: [
      "gramps"
    ]
  },
  "application/x-gtar": {
    source: "apache",
    extensions: [
      "gtar"
    ]
  },
  "application/x-gzip": {
    source: "apache"
  },
  "application/x-hdf": {
    source: "apache",
    extensions: [
      "hdf"
    ]
  },
  "application/x-httpd-php": {
    compressible: true,
    extensions: [
      "php"
    ]
  },
  "application/x-install-instructions": {
    source: "apache",
    extensions: [
      "install"
    ]
  },
  "application/x-iso9660-image": {
    source: "apache",
    extensions: [
      "iso"
    ]
  },
  "application/x-iwork-keynote-sffkey": {
    extensions: [
      "key"
    ]
  },
  "application/x-iwork-numbers-sffnumbers": {
    extensions: [
      "numbers"
    ]
  },
  "application/x-iwork-pages-sffpages": {
    extensions: [
      "pages"
    ]
  },
  "application/x-java-archive-diff": {
    source: "nginx",
    extensions: [
      "jardiff"
    ]
  },
  "application/x-java-jnlp-file": {
    source: "apache",
    compressible: false,
    extensions: [
      "jnlp"
    ]
  },
  "application/x-javascript": {
    compressible: true
  },
  "application/x-keepass2": {
    extensions: [
      "kdbx"
    ]
  },
  "application/x-latex": {
    source: "apache",
    compressible: false,
    extensions: [
      "latex"
    ]
  },
  "application/x-lua-bytecode": {
    extensions: [
      "luac"
    ]
  },
  "application/x-lzh-compressed": {
    source: "apache",
    extensions: [
      "lzh",
      "lha"
    ]
  },
  "application/x-makeself": {
    source: "nginx",
    extensions: [
      "run"
    ]
  },
  "application/x-mie": {
    source: "apache",
    extensions: [
      "mie"
    ]
  },
  "application/x-mobipocket-ebook": {
    source: "apache",
    extensions: [
      "prc",
      "mobi"
    ]
  },
  "application/x-mpegurl": {
    compressible: false
  },
  "application/x-ms-application": {
    source: "apache",
    extensions: [
      "application"
    ]
  },
  "application/x-ms-shortcut": {
    source: "apache",
    extensions: [
      "lnk"
    ]
  },
  "application/x-ms-wmd": {
    source: "apache",
    extensions: [
      "wmd"
    ]
  },
  "application/x-ms-wmz": {
    source: "apache",
    extensions: [
      "wmz"
    ]
  },
  "application/x-ms-xbap": {
    source: "apache",
    extensions: [
      "xbap"
    ]
  },
  "application/x-msaccess": {
    source: "apache",
    extensions: [
      "mdb"
    ]
  },
  "application/x-msbinder": {
    source: "apache",
    extensions: [
      "obd"
    ]
  },
  "application/x-mscardfile": {
    source: "apache",
    extensions: [
      "crd"
    ]
  },
  "application/x-msclip": {
    source: "apache",
    extensions: [
      "clp"
    ]
  },
  "application/x-msdos-program": {
    extensions: [
      "exe"
    ]
  },
  "application/x-msdownload": {
    source: "apache",
    extensions: [
      "exe",
      "dll",
      "com",
      "bat",
      "msi"
    ]
  },
  "application/x-msmediaview": {
    source: "apache",
    extensions: [
      "mvb",
      "m13",
      "m14"
    ]
  },
  "application/x-msmetafile": {
    source: "apache",
    extensions: [
      "wmf",
      "wmz",
      "emf",
      "emz"
    ]
  },
  "application/x-msmoney": {
    source: "apache",
    extensions: [
      "mny"
    ]
  },
  "application/x-mspublisher": {
    source: "apache",
    extensions: [
      "pub"
    ]
  },
  "application/x-msschedule": {
    source: "apache",
    extensions: [
      "scd"
    ]
  },
  "application/x-msterminal": {
    source: "apache",
    extensions: [
      "trm"
    ]
  },
  "application/x-mswrite": {
    source: "apache",
    extensions: [
      "wri"
    ]
  },
  "application/x-netcdf": {
    source: "apache",
    extensions: [
      "nc",
      "cdf"
    ]
  },
  "application/x-ns-proxy-autoconfig": {
    compressible: true,
    extensions: [
      "pac"
    ]
  },
  "application/x-nzb": {
    source: "apache",
    extensions: [
      "nzb"
    ]
  },
  "application/x-perl": {
    source: "nginx",
    extensions: [
      "pl",
      "pm"
    ]
  },
  "application/x-pilot": {
    source: "nginx",
    extensions: [
      "prc",
      "pdb"
    ]
  },
  "application/x-pkcs12": {
    source: "apache",
    compressible: false,
    extensions: [
      "p12",
      "pfx"
    ]
  },
  "application/x-pkcs7-certificates": {
    source: "apache",
    extensions: [
      "p7b",
      "spc"
    ]
  },
  "application/x-pkcs7-certreqresp": {
    source: "apache",
    extensions: [
      "p7r"
    ]
  },
  "application/x-pki-message": {
    source: "iana"
  },
  "application/x-rar-compressed": {
    source: "apache",
    compressible: false,
    extensions: [
      "rar"
    ]
  },
  "application/x-redhat-package-manager": {
    source: "nginx",
    extensions: [
      "rpm"
    ]
  },
  "application/x-research-info-systems": {
    source: "apache",
    extensions: [
      "ris"
    ]
  },
  "application/x-sea": {
    source: "nginx",
    extensions: [
      "sea"
    ]
  },
  "application/x-sh": {
    source: "apache",
    compressible: true,
    extensions: [
      "sh"
    ]
  },
  "application/x-shar": {
    source: "apache",
    extensions: [
      "shar"
    ]
  },
  "application/x-shockwave-flash": {
    source: "apache",
    compressible: false,
    extensions: [
      "swf"
    ]
  },
  "application/x-silverlight-app": {
    source: "apache",
    extensions: [
      "xap"
    ]
  },
  "application/x-sql": {
    source: "apache",
    extensions: [
      "sql"
    ]
  },
  "application/x-stuffit": {
    source: "apache",
    compressible: false,
    extensions: [
      "sit"
    ]
  },
  "application/x-stuffitx": {
    source: "apache",
    extensions: [
      "sitx"
    ]
  },
  "application/x-subrip": {
    source: "apache",
    extensions: [
      "srt"
    ]
  },
  "application/x-sv4cpio": {
    source: "apache",
    extensions: [
      "sv4cpio"
    ]
  },
  "application/x-sv4crc": {
    source: "apache",
    extensions: [
      "sv4crc"
    ]
  },
  "application/x-t3vm-image": {
    source: "apache",
    extensions: [
      "t3"
    ]
  },
  "application/x-tads": {
    source: "apache",
    extensions: [
      "gam"
    ]
  },
  "application/x-tar": {
    source: "apache",
    compressible: true,
    extensions: [
      "tar"
    ]
  },
  "application/x-tcl": {
    source: "apache",
    extensions: [
      "tcl",
      "tk"
    ]
  },
  "application/x-tex": {
    source: "apache",
    extensions: [
      "tex"
    ]
  },
  "application/x-tex-tfm": {
    source: "apache",
    extensions: [
      "tfm"
    ]
  },
  "application/x-texinfo": {
    source: "apache",
    extensions: [
      "texinfo",
      "texi"
    ]
  },
  "application/x-tgif": {
    source: "apache",
    extensions: [
      "obj"
    ]
  },
  "application/x-ustar": {
    source: "apache",
    extensions: [
      "ustar"
    ]
  },
  "application/x-virtualbox-hdd": {
    compressible: true,
    extensions: [
      "hdd"
    ]
  },
  "application/x-virtualbox-ova": {
    compressible: true,
    extensions: [
      "ova"
    ]
  },
  "application/x-virtualbox-ovf": {
    compressible: true,
    extensions: [
      "ovf"
    ]
  },
  "application/x-virtualbox-vbox": {
    compressible: true,
    extensions: [
      "vbox"
    ]
  },
  "application/x-virtualbox-vbox-extpack": {
    compressible: false,
    extensions: [
      "vbox-extpack"
    ]
  },
  "application/x-virtualbox-vdi": {
    compressible: true,
    extensions: [
      "vdi"
    ]
  },
  "application/x-virtualbox-vhd": {
    compressible: true,
    extensions: [
      "vhd"
    ]
  },
  "application/x-virtualbox-vmdk": {
    compressible: true,
    extensions: [
      "vmdk"
    ]
  },
  "application/x-wais-source": {
    source: "apache",
    extensions: [
      "src"
    ]
  },
  "application/x-web-app-manifest+json": {
    compressible: true,
    extensions: [
      "webapp"
    ]
  },
  "application/x-www-form-urlencoded": {
    source: "iana",
    compressible: true
  },
  "application/x-x509-ca-cert": {
    source: "iana",
    extensions: [
      "der",
      "crt",
      "pem"
    ]
  },
  "application/x-x509-ca-ra-cert": {
    source: "iana"
  },
  "application/x-x509-next-ca-cert": {
    source: "iana"
  },
  "application/x-xfig": {
    source: "apache",
    extensions: [
      "fig"
    ]
  },
  "application/x-xliff+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xlf"
    ]
  },
  "application/x-xpinstall": {
    source: "apache",
    compressible: false,
    extensions: [
      "xpi"
    ]
  },
  "application/x-xz": {
    source: "apache",
    extensions: [
      "xz"
    ]
  },
  "application/x-zmachine": {
    source: "apache",
    extensions: [
      "z1",
      "z2",
      "z3",
      "z4",
      "z5",
      "z6",
      "z7",
      "z8"
    ]
  },
  "application/x400-bp": {
    source: "iana"
  },
  "application/xacml+xml": {
    source: "iana",
    compressible: true
  },
  "application/xaml+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xaml"
    ]
  },
  "application/xcap-att+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xav"
    ]
  },
  "application/xcap-caps+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xca"
    ]
  },
  "application/xcap-diff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdf"
    ]
  },
  "application/xcap-el+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xel"
    ]
  },
  "application/xcap-error+xml": {
    source: "iana",
    compressible: true
  },
  "application/xcap-ns+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xns"
    ]
  },
  "application/xcon-conference-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/xcon-conference-info-diff+xml": {
    source: "iana",
    compressible: true
  },
  "application/xenc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xenc"
    ]
  },
  "application/xhtml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xhtml",
      "xht"
    ]
  },
  "application/xhtml-voice+xml": {
    source: "apache",
    compressible: true
  },
  "application/xliff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xlf"
    ]
  },
  "application/xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xml",
      "xsl",
      "xsd",
      "rng"
    ]
  },
  "application/xml-dtd": {
    source: "iana",
    compressible: true,
    extensions: [
      "dtd"
    ]
  },
  "application/xml-external-parsed-entity": {
    source: "iana"
  },
  "application/xml-patch+xml": {
    source: "iana",
    compressible: true
  },
  "application/xmpp+xml": {
    source: "iana",
    compressible: true
  },
  "application/xop+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xop"
    ]
  },
  "application/xproc+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xpl"
    ]
  },
  "application/xslt+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xsl",
      "xslt"
    ]
  },
  "application/xspf+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xspf"
    ]
  },
  "application/xv+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mxml",
      "xhvml",
      "xvml",
      "xvm"
    ]
  },
  "application/yang": {
    source: "iana",
    extensions: [
      "yang"
    ]
  },
  "application/yang-data+json": {
    source: "iana",
    compressible: true
  },
  "application/yang-data+xml": {
    source: "iana",
    compressible: true
  },
  "application/yang-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/yang-patch+xml": {
    source: "iana",
    compressible: true
  },
  "application/yin+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "yin"
    ]
  },
  "application/zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "zip"
    ]
  },
  "application/zlib": {
    source: "iana"
  },
  "application/zstd": {
    source: "iana"
  },
  "audio/1d-interleaved-parityfec": {
    source: "iana"
  },
  "audio/32kadpcm": {
    source: "iana"
  },
  "audio/3gpp": {
    source: "iana",
    compressible: false,
    extensions: [
      "3gpp"
    ]
  },
  "audio/3gpp2": {
    source: "iana"
  },
  "audio/aac": {
    source: "iana"
  },
  "audio/ac3": {
    source: "iana"
  },
  "audio/adpcm": {
    source: "apache",
    extensions: [
      "adp"
    ]
  },
  "audio/amr": {
    source: "iana",
    extensions: [
      "amr"
    ]
  },
  "audio/amr-wb": {
    source: "iana"
  },
  "audio/amr-wb+": {
    source: "iana"
  },
  "audio/aptx": {
    source: "iana"
  },
  "audio/asc": {
    source: "iana"
  },
  "audio/atrac-advanced-lossless": {
    source: "iana"
  },
  "audio/atrac-x": {
    source: "iana"
  },
  "audio/atrac3": {
    source: "iana"
  },
  "audio/basic": {
    source: "iana",
    compressible: false,
    extensions: [
      "au",
      "snd"
    ]
  },
  "audio/bv16": {
    source: "iana"
  },
  "audio/bv32": {
    source: "iana"
  },
  "audio/clearmode": {
    source: "iana"
  },
  "audio/cn": {
    source: "iana"
  },
  "audio/dat12": {
    source: "iana"
  },
  "audio/dls": {
    source: "iana"
  },
  "audio/dsr-es201108": {
    source: "iana"
  },
  "audio/dsr-es202050": {
    source: "iana"
  },
  "audio/dsr-es202211": {
    source: "iana"
  },
  "audio/dsr-es202212": {
    source: "iana"
  },
  "audio/dv": {
    source: "iana"
  },
  "audio/dvi4": {
    source: "iana"
  },
  "audio/eac3": {
    source: "iana"
  },
  "audio/encaprtp": {
    source: "iana"
  },
  "audio/evrc": {
    source: "iana"
  },
  "audio/evrc-qcp": {
    source: "iana"
  },
  "audio/evrc0": {
    source: "iana"
  },
  "audio/evrc1": {
    source: "iana"
  },
  "audio/evrcb": {
    source: "iana"
  },
  "audio/evrcb0": {
    source: "iana"
  },
  "audio/evrcb1": {
    source: "iana"
  },
  "audio/evrcnw": {
    source: "iana"
  },
  "audio/evrcnw0": {
    source: "iana"
  },
  "audio/evrcnw1": {
    source: "iana"
  },
  "audio/evrcwb": {
    source: "iana"
  },
  "audio/evrcwb0": {
    source: "iana"
  },
  "audio/evrcwb1": {
    source: "iana"
  },
  "audio/evs": {
    source: "iana"
  },
  "audio/flexfec": {
    source: "iana"
  },
  "audio/fwdred": {
    source: "iana"
  },
  "audio/g711-0": {
    source: "iana"
  },
  "audio/g719": {
    source: "iana"
  },
  "audio/g722": {
    source: "iana"
  },
  "audio/g7221": {
    source: "iana"
  },
  "audio/g723": {
    source: "iana"
  },
  "audio/g726-16": {
    source: "iana"
  },
  "audio/g726-24": {
    source: "iana"
  },
  "audio/g726-32": {
    source: "iana"
  },
  "audio/g726-40": {
    source: "iana"
  },
  "audio/g728": {
    source: "iana"
  },
  "audio/g729": {
    source: "iana"
  },
  "audio/g7291": {
    source: "iana"
  },
  "audio/g729d": {
    source: "iana"
  },
  "audio/g729e": {
    source: "iana"
  },
  "audio/gsm": {
    source: "iana"
  },
  "audio/gsm-efr": {
    source: "iana"
  },
  "audio/gsm-hr-08": {
    source: "iana"
  },
  "audio/ilbc": {
    source: "iana"
  },
  "audio/ip-mr_v2.5": {
    source: "iana"
  },
  "audio/isac": {
    source: "apache"
  },
  "audio/l16": {
    source: "iana"
  },
  "audio/l20": {
    source: "iana"
  },
  "audio/l24": {
    source: "iana",
    compressible: false
  },
  "audio/l8": {
    source: "iana"
  },
  "audio/lpc": {
    source: "iana"
  },
  "audio/melp": {
    source: "iana"
  },
  "audio/melp1200": {
    source: "iana"
  },
  "audio/melp2400": {
    source: "iana"
  },
  "audio/melp600": {
    source: "iana"
  },
  "audio/mhas": {
    source: "iana"
  },
  "audio/midi": {
    source: "apache",
    extensions: [
      "mid",
      "midi",
      "kar",
      "rmi"
    ]
  },
  "audio/mobile-xmf": {
    source: "iana",
    extensions: [
      "mxmf"
    ]
  },
  "audio/mp3": {
    compressible: false,
    extensions: [
      "mp3"
    ]
  },
  "audio/mp4": {
    source: "iana",
    compressible: false,
    extensions: [
      "m4a",
      "mp4a"
    ]
  },
  "audio/mp4a-latm": {
    source: "iana"
  },
  "audio/mpa": {
    source: "iana"
  },
  "audio/mpa-robust": {
    source: "iana"
  },
  "audio/mpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "mpga",
      "mp2",
      "mp2a",
      "mp3",
      "m2a",
      "m3a"
    ]
  },
  "audio/mpeg4-generic": {
    source: "iana"
  },
  "audio/musepack": {
    source: "apache"
  },
  "audio/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "oga",
      "ogg",
      "spx",
      "opus"
    ]
  },
  "audio/opus": {
    source: "iana"
  },
  "audio/parityfec": {
    source: "iana"
  },
  "audio/pcma": {
    source: "iana"
  },
  "audio/pcma-wb": {
    source: "iana"
  },
  "audio/pcmu": {
    source: "iana"
  },
  "audio/pcmu-wb": {
    source: "iana"
  },
  "audio/prs.sid": {
    source: "iana"
  },
  "audio/qcelp": {
    source: "iana"
  },
  "audio/raptorfec": {
    source: "iana"
  },
  "audio/red": {
    source: "iana"
  },
  "audio/rtp-enc-aescm128": {
    source: "iana"
  },
  "audio/rtp-midi": {
    source: "iana"
  },
  "audio/rtploopback": {
    source: "iana"
  },
  "audio/rtx": {
    source: "iana"
  },
  "audio/s3m": {
    source: "apache",
    extensions: [
      "s3m"
    ]
  },
  "audio/scip": {
    source: "iana"
  },
  "audio/silk": {
    source: "apache",
    extensions: [
      "sil"
    ]
  },
  "audio/smv": {
    source: "iana"
  },
  "audio/smv-qcp": {
    source: "iana"
  },
  "audio/smv0": {
    source: "iana"
  },
  "audio/sofa": {
    source: "iana"
  },
  "audio/sp-midi": {
    source: "iana"
  },
  "audio/speex": {
    source: "iana"
  },
  "audio/t140c": {
    source: "iana"
  },
  "audio/t38": {
    source: "iana"
  },
  "audio/telephone-event": {
    source: "iana"
  },
  "audio/tetra_acelp": {
    source: "iana"
  },
  "audio/tetra_acelp_bb": {
    source: "iana"
  },
  "audio/tone": {
    source: "iana"
  },
  "audio/tsvcis": {
    source: "iana"
  },
  "audio/uemclip": {
    source: "iana"
  },
  "audio/ulpfec": {
    source: "iana"
  },
  "audio/usac": {
    source: "iana"
  },
  "audio/vdvi": {
    source: "iana"
  },
  "audio/vmr-wb": {
    source: "iana"
  },
  "audio/vnd.3gpp.iufp": {
    source: "iana"
  },
  "audio/vnd.4sb": {
    source: "iana"
  },
  "audio/vnd.audiokoz": {
    source: "iana"
  },
  "audio/vnd.celp": {
    source: "iana"
  },
  "audio/vnd.cisco.nse": {
    source: "iana"
  },
  "audio/vnd.cmles.radio-events": {
    source: "iana"
  },
  "audio/vnd.cns.anp1": {
    source: "iana"
  },
  "audio/vnd.cns.inf1": {
    source: "iana"
  },
  "audio/vnd.dece.audio": {
    source: "iana",
    extensions: [
      "uva",
      "uvva"
    ]
  },
  "audio/vnd.digital-winds": {
    source: "iana",
    extensions: [
      "eol"
    ]
  },
  "audio/vnd.dlna.adts": {
    source: "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    source: "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    source: "iana"
  },
  "audio/vnd.dolby.mlp": {
    source: "iana"
  },
  "audio/vnd.dolby.mps": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2x": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2z": {
    source: "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    source: "iana"
  },
  "audio/vnd.dra": {
    source: "iana",
    extensions: [
      "dra"
    ]
  },
  "audio/vnd.dts": {
    source: "iana",
    extensions: [
      "dts"
    ]
  },
  "audio/vnd.dts.hd": {
    source: "iana",
    extensions: [
      "dtshd"
    ]
  },
  "audio/vnd.dts.uhd": {
    source: "iana"
  },
  "audio/vnd.dvb.file": {
    source: "iana"
  },
  "audio/vnd.everad.plj": {
    source: "iana"
  },
  "audio/vnd.hns.audio": {
    source: "iana"
  },
  "audio/vnd.lucent.voice": {
    source: "iana",
    extensions: [
      "lvp"
    ]
  },
  "audio/vnd.ms-playready.media.pya": {
    source: "iana",
    extensions: [
      "pya"
    ]
  },
  "audio/vnd.nokia.mobile-xmf": {
    source: "iana"
  },
  "audio/vnd.nortel.vbk": {
    source: "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    source: "iana",
    extensions: [
      "ecelp4800"
    ]
  },
  "audio/vnd.nuera.ecelp7470": {
    source: "iana",
    extensions: [
      "ecelp7470"
    ]
  },
  "audio/vnd.nuera.ecelp9600": {
    source: "iana",
    extensions: [
      "ecelp9600"
    ]
  },
  "audio/vnd.octel.sbc": {
    source: "iana"
  },
  "audio/vnd.presonus.multitrack": {
    source: "iana"
  },
  "audio/vnd.qcelp": {
    source: "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    source: "iana"
  },
  "audio/vnd.rip": {
    source: "iana",
    extensions: [
      "rip"
    ]
  },
  "audio/vnd.rn-realaudio": {
    compressible: false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    source: "iana"
  },
  "audio/vnd.vmx.cvsd": {
    source: "iana"
  },
  "audio/vnd.wave": {
    compressible: false
  },
  "audio/vorbis": {
    source: "iana",
    compressible: false
  },
  "audio/vorbis-config": {
    source: "iana"
  },
  "audio/wav": {
    compressible: false,
    extensions: [
      "wav"
    ]
  },
  "audio/wave": {
    compressible: false,
    extensions: [
      "wav"
    ]
  },
  "audio/webm": {
    source: "apache",
    compressible: false,
    extensions: [
      "weba"
    ]
  },
  "audio/x-aac": {
    source: "apache",
    compressible: false,
    extensions: [
      "aac"
    ]
  },
  "audio/x-aiff": {
    source: "apache",
    extensions: [
      "aif",
      "aiff",
      "aifc"
    ]
  },
  "audio/x-caf": {
    source: "apache",
    compressible: false,
    extensions: [
      "caf"
    ]
  },
  "audio/x-flac": {
    source: "apache",
    extensions: [
      "flac"
    ]
  },
  "audio/x-m4a": {
    source: "nginx",
    extensions: [
      "m4a"
    ]
  },
  "audio/x-matroska": {
    source: "apache",
    extensions: [
      "mka"
    ]
  },
  "audio/x-mpegurl": {
    source: "apache",
    extensions: [
      "m3u"
    ]
  },
  "audio/x-ms-wax": {
    source: "apache",
    extensions: [
      "wax"
    ]
  },
  "audio/x-ms-wma": {
    source: "apache",
    extensions: [
      "wma"
    ]
  },
  "audio/x-pn-realaudio": {
    source: "apache",
    extensions: [
      "ram",
      "ra"
    ]
  },
  "audio/x-pn-realaudio-plugin": {
    source: "apache",
    extensions: [
      "rmp"
    ]
  },
  "audio/x-realaudio": {
    source: "nginx",
    extensions: [
      "ra"
    ]
  },
  "audio/x-tta": {
    source: "apache"
  },
  "audio/x-wav": {
    source: "apache",
    extensions: [
      "wav"
    ]
  },
  "audio/xm": {
    source: "apache",
    extensions: [
      "xm"
    ]
  },
  "chemical/x-cdx": {
    source: "apache",
    extensions: [
      "cdx"
    ]
  },
  "chemical/x-cif": {
    source: "apache",
    extensions: [
      "cif"
    ]
  },
  "chemical/x-cmdf": {
    source: "apache",
    extensions: [
      "cmdf"
    ]
  },
  "chemical/x-cml": {
    source: "apache",
    extensions: [
      "cml"
    ]
  },
  "chemical/x-csml": {
    source: "apache",
    extensions: [
      "csml"
    ]
  },
  "chemical/x-pdb": {
    source: "apache"
  },
  "chemical/x-xyz": {
    source: "apache",
    extensions: [
      "xyz"
    ]
  },
  "font/collection": {
    source: "iana",
    extensions: [
      "ttc"
    ]
  },
  "font/otf": {
    source: "iana",
    compressible: true,
    extensions: [
      "otf"
    ]
  },
  "font/sfnt": {
    source: "iana"
  },
  "font/ttf": {
    source: "iana",
    compressible: true,
    extensions: [
      "ttf"
    ]
  },
  "font/woff": {
    source: "iana",
    extensions: [
      "woff"
    ]
  },
  "font/woff2": {
    source: "iana",
    extensions: [
      "woff2"
    ]
  },
  "image/aces": {
    source: "iana",
    extensions: [
      "exr"
    ]
  },
  "image/apng": {
    compressible: false,
    extensions: [
      "apng"
    ]
  },
  "image/avci": {
    source: "iana",
    extensions: [
      "avci"
    ]
  },
  "image/avcs": {
    source: "iana",
    extensions: [
      "avcs"
    ]
  },
  "image/avif": {
    source: "iana",
    compressible: false,
    extensions: [
      "avif"
    ]
  },
  "image/bmp": {
    source: "iana",
    compressible: true,
    extensions: [
      "bmp"
    ]
  },
  "image/cgm": {
    source: "iana",
    extensions: [
      "cgm"
    ]
  },
  "image/dicom-rle": {
    source: "iana",
    extensions: [
      "drle"
    ]
  },
  "image/emf": {
    source: "iana",
    extensions: [
      "emf"
    ]
  },
  "image/fits": {
    source: "iana",
    extensions: [
      "fits"
    ]
  },
  "image/g3fax": {
    source: "iana",
    extensions: [
      "g3"
    ]
  },
  "image/gif": {
    source: "iana",
    compressible: false,
    extensions: [
      "gif"
    ]
  },
  "image/heic": {
    source: "iana",
    extensions: [
      "heic"
    ]
  },
  "image/heic-sequence": {
    source: "iana",
    extensions: [
      "heics"
    ]
  },
  "image/heif": {
    source: "iana",
    extensions: [
      "heif"
    ]
  },
  "image/heif-sequence": {
    source: "iana",
    extensions: [
      "heifs"
    ]
  },
  "image/hej2k": {
    source: "iana",
    extensions: [
      "hej2"
    ]
  },
  "image/hsj2": {
    source: "iana",
    extensions: [
      "hsj2"
    ]
  },
  "image/ief": {
    source: "iana",
    extensions: [
      "ief"
    ]
  },
  "image/jls": {
    source: "iana",
    extensions: [
      "jls"
    ]
  },
  "image/jp2": {
    source: "iana",
    compressible: false,
    extensions: [
      "jp2",
      "jpg2"
    ]
  },
  "image/jpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpeg",
      "jpg",
      "jpe"
    ]
  },
  "image/jph": {
    source: "iana",
    extensions: [
      "jph"
    ]
  },
  "image/jphc": {
    source: "iana",
    extensions: [
      "jhc"
    ]
  },
  "image/jpm": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpm"
    ]
  },
  "image/jpx": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpx",
      "jpf"
    ]
  },
  "image/jxr": {
    source: "iana",
    extensions: [
      "jxr"
    ]
  },
  "image/jxra": {
    source: "iana",
    extensions: [
      "jxra"
    ]
  },
  "image/jxrs": {
    source: "iana",
    extensions: [
      "jxrs"
    ]
  },
  "image/jxs": {
    source: "iana",
    extensions: [
      "jxs"
    ]
  },
  "image/jxsc": {
    source: "iana",
    extensions: [
      "jxsc"
    ]
  },
  "image/jxsi": {
    source: "iana",
    extensions: [
      "jxsi"
    ]
  },
  "image/jxss": {
    source: "iana",
    extensions: [
      "jxss"
    ]
  },
  "image/ktx": {
    source: "iana",
    extensions: [
      "ktx"
    ]
  },
  "image/ktx2": {
    source: "iana",
    extensions: [
      "ktx2"
    ]
  },
  "image/naplps": {
    source: "iana"
  },
  "image/pjpeg": {
    compressible: false
  },
  "image/png": {
    source: "iana",
    compressible: false,
    extensions: [
      "png"
    ]
  },
  "image/prs.btif": {
    source: "iana",
    extensions: [
      "btif"
    ]
  },
  "image/prs.pti": {
    source: "iana",
    extensions: [
      "pti"
    ]
  },
  "image/pwg-raster": {
    source: "iana"
  },
  "image/sgi": {
    source: "apache",
    extensions: [
      "sgi"
    ]
  },
  "image/svg+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "svg",
      "svgz"
    ]
  },
  "image/t38": {
    source: "iana",
    extensions: [
      "t38"
    ]
  },
  "image/tiff": {
    source: "iana",
    compressible: false,
    extensions: [
      "tif",
      "tiff"
    ]
  },
  "image/tiff-fx": {
    source: "iana",
    extensions: [
      "tfx"
    ]
  },
  "image/vnd.adobe.photoshop": {
    source: "iana",
    compressible: true,
    extensions: [
      "psd"
    ]
  },
  "image/vnd.airzip.accelerator.azv": {
    source: "iana",
    extensions: [
      "azv"
    ]
  },
  "image/vnd.cns.inf2": {
    source: "iana"
  },
  "image/vnd.dece.graphic": {
    source: "iana",
    extensions: [
      "uvi",
      "uvvi",
      "uvg",
      "uvvg"
    ]
  },
  "image/vnd.djvu": {
    source: "iana",
    extensions: [
      "djvu",
      "djv"
    ]
  },
  "image/vnd.dvb.subtitle": {
    source: "iana",
    extensions: [
      "sub"
    ]
  },
  "image/vnd.dwg": {
    source: "iana",
    extensions: [
      "dwg"
    ]
  },
  "image/vnd.dxf": {
    source: "iana",
    extensions: [
      "dxf"
    ]
  },
  "image/vnd.fastbidsheet": {
    source: "iana",
    extensions: [
      "fbs"
    ]
  },
  "image/vnd.fpx": {
    source: "iana",
    extensions: [
      "fpx"
    ]
  },
  "image/vnd.fst": {
    source: "iana",
    extensions: [
      "fst"
    ]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    source: "iana",
    extensions: [
      "mmr"
    ]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    source: "iana",
    extensions: [
      "rlc"
    ]
  },
  "image/vnd.globalgraphics.pgb": {
    source: "iana"
  },
  "image/vnd.microsoft.icon": {
    source: "iana",
    compressible: true,
    extensions: [
      "ico"
    ]
  },
  "image/vnd.mix": {
    source: "iana"
  },
  "image/vnd.mozilla.apng": {
    source: "iana"
  },
  "image/vnd.ms-dds": {
    compressible: true,
    extensions: [
      "dds"
    ]
  },
  "image/vnd.ms-modi": {
    source: "iana",
    extensions: [
      "mdi"
    ]
  },
  "image/vnd.ms-photo": {
    source: "apache",
    extensions: [
      "wdp"
    ]
  },
  "image/vnd.net-fpx": {
    source: "iana",
    extensions: [
      "npx"
    ]
  },
  "image/vnd.pco.b16": {
    source: "iana",
    extensions: [
      "b16"
    ]
  },
  "image/vnd.radiance": {
    source: "iana"
  },
  "image/vnd.sealed.png": {
    source: "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    source: "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    source: "iana"
  },
  "image/vnd.svf": {
    source: "iana"
  },
  "image/vnd.tencent.tap": {
    source: "iana",
    extensions: [
      "tap"
    ]
  },
  "image/vnd.valve.source.texture": {
    source: "iana",
    extensions: [
      "vtf"
    ]
  },
  "image/vnd.wap.wbmp": {
    source: "iana",
    extensions: [
      "wbmp"
    ]
  },
  "image/vnd.xiff": {
    source: "iana",
    extensions: [
      "xif"
    ]
  },
  "image/vnd.zbrush.pcx": {
    source: "iana",
    extensions: [
      "pcx"
    ]
  },
  "image/webp": {
    source: "apache",
    extensions: [
      "webp"
    ]
  },
  "image/wmf": {
    source: "iana",
    extensions: [
      "wmf"
    ]
  },
  "image/x-3ds": {
    source: "apache",
    extensions: [
      "3ds"
    ]
  },
  "image/x-cmu-raster": {
    source: "apache",
    extensions: [
      "ras"
    ]
  },
  "image/x-cmx": {
    source: "apache",
    extensions: [
      "cmx"
    ]
  },
  "image/x-freehand": {
    source: "apache",
    extensions: [
      "fh",
      "fhc",
      "fh4",
      "fh5",
      "fh7"
    ]
  },
  "image/x-icon": {
    source: "apache",
    compressible: true,
    extensions: [
      "ico"
    ]
  },
  "image/x-jng": {
    source: "nginx",
    extensions: [
      "jng"
    ]
  },
  "image/x-mrsid-image": {
    source: "apache",
    extensions: [
      "sid"
    ]
  },
  "image/x-ms-bmp": {
    source: "nginx",
    compressible: true,
    extensions: [
      "bmp"
    ]
  },
  "image/x-pcx": {
    source: "apache",
    extensions: [
      "pcx"
    ]
  },
  "image/x-pict": {
    source: "apache",
    extensions: [
      "pic",
      "pct"
    ]
  },
  "image/x-portable-anymap": {
    source: "apache",
    extensions: [
      "pnm"
    ]
  },
  "image/x-portable-bitmap": {
    source: "apache",
    extensions: [
      "pbm"
    ]
  },
  "image/x-portable-graymap": {
    source: "apache",
    extensions: [
      "pgm"
    ]
  },
  "image/x-portable-pixmap": {
    source: "apache",
    extensions: [
      "ppm"
    ]
  },
  "image/x-rgb": {
    source: "apache",
    extensions: [
      "rgb"
    ]
  },
  "image/x-tga": {
    source: "apache",
    extensions: [
      "tga"
    ]
  },
  "image/x-xbitmap": {
    source: "apache",
    extensions: [
      "xbm"
    ]
  },
  "image/x-xcf": {
    compressible: false
  },
  "image/x-xpixmap": {
    source: "apache",
    extensions: [
      "xpm"
    ]
  },
  "image/x-xwindowdump": {
    source: "apache",
    extensions: [
      "xwd"
    ]
  },
  "message/cpim": {
    source: "iana"
  },
  "message/delivery-status": {
    source: "iana"
  },
  "message/disposition-notification": {
    source: "iana",
    extensions: [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    source: "iana"
  },
  "message/feedback-report": {
    source: "iana"
  },
  "message/global": {
    source: "iana",
    extensions: [
      "u8msg"
    ]
  },
  "message/global-delivery-status": {
    source: "iana",
    extensions: [
      "u8dsn"
    ]
  },
  "message/global-disposition-notification": {
    source: "iana",
    extensions: [
      "u8mdn"
    ]
  },
  "message/global-headers": {
    source: "iana",
    extensions: [
      "u8hdr"
    ]
  },
  "message/http": {
    source: "iana",
    compressible: false
  },
  "message/imdn+xml": {
    source: "iana",
    compressible: true
  },
  "message/news": {
    source: "iana"
  },
  "message/partial": {
    source: "iana",
    compressible: false
  },
  "message/rfc822": {
    source: "iana",
    compressible: true,
    extensions: [
      "eml",
      "mime"
    ]
  },
  "message/s-http": {
    source: "iana"
  },
  "message/sip": {
    source: "iana"
  },
  "message/sipfrag": {
    source: "iana"
  },
  "message/tracking-status": {
    source: "iana"
  },
  "message/vnd.si.simp": {
    source: "iana"
  },
  "message/vnd.wfa.wsc": {
    source: "iana",
    extensions: [
      "wsc"
    ]
  },
  "model/3mf": {
    source: "iana",
    extensions: [
      "3mf"
    ]
  },
  "model/e57": {
    source: "iana"
  },
  "model/gltf+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "gltf"
    ]
  },
  "model/gltf-binary": {
    source: "iana",
    compressible: true,
    extensions: [
      "glb"
    ]
  },
  "model/iges": {
    source: "iana",
    compressible: false,
    extensions: [
      "igs",
      "iges"
    ]
  },
  "model/mesh": {
    source: "iana",
    compressible: false,
    extensions: [
      "msh",
      "mesh",
      "silo"
    ]
  },
  "model/mtl": {
    source: "iana",
    extensions: [
      "mtl"
    ]
  },
  "model/obj": {
    source: "iana",
    extensions: [
      "obj"
    ]
  },
  "model/step": {
    source: "iana"
  },
  "model/step+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "stpx"
    ]
  },
  "model/step+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "stpz"
    ]
  },
  "model/step-xml+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "stpxz"
    ]
  },
  "model/stl": {
    source: "iana",
    extensions: [
      "stl"
    ]
  },
  "model/vnd.collada+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dae"
    ]
  },
  "model/vnd.dwf": {
    source: "iana",
    extensions: [
      "dwf"
    ]
  },
  "model/vnd.flatland.3dml": {
    source: "iana"
  },
  "model/vnd.gdl": {
    source: "iana",
    extensions: [
      "gdl"
    ]
  },
  "model/vnd.gs-gdl": {
    source: "apache"
  },
  "model/vnd.gs.gdl": {
    source: "iana"
  },
  "model/vnd.gtw": {
    source: "iana",
    extensions: [
      "gtw"
    ]
  },
  "model/vnd.moml+xml": {
    source: "iana",
    compressible: true
  },
  "model/vnd.mts": {
    source: "iana",
    extensions: [
      "mts"
    ]
  },
  "model/vnd.opengex": {
    source: "iana",
    extensions: [
      "ogex"
    ]
  },
  "model/vnd.parasolid.transmit.binary": {
    source: "iana",
    extensions: [
      "x_b"
    ]
  },
  "model/vnd.parasolid.transmit.text": {
    source: "iana",
    extensions: [
      "x_t"
    ]
  },
  "model/vnd.pytha.pyox": {
    source: "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    source: "iana"
  },
  "model/vnd.sap.vds": {
    source: "iana",
    extensions: [
      "vds"
    ]
  },
  "model/vnd.usdz+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "usdz"
    ]
  },
  "model/vnd.valve.source.compiled-map": {
    source: "iana",
    extensions: [
      "bsp"
    ]
  },
  "model/vnd.vtu": {
    source: "iana",
    extensions: [
      "vtu"
    ]
  },
  "model/vrml": {
    source: "iana",
    compressible: false,
    extensions: [
      "wrl",
      "vrml"
    ]
  },
  "model/x3d+binary": {
    source: "apache",
    compressible: false,
    extensions: [
      "x3db",
      "x3dbz"
    ]
  },
  "model/x3d+fastinfoset": {
    source: "iana",
    extensions: [
      "x3db"
    ]
  },
  "model/x3d+vrml": {
    source: "apache",
    compressible: false,
    extensions: [
      "x3dv",
      "x3dvz"
    ]
  },
  "model/x3d+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "x3d",
      "x3dz"
    ]
  },
  "model/x3d-vrml": {
    source: "iana",
    extensions: [
      "x3dv"
    ]
  },
  "multipart/alternative": {
    source: "iana",
    compressible: false
  },
  "multipart/appledouble": {
    source: "iana"
  },
  "multipart/byteranges": {
    source: "iana"
  },
  "multipart/digest": {
    source: "iana"
  },
  "multipart/encrypted": {
    source: "iana",
    compressible: false
  },
  "multipart/form-data": {
    source: "iana",
    compressible: false
  },
  "multipart/header-set": {
    source: "iana"
  },
  "multipart/mixed": {
    source: "iana"
  },
  "multipart/multilingual": {
    source: "iana"
  },
  "multipart/parallel": {
    source: "iana"
  },
  "multipart/related": {
    source: "iana",
    compressible: false
  },
  "multipart/report": {
    source: "iana"
  },
  "multipart/signed": {
    source: "iana",
    compressible: false
  },
  "multipart/vnd.bint.med-plus": {
    source: "iana"
  },
  "multipart/voice-message": {
    source: "iana"
  },
  "multipart/x-mixed-replace": {
    source: "iana"
  },
  "text/1d-interleaved-parityfec": {
    source: "iana"
  },
  "text/cache-manifest": {
    source: "iana",
    compressible: true,
    extensions: [
      "appcache",
      "manifest"
    ]
  },
  "text/calendar": {
    source: "iana",
    extensions: [
      "ics",
      "ifb"
    ]
  },
  "text/calender": {
    compressible: true
  },
  "text/cmd": {
    compressible: true
  },
  "text/coffeescript": {
    extensions: [
      "coffee",
      "litcoffee"
    ]
  },
  "text/cql": {
    source: "iana"
  },
  "text/cql-expression": {
    source: "iana"
  },
  "text/cql-identifier": {
    source: "iana"
  },
  "text/css": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "css"
    ]
  },
  "text/csv": {
    source: "iana",
    compressible: true,
    extensions: [
      "csv"
    ]
  },
  "text/csv-schema": {
    source: "iana"
  },
  "text/directory": {
    source: "iana"
  },
  "text/dns": {
    source: "iana"
  },
  "text/ecmascript": {
    source: "iana"
  },
  "text/encaprtp": {
    source: "iana"
  },
  "text/enriched": {
    source: "iana"
  },
  "text/fhirpath": {
    source: "iana"
  },
  "text/flexfec": {
    source: "iana"
  },
  "text/fwdred": {
    source: "iana"
  },
  "text/gff3": {
    source: "iana"
  },
  "text/grammar-ref-list": {
    source: "iana"
  },
  "text/html": {
    source: "iana",
    compressible: true,
    extensions: [
      "html",
      "htm",
      "shtml"
    ]
  },
  "text/jade": {
    extensions: [
      "jade"
    ]
  },
  "text/javascript": {
    source: "iana",
    compressible: true
  },
  "text/jcr-cnd": {
    source: "iana"
  },
  "text/jsx": {
    compressible: true,
    extensions: [
      "jsx"
    ]
  },
  "text/less": {
    compressible: true,
    extensions: [
      "less"
    ]
  },
  "text/markdown": {
    source: "iana",
    compressible: true,
    extensions: [
      "markdown",
      "md"
    ]
  },
  "text/mathml": {
    source: "nginx",
    extensions: [
      "mml"
    ]
  },
  "text/mdx": {
    compressible: true,
    extensions: [
      "mdx"
    ]
  },
  "text/mizar": {
    source: "iana"
  },
  "text/n3": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "n3"
    ]
  },
  "text/parameters": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/parityfec": {
    source: "iana"
  },
  "text/plain": {
    source: "iana",
    compressible: true,
    extensions: [
      "txt",
      "text",
      "conf",
      "def",
      "list",
      "log",
      "in",
      "ini"
    ]
  },
  "text/provenance-notation": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    source: "iana"
  },
  "text/prs.lines.tag": {
    source: "iana",
    extensions: [
      "dsc"
    ]
  },
  "text/prs.prop.logic": {
    source: "iana"
  },
  "text/raptorfec": {
    source: "iana"
  },
  "text/red": {
    source: "iana"
  },
  "text/rfc822-headers": {
    source: "iana"
  },
  "text/richtext": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtx"
    ]
  },
  "text/rtf": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtf"
    ]
  },
  "text/rtp-enc-aescm128": {
    source: "iana"
  },
  "text/rtploopback": {
    source: "iana"
  },
  "text/rtx": {
    source: "iana"
  },
  "text/sgml": {
    source: "iana",
    extensions: [
      "sgml",
      "sgm"
    ]
  },
  "text/shaclc": {
    source: "iana"
  },
  "text/shex": {
    source: "iana",
    extensions: [
      "shex"
    ]
  },
  "text/slim": {
    extensions: [
      "slim",
      "slm"
    ]
  },
  "text/spdx": {
    source: "iana",
    extensions: [
      "spdx"
    ]
  },
  "text/strings": {
    source: "iana"
  },
  "text/stylus": {
    extensions: [
      "stylus",
      "styl"
    ]
  },
  "text/t140": {
    source: "iana"
  },
  "text/tab-separated-values": {
    source: "iana",
    compressible: true,
    extensions: [
      "tsv"
    ]
  },
  "text/troff": {
    source: "iana",
    extensions: [
      "t",
      "tr",
      "roff",
      "man",
      "me",
      "ms"
    ]
  },
  "text/turtle": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "ttl"
    ]
  },
  "text/ulpfec": {
    source: "iana"
  },
  "text/uri-list": {
    source: "iana",
    compressible: true,
    extensions: [
      "uri",
      "uris",
      "urls"
    ]
  },
  "text/vcard": {
    source: "iana",
    compressible: true,
    extensions: [
      "vcard"
    ]
  },
  "text/vnd.a": {
    source: "iana"
  },
  "text/vnd.abc": {
    source: "iana"
  },
  "text/vnd.ascii-art": {
    source: "iana"
  },
  "text/vnd.curl": {
    source: "iana",
    extensions: [
      "curl"
    ]
  },
  "text/vnd.curl.dcurl": {
    source: "apache",
    extensions: [
      "dcurl"
    ]
  },
  "text/vnd.curl.mcurl": {
    source: "apache",
    extensions: [
      "mcurl"
    ]
  },
  "text/vnd.curl.scurl": {
    source: "apache",
    extensions: [
      "scurl"
    ]
  },
  "text/vnd.debian.copyright": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.dmclientscript": {
    source: "iana"
  },
  "text/vnd.dvb.subtitle": {
    source: "iana",
    extensions: [
      "sub"
    ]
  },
  "text/vnd.esmertec.theme-descriptor": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.familysearch.gedcom": {
    source: "iana",
    extensions: [
      "ged"
    ]
  },
  "text/vnd.ficlab.flt": {
    source: "iana"
  },
  "text/vnd.fly": {
    source: "iana",
    extensions: [
      "fly"
    ]
  },
  "text/vnd.fmi.flexstor": {
    source: "iana",
    extensions: [
      "flx"
    ]
  },
  "text/vnd.gml": {
    source: "iana"
  },
  "text/vnd.graphviz": {
    source: "iana",
    extensions: [
      "gv"
    ]
  },
  "text/vnd.hans": {
    source: "iana"
  },
  "text/vnd.hgl": {
    source: "iana"
  },
  "text/vnd.in3d.3dml": {
    source: "iana",
    extensions: [
      "3dml"
    ]
  },
  "text/vnd.in3d.spot": {
    source: "iana",
    extensions: [
      "spot"
    ]
  },
  "text/vnd.iptc.newsml": {
    source: "iana"
  },
  "text/vnd.iptc.nitf": {
    source: "iana"
  },
  "text/vnd.latex-z": {
    source: "iana"
  },
  "text/vnd.motorola.reflex": {
    source: "iana"
  },
  "text/vnd.ms-mediapackage": {
    source: "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    source: "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    source: "iana"
  },
  "text/vnd.senx.warpscript": {
    source: "iana"
  },
  "text/vnd.si.uricatalogue": {
    source: "iana"
  },
  "text/vnd.sosi": {
    source: "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "jad"
    ]
  },
  "text/vnd.trolltech.linguist": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.wap.si": {
    source: "iana"
  },
  "text/vnd.wap.sl": {
    source: "iana"
  },
  "text/vnd.wap.wml": {
    source: "iana",
    extensions: [
      "wml"
    ]
  },
  "text/vnd.wap.wmlscript": {
    source: "iana",
    extensions: [
      "wmls"
    ]
  },
  "text/vtt": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "vtt"
    ]
  },
  "text/x-asm": {
    source: "apache",
    extensions: [
      "s",
      "asm"
    ]
  },
  "text/x-c": {
    source: "apache",
    extensions: [
      "c",
      "cc",
      "cxx",
      "cpp",
      "h",
      "hh",
      "dic"
    ]
  },
  "text/x-component": {
    source: "nginx",
    extensions: [
      "htc"
    ]
  },
  "text/x-fortran": {
    source: "apache",
    extensions: [
      "f",
      "for",
      "f77",
      "f90"
    ]
  },
  "text/x-gwt-rpc": {
    compressible: true
  },
  "text/x-handlebars-template": {
    extensions: [
      "hbs"
    ]
  },
  "text/x-java-source": {
    source: "apache",
    extensions: [
      "java"
    ]
  },
  "text/x-jquery-tmpl": {
    compressible: true
  },
  "text/x-lua": {
    extensions: [
      "lua"
    ]
  },
  "text/x-markdown": {
    compressible: true,
    extensions: [
      "mkd"
    ]
  },
  "text/x-nfo": {
    source: "apache",
    extensions: [
      "nfo"
    ]
  },
  "text/x-opml": {
    source: "apache",
    extensions: [
      "opml"
    ]
  },
  "text/x-org": {
    compressible: true,
    extensions: [
      "org"
    ]
  },
  "text/x-pascal": {
    source: "apache",
    extensions: [
      "p",
      "pas"
    ]
  },
  "text/x-processing": {
    compressible: true,
    extensions: [
      "pde"
    ]
  },
  "text/x-sass": {
    extensions: [
      "sass"
    ]
  },
  "text/x-scss": {
    extensions: [
      "scss"
    ]
  },
  "text/x-setext": {
    source: "apache",
    extensions: [
      "etx"
    ]
  },
  "text/x-sfv": {
    source: "apache",
    extensions: [
      "sfv"
    ]
  },
  "text/x-suse-ymp": {
    compressible: true,
    extensions: [
      "ymp"
    ]
  },
  "text/x-uuencode": {
    source: "apache",
    extensions: [
      "uu"
    ]
  },
  "text/x-vcalendar": {
    source: "apache",
    extensions: [
      "vcs"
    ]
  },
  "text/x-vcard": {
    source: "apache",
    extensions: [
      "vcf"
    ]
  },
  "text/xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xml"
    ]
  },
  "text/xml-external-parsed-entity": {
    source: "iana"
  },
  "text/yaml": {
    compressible: true,
    extensions: [
      "yaml",
      "yml"
    ]
  },
  "video/1d-interleaved-parityfec": {
    source: "iana"
  },
  "video/3gpp": {
    source: "iana",
    extensions: [
      "3gp",
      "3gpp"
    ]
  },
  "video/3gpp-tt": {
    source: "iana"
  },
  "video/3gpp2": {
    source: "iana",
    extensions: [
      "3g2"
    ]
  },
  "video/av1": {
    source: "iana"
  },
  "video/bmpeg": {
    source: "iana"
  },
  "video/bt656": {
    source: "iana"
  },
  "video/celb": {
    source: "iana"
  },
  "video/dv": {
    source: "iana"
  },
  "video/encaprtp": {
    source: "iana"
  },
  "video/ffv1": {
    source: "iana"
  },
  "video/flexfec": {
    source: "iana"
  },
  "video/h261": {
    source: "iana",
    extensions: [
      "h261"
    ]
  },
  "video/h263": {
    source: "iana",
    extensions: [
      "h263"
    ]
  },
  "video/h263-1998": {
    source: "iana"
  },
  "video/h263-2000": {
    source: "iana"
  },
  "video/h264": {
    source: "iana",
    extensions: [
      "h264"
    ]
  },
  "video/h264-rcdo": {
    source: "iana"
  },
  "video/h264-svc": {
    source: "iana"
  },
  "video/h265": {
    source: "iana"
  },
  "video/iso.segment": {
    source: "iana",
    extensions: [
      "m4s"
    ]
  },
  "video/jpeg": {
    source: "iana",
    extensions: [
      "jpgv"
    ]
  },
  "video/jpeg2000": {
    source: "iana"
  },
  "video/jpm": {
    source: "apache",
    extensions: [
      "jpm",
      "jpgm"
    ]
  },
  "video/jxsv": {
    source: "iana"
  },
  "video/mj2": {
    source: "iana",
    extensions: [
      "mj2",
      "mjp2"
    ]
  },
  "video/mp1s": {
    source: "iana"
  },
  "video/mp2p": {
    source: "iana"
  },
  "video/mp2t": {
    source: "iana",
    extensions: [
      "ts"
    ]
  },
  "video/mp4": {
    source: "iana",
    compressible: false,
    extensions: [
      "mp4",
      "mp4v",
      "mpg4"
    ]
  },
  "video/mp4v-es": {
    source: "iana"
  },
  "video/mpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "mpeg",
      "mpg",
      "mpe",
      "m1v",
      "m2v"
    ]
  },
  "video/mpeg4-generic": {
    source: "iana"
  },
  "video/mpv": {
    source: "iana"
  },
  "video/nv": {
    source: "iana"
  },
  "video/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "ogv"
    ]
  },
  "video/parityfec": {
    source: "iana"
  },
  "video/pointer": {
    source: "iana"
  },
  "video/quicktime": {
    source: "iana",
    compressible: false,
    extensions: [
      "qt",
      "mov"
    ]
  },
  "video/raptorfec": {
    source: "iana"
  },
  "video/raw": {
    source: "iana"
  },
  "video/rtp-enc-aescm128": {
    source: "iana"
  },
  "video/rtploopback": {
    source: "iana"
  },
  "video/rtx": {
    source: "iana"
  },
  "video/scip": {
    source: "iana"
  },
  "video/smpte291": {
    source: "iana"
  },
  "video/smpte292m": {
    source: "iana"
  },
  "video/ulpfec": {
    source: "iana"
  },
  "video/vc1": {
    source: "iana"
  },
  "video/vc2": {
    source: "iana"
  },
  "video/vnd.cctv": {
    source: "iana"
  },
  "video/vnd.dece.hd": {
    source: "iana",
    extensions: [
      "uvh",
      "uvvh"
    ]
  },
  "video/vnd.dece.mobile": {
    source: "iana",
    extensions: [
      "uvm",
      "uvvm"
    ]
  },
  "video/vnd.dece.mp4": {
    source: "iana"
  },
  "video/vnd.dece.pd": {
    source: "iana",
    extensions: [
      "uvp",
      "uvvp"
    ]
  },
  "video/vnd.dece.sd": {
    source: "iana",
    extensions: [
      "uvs",
      "uvvs"
    ]
  },
  "video/vnd.dece.video": {
    source: "iana",
    extensions: [
      "uvv",
      "uvvv"
    ]
  },
  "video/vnd.directv.mpeg": {
    source: "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    source: "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    source: "iana"
  },
  "video/vnd.dvb.file": {
    source: "iana",
    extensions: [
      "dvb"
    ]
  },
  "video/vnd.fvt": {
    source: "iana",
    extensions: [
      "fvt"
    ]
  },
  "video/vnd.hns.video": {
    source: "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    source: "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    source: "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    source: "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    source: "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    source: "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    source: "iana"
  },
  "video/vnd.motorola.video": {
    source: "iana"
  },
  "video/vnd.motorola.videop": {
    source: "iana"
  },
  "video/vnd.mpegurl": {
    source: "iana",
    extensions: [
      "mxu",
      "m4u"
    ]
  },
  "video/vnd.ms-playready.media.pyv": {
    source: "iana",
    extensions: [
      "pyv"
    ]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    source: "iana"
  },
  "video/vnd.nokia.mp4vr": {
    source: "iana"
  },
  "video/vnd.nokia.videovoip": {
    source: "iana"
  },
  "video/vnd.objectvideo": {
    source: "iana"
  },
  "video/vnd.radgamettools.bink": {
    source: "iana"
  },
  "video/vnd.radgamettools.smacker": {
    source: "iana"
  },
  "video/vnd.sealed.mpeg1": {
    source: "iana"
  },
  "video/vnd.sealed.mpeg4": {
    source: "iana"
  },
  "video/vnd.sealed.swf": {
    source: "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    source: "iana"
  },
  "video/vnd.uvvu.mp4": {
    source: "iana",
    extensions: [
      "uvu",
      "uvvu"
    ]
  },
  "video/vnd.vivo": {
    source: "iana",
    extensions: [
      "viv"
    ]
  },
  "video/vnd.youtube.yt": {
    source: "iana"
  },
  "video/vp8": {
    source: "iana"
  },
  "video/vp9": {
    source: "iana"
  },
  "video/webm": {
    source: "apache",
    compressible: false,
    extensions: [
      "webm"
    ]
  },
  "video/x-f4v": {
    source: "apache",
    extensions: [
      "f4v"
    ]
  },
  "video/x-fli": {
    source: "apache",
    extensions: [
      "fli"
    ]
  },
  "video/x-flv": {
    source: "apache",
    compressible: false,
    extensions: [
      "flv"
    ]
  },
  "video/x-m4v": {
    source: "apache",
    extensions: [
      "m4v"
    ]
  },
  "video/x-matroska": {
    source: "apache",
    compressible: false,
    extensions: [
      "mkv",
      "mk3d",
      "mks"
    ]
  },
  "video/x-mng": {
    source: "apache",
    extensions: [
      "mng"
    ]
  },
  "video/x-ms-asf": {
    source: "apache",
    extensions: [
      "asf",
      "asx"
    ]
  },
  "video/x-ms-vob": {
    source: "apache",
    extensions: [
      "vob"
    ]
  },
  "video/x-ms-wm": {
    source: "apache",
    extensions: [
      "wm"
    ]
  },
  "video/x-ms-wmv": {
    source: "apache",
    compressible: false,
    extensions: [
      "wmv"
    ]
  },
  "video/x-ms-wmx": {
    source: "apache",
    extensions: [
      "wmx"
    ]
  },
  "video/x-ms-wvx": {
    source: "apache",
    extensions: [
      "wvx"
    ]
  },
  "video/x-msvideo": {
    source: "apache",
    extensions: [
      "avi"
    ]
  },
  "video/x-sgi-movie": {
    source: "apache",
    extensions: [
      "movie"
    ]
  },
  "video/x-smv": {
    source: "apache",
    extensions: [
      "smv"
    ]
  },
  "x-conference/x-cooltalk": {
    source: "apache",
    extensions: [
      "ice"
    ]
  },
  "x-shader/x-fragment": {
    compressible: true
  },
  "x-shader/x-vertex": {
    compressible: true
  }
};
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
var mimeDb$1 = require$$0;
var mimeDb = mimeDb$1;
var extList$1 = function() {
  var ret = {};
  Object.keys(mimeDb).forEach(function(x) {
    var val = mimeDb[x];
    if (val.extensions && val.extensions.length > 0) {
      val.extensions.forEach(function(y) {
        ret[y] = x;
      });
    }
  });
  return ret;
};
var sortKeysLength$1 = {};
var toString = Object.prototype.toString;
var isPlainObj$5 = function(x) {
  var prototype;
  return toString.call(x) === "[object Object]" && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
};
var isPlainObj$4 = isPlainObj$5;
var sortKeys$1 = function(obj, opts) {
  if (!isPlainObj$4(obj)) {
    throw new TypeError("Expected a plain object");
  }
  opts = opts || {};
  if (typeof opts === "function") {
    opts = { compare: opts };
  }
  var deep = opts.deep;
  var seenInput = [];
  var seenOutput = [];
  var sortKeys2 = function(x) {
    var seenIndex = seenInput.indexOf(x);
    if (seenIndex !== -1) {
      return seenOutput[seenIndex];
    }
    var ret = {};
    var keys = Object.keys(x).sort(opts.compare);
    seenInput.push(x);
    seenOutput.push(ret);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var val = x[key];
      ret[key] = deep && isPlainObj$4(val) ? sortKeys2(val) : val;
    }
    return ret;
  };
  return sortKeys2(obj);
};
var sortKeys = sortKeys$1;
sortKeysLength$1.desc = function(obj) {
  return sortKeys(obj, function(a, b) {
    return b.length - a.length;
  });
};
sortKeysLength$1.asc = function(obj) {
  return sortKeys(obj, function(a, b) {
    return a.length - b.length;
  });
};
const extList = extList$1;
const sortKeysLength = sortKeysLength$1;
extName$1.exports = (str) => {
  const obj = sortKeysLength.desc(extList());
  const exts = Object.keys(obj).filter((x) => str.endsWith(x));
  if (exts.length === 0) {
    return [];
  }
  return exts.map((x) => ({
    ext: x,
    mime: obj[x]
  }));
};
extName$1.exports.mime = (str) => {
  const obj = sortKeysLength.desc(extList());
  const exts = Object.keys(obj).filter((x) => obj[x] === str);
  if (exts.length === 0) {
    return [];
  }
  return exts.map((x) => ({
    ext: x,
    mime: obj[x]
  }));
};
const path$2 = require$$0__default$3["default"];
const { app, BrowserWindow, shell, dialog } = require$$0__default["default"];
const unusedFilename = unusedFilename$2.exports;
const pupa = pupa$1;
const extName = extName$1.exports;
class CancelError extends Error {
}
const getFilenameFromMime = (name, mime) => {
  const extensions = extName.mime(mime);
  if (extensions.length !== 1) {
    return name;
  }
  return `${name}.${extensions[0].ext}`;
};
const majorElectronVersion = () => {
  const version = process.versions.electron.split(".");
  return Number.parseInt(version[0], 10);
};
const getWindowFromBrowserView = (webContents2) => {
  for (const currentWindow of BrowserWindow.getAllWindows()) {
    for (const currentBrowserView of currentWindow.getBrowserViews()) {
      if (currentBrowserView.webContents.id === webContents2.id) {
        return currentWindow;
      }
    }
  }
};
const getWindowFromWebContents = (webContents2) => {
  let window_;
  const webContentsType = webContents2.getType();
  switch (webContentsType) {
    case "webview":
      window_ = BrowserWindow.fromWebContents(webContents2.hostWebContents);
      break;
    case "browserView":
      window_ = getWindowFromBrowserView(webContents2);
      break;
    default:
      window_ = BrowserWindow.fromWebContents(webContents2);
      break;
  }
  return window_;
};
function registerListener(session, options, callback = () => {
}) {
  const downloadItems = new Set();
  let receivedBytes = 0;
  let completedBytes = 0;
  let totalBytes = 0;
  const activeDownloadItems = () => downloadItems.size;
  const progressDownloadItems = () => receivedBytes / totalBytes;
  options = __spreadValues({
    showBadge: true,
    showProgressBar: true
  }, options);
  const listener = (event, item, webContents2) => {
    downloadItems.add(item);
    totalBytes += item.getTotalBytes();
    const window_ = majorElectronVersion() >= 12 ? BrowserWindow.fromWebContents(webContents2) : getWindowFromWebContents(webContents2);
    if (options.directory && !path$2.isAbsolute(options.directory)) {
      throw new Error("The `directory` option must be an absolute path");
    }
    const directory = options.directory || app.getPath("downloads");
    let filePath;
    if (options.filename) {
      filePath = path$2.join(directory, options.filename);
    } else {
      const filename = item.getFilename();
      const name = path$2.extname(filename) ? filename : getFilenameFromMime(filename, item.getMimeType());
      filePath = options.overwrite ? path$2.join(directory, name) : unusedFilename.sync(path$2.join(directory, name));
    }
    const errorMessage = options.errorMessage || "The download of {filename} was interrupted";
    if (options.saveAs) {
      item.setSaveDialogOptions(__spreadValues({ defaultPath: filePath }, options.dialogOptions));
    } else {
      item.setSavePath(filePath);
    }
    item.on("updated", () => {
      receivedBytes = completedBytes;
      for (const item2 of downloadItems) {
        receivedBytes += item2.getReceivedBytes();
      }
      if (options.showBadge && ["darwin", "linux"].includes(process.platform)) {
        app.badgeCount = activeDownloadItems();
      }
      if (!window_.isDestroyed() && options.showProgressBar) {
        window_.setProgressBar(progressDownloadItems());
      }
      if (typeof options.onProgress === "function") {
        const itemTransferredBytes = item.getReceivedBytes();
        const itemTotalBytes = item.getTotalBytes();
        options.onProgress({
          percent: itemTotalBytes ? itemTransferredBytes / itemTotalBytes : 0,
          transferredBytes: itemTransferredBytes,
          totalBytes: itemTotalBytes
        });
      }
      if (typeof options.onTotalProgress === "function") {
        options.onTotalProgress({
          percent: progressDownloadItems(),
          transferredBytes: receivedBytes,
          totalBytes
        });
      }
    });
    item.on("done", (event2, state) => {
      completedBytes += item.getTotalBytes();
      downloadItems.delete(item);
      if (options.showBadge && ["darwin", "linux"].includes(process.platform)) {
        app.badgeCount = activeDownloadItems();
      }
      if (!window_.isDestroyed() && !activeDownloadItems()) {
        window_.setProgressBar(-1);
        receivedBytes = 0;
        completedBytes = 0;
        totalBytes = 0;
      }
      if (options.unregisterWhenDone) {
        session.removeListener("will-download", listener);
      }
      if (state === "cancelled") {
        if (typeof options.onCancel === "function") {
          options.onCancel(item);
        }
        callback(new CancelError());
      } else if (state === "interrupted") {
        const message = pupa(errorMessage, { filename: path$2.basename(filePath) });
        callback(new Error(message));
      } else if (state === "completed") {
        const savePath = item.getSavePath();
        if (process.platform === "darwin") {
          app.dock.downloadFinished(savePath);
        }
        if (options.openFolderWhenDone) {
          shell.showItemInFolder(savePath);
        }
        if (typeof options.onCompleted === "function") {
          options.onCompleted({
            fileName: item.getFilename(),
            filename: item.getFilename(),
            path: savePath,
            fileSize: item.getReceivedBytes(),
            mimeType: item.getMimeType(),
            url: item.getURL()
          });
        }
        callback(null, item);
      }
    });
    if (typeof options.onStarted === "function") {
      options.onStarted(item);
    }
  };
  session.on("will-download", listener);
}
electronDl.exports = (options = {}) => {
  app.on("session-created", (session) => {
    registerListener(session, options, (error, _) => {
      if (error) {
        const errorTitle = options.errorTitle || "Download Error";
        dialog.showErrorBox(errorTitle, error.message);
      }
    });
  });
};
electronDl.exports.download = (window_, url2, options) => new Promise((resolve, reject) => {
  options = __spreadProps(__spreadValues({}, options), {
    unregisterWhenDone: true
  });
  registerListener(window_.webContents.session, options, (error, item) => {
    if (error) {
      reject(error);
    } else {
      resolve(item);
    }
  });
  window_.webContents.downloadURL(url2);
});
electronDl.exports.CancelError = CancelError;
const electron$1 = require$$0__default["default"];
if (typeof electron$1 === "string") {
  throw new TypeError("Not running in an Electron environment!");
}
const isEnvSet = "ELECTRON_IS_DEV" in process.env;
const getFromEnv = Number.parseInt({}.ELECTRON_IS_DEV, 10) === 1;
var electronIsDev = isEnvSet ? getFromEnv : !electron$1.app.isPackaged;
const electron = require$$0__default["default"];
const cliTruncate = cliTruncate$1;
const { download } = electronDl.exports;
const isDev = electronIsDev;
const webContents = (win) => win.webContents || win.id && win;
const decorateMenuItem = (menuItem) => {
  return (options = {}) => {
    if (options.transform && !options.click) {
      menuItem.transform = options.transform;
    }
    return menuItem;
  };
};
const removeUnusedMenuItems = (menuTemplate) => {
  let notDeletedPreviousElement;
  return menuTemplate.filter((menuItem) => menuItem !== void 0 && menuItem !== false && menuItem.visible !== false && menuItem.visible !== "").filter((menuItem, index, array) => {
    const toDelete = menuItem.type === "separator" && (!notDeletedPreviousElement || index === array.length - 1 || array[index + 1].type === "separator");
    notDeletedPreviousElement = toDelete ? notDeletedPreviousElement : menuItem;
    return !toDelete;
  });
};
const create = (win, options) => {
  const handleContextMenu = (event, props) => {
    if (typeof options.shouldShowMenu === "function" && options.shouldShowMenu(event, props) === false) {
      return;
    }
    const { editFlags } = props;
    const hasText = props.selectionText.length > 0;
    const isLink = Boolean(props.linkURL);
    const can = (type) => editFlags[`can${type}`] && hasText;
    const defaultActions = {
      separator: () => ({ type: "separator" }),
      learnSpelling: decorateMenuItem({
        id: "learnSpelling",
        label: "&Learn Spelling",
        visible: Boolean(props.isEditable && hasText && props.misspelledWord),
        click() {
          const target = webContents(win);
          target.session.addWordToSpellCheckerDictionary(props.misspelledWord);
        }
      }),
      lookUpSelection: decorateMenuItem({
        id: "lookUpSelection",
        label: "Look Up \u201C{selection}\u201D",
        visible: process.platform === "darwin" && hasText && !isLink,
        click() {
          if (process.platform === "darwin") {
            webContents(win).showDefinitionForSelection();
          }
        }
      }),
      searchWithGoogle: decorateMenuItem({
        id: "searchWithGoogle",
        label: "&Search with Google",
        visible: hasText,
        click() {
          const url2 = new URL("https://www.google.com/search");
          url2.searchParams.set("q", props.selectionText);
          electron.shell.openExternal(url2.toString());
        }
      }),
      cut: decorateMenuItem({
        id: "cut",
        label: "Cu&t",
        enabled: can("Cut"),
        visible: props.isEditable,
        click(menuItem) {
          const target = webContents(win);
          if (!menuItem.transform && target) {
            target.cut();
          } else {
            props.selectionText = menuItem.transform ? menuItem.transform(props.selectionText) : props.selectionText;
            electron.clipboard.writeText(props.selectionText);
          }
        }
      }),
      copy: decorateMenuItem({
        id: "copy",
        label: "&Copy",
        enabled: can("Copy"),
        visible: props.isEditable || hasText,
        click(menuItem) {
          const target = webContents(win);
          if (!menuItem.transform && target) {
            target.copy();
          } else {
            props.selectionText = menuItem.transform ? menuItem.transform(props.selectionText) : props.selectionText;
            electron.clipboard.writeText(props.selectionText);
          }
        }
      }),
      paste: decorateMenuItem({
        id: "paste",
        label: "&Paste",
        enabled: editFlags.canPaste,
        visible: props.isEditable,
        click(menuItem) {
          const target = webContents(win);
          if (menuItem.transform) {
            let clipboardContent = electron.clipboard.readText(props.selectionText);
            clipboardContent = menuItem.transform ? menuItem.transform(clipboardContent) : clipboardContent;
            target.insertText(clipboardContent);
          } else {
            target.paste();
          }
        }
      }),
      selectAll: decorateMenuItem({
        id: "selectAll",
        label: "Select &All",
        click() {
          webContents(win).selectAll();
        }
      }),
      saveImage: decorateMenuItem({
        id: "saveImage",
        label: "Save I&mage",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL);
        }
      }),
      saveImageAs: decorateMenuItem({
        id: "saveImageAs",
        label: "Sa&ve Image As\u2026",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL, { saveAs: true });
        }
      }),
      saveVideo: decorateMenuItem({
        id: "saveVideo",
        label: "Save Vide&o",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL);
        }
      }),
      saveVideoAs: decorateMenuItem({
        id: "saveVideoAs",
        label: "Save Video& As\u2026",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL, { saveAs: true });
        }
      }),
      copyLink: decorateMenuItem({
        id: "copyLink",
        label: "Copy Lin&k",
        visible: props.linkURL.length > 0 && props.mediaType === "none",
        click(menuItem) {
          props.linkURL = menuItem.transform ? menuItem.transform(props.linkURL) : props.linkURL;
          electron.clipboard.write({
            bookmark: props.linkText,
            text: props.linkURL
          });
        }
      }),
      saveLinkAs: decorateMenuItem({
        id: "saveLinkAs",
        label: "Save Link As\u2026",
        visible: props.linkURL.length > 0 && props.mediaType === "none",
        click(menuItem) {
          props.linkURL = menuItem.transform ? menuItem.transform(props.linkURL) : props.linkURL;
          download(win, props.linkURL, { saveAs: true });
        }
      }),
      copyImage: decorateMenuItem({
        id: "copyImage",
        label: "Cop&y Image",
        visible: props.mediaType === "image",
        click() {
          webContents(win).copyImageAt(props.x, props.y);
        }
      }),
      copyImageAddress: decorateMenuItem({
        id: "copyImageAddress",
        label: "C&opy Image Address",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          electron.clipboard.write({
            bookmark: props.srcURL,
            text: props.srcURL
          });
        }
      }),
      copyVideoAddress: decorateMenuItem({
        id: "copyVideoAddress",
        label: "Copy Video Ad&dress",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          electron.clipboard.write({
            bookmark: props.srcURL,
            text: props.srcURL
          });
        }
      }),
      inspect: () => ({
        id: "inspect",
        label: "I&nspect Element",
        click() {
          webContents(win).inspectElement(props.x, props.y);
          if (webContents(win).isDevToolsOpened()) {
            webContents(win).devToolsWebContents.focus();
          }
        }
      }),
      services: () => ({
        id: "services",
        label: "Services",
        role: "services",
        visible: process.platform === "darwin" && (props.isEditable || hasText)
      })
    };
    const shouldShowInspectElement = typeof options.showInspectElement === "boolean" ? options.showInspectElement : isDev;
    const shouldShowSelectAll = options.showSelectAll || options.showSelectAll !== false && process.platform !== "darwin";
    function word(suggestion) {
      return {
        id: "dictionarySuggestions",
        label: suggestion,
        visible: Boolean(props.isEditable && hasText && props.misspelledWord),
        click(menuItem) {
          const target = webContents(win);
          target.replaceMisspelling(menuItem.label);
        }
      };
    }
    let dictionarySuggestions = [];
    if (hasText && props.misspelledWord && props.dictionarySuggestions.length > 0) {
      dictionarySuggestions = props.dictionarySuggestions.map((suggestion) => word(suggestion));
    } else {
      dictionarySuggestions.push({
        id: "dictionarySuggestions",
        label: "No Guesses Found",
        visible: Boolean(hasText && props.misspelledWord),
        enabled: false
      });
    }
    let menuTemplate = [
      dictionarySuggestions.length > 0 && defaultActions.separator(),
      ...dictionarySuggestions,
      defaultActions.separator(),
      options.showLearnSpelling !== false && defaultActions.learnSpelling(),
      defaultActions.separator(),
      options.showLookUpSelection !== false && defaultActions.lookUpSelection(),
      defaultActions.separator(),
      options.showSearchWithGoogle !== false && defaultActions.searchWithGoogle(),
      defaultActions.separator(),
      defaultActions.cut(),
      defaultActions.copy(),
      defaultActions.paste(),
      shouldShowSelectAll && defaultActions.selectAll(),
      defaultActions.separator(),
      options.showSaveImage && defaultActions.saveImage(),
      options.showSaveImageAs && defaultActions.saveImageAs(),
      options.showCopyImage !== false && defaultActions.copyImage(),
      options.showCopyImageAddress && defaultActions.copyImageAddress(),
      options.showSaveVideo && defaultActions.saveVideo(),
      options.showSaveVideoAs && defaultActions.saveVideoAs(),
      options.showCopyVideoAddress && defaultActions.copyVideoAddress(),
      defaultActions.separator(),
      options.showCopyLink !== false && defaultActions.copyLink(),
      options.showSaveLinkAs && defaultActions.saveLinkAs(),
      defaultActions.separator(),
      shouldShowInspectElement && defaultActions.inspect(),
      options.showServices && defaultActions.services(),
      defaultActions.separator()
    ];
    if (options.menu) {
      menuTemplate = options.menu(defaultActions, props, win, dictionarySuggestions, event);
    }
    if (options.prepend) {
      const result = options.prepend(defaultActions, props, win, event);
      if (Array.isArray(result)) {
        menuTemplate.unshift(...result);
      }
    }
    if (options.append) {
      const result = options.append(defaultActions, props, win, event);
      if (Array.isArray(result)) {
        menuTemplate.push(...result);
      }
    }
    menuTemplate = removeUnusedMenuItems(menuTemplate);
    for (const menuItem of menuTemplate) {
      if (options.labels && options.labels[menuItem.id]) {
        menuItem.label = options.labels[menuItem.id];
      }
      if (typeof menuItem.label === "string" && menuItem.label.includes("{selection}")) {
        const selectionString = typeof props.selectionText === "string" ? props.selectionText.trim() : "";
        menuItem.label = menuItem.label.replace("{selection}", cliTruncate(selectionString, 25).replace(/&/g, "&&"));
      }
    }
    if (menuTemplate.length > 0) {
      const menu = electron.Menu.buildFromTemplate(menuTemplate);
      if (typeof options.onShow === "function") {
        menu.on("menu-will-show", options.onShow);
      }
      if (typeof options.onClose === "function") {
        menu.on("menu-will-close", options.onClose);
      }
      menu.popup(win);
    }
  };
  webContents(win).on("context-menu", handleContextMenu);
  return () => {
    if (win.isDestroyed()) {
      return;
    }
    webContents(win).removeListener("context-menu", handleContextMenu);
  };
};
var electronContextMenu = (options = {}) => {
  if (process.type === "renderer") {
    throw new Error("Cannot use electron-context-menu in the renderer process!");
  }
  let isDisposed = false;
  const disposables = [];
  const init2 = (win) => {
    if (isDisposed) {
      return;
    }
    const disposeMenu = create(win, options);
    disposables.push(disposeMenu);
    const removeDisposable = () => {
      const index = disposables.indexOf(disposeMenu);
      if (index !== -1) {
        disposables.splice(index, 1);
      }
    };
    if (typeof win.once !== "undefined") {
      win.once("closed", removeDisposable);
    }
    disposables.push(() => {
      win.off("closed", removeDisposable);
    });
  };
  const dispose = () => {
    for (const dispose2 of disposables) {
      dispose2();
    }
    disposables.length = 0;
    isDisposed = true;
  };
  if (options.window) {
    const win = options.window;
    if (webContents(win) === void 0) {
      const onDomReady = () => {
        init2(win);
      };
      const listenerFunction = win.addEventListener || win.addListener;
      listenerFunction("dom-ready", onDomReady, { once: true });
      disposables.push(() => {
        win.removeEventListener("dom-ready", onDomReady, { once: true });
      });
      return dispose;
    }
    init2(win);
    return dispose;
  }
  for (const win of electron.BrowserWindow.getAllWindows()) {
    init2(win);
  }
  const onWindowCreated = (event, win) => {
    init2(win);
  };
  electron.app.on("browser-window-created", onWindowCreated);
  disposables.push(() => {
    electron.app.removeListener("browser-window-created", onWindowCreated);
  });
  return dispose;
};
let listWindow = [];
let mainWindow;
const defaultWindowUrl = electronIsDev$1 ? "http://localhost:3000" : require$$0$5.format({
  pathname: require$$0__default$3["default"].join(__dirname, "../renderer/out/index.html"),
  protocol: "file:",
  slashes: true
});
const preload_js_path = require$$0__default$3["default"].resolve(__dirname, "../../preload/dist/", "index.js");
async function createMainWindow() {
  if (mainWindow) {
    return mainWindow;
  }
  const window2 = new require$$0$1.BrowserWindow({
    show: false,
    width: 800,
    height: 600,
    backgroundColor: isMacOS ? "#D1D5DB" : "#6B7280",
    titleBarStyle: isMacOS ? "hiddenInset" : "default",
    frame: isMacOS,
    webPreferences: {
      devTools: electronIsDev$1,
      contextIsolation: true,
      nodeIntegration: false,
      preload: preload_js_path,
      disableDialogs: false,
      safeDialogs: true,
      enableWebSQL: false
    }
  });
  mainWindow = window2;
  if (electronIsDev$1) {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  }
  window2.on("closed", () => {
    mainWindow = null;
    listWindow.forEach((instance) => {
      var _a;
      (_a = instance.window.webContents) == null ? void 0 : _a.destroy();
    });
    listWindow = [];
  });
  if (electronIsDev$1) {
    window2.loadURL(`${defaultWindowUrl}/tabs`);
  } else {
    window2.loadURL("app://-/tabs");
  }
  window2.show();
  const windowView = await createWindow(defaultWindowUrl + "/");
  setTab(windowView);
}
async function createWindow(href) {
  const window2 = new require$$0$1.BrowserView({
    webPreferences: {
      devTools: electronIsDev$1,
      contextIsolation: true,
      nodeIntegration: false,
      preload: preload_js_path,
      disableDialogs: false,
      safeDialogs: true,
      enableWebSQL: false
    }
  });
  electronContextMenu({
    window: window2
  });
  window2.webContents.loadURL(href);
  if (electronIsDev$1) {
    window2.webContents.openDevTools({ mode: "detach" });
  }
  window2.webContents.on("did-finish-load", () => {
  });
  listWindow.push({
    window: window2,
    name: `Tab-${uuid()}`
  });
  mainWindow.webContents.send("tabChange", getTabData());
  return window2;
}
function getTabData() {
  var _a;
  return {
    tabs: listWindow.map((instance) => instance.name),
    active: ((_a = listWindow.find((instance) => {
      var _a2, _b;
      return instance.window.webContents.id === ((_b = (_a2 = mainWindow.getBrowserView()) == null ? void 0 : _a2.webContents) == null ? void 0 : _b.id);
    })) == null ? void 0 : _a.name) || ""
  };
}
function setTab(instance) {
  mainWindow.setBrowserView(instance);
  instance.setBounds({ x: 0, y: 36, width: mainWindow.getBounds().width, height: mainWindow.getBounds().height - 36 });
  instance.setAutoResize({ width: true, height: true, horizontal: false, vertical: false });
  mainWindow.webContents.send("tabChange", getTabData());
}
async function restoreOrCreateWindow() {
  let window2 = mainWindow;
  if (window2 === void 0) {
    await createMainWindow();
    window2 = mainWindow;
  }
  if (window2.isMinimized()) {
    window2.restore();
  }
  window2.focus();
}
var renderer = { exports: {} };
var scope = scopeFactory$1;
function scopeFactory$1(logger2) {
  return Object.defineProperties(scope2, {
    defaultLabel: { value: "", writable: true },
    labelPadding: { value: true, writable: true },
    maxLabelLength: { value: 0, writable: true },
    labelLength: {
      get() {
        switch (typeof scope2.labelPadding) {
          case "boolean":
            return scope2.labelPadding ? scope2.maxLabelLength : 0;
          case "number":
            return scope2.labelPadding;
          default:
            return 0;
        }
      }
    }
  });
  function scope2(label) {
    scope2.maxLabelLength = Math.max(scope2.maxLabelLength, label.length);
    const newScope = {};
    for (const level of [...logger2.levels, "log"]) {
      newScope[level] = (...d) => logger2.logData(d, { level, scope: label });
    }
    return newScope;
  }
}
const scopeFactory = scope;
class Logger$1 {
  static instances = {};
  errorHandler = null;
  eventLogger = null;
  functions = {};
  hooks = [];
  isDev = false;
  levels = null;
  logId = null;
  scope = null;
  transports = {};
  variables = {};
  constructor({
    allowUnknownLevel = false,
    errorHandler,
    eventLogger,
    initializeFn,
    isDev: isDev2 = false,
    levels = ["error", "warn", "info", "verbose", "debug", "silly"],
    logId,
    transportFactories = {},
    variables
  } = {}) {
    this.addLevel = this.addLevel.bind(this);
    this.create = this.create.bind(this);
    this.logData = this.logData.bind(this);
    this.processMessage = this.processMessage.bind(this);
    this.allowUnknownLevel = allowUnknownLevel;
    this.initializeFn = initializeFn;
    this.isDev = isDev2;
    this.levels = levels;
    this.logId = logId;
    this.transportFactories = transportFactories;
    this.variables = variables || {};
    this.scope = scopeFactory(this);
    this.addLevel("log", false);
    for (const name of this.levels) {
      this.addLevel(name, false);
    }
    this.errorHandler = errorHandler;
    errorHandler == null ? void 0 : errorHandler.setOptions({ logFn: this.error });
    this.eventLogger = eventLogger;
    eventLogger == null ? void 0 : eventLogger.setOptions({ logger: this });
    for (const [name, factory] of Object.entries(transportFactories)) {
      this.transports[name] = factory(this);
    }
    Logger$1.instances[logId] = this;
  }
  static getInstance({ logId }) {
    return this.instances[logId] || this.instances.default;
  }
  addLevel(level, index = this.levels.length) {
    if (index !== false) {
      this.levels.splice(index, 0, level);
    }
    this[level] = (...args) => this.logData(args, { level });
    this.functions[level] = this[level];
  }
  catchErrors(options) {
    this.processMessage({
      data: ["log.catchErrors is deprecated. Use log.errorHandler instead"],
      level: "warn"
    }, { transports: ["console"] });
    return this.errorHandler.startCatching(options);
  }
  create(options) {
    if (typeof options === "string") {
      options = { logId: options };
    }
    return new Logger$1(__spreadProps(__spreadValues({}, options), {
      errorHandler: this.errorHandler,
      initializeFn: this.initializeFn,
      isDev: this.isDev,
      transportFactories: this.transportFactories,
      variables: __spreadValues({}, this.variables)
    }));
  }
  compareLevels(passLevel, checkLevel, levels = this.levels) {
    const pass = levels.indexOf(passLevel);
    const check = levels.indexOf(checkLevel);
    if (check === -1 || pass === -1) {
      return true;
    }
    return check <= pass;
  }
  initialize({ preload = true, spyRendererConsole = false } = {}) {
    this.initializeFn({ logger: this, preload, spyRendererConsole });
  }
  logData(data, options = {}) {
    this.processMessage(__spreadValues({ data }, options));
  }
  processMessage(message, { transports = this.transports } = {}) {
    if (message.cmd === "errorHandler") {
      this.errorHandler.handle(message.error, {
        errorName: message.errorName,
        processType: "renderer",
        showDialog: Boolean(message.showDialog)
      });
      return;
    }
    let level = message.level;
    if (!this.allowUnknownLevel) {
      level = this.levels.includes(message.level) ? message.level : "info";
    }
    const normalizedMessage = __spreadProps(__spreadValues({
      date: new Date()
    }, message), {
      level,
      variables: __spreadValues(__spreadValues({}, this.variables), message.variables)
    });
    for (const [transName, transFn] of this.transportEntries(transports)) {
      if (typeof transFn !== "function" || transFn.level === false) {
        continue;
      }
      if (!this.compareLevels(transFn.level, message.level)) {
        continue;
      }
      try {
        const transformedMsg = this.hooks.reduce((msg, hook) => {
          return msg ? hook(msg, transFn, transName) : msg;
        }, normalizedMessage);
        if (transformedMsg) {
          transFn(__spreadProps(__spreadValues({}, transformedMsg), { data: [...transformedMsg.data] }));
        }
      } catch (e) {
        this.processInternalErrorFn(e);
      }
    }
  }
  processInternalErrorFn(_e) {
  }
  transportEntries(transports = this.transports) {
    const transportArray = Array.isArray(transports) ? transports : Object.entries(transports);
    return transportArray.map((item) => {
      switch (typeof item) {
        case "string":
          return this.transports[item] ? [item, this.transports[item]] : null;
        case "function":
          return [item.name, item];
        default:
          return Array.isArray(item) ? item : null;
      }
    }).filter(Boolean);
  }
}
var Logger_1 = Logger$1;
const consoleError = console.error;
class RendererErrorHandler {
  logFn = null;
  onError = null;
  showDialog = false;
  preventDefault = true;
  constructor({ logFn = null } = {}) {
    this.handleError = this.handleError.bind(this);
    this.handleRejection = this.handleRejection.bind(this);
    this.startCatching = this.startCatching.bind(this);
    this.logFn = logFn;
  }
  handle(error, {
    logFn = this.logFn,
    errorName = "",
    onError = this.onError,
    showDialog = this.showDialog
  } = {}) {
    try {
      if ((onError == null ? void 0 : onError({ error, errorName, processType: "renderer" })) !== false) {
        logFn({ error, errorName, showDialog });
      }
    } catch {
      consoleError(error);
    }
  }
  setOptions({ logFn, onError, preventDefault, showDialog }) {
    if (typeof logFn === "function") {
      this.logFn = logFn;
    }
    if (typeof onError === "function") {
      this.onError = onError;
    }
    if (typeof preventDefault === "boolean") {
      this.preventDefault = preventDefault;
    }
    if (typeof showDialog === "boolean") {
      this.showDialog = showDialog;
    }
  }
  startCatching({ onError, showDialog } = {}) {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.setOptions({ onError, showDialog });
    window.addEventListener("error", (event) => {
      var _a;
      this.preventDefault && ((_a = event.preventDefault) == null ? void 0 : _a.call(event));
      this.handleError(event.error || event);
    });
    window.addEventListener("unhandledrejection", (event) => {
      var _a;
      this.preventDefault && ((_a = event.preventDefault) == null ? void 0 : _a.call(event));
      this.handleRejection(event.reason || event);
    });
  }
  handleError(error) {
    this.handle(error, { errorName: "Unhandled" });
  }
  handleRejection(reason) {
    const error = reason instanceof Error ? reason : new Error(JSON.stringify(reason));
    this.handle(error, { errorName: "Unhandled rejection" });
  }
}
var RendererErrorHandler_1 = RendererErrorHandler;
var console_1 = consoleTransportRendererFactory;
const consoleMethods = {
  error: console.error,
  warn: console.warn,
  info: console.info,
  verbose: console.info,
  debug: console.debug,
  silly: console.debug,
  log: console.log
};
function consoleTransportRendererFactory(logger2) {
  return Object.assign(transport, {
    format: "{h}:{i}:{s}.{ms}{scope} \u203A {text}",
    formatDataFn(_a) {
      var _b = _a, {
        data = [],
        date = new Date(),
        format = transport.format,
        logId = logger2.logId,
        scope: scope2 = logger2.scopeName
      } = _b, message = __objRest(_b, [
        "data",
        "date",
        "format",
        "logId",
        "scope"
      ]);
      if (typeof format === "function") {
        return format(__spreadProps(__spreadValues({}, message), { data, date, logId, scope: scope2 }));
      }
      if (typeof format !== "string") {
        return data;
      }
      data.unshift(format);
      if (typeof data[1] === "string" && data[1].match(/%[1cdfiOos]/)) {
        data = [`${data[0]} ${data[1]}`, ...data.slice(2)];
      }
      data[0] = data[0].replace(/\{(\w+)}/g, (substring, name) => {
        var _a2;
        switch (name) {
          case "level":
            return message.level;
          case "logId":
            return logId;
          case "scope":
            return scope2 ? ` (${scope2})` : "";
          case "text":
            return "";
          case "y":
            return date.getFullYear().toString(10);
          case "m":
            return (date.getMonth() + 1).toString(10).padStart(2, "0");
          case "d":
            return date.getDate().toString(10).padStart(2, "0");
          case "h":
            return date.getHours().toString(10).padStart(2, "0");
          case "i":
            return date.getMinutes().toString(10).padStart(2, "0");
          case "s":
            return date.getSeconds().toString(10).padStart(2, "0");
          case "ms":
            return date.getMilliseconds().toString(10).padStart(3, "0");
          case "iso":
            return date.toISOString();
          default: {
            return ((_a2 = message.variables) == null ? void 0 : _a2[name]) || substring;
          }
        }
      }).trim();
      return data;
    },
    writeFn({ message: { level, data } }) {
      const consoleLogFn = consoleMethods[level] || consoleMethods.info;
      setTimeout(() => consoleLogFn(...data));
    }
  });
  function transport(message) {
    transport.writeFn({
      message: __spreadProps(__spreadValues({}, message), { data: transport.formatDataFn(message) })
    });
  }
}
var ipc = ipcTransportRendererFactory;
const RESTRICTED_TYPES = new Set([Promise, WeakMap, WeakSet]);
function ipcTransportRendererFactory(logger2) {
  return Object.assign(transport, {
    depth: 5,
    serializeFn(data, { depth: depth2 = 5, seen = new WeakSet() } = {}) {
      if (depth2 < 1) {
        return `[${typeof data}]`;
      }
      if (seen.has(data)) {
        return data;
      }
      if (["function", "symbol"].includes(typeof data)) {
        return data.toString();
      }
      if (Object(data) !== data) {
        return data;
      }
      if (RESTRICTED_TYPES.has(data.constructor)) {
        return `[${data.constructor.name}]`;
      }
      if (Array.isArray(data)) {
        return data.map((item) => transport.serializeFn(item, { level: depth2 - 1, seen }));
      }
      if (data instanceof Error) {
        return data.stack;
      }
      if (data instanceof Map) {
        return new Map(Array.from(data).map(([key, value]) => [
          transport.serializeFn(key, { level: depth2 - 1, seen }),
          transport.serializeFn(value, { level: depth2 - 1, seen })
        ]));
      }
      if (data instanceof Set) {
        return new Set(Array.from(data).map((val) => transport.serializeFn(val, { level: depth2 - 1, seen })));
      }
      seen.add(data);
      return Object.fromEntries(Object.entries(data).map(([key, value]) => [
        key,
        transport.serializeFn(value, { level: depth2 - 1, seen })
      ]));
    }
  });
  function transport(message) {
    if (!window.__electronLog) {
      logger2.processMessage({
        data: ["electron-log: logger isn't initialized in the main process"],
        level: "error"
      }, { transports: ["console"] });
      return;
    }
    try {
      __electronLog.sendToMain(transport.serializeFn(message, {
        depth: transport.depth
      }));
    } catch (e) {
      logger2.transports.console({
        data: ["electronLog.transports.ipc", e, "data:", message.data],
        level: "error"
      });
    }
  }
}
(function(module) {
  const Logger2 = Logger_1;
  const RendererErrorHandler2 = RendererErrorHandler_1;
  const transportConsole = console_1;
  const transportIpc = ipc;
  module.exports = createLogger();
  module.exports.Logger = Logger2;
  module.exports.default = module.exports;
  function createLogger() {
    const logger2 = new Logger2({
      allowUnknownLevel: true,
      errorHandler: new RendererErrorHandler2(),
      initializeFn: () => {
      },
      logId: "default",
      transportFactories: {
        console: transportConsole,
        ipc: transportIpc
      },
      variables: {
        processType: "renderer"
      }
    });
    logger2.errorHandler.setOptions({
      logFn({ error, errorName, showDialog }) {
        logger2.transports.console({
          data: [errorName, error].filter(Boolean),
          level: "error"
        });
        logger2.transports.ipc({
          cmd: "errorHandler",
          error: {
            cause: error == null ? void 0 : error.cause,
            code: error == null ? void 0 : error.code,
            name: error == null ? void 0 : error.name,
            message: error == null ? void 0 : error.message,
            stack: error == null ? void 0 : error.stack
          },
          errorName,
          logId: logger2.logId,
          showDialog
        });
      }
    });
    if (typeof window === "object") {
      window.addEventListener("message", (event) => {
        const _a = event.data || {}, { cmd, logId } = _a, message = __objRest(_a, ["cmd", "logId"]);
        const instance = Logger2.getInstance({ logId });
        if (cmd === "message") {
          instance.processMessage(message, { transports: ["console"] });
        }
      });
    }
    return new Proxy(logger2, {
      get(target, prop) {
        if (typeof target[prop] !== "undefined") {
          return target[prop];
        }
        return (...data) => logger2.logData(data, { level: prop });
      }
    });
  }
})(renderer);
var log = renderer.exports;
if (!electronIsDev$1) {
  log.transports.file.level = "verbose";
}
process.on("unhandledRejection", log.error);
function startAutoUpdater() {
  if (require("electron-squirrel-startup")) {
    require$$0$1.app.quit();
  }
  if (!electronIsDev$1) {
    const server = "https://refi-updater.vercel.app";
    const feed = `${server}/update/${process.platform}/${require$$0$1.app.getVersion()}`;
    require$$0$1.autoUpdater.setFeedURL({ url: feed, serverType: "json" });
    setInterval(() => {
      require$$0$1.autoUpdater.checkForUpdates();
    }, 6e4);
    require$$0$1.autoUpdater.on("update-downloaded", (_, releaseNotes, releaseName) => {
      log.debug("Downloaded new update");
      const dialogOpts = {
        type: "info",
        buttons: ["Restart", "Later"],
        title: "Application Update",
        message: process.platform === "win32" ? releaseNotes : releaseName,
        detail: "A new version has been downloaded. Restart the application to apply the updates."
      };
      require$$0$1.dialog.showMessageBox(dialogOpts).then((returnValue) => {
        if (returnValue.response === 0)
          require$$0$1.autoUpdater.quitAndInstall();
      });
    });
    require$$0$1.autoUpdater.on("error", (message) => {
      log.error("There was a problem updating the application");
      log.error(message);
    });
  }
}
function startIPC() {
  require$$0$1.ipcMain.on("message", (event, message) => {
    console.log(message);
    setTimeout(() => event.sender.send("message", "hi from electron"), 500);
  });
}
var dist = {};
var httpProxyMiddleware = {};
var httpProxy$3 = { exports: {} };
var eventemitter3 = { exports: {} };
(function(module) {
  var has = Object.prototype.hasOwnProperty, prefix = "~";
  function Events() {
  }
  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__)
      prefix = false;
  }
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt])
      emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn)
      emitter._events[evt].push(listener);
    else
      emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0)
      emitter._events = new Events();
    else
      delete emitter._events[evt];
  }
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events2, name;
    if (this._eventsCount === 0)
      return names;
    for (name in events2 = this._events) {
      if (has.call(events2, name))
        names.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events2));
    }
    return names;
  };
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers2 = this._events[evt];
    if (!handlers2)
      return [];
    if (handlers2.fn)
      return [handlers2.fn];
    for (var i = 0, l = handlers2.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers2[i].fn;
    }
    return ee;
  };
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners)
      return 0;
    if (listeners.fn)
      return 1;
    return listeners.length;
  };
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once)
        this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length, j;
      for (i = 0; i < length; i++) {
        if (listeners[i].once)
          this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args)
              for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events2 = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events2.push(listeners[i]);
        }
      }
      if (events2.length)
        this._events[evt] = events2.length === 1 ? events2[0] : events2;
      else
        clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt])
        clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;
  {
    module.exports = EventEmitter;
  }
})(eventemitter3);
var common$3 = {};
var requiresPort = function required(port, protocol) {
  protocol = protocol.split(":")[0];
  port = +port;
  if (!port)
    return false;
  switch (protocol) {
    case "http":
    case "ws":
      return port !== 80;
    case "https":
    case "wss":
      return port !== 443;
    case "ftp":
      return port !== 21;
    case "gopher":
      return port !== 70;
    case "file":
      return false;
  }
  return port !== 0;
};
(function(exports) {
  var common2 = exports, url2 = require$$0__default$4["default"], extend = require$$0__default$2["default"]._extend, required2 = requiresPort;
  var upgradeHeader = /(^|,)\s*upgrade\s*($|,)/i, isSSL = /^https|wss/;
  common2.isSSL = isSSL;
  common2.setupOutgoing = function(outgoing, options, req, forward) {
    outgoing.port = options[forward || "target"].port || (isSSL.test(options[forward || "target"].protocol) ? 443 : 80);
    [
      "host",
      "hostname",
      "socketPath",
      "pfx",
      "key",
      "passphrase",
      "cert",
      "ca",
      "ciphers",
      "secureProtocol"
    ].forEach(function(e) {
      outgoing[e] = options[forward || "target"][e];
    });
    outgoing.method = options.method || req.method;
    outgoing.headers = extend({}, req.headers);
    if (options.headers) {
      extend(outgoing.headers, options.headers);
    }
    if (options.auth) {
      outgoing.auth = options.auth;
    }
    if (options.ca) {
      outgoing.ca = options.ca;
    }
    if (isSSL.test(options[forward || "target"].protocol)) {
      outgoing.rejectUnauthorized = typeof options.secure === "undefined" ? true : options.secure;
    }
    outgoing.agent = options.agent || false;
    outgoing.localAddress = options.localAddress;
    if (!outgoing.agent) {
      outgoing.headers = outgoing.headers || {};
      if (typeof outgoing.headers.connection !== "string" || !upgradeHeader.test(outgoing.headers.connection)) {
        outgoing.headers.connection = "close";
      }
    }
    var target = options[forward || "target"];
    var targetPath = target && options.prependPath !== false ? target.path || "" : "";
    var outgoingPath = !options.toProxy ? url2.parse(req.url).path || "" : req.url;
    outgoingPath = !options.ignorePath ? outgoingPath : "";
    outgoing.path = common2.urlJoin(targetPath, outgoingPath);
    if (options.changeOrigin) {
      outgoing.headers.host = required2(outgoing.port, options[forward || "target"].protocol) && !hasPort(outgoing.host) ? outgoing.host + ":" + outgoing.port : outgoing.host;
    }
    return outgoing;
  };
  common2.setupSocket = function(socket) {
    socket.setTimeout(0);
    socket.setNoDelay(true);
    socket.setKeepAlive(true, 0);
    return socket;
  };
  common2.getPort = function(req) {
    var res = req.headers.host ? req.headers.host.match(/:(\d+)/) : "";
    return res ? res[1] : common2.hasEncryptedConnection(req) ? "443" : "80";
  };
  common2.hasEncryptedConnection = function(req) {
    return Boolean(req.connection.encrypted || req.connection.pair);
  };
  common2.urlJoin = function() {
    var args = Array.prototype.slice.call(arguments), lastIndex = args.length - 1, last = args[lastIndex], lastSegs = last.split("?"), retSegs;
    args[lastIndex] = lastSegs.shift();
    retSegs = [
      args.filter(Boolean).join("/").replace(/\/+/g, "/").replace("http:/", "http://").replace("https:/", "https://")
    ];
    retSegs.push.apply(retSegs, lastSegs);
    return retSegs.join("?");
  };
  common2.rewriteCookieProperty = function rewriteCookieProperty(header, config, property) {
    if (Array.isArray(header)) {
      return header.map(function(headerElement) {
        return rewriteCookieProperty(headerElement, config, property);
      });
    }
    return header.replace(new RegExp("(;\\s*" + property + "=)([^;]+)", "i"), function(match2, prefix, previousValue) {
      var newValue;
      if (previousValue in config) {
        newValue = config[previousValue];
      } else if ("*" in config) {
        newValue = config["*"];
      } else {
        return match2;
      }
      if (newValue) {
        return prefix + newValue;
      } else {
        return "";
      }
    });
  };
  function hasPort(host) {
    return !!~host.indexOf(":");
  }
})(common$3);
var url$3 = require$$0__default$4["default"], common$2 = common$3;
var redirectRegex = /^201|30(1|2|7|8)$/;
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, res, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var webOutgoing = {
  removeChunked: function removeChunked(req, res, proxyRes) {
    if (req.httpVersion === "1.0") {
      delete proxyRes.headers["transfer-encoding"];
    }
  },
  setConnection: function setConnection(req, res, proxyRes) {
    if (req.httpVersion === "1.0") {
      proxyRes.headers.connection = req.headers.connection || "close";
    } else if (req.httpVersion !== "2.0" && !proxyRes.headers.connection) {
      proxyRes.headers.connection = req.headers.connection || "keep-alive";
    }
  },
  setRedirectHostRewrite: function setRedirectHostRewrite(req, res, proxyRes, options) {
    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite) && proxyRes.headers["location"] && redirectRegex.test(proxyRes.statusCode)) {
      var target = url$3.parse(options.target);
      var u = url$3.parse(proxyRes.headers["location"]);
      if (target.host != u.host) {
        return;
      }
      if (options.hostRewrite) {
        u.host = options.hostRewrite;
      } else if (options.autoRewrite) {
        u.host = req.headers["host"];
      }
      if (options.protocolRewrite) {
        u.protocol = options.protocolRewrite;
      }
      proxyRes.headers["location"] = u.format();
    }
  },
  writeHeaders: function writeHeaders(req, res, proxyRes, options) {
    var rewriteCookieDomainConfig = options.cookieDomainRewrite, rewriteCookiePathConfig = options.cookiePathRewrite, preserveHeaderKeyCase = options.preserveHeaderKeyCase, rawHeaderKeyMap, setHeader = function(key2, header) {
      if (header == void 0)
        return;
      if (rewriteCookieDomainConfig && key2.toLowerCase() === "set-cookie") {
        header = common$2.rewriteCookieProperty(header, rewriteCookieDomainConfig, "domain");
      }
      if (rewriteCookiePathConfig && key2.toLowerCase() === "set-cookie") {
        header = common$2.rewriteCookieProperty(header, rewriteCookiePathConfig, "path");
      }
      res.setHeader(String(key2).trim(), header);
    };
    if (typeof rewriteCookieDomainConfig === "string") {
      rewriteCookieDomainConfig = { "*": rewriteCookieDomainConfig };
    }
    if (typeof rewriteCookiePathConfig === "string") {
      rewriteCookiePathConfig = { "*": rewriteCookiePathConfig };
    }
    if (preserveHeaderKeyCase && proxyRes.rawHeaders != void 0) {
      rawHeaderKeyMap = {};
      for (var i = 0; i < proxyRes.rawHeaders.length; i += 2) {
        var key = proxyRes.rawHeaders[i];
        rawHeaderKeyMap[key.toLowerCase()] = key;
      }
    }
    Object.keys(proxyRes.headers).forEach(function(key2) {
      var header = proxyRes.headers[key2];
      if (preserveHeaderKeyCase && rawHeaderKeyMap) {
        key2 = rawHeaderKeyMap[key2] || key2;
      }
      setHeader(key2, header);
    });
  },
  writeStatusCode: function writeStatusCode(req, res, proxyRes) {
    if (proxyRes.statusMessage) {
      res.statusCode = proxyRes.statusCode;
      res.statusMessage = proxyRes.statusMessage;
    } else {
      res.statusCode = proxyRes.statusCode;
    }
  }
};
var followRedirects$1 = { exports: {} };
var debug$1;
var debug_1 = function() {
  if (!debug$1) {
    try {
      debug$1 = require("debug")("follow-redirects");
    } catch (error) {
    }
    if (typeof debug$1 !== "function") {
      debug$1 = function() {
      };
    }
  }
  debug$1.apply(null, arguments);
};
var url$2 = require$$0__default$4["default"];
var URL$1 = url$2.URL;
var http$1 = require$$0__default$5["default"];
var https$1 = require$$1__default["default"];
var Writable = require$$3__default["default"].Writable;
var assert = require$$4__default["default"];
var debug = debug_1;
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function(event) {
  eventHandlers[event] = function(arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});
var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
var destroy = Writable.prototype.destroy || noop;
function RedirectableRequest(options, responseCallback) {
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];
  if (responseCallback) {
    this.on("response", responseCallback);
  }
  var self2 = this;
  this._onNativeResponse = function(response) {
    self2._processResponse(response);
  };
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};
RedirectableRequest.prototype.destroy = function(error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};
RedirectableRequest.prototype.write = function(data, encoding, callback) {
  if (this._ending) {
    throw new WriteAfterEndError();
  }
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data, encoding });
    this._currentRequest.write(data, encoding, callback);
  } else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};
RedirectableRequest.prototype.end = function(data, encoding, callback) {
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  } else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  } else {
    var self2 = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function() {
      self2._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};
RedirectableRequest.prototype.setHeader = function(name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};
RedirectableRequest.prototype.removeHeader = function(name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
  var self2 = this;
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }
  function startTimer(socket) {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
    }
    self2._timeout = setTimeout(function() {
      self2.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }
  function clearTimer() {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
      self2._timeout = null;
    }
    self2.removeListener("abort", clearTimer);
    self2.removeListener("error", clearTimer);
    self2.removeListener("response", clearTimer);
    self2.removeListener("close", clearTimer);
    if (callback) {
      self2.removeListener("timeout", callback);
    }
    if (!self2.socket) {
      self2._currentRequest.removeListener("socket", startTimer);
    }
  }
  if (callback) {
    this.on("timeout", callback);
  }
  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  }
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);
  return this;
};
[
  "flushHeaders",
  "getHeader",
  "setNoDelay",
  "setSocketKeepAlive"
].forEach(function(method) {
  RedirectableRequest.prototype[method] = function(a, b) {
    return this._currentRequest[method](a, b);
  };
});
["aborted", "connection", "socket"].forEach(function(property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function() {
      return this._currentRequest[property];
    }
  });
});
RedirectableRequest.prototype._sanitizeOptions = function(options) {
  if (!options.headers) {
    options.headers = {};
  }
  if (options.host) {
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};
RedirectableRequest.prototype._performRequest = function() {
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  }
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }
  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }
  this._currentUrl = /^\//.test(this._options.path) ? url$2.format(this._options) : this._options.path;
  if (this._isRedirect) {
    var i = 0;
    var self2 = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      if (request === self2._currentRequest) {
        if (error) {
          self2.emit("error", error);
        } else if (i < buffers.length) {
          var buffer = buffers[i++];
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } else if (self2._ended) {
          request.end();
        }
      }
    })();
  }
};
RedirectableRequest.prototype._processResponse = function(response) {
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode
    });
  }
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);
    this._requestBodyBuffers = [];
    return;
  }
  destroyRequest(this._currentRequest);
  response.destroy();
  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  }
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      Host: response.req.getHeader("host")
    }, this._options.headers);
  }
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
  var currentUrlParts = url$2.parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url$2.format(Object.assign(currentUrlParts, { host: currentHost }));
  var redirectUrl;
  try {
    redirectUrl = url$2.resolve(currentUrl, location);
  } catch (cause) {
    this.emit("error", new RedirectionError({ cause }));
    return;
  }
  debug("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url$2.parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts);
  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode
    };
    var requestDetails = {
      url: currentUrl,
      method,
      headers: requestHeaders
    };
    try {
      beforeRedirect(this._options, responseDetails, requestDetails);
    } catch (err) {
      this.emit("error", err);
      return;
    }
    this._sanitizeOptions(this._options);
  }
  try {
    this._performRequest();
  } catch (cause) {
    this.emit("error", new RedirectionError({ cause }));
  }
};
function wrap(protocols) {
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  };
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function(scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
    function request(input, options, callback) {
      if (isString(input)) {
        var parsed;
        try {
          parsed = urlToOptions(new URL$1(input));
        } catch (err) {
          parsed = url$2.parse(input);
        }
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
        input = parsed;
      } else if (URL$1 && input instanceof URL$1) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = { protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true }
    });
  });
  return exports;
}
function noop() {
}
function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ? urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };
  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }
  return options;
}
function removeMatchingHeaders(regex2, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex2.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
  function CustomError(properties) {
    Error.captureStackTrace(this, this.constructor);
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }
  CustomError.prototype = new (baseClass || Error)();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  return CustomError;
}
function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop);
  request.destroy(error);
}
function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value) {
  return typeof value === "string" || value instanceof String;
}
function isFunction(value) {
  return typeof value === "function";
}
function isBuffer(value) {
  return typeof value === "object" && "length" in value;
}
followRedirects$1.exports = wrap({ http: http$1, https: https$1 });
followRedirects$1.exports.wrap = wrap;
var httpNative = require$$0__default$5["default"], httpsNative = require$$1__default["default"], web_o = webOutgoing, common$1 = common$3, followRedirects = followRedirects$1.exports;
web_o = Object.keys(web_o).map(function(pass) {
  return web_o[pass];
});
var nativeAgents = { http: httpNative, https: httpsNative };
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, res, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var webIncoming = {
  deleteLength: function deleteLength(req, res, options) {
    if ((req.method === "DELETE" || req.method === "OPTIONS") && !req.headers["content-length"]) {
      req.headers["content-length"] = "0";
      delete req.headers["transfer-encoding"];
    }
  },
  timeout: function timeout(req, res, options) {
    if (options.timeout) {
      req.socket.setTimeout(options.timeout);
    }
  },
  XHeaders: function XHeaders(req, res, options) {
    if (!options.xfwd)
      return;
    var encrypted = req.isSpdy || common$1.hasEncryptedConnection(req);
    var values = {
      for: req.connection.remoteAddress || req.socket.remoteAddress,
      port: common$1.getPort(req),
      proto: encrypted ? "https" : "http"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req.headers["x-forwarded-" + header] = (req.headers["x-forwarded-" + header] || "") + (req.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
    req.headers["x-forwarded-host"] = req.headers["x-forwarded-host"] || req.headers["host"] || "";
  },
  stream: function stream(req, res, options, _, server, clb) {
    server.emit("start", req, res, options.target || options.forward);
    var agents = options.followRedirects ? followRedirects : nativeAgents;
    var http2 = agents.http;
    var https2 = agents.https;
    if (options.forward) {
      var forwardReq = (options.forward.protocol === "https:" ? https2 : http2).request(common$1.setupOutgoing(options.ssl || {}, options, req, "forward"));
      var forwardError = createErrorHandler(forwardReq, options.forward);
      req.on("error", forwardError);
      forwardReq.on("error", forwardError);
      (options.buffer || req).pipe(forwardReq);
      if (!options.target) {
        return res.end();
      }
    }
    var proxyReq = (options.target.protocol === "https:" ? https2 : http2).request(common$1.setupOutgoing(options.ssl || {}, options, req));
    proxyReq.on("socket", function(socket) {
      if (server && !proxyReq.getHeader("expect")) {
        server.emit("proxyReq", proxyReq, req, res, options);
      }
    });
    if (options.proxyTimeout) {
      proxyReq.setTimeout(options.proxyTimeout, function() {
        proxyReq.abort();
      });
    }
    req.on("aborted", function() {
      proxyReq.abort();
    });
    var proxyError = createErrorHandler(proxyReq, options.target);
    req.on("error", proxyError);
    proxyReq.on("error", proxyError);
    function createErrorHandler(proxyReq2, url2) {
      return function proxyError2(err) {
        if (req.socket.destroyed && err.code === "ECONNRESET") {
          server.emit("econnreset", err, req, res, url2);
          return proxyReq2.abort();
        }
        if (clb) {
          clb(err, req, res, url2);
        } else {
          server.emit("error", err, req, res, url2);
        }
      };
    }
    (options.buffer || req).pipe(proxyReq);
    proxyReq.on("response", function(proxyRes) {
      if (server) {
        server.emit("proxyRes", proxyRes, req, res);
      }
      if (!res.headersSent && !options.selfHandleResponse) {
        for (var i = 0; i < web_o.length; i++) {
          if (web_o[i](req, res, proxyRes, options)) {
            break;
          }
        }
      }
      if (!res.finished) {
        proxyRes.on("end", function() {
          if (server)
            server.emit("end", req, res, proxyRes);
        });
        if (!options.selfHandleResponse)
          proxyRes.pipe(res);
      } else {
        if (server)
          server.emit("end", req, res, proxyRes);
      }
    });
  }
};
var http = require$$0__default$5["default"], https = require$$1__default["default"], common = common$3;
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, socket, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var wsIncoming = {
  checkMethodAndHeader: function checkMethodAndHeader(req, socket) {
    if (req.method !== "GET" || !req.headers.upgrade) {
      socket.destroy();
      return true;
    }
    if (req.headers.upgrade.toLowerCase() !== "websocket") {
      socket.destroy();
      return true;
    }
  },
  XHeaders: function XHeaders2(req, socket, options) {
    if (!options.xfwd)
      return;
    var values = {
      for: req.connection.remoteAddress || req.socket.remoteAddress,
      port: common.getPort(req),
      proto: common.hasEncryptedConnection(req) ? "wss" : "ws"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req.headers["x-forwarded-" + header] = (req.headers["x-forwarded-" + header] || "") + (req.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
  },
  stream: function stream2(req, socket, options, head, server, clb) {
    var createHttpHeader = function(line, headers) {
      return Object.keys(headers).reduce(function(head2, key) {
        var value = headers[key];
        if (!Array.isArray(value)) {
          head2.push(key + ": " + value);
          return head2;
        }
        for (var i = 0; i < value.length; i++) {
          head2.push(key + ": " + value[i]);
        }
        return head2;
      }, [line]).join("\r\n") + "\r\n\r\n";
    };
    common.setupSocket(socket);
    if (head && head.length)
      socket.unshift(head);
    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(common.setupOutgoing(options.ssl || {}, options, req));
    if (server) {
      server.emit("proxyReqWs", proxyReq, req, socket, options, head);
    }
    proxyReq.on("error", onOutgoingError);
    proxyReq.on("response", function(res) {
      if (!res.upgrade) {
        socket.write(createHttpHeader("HTTP/" + res.httpVersion + " " + res.statusCode + " " + res.statusMessage, res.headers));
        res.pipe(socket);
      }
    });
    proxyReq.on("upgrade", function(proxyRes, proxySocket, proxyHead) {
      proxySocket.on("error", onOutgoingError);
      proxySocket.on("end", function() {
        server.emit("close", proxyRes, proxySocket, proxyHead);
      });
      socket.on("error", function() {
        proxySocket.end();
      });
      common.setupSocket(proxySocket);
      if (proxyHead && proxyHead.length)
        proxySocket.unshift(proxyHead);
      socket.write(createHttpHeader("HTTP/1.1 101 Switching Protocols", proxyRes.headers));
      proxySocket.pipe(socket).pipe(proxySocket);
      server.emit("open", proxySocket);
      server.emit("proxySocket", proxySocket);
    });
    return proxyReq.end();
    function onOutgoingError(err) {
      if (clb) {
        clb(err, req, socket);
      } else {
        server.emit("error", err, req, socket);
      }
      socket.end();
    }
  }
};
(function(module) {
  var httpProxy2 = module.exports, extend = require$$0__default$2["default"]._extend, parse_url = require$$0__default$4["default"].parse, EE3 = eventemitter3.exports, http2 = require$$0__default$5["default"], https2 = require$$1__default["default"], web = webIncoming, ws = wsIncoming;
  httpProxy2.Server = ProxyServer2;
  function createRightProxy(type) {
    return function(options) {
      return function(req, res) {
        var passes = type === "ws" ? this.wsPasses : this.webPasses, args = [].slice.call(arguments), cntr = args.length - 1, head, cbl;
        if (typeof args[cntr] === "function") {
          cbl = args[cntr];
          cntr--;
        }
        var requestOptions = options;
        if (!(args[cntr] instanceof Buffer) && args[cntr] !== res) {
          requestOptions = extend({}, options);
          extend(requestOptions, args[cntr]);
          cntr--;
        }
        if (args[cntr] instanceof Buffer) {
          head = args[cntr];
        }
        ["target", "forward"].forEach(function(e) {
          if (typeof requestOptions[e] === "string")
            requestOptions[e] = parse_url(requestOptions[e]);
        });
        if (!requestOptions.target && !requestOptions.forward) {
          return this.emit("error", new Error("Must provide a proper URL as target"));
        }
        for (var i = 0; i < passes.length; i++) {
          if (passes[i](req, res, requestOptions, head, this, cbl)) {
            break;
          }
        }
      };
    };
  }
  httpProxy2.createRightProxy = createRightProxy;
  function ProxyServer2(options) {
    EE3.call(this);
    options = options || {};
    options.prependPath = options.prependPath === false ? false : true;
    this.web = this.proxyRequest = createRightProxy("web")(options);
    this.ws = this.proxyWebsocketRequest = createRightProxy("ws")(options);
    this.options = options;
    this.webPasses = Object.keys(web).map(function(pass) {
      return web[pass];
    });
    this.wsPasses = Object.keys(ws).map(function(pass) {
      return ws[pass];
    });
    this.on("error", this.onError, this);
  }
  require$$0__default$2["default"].inherits(ProxyServer2, EE3);
  ProxyServer2.prototype.onError = function(err) {
    if (this.listeners("error").length === 1) {
      throw err;
    }
  };
  ProxyServer2.prototype.listen = function(port, hostname) {
    var self2 = this, closure = function(req, res) {
      self2.web(req, res);
    };
    this._server = this.options.ssl ? https2.createServer(this.options.ssl, closure) : http2.createServer(closure);
    if (this.options.ws) {
      this._server.on("upgrade", function(req, socket, head) {
        self2.ws(req, socket, head);
      });
    }
    this._server.listen(port, hostname);
    return this;
  };
  ProxyServer2.prototype.close = function(callback) {
    var self2 = this;
    if (this._server) {
      this._server.close(done);
    }
    function done() {
      self2._server = null;
      if (callback) {
        callback.apply(null, arguments);
      }
    }
  };
  ProxyServer2.prototype.before = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName)
        i = idx;
    });
    if (i === false)
      throw new Error("No such pass");
    passes.splice(i, 0, callback);
  };
  ProxyServer2.prototype.after = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName)
        i = idx;
    });
    if (i === false)
      throw new Error("No such pass");
    passes.splice(i++, 0, callback);
  };
})(httpProxy$3);
var ProxyServer = httpProxy$3.exports.Server;
function createProxyServer(options) {
  return new ProxyServer(options);
}
ProxyServer.createProxyServer = createProxyServer;
ProxyServer.createServer = createProxyServer;
ProxyServer.createProxy = createProxyServer;
var httpProxy$2 = ProxyServer;
/*!
 * Caron dimonio, con occhi di bragia
 * loro accennando, tutte le raccoglie;
 * batte col remo qualunque s’adagia 
 *
 * Charon the demon, with the eyes of glede,
 * Beckoning to them, collects them all together,
 * Beats with his oar whoever lags behind
 *          
 *          Dante - The Divine Comedy (Canto III)
 */
var httpProxy$1 = httpProxy$2;
var configFactory = {};
var isPlainObj$3 = (value) => {
  if (Object.prototype.toString.call(value) !== "[object Object]") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return prototype === null || prototype === Object.prototype;
};
var errors = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ERRORS = void 0;
  (function(ERRORS) {
    ERRORS["ERR_CONFIG_FACTORY_TARGET_MISSING"] = '[HPM] Missing "target" option. Example: {target: "http://www.example.org"}';
    ERRORS["ERR_CONTEXT_MATCHER_GENERIC"] = '[HPM] Invalid context. Expecting something like: "/api" or ["/api", "/ajax"]';
    ERRORS["ERR_CONTEXT_MATCHER_INVALID_ARRAY"] = '[HPM] Invalid context. Expecting something like: ["/api", "/ajax"] or ["/api/**", "!**.html"]';
    ERRORS["ERR_PATH_REWRITER_CONFIG"] = "[HPM] Invalid pathRewrite config. Expecting object with pathRewrite config or a rewrite function";
  })(exports.ERRORS || (exports.ERRORS = {}));
})(errors);
var logger$4 = {};
Object.defineProperty(logger$4, "__esModule", { value: true });
logger$4.getArrow = logger$4.getInstance = void 0;
const util$2 = require$$0__default$2["default"];
let loggerInstance;
const defaultProvider = {
  log: console.log,
  debug: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
var LEVELS;
(function(LEVELS2) {
  LEVELS2[LEVELS2["debug"] = 10] = "debug";
  LEVELS2[LEVELS2["info"] = 20] = "info";
  LEVELS2[LEVELS2["warn"] = 30] = "warn";
  LEVELS2[LEVELS2["error"] = 50] = "error";
  LEVELS2[LEVELS2["silent"] = 80] = "silent";
})(LEVELS || (LEVELS = {}));
function getInstance() {
  if (!loggerInstance) {
    loggerInstance = new Logger();
  }
  return loggerInstance;
}
logger$4.getInstance = getInstance;
class Logger {
  constructor() {
    this.setLevel("info");
    this.setProvider(() => defaultProvider);
  }
  log() {
    this.provider.log(this._interpolate.apply(null, arguments));
  }
  debug() {
    if (this._showLevel("debug")) {
      this.provider.debug(this._interpolate.apply(null, arguments));
    }
  }
  info() {
    if (this._showLevel("info")) {
      this.provider.info(this._interpolate.apply(null, arguments));
    }
  }
  warn() {
    if (this._showLevel("warn")) {
      this.provider.warn(this._interpolate.apply(null, arguments));
    }
  }
  error() {
    if (this._showLevel("error")) {
      this.provider.error(this._interpolate.apply(null, arguments));
    }
  }
  setLevel(v) {
    if (this.isValidLevel(v)) {
      this.logLevel = v;
    }
  }
  setProvider(fn) {
    if (fn && this.isValidProvider(fn)) {
      this.provider = fn(defaultProvider);
    }
  }
  isValidProvider(fnProvider) {
    const result = true;
    if (fnProvider && typeof fnProvider !== "function") {
      throw new Error("[HPM] Log provider config error. Expecting a function.");
    }
    return result;
  }
  isValidLevel(levelName) {
    const validLevels = Object.keys(LEVELS);
    const isValid = validLevels.includes(levelName);
    if (!isValid) {
      throw new Error("[HPM] Log level error. Invalid logLevel.");
    }
    return isValid;
  }
  _showLevel(showLevel) {
    let result = false;
    const currentLogLevel = LEVELS[this.logLevel];
    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {
      result = true;
    }
    return result;
  }
  _interpolate(format, ...args) {
    const result = util$2.format(format, ...args);
    return result;
  }
}
function getArrow(originalPath, newPath, originalTarget, newTarget) {
  const arrow = [">"];
  const isNewTarget = originalTarget !== newTarget;
  const isNewPath = originalPath !== newPath;
  if (isNewPath && !isNewTarget) {
    arrow.unshift("~");
  } else if (!isNewPath && isNewTarget) {
    arrow.unshift("=");
  } else if (isNewPath && isNewTarget) {
    arrow.unshift("\u2248");
  } else {
    arrow.unshift("-");
  }
  return arrow.join("");
}
logger$4.getArrow = getArrow;
Object.defineProperty(configFactory, "__esModule", { value: true });
configFactory.createConfig = void 0;
const isPlainObj$2 = isPlainObj$3;
const url$1 = require$$0__default$4["default"];
const errors_1$2 = errors;
const logger_1$4 = logger$4;
const logger$3 = (0, logger_1$4.getInstance)();
function createConfig(context, opts) {
  const config = {
    context: void 0,
    options: {}
  };
  if (isContextless(context, opts)) {
    config.context = "/";
    config.options = Object.assign(config.options, context);
  } else if (isStringShortHand(context)) {
    const oUrl = url$1.parse(context);
    const target = [oUrl.protocol, "//", oUrl.host].join("");
    config.context = oUrl.pathname || "/";
    config.options = Object.assign(config.options, { target }, opts);
    if (oUrl.protocol === "ws:" || oUrl.protocol === "wss:") {
      config.options.ws = true;
    }
  } else {
    config.context = context;
    config.options = Object.assign(config.options, opts);
  }
  configureLogger(config.options);
  if (!config.options.target && !config.options.router) {
    throw new Error(errors_1$2.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);
  }
  return config;
}
configFactory.createConfig = createConfig;
function isStringShortHand(context) {
  if (typeof context === "string") {
    return !!url$1.parse(context).host;
  }
}
function isContextless(context, opts) {
  return isPlainObj$2(context) && (opts == null || Object.keys(opts).length === 0);
}
function configureLogger(options) {
  if (options.logLevel) {
    logger$3.setLevel(options.logLevel);
  }
  if (options.logProvider) {
    logger$3.setProvider(options.logProvider);
  }
}
var contextMatcher$1 = {};
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
var isExtglob$1 = function isExtglob2(str) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  var match2;
  while (match2 = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
    if (match2[2])
      return true;
    str = str.slice(match2.index + match2[0].length);
  }
  return false;
};
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var isExtglob = isExtglob$1;
var chars = { "{": "}", "(": ")", "[": "]" };
var strictCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  var pipeIndex = -2;
  var closeSquareIndex = -2;
  var closeCurlyIndex = -2;
  var closeParenIndex = -2;
  var backSlashIndex = -2;
  while (index < str.length) {
    if (str[index] === "*") {
      return true;
    }
    if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
      return true;
    }
    if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
      if (closeSquareIndex < index) {
        closeSquareIndex = str.indexOf("]", index);
      }
      if (closeSquareIndex > index) {
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
      }
    }
    if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
      closeCurlyIndex = str.indexOf("}", index);
      if (closeCurlyIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
          return true;
        }
      }
    }
    if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
      closeParenIndex = str.indexOf(")", index);
      if (closeParenIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
          return true;
        }
      }
    }
    if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
      if (pipeIndex < index) {
        pipeIndex = str.indexOf("|", index);
      }
      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
        closeParenIndex = str.indexOf(")", pipeIndex);
        if (closeParenIndex > pipeIndex) {
          backSlashIndex = str.indexOf("\\", pipeIndex);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
    }
    if (str[index] === "\\") {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];
      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var relaxedCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  while (index < str.length) {
    if (/[*?{}()[\]]/.test(str[index])) {
      return true;
    }
    if (str[index] === "\\") {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];
      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var isGlob$1 = function isGlob2(str, options) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  if (isExtglob(str)) {
    return true;
  }
  var check = strictCheck;
  if (options && options.strict === false) {
    check = relaxedCheck;
  }
  return check(str);
};
var utils$8 = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type) => {
    let node = block.nodes[n];
    if (!node)
      return;
    if (type && node.type === type || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$8);
const utils$7 = utils$8;
var stringify$4 = (ast, options = {}) => {
  let stringify2 = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils$7.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = "";
    if (node.value) {
      if ((invalidBlock || invalidNode) && utils$7.isOpenOrClose(node)) {
        return "\\" + node.value;
      }
      return node.value;
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify2(child);
      }
    }
    return output;
  };
  return stringify2(ast);
};
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const isNumber$1 = isNumber$2;
const toRegexRange$1 = (min, max, options) => {
  if (isNumber$1(min) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max === void 0 || min === max) {
    return String(min);
  }
  if (isNumber$1(max) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = __spreadValues({ relaxZeros: true }, options);
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap2 = String(opts.wrap);
  let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap2;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min, max);
  let b = Math.max(min, max);
  if (Math.abs(a - b) === 1) {
    let result = min + "|" + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }
  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state;
  return state.result;
};
function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, "-", false) || [];
  let onlyPositive = filterPatterns(pos, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min, max) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min, nines);
  let stops = new Set([max]);
  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }
  stop = countZeros(max + 1, zeros2) - 1;
  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern += options.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern, count: [count], digits };
}
function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max2 = ranges[i];
    let obj = rangeToPattern(String(start), String(max2), options);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max2 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max2, tok, options);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max2 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];
  for (let ele of arr) {
    let { string } = ele;
    if (!intersection && !contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
    if (intersection && contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++)
    arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val);
}
function countNines(min, len) {
  return Number(String(min).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}
function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }
  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;
  switch (diff) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
const util$1 = require$$0__default$2["default"];
const toRegexRange = toRegexRange_1;
const isObject$1 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const transform = (toNumber) => {
  return (value) => toNumber === true ? Number(value) : String(value);
};
const isValidValue = (value) => {
  return typeof value === "number" || typeof value === "string" && value !== "";
};
const isNumber = (num) => Number.isInteger(+num);
const zeros = (input) => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === "-")
    value = value.slice(1);
  if (value === "0")
    return false;
  while (value[++index] === "0")
    ;
  return index > 0;
};
const stringify$3 = (start, end, options) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options.stringify === true;
};
const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === "-" ? "-" : "";
    if (dash)
      input = input.slice(1);
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};
const toMaxLen = (input, maxLength) => {
  let negative = input[0] === "-" ? "-" : "";
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength)
    input = "0" + input;
  return negative ? "-" + input : input;
};
const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, __spreadValues({ wrap: false }, options));
  }
  let start = String.fromCharCode(a);
  if (a === b)
    return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap2 = options.wrap === true;
    let prefix = options.capture ? "" : "?:";
    return wrap2 ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options);
};
const rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util$1.inspect(...args));
};
const invalidRange = (start, end, options) => {
  if (options.strictRanges === true)
    throw rangeError([start, end]);
  return [];
};
const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  }
  if (a === 0)
    a = 0;
  if (b === 0)
    b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$3(start, end, options) === false;
  let format = options.transform || transform(toNumber);
  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }
  let parts = { negatives: [], positives: [] };
  let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }
  if (options.toRegex === true) {
    return step > 1 ? toSequence(parts, options) : toRegex(range, null, __spreadValues({ wrap: false }, options));
  }
  return range;
};
const fillLetters = (start, end, step = 1, options = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options);
  }
  let format = options.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);
  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }
  let range = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }
  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }
  return range;
};
const fill$2 = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject$1(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = __spreadValues({}, options);
  if (opts.capture === true)
    opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject$1(step))
      return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
const fill$1 = fillRange;
const utils$6 = utils$8;
const compile$1 = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils$6.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? "\\" : "";
    let output = "";
    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }
    if (node.type === "open") {
      return invalid ? prefix + node.value : "(";
    }
    if (node.type === "close") {
      return invalid ? prefix + node.value : ")";
    }
    if (node.type === "comma") {
      return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes && node.ranges > 0) {
      let args = utils$6.reduce(node.nodes);
      let range = fill$1(...args, __spreadProps(__spreadValues({}, options), { wrap: false, toRegex: true }));
      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }
    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };
  return walk(ast);
};
var compile_1 = compile$1;
const fill = fillRange;
const stringify$2 = stringify$4;
const utils$5 = utils$8;
const append$1 = (queue = "", stash = "", enclose = false) => {
  let result = [];
  queue = [].concat(queue);
  stash = [].concat(stash);
  if (!stash.length)
    return queue;
  if (!queue.length) {
    return enclose ? utils$5.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append$1(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string")
          ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append$1(item, ele, enclose) : item + ele);
      }
    }
  }
  return utils$5.flatten(result);
};
const expand$1 = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
  let walk = (node, parent = {}) => {
    node.queue = [];
    let p = parent;
    let q = parent.queue;
    while (p.type !== "brace" && p.type !== "root" && p.parent) {
      p = p.parent;
      q = p.queue;
    }
    if (node.invalid || node.dollar) {
      q.push(append$1(q.pop(), stringify$2(node, options)));
      return;
    }
    if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
      q.push(append$1(q.pop(), ["{}"]));
      return;
    }
    if (node.nodes && node.ranges > 0) {
      let args = utils$5.reduce(node.nodes);
      if (utils$5.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify$2(node, options);
      }
      q.push(append$1(q.pop(), range));
      node.nodes = [];
      return;
    }
    let enclose = utils$5.encloseBrace(node);
    let queue = node.queue;
    let block = node;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue = block.queue;
    }
    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];
      if (child.type === "comma" && node.type === "brace") {
        if (i === 1)
          queue.push("");
        queue.push("");
        continue;
      }
      if (child.type === "close") {
        q.push(append$1(q.pop(), queue, enclose));
        continue;
      }
      if (child.value && child.type !== "open") {
        queue.push(append$1(queue.pop(), child.value));
        continue;
      }
      if (child.nodes) {
        walk(child, node);
      }
    }
    return queue;
  };
  return utils$5.flatten(walk(ast));
};
var expand_1 = expand$1;
var constants$3 = {
  MAX_LENGTH: 1024 * 64,
  CHAR_0: "0",
  CHAR_9: "9",
  CHAR_UPPERCASE_A: "A",
  CHAR_LOWERCASE_A: "a",
  CHAR_UPPERCASE_Z: "Z",
  CHAR_LOWERCASE_Z: "z",
  CHAR_LEFT_PARENTHESES: "(",
  CHAR_RIGHT_PARENTHESES: ")",
  CHAR_ASTERISK: "*",
  CHAR_AMPERSAND: "&",
  CHAR_AT: "@",
  CHAR_BACKSLASH: "\\",
  CHAR_BACKTICK: "`",
  CHAR_CARRIAGE_RETURN: "\r",
  CHAR_CIRCUMFLEX_ACCENT: "^",
  CHAR_COLON: ":",
  CHAR_COMMA: ",",
  CHAR_DOLLAR: "$",
  CHAR_DOT: ".",
  CHAR_DOUBLE_QUOTE: '"',
  CHAR_EQUAL: "=",
  CHAR_EXCLAMATION_MARK: "!",
  CHAR_FORM_FEED: "\f",
  CHAR_FORWARD_SLASH: "/",
  CHAR_HASH: "#",
  CHAR_HYPHEN_MINUS: "-",
  CHAR_LEFT_ANGLE_BRACKET: "<",
  CHAR_LEFT_CURLY_BRACE: "{",
  CHAR_LEFT_SQUARE_BRACKET: "[",
  CHAR_LINE_FEED: "\n",
  CHAR_NO_BREAK_SPACE: "\xA0",
  CHAR_PERCENT: "%",
  CHAR_PLUS: "+",
  CHAR_QUESTION_MARK: "?",
  CHAR_RIGHT_ANGLE_BRACKET: ">",
  CHAR_RIGHT_CURLY_BRACE: "}",
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  CHAR_SEMICOLON: ";",
  CHAR_SINGLE_QUOTE: "'",
  CHAR_SPACE: " ",
  CHAR_TAB: "	",
  CHAR_UNDERSCORE: "_",
  CHAR_VERTICAL_LINE: "|",
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
};
const stringify$1 = stringify$4;
const {
  MAX_LENGTH: MAX_LENGTH$1,
  CHAR_BACKSLASH,
  CHAR_BACKTICK,
  CHAR_COMMA: CHAR_COMMA$1,
  CHAR_DOT: CHAR_DOT$1,
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1,
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1,
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1,
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1,
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1,
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1,
  CHAR_DOUBLE_QUOTE,
  CHAR_SINGLE_QUOTE,
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$3;
const parse$4 = (input, options = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  let opts = options || {};
  let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }
  let ast = { type: "root", input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth2 = 0;
  let value;
  const advance = () => input[index++];
  const push = (node) => {
    if (node.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node.type === "text") {
      prev.value += node.value;
      return;
    }
    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };
  push({ type: "bos" });
  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();
    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value === CHAR_BACKSLASH) {
      push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
      continue;
    }
    if (value === CHAR_RIGHT_SQUARE_BRACKET$1) {
      push({ type: "text", value: "\\" + value });
      continue;
    }
    if (value === CHAR_LEFT_SQUARE_BRACKET$1) {
      brackets++;
      let next;
      while (index < length && (next = advance())) {
        value += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET$1) {
          brackets++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          brackets--;
          if (brackets === 0) {
            break;
          }
        }
      }
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_PARENTHESES$1) {
      block = push({ type: "paren", nodes: [] });
      stack.push(block);
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_RIGHT_PARENTHESES$1) {
      if (block.type !== "paren") {
        push({ type: "text", value });
        continue;
      }
      block = stack.pop();
      push({ type: "text", value });
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;
      if (options.keepQuotes !== true) {
        value = "";
      }
      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }
        if (next === open) {
          if (options.keepQuotes === true)
            value += next;
          break;
        }
        value += next;
      }
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_CURLY_BRACE$1) {
      depth2++;
      let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      let brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth: depth2,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push(brace);
      stack.push(block);
      push({ type: "open", value });
      continue;
    }
    if (value === CHAR_RIGHT_CURLY_BRACE$1) {
      if (block.type !== "brace") {
        push({ type: "text", value });
        continue;
      }
      let type = "close";
      block = stack.pop();
      block.close = true;
      push({ type, value });
      depth2--;
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_COMMA$1 && depth2 > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: "text", value: stringify$1(block) }];
      }
      push({ type: "comma", value });
      block.commas++;
      continue;
    }
    if (value === CHAR_DOT$1 && depth2 > 0 && block.commas === 0) {
      let siblings = block.nodes;
      if (depth2 === 0 || siblings.length === 0) {
        push({ type: "text", value });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }
      push({ type: "dot", value });
      continue;
    }
    push({ type: "text", value });
  }
  do {
    block = stack.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node) => {
        if (!node.nodes) {
          if (node.type === "open")
            node.isOpen = true;
          if (node.type === "close")
            node.isClose = true;
          if (!node.nodes)
            node.type = "text";
          node.invalid = true;
        }
      });
      let parent = stack[stack.length - 1];
      let index2 = parent.nodes.indexOf(block);
      parent.nodes.splice(index2, 1, ...block.nodes);
    }
  } while (stack.length > 0);
  push({ type: "eos" });
  return ast;
};
var parse_1$1 = parse$4;
const stringify = stringify$4;
const compile = compile_1;
const expand = expand_1;
const parse$3 = parse_1$1;
const braces$1 = (input, options = {}) => {
  let output = [];
  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces$1.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces$1.create(input, options));
  }
  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};
braces$1.parse = (input, options = {}) => parse$3(input, options);
braces$1.stringify = (input, options = {}) => {
  if (typeof input === "string") {
    return stringify(braces$1.parse(input, options), options);
  }
  return stringify(input, options);
};
braces$1.compile = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  return compile(input, options);
};
braces$1.expand = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  let result = expand(input, options);
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input, options = {}) => {
  if (input === "" || input.length < 3) {
    return [input];
  }
  return options.expand !== true ? braces$1.compile(input, options) : braces$1.expand(input, options);
};
var braces_1 = braces$1;
var utils$4 = {};
const path$1 = require$$0__default$3["default"];
const WIN_SLASH = "\\\\/";
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
const DOT_LITERAL = "\\.";
const PLUS_LITERAL = "\\+";
const QMARK_LITERAL = "\\?";
const SLASH_LITERAL = "\\/";
const ONE_CHAR = "(?=.)";
const QMARK = "[^/]";
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;
const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};
const WINDOWS_CHARS = __spreadProps(__spreadValues({}, POSIX_CHARS), {
  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
});
const POSIX_REGEX_SOURCE$1 = {
  alnum: "a-zA-Z0-9",
  alpha: "a-zA-Z",
  ascii: "\\x00-\\x7F",
  blank: " \\t",
  cntrl: "\\x00-\\x1F\\x7F",
  digit: "0-9",
  graph: "\\x21-\\x7E",
  lower: "a-z",
  print: "\\x20-\\x7E ",
  punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
  space: " \\t\\r\\n\\v\\f",
  upper: "A-Z",
  word: "A-Za-z0-9_",
  xdigit: "A-Fa-f0-9"
};
var constants$2 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
  REPLACEMENTS: {
    "***": "*",
    "**/**": "**",
    "**/**/**": "**"
  },
  CHAR_0: 48,
  CHAR_9: 57,
  CHAR_UPPERCASE_A: 65,
  CHAR_LOWERCASE_A: 97,
  CHAR_UPPERCASE_Z: 90,
  CHAR_LOWERCASE_Z: 122,
  CHAR_LEFT_PARENTHESES: 40,
  CHAR_RIGHT_PARENTHESES: 41,
  CHAR_ASTERISK: 42,
  CHAR_AMPERSAND: 38,
  CHAR_AT: 64,
  CHAR_BACKWARD_SLASH: 92,
  CHAR_CARRIAGE_RETURN: 13,
  CHAR_CIRCUMFLEX_ACCENT: 94,
  CHAR_COLON: 58,
  CHAR_COMMA: 44,
  CHAR_DOT: 46,
  CHAR_DOUBLE_QUOTE: 34,
  CHAR_EQUAL: 61,
  CHAR_EXCLAMATION_MARK: 33,
  CHAR_FORM_FEED: 12,
  CHAR_FORWARD_SLASH: 47,
  CHAR_GRAVE_ACCENT: 96,
  CHAR_HASH: 35,
  CHAR_HYPHEN_MINUS: 45,
  CHAR_LEFT_ANGLE_BRACKET: 60,
  CHAR_LEFT_CURLY_BRACE: 123,
  CHAR_LEFT_SQUARE_BRACKET: 91,
  CHAR_LINE_FEED: 10,
  CHAR_NO_BREAK_SPACE: 160,
  CHAR_PERCENT: 37,
  CHAR_PLUS: 43,
  CHAR_QUESTION_MARK: 63,
  CHAR_RIGHT_ANGLE_BRACKET: 62,
  CHAR_RIGHT_CURLY_BRACE: 125,
  CHAR_RIGHT_SQUARE_BRACKET: 93,
  CHAR_SEMICOLON: 59,
  CHAR_SINGLE_QUOTE: 39,
  CHAR_SPACE: 32,
  CHAR_TAB: 9,
  CHAR_UNDERSCORE: 95,
  CHAR_VERTICAL_LINE: 124,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
  SEP: path$1.sep,
  extglobChars(chars2) {
    return {
      "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars2.STAR})` },
      "?": { type: "qmark", open: "(?:", close: ")?" },
      "+": { type: "plus", open: "(?:", close: ")+" },
      "*": { type: "star", open: "(?:", close: ")*" },
      "@": { type: "at", open: "(?:", close: ")" }
    };
  },
  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};
(function(exports) {
  const path2 = require$$0__default$3["default"];
  const win32 = process.platform === "win32";
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = constants$2;
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match2) => {
      return match2 === "\\" ? "" : match2;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path2.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append2 = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append2}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
})(utils$4);
const utils$3 = utils$4;
const {
  CHAR_ASTERISK,
  CHAR_AT,
  CHAR_BACKWARD_SLASH,
  CHAR_COMMA,
  CHAR_DOT,
  CHAR_EXCLAMATION_MARK,
  CHAR_FORWARD_SLASH,
  CHAR_LEFT_CURLY_BRACE,
  CHAR_LEFT_PARENTHESES,
  CHAR_LEFT_SQUARE_BRACKET,
  CHAR_PLUS,
  CHAR_QUESTION_MARK,
  CHAR_RIGHT_CURLY_BRACE,
  CHAR_RIGHT_PARENTHESES,
  CHAR_RIGHT_SQUARE_BRACKET
} = constants$2;
const isPathSeparator = (code) => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};
const depth = (token) => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};
const scan$1 = (input, options) => {
  const opts = options || {};
  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];
  let str = input;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob3 = false;
  let isExtglob3 = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces2 = 0;
  let prev;
  let code;
  let token = { value: "", depth: 0, isGlob: false };
  const eos = () => index >= length;
  const peek = () => str.charCodeAt(index + 1);
  const advance = () => {
    prev = code;
    return str.charCodeAt(++index);
  };
  while (index < length) {
    code = advance();
    let next;
    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();
      if (code === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }
    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces2++;
      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braces2++;
          continue;
        }
        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (braceEscaped !== true && code === CHAR_COMMA) {
          isBrace = token.isBrace = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_RIGHT_CURLY_BRACE) {
          braces2--;
          if (braces2 === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index);
      tokens.push(token);
      token = { value: "", depth: 0, isGlob: false };
      if (finished === true)
        continue;
      if (prev === CHAR_DOT && index === start + 1) {
        start += 2;
        continue;
      }
      lastIndex = index + 1;
      continue;
    }
    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob3 = token.isGlob = true;
        isExtglob3 = token.isExtglob = true;
        finished = true;
        if (code === CHAR_EXCLAMATION_MARK && index === start) {
          negatedExtglob = true;
        }
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              isGlob3 = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }
    if (code === CHAR_ASTERISK) {
      if (prev === CHAR_ASTERISK)
        isGlobstar = token.isGlobstar = true;
      isGlob3 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_QUESTION_MARK) {
      isGlob3 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_LEFT_SQUARE_BRACKET) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          isBracket = token.isBracket = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          break;
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = token.negated = true;
      start++;
      continue;
    }
    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
      isGlob3 = token.isGlob = true;
      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }
          if (code === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }
    if (isGlob3 === true) {
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
  }
  if (opts.noext === true) {
    isExtglob3 = false;
    isGlob3 = false;
  }
  let base = str;
  let prefix = "";
  let glob = "";
  if (start > 0) {
    prefix = str.slice(0, start);
    str = str.slice(start);
    lastIndex -= start;
  }
  if (base && isGlob3 === true && lastIndex > 0) {
    base = str.slice(0, lastIndex);
    glob = str.slice(lastIndex);
  } else if (isGlob3 === true) {
    base = "";
    glob = str;
  } else {
    base = str;
  }
  if (base && base !== "" && base !== "/" && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }
  if (opts.unescape === true) {
    if (glob)
      glob = utils$3.removeBackslashes(glob);
    if (base && backslashes === true) {
      base = utils$3.removeBackslashes(base);
    }
  }
  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob: isGlob3,
    isExtglob: isExtglob3,
    isGlobstar,
    negated,
    negatedExtglob
  };
  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }
  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;
    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== "") {
        parts.push(value);
      }
      prevIndex = i;
    }
    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);
      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }
    state.slashes = slashes;
    state.parts = parts;
  }
  return state;
};
var scan_1 = scan$1;
const constants$1 = constants$2;
const utils$2 = utils$4;
const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants$1;
const expandRange = (args, options) => {
  if (typeof options.expandRange === "function") {
    return options.expandRange(...args, options);
  }
  args.sort();
  const value = `[${args.join("-")}]`;
  try {
    new RegExp(value);
  } catch (ex) {
    return args.map((v) => utils$2.escapeRegex(v)).join("..");
  }
  return value;
};
const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};
const parse$2 = (input, options) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  input = REPLACEMENTS[input] || input;
  const opts = __spreadValues({}, options);
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  const bos = { type: "bos", value: "", output: opts.prepend || "" };
  const tokens = [bos];
  const capture = opts.capture ? "" : "?:";
  const win32 = utils$2.isWindows(options);
  const PLATFORM_CHARS = constants$1.globChars(win32);
  const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    PLUS_LITERAL: PLUS_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOT_SLASH: NO_DOT_SLASH2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    QMARK: QMARK2,
    QMARK_NO_DOT: QMARK_NO_DOT2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = PLATFORM_CHARS;
  const globstar = (opts2) => {
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const nodot = opts.dot ? "" : NO_DOT2;
  const qmarkNoDot = opts.dot ? QMARK2 : QMARK_NO_DOT2;
  let star = opts.bash === true ? globstar(opts) : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  if (typeof opts.noext === "boolean") {
    opts.noextglob = opts.noext;
  }
  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: "",
    output: "",
    prefix: "",
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };
  input = utils$2.removePrefix(input, state);
  len = input.length;
  const extglobs = [];
  const braces2 = [];
  const stack = [];
  let prev = bos;
  let value;
  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || "";
  const remaining = () => input.slice(state.index + 1);
  const consume = (value2 = "", num = 0) => {
    state.consumed += value2;
    state.index += num;
  };
  const append2 = (token) => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };
  const negate = () => {
    let count = 1;
    while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
      advance();
      state.start++;
      count++;
    }
    if (count % 2 === 0) {
      return false;
    }
    state.negated = true;
    state.start++;
    return true;
  };
  const increment = (type) => {
    state[type]++;
    stack.push(type);
  };
  const decrement = (type) => {
    state[type]--;
    stack.pop();
  };
  const push = (tok) => {
    if (prev.type === "globstar") {
      const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
      const isExtglob3 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
      if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob3) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "star";
        prev.value = "*";
        prev.output = star;
        state.output += prev.output;
      }
    }
    if (extglobs.length && tok.type !== "paren") {
      extglobs[extglobs.length - 1].inner += tok.value;
    }
    if (tok.value || tok.output)
      append2(tok);
    if (prev && prev.type === "text" && tok.type === "text") {
      prev.value += tok.value;
      prev.output = (prev.output || "") + tok.value;
      return;
    }
    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };
  const extglobOpen = (type, value2) => {
    const token = __spreadProps(__spreadValues({}, EXTGLOB_CHARS[value2]), { conditions: 1, inner: "" });
    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? "(" : "") + token.open;
    increment("parens");
    push({ type, value: value2, output: state.output ? "" : ONE_CHAR2 });
    push({ type: "paren", extglob: true, value: advance(), output });
    extglobs.push(token);
  };
  const extglobClose = (token) => {
    let output = token.close + (opts.capture ? ")" : "");
    let rest;
    if (token.type === "negate") {
      let extglobStar = star;
      if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
        extglobStar = globstar(opts);
      }
      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }
      if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        const expression = parse$2(rest, __spreadProps(__spreadValues({}, options), { fastpaths: false })).output;
        output = token.close = `)${expression})${extglobStar})`;
      }
      if (token.prev.type === "bos") {
        state.negatedExtglob = true;
      }
    }
    push({ type: "paren", extglob: true, value, output });
    decrement("parens");
  };
  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;
    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars2, first, rest, index) => {
      if (first === "\\") {
        backslashes = true;
        return m;
      }
      if (first === "?") {
        if (esc) {
          return esc + first + (rest ? QMARK2.repeat(rest.length) : "");
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK2.repeat(rest.length) : "");
        }
        return QMARK2.repeat(chars2.length);
      }
      if (first === ".") {
        return DOT_LITERAL2.repeat(chars2.length);
      }
      if (first === "*") {
        if (esc) {
          return esc + first + (rest ? star : "");
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });
    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, "");
      } else {
        output = output.replace(/\\+/g, (m) => {
          return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
        });
      }
    }
    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }
    state.output = utils$2.wrapOutput(output, state, options);
    return state;
  }
  while (!eos()) {
    value = advance();
    if (value === "\0") {
      continue;
    }
    if (value === "\\") {
      const next = peek();
      if (next === "/" && opts.bash !== true) {
        continue;
      }
      if (next === "." || next === ";") {
        continue;
      }
      if (!next) {
        value += "\\";
        push({ type: "text", value });
        continue;
      }
      const match2 = /^\\+/.exec(remaining());
      let slashes = 0;
      if (match2 && match2[0].length > 2) {
        slashes = match2[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += "\\";
        }
      }
      if (opts.unescape === true) {
        value = advance();
      } else {
        value += advance();
      }
      if (state.brackets === 0) {
        push({ type: "text", value });
        continue;
      }
    }
    if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
      if (opts.posix !== false && value === ":") {
        const inner = prev.value.slice(1);
        if (inner.includes("[")) {
          prev.posix = true;
          if (inner.includes(":")) {
            const idx = prev.value.lastIndexOf("[");
            const pre = prev.value.slice(0, idx);
            const rest2 = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest2];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();
              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR2;
              }
              continue;
            }
          }
        }
      }
      if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
        value = `\\${value}`;
      }
      if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
        value = `\\${value}`;
      }
      if (opts.posix === true && value === "!" && prev.value === "[") {
        value = "^";
      }
      prev.value += value;
      append2({ value });
      continue;
    }
    if (state.quotes === 1 && value !== '"') {
      value = utils$2.escapeRegex(value);
      prev.value += value;
      append2({ value });
      continue;
    }
    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: "text", value });
      }
      continue;
    }
    if (value === "(") {
      increment("parens");
      push({ type: "paren", value });
      continue;
    }
    if (value === ")") {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError("opening", "("));
      }
      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }
      push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
      decrement("parens");
      continue;
    }
    if (value === "[") {
      if (opts.nobracket === true || !remaining().includes("]")) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("closing", "]"));
        }
        value = `\\${value}`;
      } else {
        increment("brackets");
      }
      push({ type: "bracket", value });
      continue;
    }
    if (value === "]") {
      if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
        push({ type: "text", value, output: `\\${value}` });
        continue;
      }
      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "["));
        }
        push({ type: "text", value, output: `\\${value}` });
        continue;
      }
      decrement("brackets");
      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
        value = `/${value}`;
      }
      prev.value += value;
      append2({ value });
      if (opts.literalBrackets === false || utils$2.hasRegexChars(prevValue)) {
        continue;
      }
      const escaped = utils$2.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }
    if (value === "{" && opts.nobrace !== true) {
      increment("braces");
      const open = {
        type: "brace",
        value,
        output: "(",
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };
      braces2.push(open);
      push(open);
      continue;
    }
    if (value === "}") {
      const brace = braces2[braces2.length - 1];
      if (opts.nobrace === true || !brace) {
        push({ type: "text", value, output: value });
        continue;
      }
      let output = ")";
      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];
        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === "brace") {
            break;
          }
          if (arr[i].type !== "dots") {
            range.unshift(arr[i].value);
          }
        }
        output = expandRange(range, opts);
        state.backtrack = true;
      }
      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = "\\{";
        value = output = "\\}";
        state.output = out;
        for (const t of toks) {
          state.output += t.output || t.value;
        }
      }
      push({ type: "brace", value, output });
      decrement("braces");
      braces2.pop();
      continue;
    }
    if (value === "|") {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: "text", value });
      continue;
    }
    if (value === ",") {
      let output = value;
      const brace = braces2[braces2.length - 1];
      if (brace && stack[stack.length - 1] === "braces") {
        brace.comma = true;
        output = "|";
      }
      push({ type: "comma", value, output });
      continue;
    }
    if (value === "/") {
      if (prev.type === "dot" && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = "";
        state.output = "";
        tokens.pop();
        prev = bos;
        continue;
      }
      push({ type: "slash", value, output: SLASH_LITERAL2 });
      continue;
    }
    if (value === ".") {
      if (state.braces > 0 && prev.type === "dot") {
        if (prev.value === ".")
          prev.output = DOT_LITERAL2;
        const brace = braces2[braces2.length - 1];
        prev.type = "dots";
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }
      if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
        push({ type: "text", value, output: DOT_LITERAL2 });
        continue;
      }
      push({ type: "dot", value, output: DOT_LITERAL2 });
      continue;
    }
    if (value === "?") {
      const isGroup = prev && prev.value === "(";
      if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("qmark", value);
        continue;
      }
      if (prev && prev.type === "paren") {
        const next = peek();
        let output = value;
        if (next === "<" && !utils$2.supportsLookbehinds()) {
          throw new Error("Node.js v10 or higher is required for regex lookbehinds");
        }
        if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
          output = `\\${value}`;
        }
        push({ type: "text", value, output });
        continue;
      }
      if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
        push({ type: "qmark", value, output: QMARK_NO_DOT2 });
        continue;
      }
      push({ type: "qmark", value, output: QMARK2 });
      continue;
    }
    if (value === "!") {
      if (opts.noextglob !== true && peek() === "(") {
        if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
          extglobOpen("negate", value);
          continue;
        }
      }
      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }
    if (value === "+") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("plus", value);
        continue;
      }
      if (prev && prev.value === "(" || opts.regex === false) {
        push({ type: "plus", value, output: PLUS_LITERAL2 });
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
        push({ type: "plus", value });
        continue;
      }
      push({ type: "plus", value: PLUS_LITERAL2 });
      continue;
    }
    if (value === "@") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        push({ type: "at", extglob: true, value, output: "" });
        continue;
      }
      push({ type: "text", value });
      continue;
    }
    if (value !== "*") {
      if (value === "$" || value === "^") {
        value = `\\${value}`;
      }
      const match2 = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match2) {
        value += match2[0];
        state.index += match2[0].length;
      }
      push({ type: "text", value });
      continue;
    }
    if (prev && (prev.type === "globstar" || prev.star === true)) {
      prev.type = "star";
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }
    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen("star", value);
      continue;
    }
    if (prev.type === "star") {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }
      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === "slash" || prior.type === "bos";
      const afterStar = before && (before.type === "star" || before.type === "globstar");
      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
        push({ type: "star", value, output: "" });
        continue;
      }
      const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
      const isExtglob3 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
      if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob3) {
        push({ type: "star", value, output: "" });
        continue;
      }
      while (rest.slice(0, 3) === "/**") {
        const after = input[state.index + 4];
        if (after && after !== "/") {
          break;
        }
        rest = rest.slice(3);
        consume("/**", 3);
      }
      if (prior.type === "bos" && eos()) {
        prev.type = "globstar";
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
        const end = rest[1] !== void 0 ? "|$" : "";
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = `${globstar(opts)}${SLASH_LITERAL2}|${SLASH_LITERAL2}${end})`;
        prev.value += value;
        state.output += prior.output + prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: "slash", value: "/", output: "" });
        continue;
      }
      if (prior.type === "bos" && rest[0] === "/") {
        prev.type = "globstar";
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL2}|${globstar(opts)}${SLASH_LITERAL2})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: "slash", value: "/", output: "" });
        continue;
      }
      state.output = state.output.slice(0, -prev.output.length);
      prev.type = "globstar";
      prev.output = globstar(opts);
      prev.value += value;
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }
    const token = { type: "star", value, output: star };
    if (opts.bash === true) {
      token.output = ".*?";
      if (prev.type === "bos" || prev.type === "slash") {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }
    if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }
    if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
      if (prev.type === "dot") {
        state.output += NO_DOT_SLASH2;
        prev.output += NO_DOT_SLASH2;
      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH2;
        prev.output += NO_DOTS_SLASH2;
      } else {
        state.output += nodot;
        prev.output += nodot;
      }
      if (peek() !== "*") {
        state.output += ONE_CHAR2;
        prev.output += ONE_CHAR2;
      }
    }
    push(token);
  }
  while (state.brackets > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "]"));
    state.output = utils$2.escapeLast(state.output, "[");
    decrement("brackets");
  }
  while (state.parens > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", ")"));
    state.output = utils$2.escapeLast(state.output, "(");
    decrement("parens");
  }
  while (state.braces > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "}"));
    state.output = utils$2.escapeLast(state.output, "{");
    decrement("braces");
  }
  if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
    push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL2}?` });
  }
  if (state.backtrack === true) {
    state.output = "";
    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;
      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }
  return state;
};
parse$2.fastpaths = (input, options) => {
  const opts = __spreadValues({}, options);
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  input = REPLACEMENTS[input] || input;
  const win32 = utils$2.isWindows(options);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOTS: NO_DOTS2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = constants$1.globChars(win32);
  const nodot = opts.dot ? NO_DOTS2 : NO_DOT2;
  const slashDot = opts.dot ? NO_DOTS_SLASH2 : NO_DOT2;
  const capture = opts.capture ? "" : "?:";
  const state = { negated: false, prefix: "" };
  let star = opts.bash === true ? ".*?" : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  const globstar = (opts2) => {
    if (opts2.noglobstar === true)
      return star;
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const create2 = (str) => {
    switch (str) {
      case "*":
        return `${nodot}${ONE_CHAR2}${star}`;
      case ".*":
        return `${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*.*":
        return `${nodot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*/*":
        return `${nodot}${star}${SLASH_LITERAL2}${ONE_CHAR2}${slashDot}${star}`;
      case "**":
        return nodot + globstar(opts);
      case "**/*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${ONE_CHAR2}${star}`;
      case "**/*.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "**/.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      default: {
        const match2 = /^(.*?)\.(\w+)$/.exec(str);
        if (!match2)
          return;
        const source2 = create2(match2[1]);
        if (!source2)
          return;
        return source2 + DOT_LITERAL2 + match2[2];
      }
    }
  };
  const output = utils$2.removePrefix(input, state);
  let source = create2(output);
  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL2}?`;
  }
  return source;
};
var parse_1 = parse$2;
const path = require$$0__default$3["default"];
const scan = scan_1;
const parse$1 = parse_1;
const utils$1 = utils$4;
const constants = constants$2;
const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
const picomatch$2 = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map((input) => picomatch$2(input, options, returnState));
    const arrayMatcher = (str) => {
      for (const isMatch of fns) {
        const state2 = isMatch(str);
        if (state2)
          return state2;
      }
      return false;
    };
    return arrayMatcher;
  }
  const isState = isObject(glob) && glob.tokens && glob.input;
  if (glob === "" || typeof glob !== "string" && !isState) {
    throw new TypeError("Expected pattern to be a non-empty string");
  }
  const opts = options || {};
  const posix = utils$1.isWindows(options);
  const regex2 = isState ? picomatch$2.compileRe(glob, options) : picomatch$2.makeRe(glob, options, false, true);
  const state = regex2.state;
  delete regex2.state;
  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = __spreadProps(__spreadValues({}, options), { ignore: null, onMatch: null, onResult: null });
    isIgnored = picomatch$2(opts.ignore, ignoreOpts, returnState);
  }
  const matcher = (input, returnObject = false) => {
    const { isMatch, match: match2, output } = picomatch$2.test(input, regex2, options, { glob, posix });
    const result = { glob, state, regex: regex2, posix, input, output, match: match2, isMatch };
    if (typeof opts.onResult === "function") {
      opts.onResult(result);
    }
    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (isIgnored(input)) {
      if (typeof opts.onIgnore === "function") {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (typeof opts.onMatch === "function") {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };
  if (returnState) {
    matcher.state = state;
  }
  return matcher;
};
picomatch$2.test = (input, regex2, options, { glob, posix } = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected input to be a string");
  }
  if (input === "") {
    return { isMatch: false, output: "" };
  }
  const opts = options || {};
  const format = opts.format || (posix ? utils$1.toPosixSlashes : null);
  let match2 = input === glob;
  let output = match2 && format ? format(input) : input;
  if (match2 === false) {
    output = format ? format(input) : input;
    match2 = output === glob;
  }
  if (match2 === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match2 = picomatch$2.matchBase(input, regex2, options, posix);
    } else {
      match2 = regex2.exec(output);
    }
  }
  return { isMatch: Boolean(match2), match: match2, output };
};
picomatch$2.matchBase = (input, glob, options, posix = utils$1.isWindows(options)) => {
  const regex2 = glob instanceof RegExp ? glob : picomatch$2.makeRe(glob, options);
  return regex2.test(path.basename(input));
};
picomatch$2.isMatch = (str, patterns, options) => picomatch$2(patterns, options)(str);
picomatch$2.parse = (pattern, options) => {
  if (Array.isArray(pattern))
    return pattern.map((p) => picomatch$2.parse(p, options));
  return parse$1(pattern, __spreadProps(__spreadValues({}, options), { fastpaths: false }));
};
picomatch$2.scan = (input, options) => scan(input, options);
picomatch$2.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }
  const opts = options || {};
  const prepend = opts.contains ? "" : "^";
  const append2 = opts.contains ? "" : "$";
  let source = `${prepend}(?:${state.output})${append2}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }
  const regex2 = picomatch$2.toRegex(source, options);
  if (returnState === true) {
    regex2.state = state;
  }
  return regex2;
};
picomatch$2.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== "string") {
    throw new TypeError("Expected a non-empty string");
  }
  let parsed = { negated: false, fastpaths: true };
  if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
    parsed.output = parse$1.fastpaths(input, options);
  }
  if (!parsed.output) {
    parsed = parse$1(input, options);
  }
  return picomatch$2.compileRe(parsed, options, returnOutput, returnState);
};
picomatch$2.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
  } catch (err) {
    if (options && options.debug === true)
      throw err;
    return /$^/;
  }
};
picomatch$2.constants = constants;
var picomatch_1 = picomatch$2;
var picomatch$1 = picomatch_1;
const util = require$$0__default$2["default"];
const braces = braces_1;
const picomatch = picomatch$1;
const utils = utils$4;
const isEmptyString = (val) => val === "" || val === "./";
const micromatch$1 = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);
  let omit = new Set();
  let keep = new Set();
  let items = new Set();
  let negatives = 0;
  let onResult = (state) => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };
  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), __spreadProps(__spreadValues({}, options), { onResult }), true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated)
      negatives++;
    for (let item of list) {
      let matched = isMatch(item, true);
      let match2 = negated ? !matched.isMatch : matched.isMatch;
      if (!match2)
        continue;
      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }
  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter((item) => !omit.has(item));
  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(", ")}"`);
    }
    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
    }
  }
  return matches;
};
micromatch$1.match = micromatch$1;
micromatch$1.matcher = (pattern, options) => picomatch(pattern, options);
micromatch$1.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
micromatch$1.any = micromatch$1.isMatch;
micromatch$1.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = new Set();
  let items = [];
  let onResult = (state) => {
    if (options.onResult)
      options.onResult(state);
    items.push(state.output);
  };
  let matches = new Set(micromatch$1(list, patterns, __spreadProps(__spreadValues({}, options), { onResult })));
  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};
micromatch$1.contains = (str, pattern, options) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
  }
  if (Array.isArray(pattern)) {
    return pattern.some((p) => micromatch$1.contains(str, p, options));
  }
  if (typeof pattern === "string") {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }
    if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
      return true;
    }
  }
  return micromatch$1.isMatch(str, pattern, __spreadProps(__spreadValues({}, options), { contains: true }));
};
micromatch$1.matchKeys = (obj, patterns, options) => {
  if (!utils.isObject(obj)) {
    throw new TypeError("Expected the first argument to be an object");
  }
  let keys = micromatch$1(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys)
    res[key] = obj[key];
  return res;
};
micromatch$1.some = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (items.some((item) => isMatch(item))) {
      return true;
    }
  }
  return false;
};
micromatch$1.every = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (!items.every((item) => isMatch(item))) {
      return false;
    }
  }
  return true;
};
micromatch$1.all = (str, patterns, options) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
  }
  return [].concat(patterns).every((p) => picomatch(p, options)(str));
};
micromatch$1.capture = (glob, input, options) => {
  let posix = utils.isWindows(options);
  let regex2 = picomatch.makeRe(String(glob), __spreadProps(__spreadValues({}, options), { capture: true }));
  let match2 = regex2.exec(posix ? utils.toPosixSlashes(input) : input);
  if (match2) {
    return match2.slice(1).map((v) => v === void 0 ? "" : v);
  }
};
micromatch$1.makeRe = (...args) => picomatch.makeRe(...args);
micromatch$1.scan = (...args) => picomatch.scan(...args);
micromatch$1.parse = (patterns, options) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str of braces(String(pattern), options)) {
      res.push(picomatch.parse(str, options));
    }
  }
  return res;
};
micromatch$1.braces = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
    return [pattern];
  }
  return braces(pattern, options);
};
micromatch$1.braceExpand = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  return micromatch$1.braces(pattern, __spreadProps(__spreadValues({}, options), { expand: true }));
};
var micromatch_1 = micromatch$1;
Object.defineProperty(contextMatcher$1, "__esModule", { value: true });
contextMatcher$1.match = void 0;
const isGlob = isGlob$1;
const micromatch = micromatch_1;
const url = require$$0__default$4["default"];
const errors_1$1 = errors;
function match(context, uri, req) {
  if (isStringPath(context)) {
    return matchSingleStringPath(context, uri);
  }
  if (isGlobPath(context)) {
    return matchSingleGlobPath(context, uri);
  }
  if (Array.isArray(context)) {
    if (context.every(isStringPath)) {
      return matchMultiPath(context, uri);
    }
    if (context.every(isGlobPath)) {
      return matchMultiGlobPath(context, uri);
    }
    throw new Error(errors_1$1.ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);
  }
  if (typeof context === "function") {
    const pathname = getUrlPathName(uri);
    return context(pathname, req);
  }
  throw new Error(errors_1$1.ERRORS.ERR_CONTEXT_MATCHER_GENERIC);
}
contextMatcher$1.match = match;
function matchSingleStringPath(context, uri) {
  const pathname = getUrlPathName(uri);
  return pathname.indexOf(context) === 0;
}
function matchSingleGlobPath(pattern, uri) {
  const pathname = getUrlPathName(uri);
  const matches = micromatch([pathname], pattern);
  return matches && matches.length > 0;
}
function matchMultiGlobPath(patternList, uri) {
  return matchSingleGlobPath(patternList, uri);
}
function matchMultiPath(contextList, uri) {
  let isMultiPath = false;
  for (const context of contextList) {
    if (matchSingleStringPath(context, uri)) {
      isMultiPath = true;
      break;
    }
  }
  return isMultiPath;
}
function getUrlPathName(uri) {
  return uri && url.parse(uri).pathname;
}
function isStringPath(context) {
  return typeof context === "string" && !isGlob(context);
}
function isGlobPath(context) {
  return isGlob(context);
}
var _handlers = {};
Object.defineProperty(_handlers, "__esModule", { value: true });
_handlers.getHandlers = _handlers.init = void 0;
const logger_1$3 = logger$4;
const logger$2 = (0, logger_1$3.getInstance)();
function init(proxy, option) {
  const handlers2 = getHandlers(option);
  for (const eventName of Object.keys(handlers2)) {
    proxy.on(eventName, handlers2[eventName]);
  }
  proxy.on("econnreset", (error, req, res, target) => {
    logger$2.error(`[HPM] ECONNRESET: %O`, error);
  });
  proxy.on("proxyReqWs", (proxyReq, req, socket, options, head) => {
    socket.on("error", (error) => {
      logger$2.error(`[HPM] WebSocket error: %O`, error);
    });
  });
  logger$2.debug("[HPM] Subscribed to http-proxy events:", Object.keys(handlers2));
}
_handlers.init = init;
function getHandlers(options) {
  const proxyEventsMap = {
    error: "onError",
    proxyReq: "onProxyReq",
    proxyReqWs: "onProxyReqWs",
    proxyRes: "onProxyRes",
    open: "onOpen",
    close: "onClose"
  };
  const handlers2 = {};
  for (const [eventName, onEventName] of Object.entries(proxyEventsMap)) {
    const fnHandler = options ? options[onEventName] : null;
    if (typeof fnHandler === "function") {
      handlers2[eventName] = fnHandler;
    }
  }
  if (typeof handlers2.error !== "function") {
    handlers2.error = defaultErrorHandler;
  }
  if (typeof handlers2.close !== "function") {
    handlers2.close = logClose;
  }
  return handlers2;
}
_handlers.getHandlers = getHandlers;
function defaultErrorHandler(err, req, res) {
  if (!req && !res) {
    throw err;
  }
  const host = req.headers && req.headers.host;
  const code = err.code;
  if (res.writeHead && !res.headersSent) {
    if (/HPE_INVALID/.test(code)) {
      res.writeHead(502);
    } else {
      switch (code) {
        case "ECONNRESET":
        case "ENOTFOUND":
        case "ECONNREFUSED":
        case "ETIMEDOUT":
          res.writeHead(504);
          break;
        default:
          res.writeHead(500);
      }
    }
  }
  res.end(`Error occurred while trying to proxy: ${host}${req.url}`);
}
function logClose(req, socket, head) {
  logger$2.info("[HPM] Client disconnected");
}
var pathRewriter = {};
Object.defineProperty(pathRewriter, "__esModule", { value: true });
pathRewriter.createPathRewriter = void 0;
const isPlainObj$1 = isPlainObj$3;
const errors_1 = errors;
const logger_1$2 = logger$4;
const logger$1 = (0, logger_1$2.getInstance)();
function createPathRewriter(rewriteConfig) {
  let rulesCache;
  if (!isValidRewriteConfig(rewriteConfig)) {
    return;
  }
  if (typeof rewriteConfig === "function") {
    const customRewriteFn = rewriteConfig;
    return customRewriteFn;
  } else {
    rulesCache = parsePathRewriteRules(rewriteConfig);
    return rewritePath;
  }
  function rewritePath(path2) {
    let result = path2;
    for (const rule of rulesCache) {
      if (rule.regex.test(path2)) {
        result = result.replace(rule.regex, rule.value);
        logger$1.debug('[HPM] Rewriting path from "%s" to "%s"', path2, result);
        break;
      }
    }
    return result;
  }
}
pathRewriter.createPathRewriter = createPathRewriter;
function isValidRewriteConfig(rewriteConfig) {
  if (typeof rewriteConfig === "function") {
    return true;
  } else if (isPlainObj$1(rewriteConfig)) {
    return Object.keys(rewriteConfig).length !== 0;
  } else if (rewriteConfig === void 0 || rewriteConfig === null) {
    return false;
  } else {
    throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);
  }
}
function parsePathRewriteRules(rewriteConfig) {
  const rules = [];
  if (isPlainObj$1(rewriteConfig)) {
    for (const [key] of Object.entries(rewriteConfig)) {
      rules.push({
        regex: new RegExp(key),
        value: rewriteConfig[key]
      });
      logger$1.info('[HPM] Proxy rewrite rule created: "%s" ~> "%s"', key, rewriteConfig[key]);
    }
  }
  return rules;
}
var router = {};
Object.defineProperty(router, "__esModule", { value: true });
router.getTarget = void 0;
const isPlainObj = isPlainObj$3;
const logger_1$1 = logger$4;
const logger = (0, logger_1$1.getInstance)();
async function getTarget(req, config) {
  let newTarget;
  const router2 = config.router;
  if (isPlainObj(router2)) {
    newTarget = getTargetFromProxyTable(req, router2);
  } else if (typeof router2 === "function") {
    newTarget = await router2(req);
  }
  return newTarget;
}
router.getTarget = getTarget;
function getTargetFromProxyTable(req, table) {
  let result;
  const host = req.headers.host;
  const path2 = req.url;
  const hostAndPath = host + path2;
  for (const [key] of Object.entries(table)) {
    if (containsPath(key)) {
      if (hostAndPath.indexOf(key) > -1) {
        result = table[key];
        logger.debug('[HPM] Router table match: "%s"', key);
        break;
      }
    } else {
      if (key === host) {
        result = table[key];
        logger.debug('[HPM] Router table match: "%s"', host);
        break;
      }
    }
  }
  return result;
}
function containsPath(v) {
  return v.indexOf("/") > -1;
}
Object.defineProperty(httpProxyMiddleware, "__esModule", { value: true });
httpProxyMiddleware.HttpProxyMiddleware = void 0;
const httpProxy = httpProxy$1;
const config_factory_1 = configFactory;
const contextMatcher = contextMatcher$1;
const handlers$1 = _handlers;
const logger_1 = logger$4;
const PathRewriter = pathRewriter;
const Router = router;
class HttpProxyMiddleware {
  constructor(context, opts) {
    this.logger = (0, logger_1.getInstance)();
    this.wsInternalSubscribed = false;
    this.serverOnCloseSubscribed = false;
    this.middleware = async (req, res, next) => {
      var _a, _b;
      if (this.shouldProxy(this.config.context, req)) {
        try {
          const activeProxyOptions = await this.prepareProxyRequest(req);
          this.proxy.web(req, res, activeProxyOptions);
        } catch (err) {
          next(err);
        }
      } else {
        next();
      }
      const server = (_b = (_a = req.socket) !== null && _a !== void 0 ? _a : req.connection) === null || _b === void 0 ? void 0 : _b.server;
      if (server && !this.serverOnCloseSubscribed) {
        server.on("close", () => {
          this.logger.info("[HPM] server close signal received: closing proxy server");
          this.proxy.close();
        });
        this.serverOnCloseSubscribed = true;
      }
      if (this.proxyOptions.ws === true) {
        this.catchUpgradeRequest(server);
      }
    };
    this.catchUpgradeRequest = (server) => {
      if (!this.wsInternalSubscribed) {
        server.on("upgrade", this.handleUpgrade);
        this.wsInternalSubscribed = true;
      }
    };
    this.handleUpgrade = async (req, socket, head) => {
      if (this.shouldProxy(this.config.context, req)) {
        const activeProxyOptions = await this.prepareProxyRequest(req);
        this.proxy.ws(req, socket, head, activeProxyOptions);
        this.logger.info("[HPM] Upgrading to WebSocket");
      }
    };
    this.shouldProxy = (context2, req) => {
      const path2 = req.originalUrl || req.url;
      return contextMatcher.match(context2, path2, req);
    };
    this.prepareProxyRequest = async (req) => {
      req.url = req.originalUrl || req.url;
      const originalPath = req.url;
      const newProxyOptions = Object.assign({}, this.proxyOptions);
      await this.applyRouter(req, newProxyOptions);
      await this.applyPathRewrite(req, this.pathRewriter);
      if (this.proxyOptions.logLevel === "debug") {
        const arrow = (0, logger_1.getArrow)(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);
        this.logger.debug("[HPM] %s %s %s %s", req.method, originalPath, arrow, newProxyOptions.target);
      }
      return newProxyOptions;
    };
    this.applyRouter = async (req, options) => {
      let newTarget;
      if (options.router) {
        newTarget = await Router.getTarget(req, options);
        if (newTarget) {
          this.logger.debug('[HPM] Router new target: %s -> "%s"', options.target, newTarget);
          options.target = newTarget;
        }
      }
    };
    this.applyPathRewrite = async (req, pathRewriter2) => {
      if (pathRewriter2) {
        const path2 = await pathRewriter2(req.url, req);
        if (typeof path2 === "string") {
          req.url = path2;
        } else {
          this.logger.info("[HPM] pathRewrite: No rewritten path found. (%s)", req.url);
        }
      }
    };
    this.logError = (err, req, res, target) => {
      var _a;
      const hostname = ((_a = req.headers) === null || _a === void 0 ? void 0 : _a.host) || req.hostname || req.host;
      const requestHref = `${hostname}${req.url}`;
      const targetHref = `${target === null || target === void 0 ? void 0 : target.href}`;
      const errorMessage = "[HPM] Error occurred while proxying request %s to %s [%s] (%s)";
      const errReference = "https://nodejs.org/api/errors.html#errors_common_system_errors";
      this.logger.error(errorMessage, requestHref, targetHref, err.code || err, errReference);
    };
    this.config = (0, config_factory_1.createConfig)(context, opts);
    this.proxyOptions = this.config.options;
    this.proxy = httpProxy.createProxyServer({});
    this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);
    this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite);
    handlers$1.init(this.proxy, this.proxyOptions);
    this.proxy.on("error", this.logError);
    this.middleware.upgrade = (req, socket, head) => {
      if (!this.wsInternalSubscribed) {
        this.handleUpgrade(req, socket, head);
      }
    };
  }
}
httpProxyMiddleware.HttpProxyMiddleware = HttpProxyMiddleware;
var handlers = {};
var _public = {};
var responseInterceptor$1 = {};
Object.defineProperty(responseInterceptor$1, "__esModule", { value: true });
responseInterceptor$1.responseInterceptor = void 0;
const zlib = require$$0__default$6["default"];
function responseInterceptor(interceptor) {
  return async function proxyRes(proxyRes, req, res) {
    const originalProxyRes = proxyRes;
    let buffer = Buffer.from("", "utf8");
    const _proxyRes = decompress(proxyRes, proxyRes.headers["content-encoding"]);
    _proxyRes.on("data", (chunk) => buffer = Buffer.concat([buffer, chunk]));
    _proxyRes.on("end", async () => {
      copyHeaders(proxyRes, res);
      const interceptedBuffer = Buffer.from(await interceptor(buffer, originalProxyRes, req, res));
      res.setHeader("content-length", Buffer.byteLength(interceptedBuffer, "utf8"));
      res.write(interceptedBuffer);
      res.end();
    });
    _proxyRes.on("error", (error) => {
      res.end(`Error fetching proxied request: ${error.message}`);
    });
  };
}
responseInterceptor$1.responseInterceptor = responseInterceptor;
function decompress(proxyRes, contentEncoding) {
  let _proxyRes = proxyRes;
  let decompress2;
  switch (contentEncoding) {
    case "gzip":
      decompress2 = zlib.createGunzip();
      break;
    case "br":
      decompress2 = zlib.createBrotliDecompress();
      break;
    case "deflate":
      decompress2 = zlib.createInflate();
      break;
  }
  if (decompress2) {
    _proxyRes.pipe(decompress2);
    _proxyRes = decompress2;
  }
  return _proxyRes;
}
function copyHeaders(originalResponse, response) {
  response.statusCode = originalResponse.statusCode;
  response.statusMessage = originalResponse.statusMessage;
  if (response.setHeader) {
    let keys = Object.keys(originalResponse.headers);
    keys = keys.filter((key) => !["content-encoding", "transfer-encoding"].includes(key));
    keys.forEach((key) => {
      let value = originalResponse.headers[key];
      if (key === "set-cookie") {
        value = Array.isArray(value) ? value : [value];
        value = value.map((x) => x.replace(/Domain=[^;]+?/i, ""));
      }
      response.setHeader(key, value);
    });
  } else {
    response.headers = originalResponse.headers;
  }
}
var fixRequestBody$1 = {};
Object.defineProperty(fixRequestBody$1, "__esModule", { value: true });
fixRequestBody$1.fixRequestBody = void 0;
const querystring = require$$0__default$7["default"];
function fixRequestBody(proxyReq, req) {
  const requestBody = req.body;
  if (!requestBody) {
    return;
  }
  const contentType = proxyReq.getHeader("Content-Type");
  const writeBody = (bodyData) => {
    proxyReq.setHeader("Content-Length", Buffer.byteLength(bodyData));
    proxyReq.write(bodyData);
  };
  if (contentType && contentType.includes("application/json")) {
    writeBody(JSON.stringify(requestBody));
  }
  if (contentType && contentType.includes("application/x-www-form-urlencoded")) {
    writeBody(querystring.stringify(requestBody));
  }
}
fixRequestBody$1.fixRequestBody = fixRequestBody;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fixRequestBody = exports.responseInterceptor = void 0;
  var response_interceptor_1 = responseInterceptor$1;
  Object.defineProperty(exports, "responseInterceptor", { enumerable: true, get: function() {
    return response_interceptor_1.responseInterceptor;
  } });
  var fix_request_body_1 = fixRequestBody$1;
  Object.defineProperty(exports, "fixRequestBody", { enumerable: true, get: function() {
    return fix_request_body_1.fixRequestBody;
  } });
})(_public);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(_public, exports);
})(handlers);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createProxyMiddleware = void 0;
  const http_proxy_middleware_1 = httpProxyMiddleware;
  function createProxyMiddleware(context, options) {
    const { middleware } = new http_proxy_middleware_1.HttpProxyMiddleware(context, options);
    return middleware;
  }
  exports.createProxyMiddleware = createProxyMiddleware;
  __exportStar(handlers, exports);
})(dist);
var lib = { exports: {} };
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
var vary$1 = { exports: {} };
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
vary$1.exports = vary;
vary$1.exports.append = append;
var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
function append(header, field) {
  if (typeof header !== "string") {
    throw new TypeError("header argument is required");
  }
  if (!field) {
    throw new TypeError("field argument is required");
  }
  var fields = !Array.isArray(field) ? parse(String(field)) : field;
  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError("field argument contains an invalid header name");
    }
  }
  if (header === "*") {
    return header;
  }
  var val = header;
  var vals = parse(header.toLowerCase());
  if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
    return "*";
  }
  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();
    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val ? val + ", " + fields[i] : fields[i];
    }
  }
  return val;
}
function parse(header) {
  var end = 0;
  var list = [];
  var start = 0;
  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 32:
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 44:
        list.push(header.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }
  list.push(header.substring(start, end));
  return list;
}
function vary(res, field) {
  if (!res || !res.getHeader || !res.setHeader) {
    throw new TypeError("res argument is required");
  }
  var val = res.getHeader("Vary") || "";
  var header = Array.isArray(val) ? val.join(", ") : String(val);
  if (val = append(header, field)) {
    res.setHeader("Vary", val);
  }
}
(function() {
  var assign = objectAssign;
  var vary2 = vary$1.exports;
  var defaults = {
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    preflightContinue: false,
    optionsSuccessStatus: 204
  };
  function isString2(s) {
    return typeof s === "string" || s instanceof String;
  }
  function isOriginAllowed(origin, allowedOrigin) {
    if (Array.isArray(allowedOrigin)) {
      for (var i = 0; i < allowedOrigin.length; ++i) {
        if (isOriginAllowed(origin, allowedOrigin[i])) {
          return true;
        }
      }
      return false;
    } else if (isString2(allowedOrigin)) {
      return origin === allowedOrigin;
    } else if (allowedOrigin instanceof RegExp) {
      return allowedOrigin.test(origin);
    } else {
      return !!allowedOrigin;
    }
  }
  function configureOrigin(options, req) {
    var requestOrigin = req.headers.origin, headers = [], isAllowed;
    if (!options.origin || options.origin === "*") {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: "*"
      }]);
    } else if (isString2(options.origin)) {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: options.origin
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    } else {
      isAllowed = isOriginAllowed(requestOrigin, options.origin);
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: isAllowed ? requestOrigin : false
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    }
    return headers;
  }
  function configureMethods(options) {
    var methods = options.methods;
    if (methods.join) {
      methods = options.methods.join(",");
    }
    return {
      key: "Access-Control-Allow-Methods",
      value: methods
    };
  }
  function configureCredentials(options) {
    if (options.credentials === true) {
      return {
        key: "Access-Control-Allow-Credentials",
        value: "true"
      };
    }
    return null;
  }
  function configureAllowedHeaders(options, req) {
    var allowedHeaders = options.allowedHeaders || options.headers;
    var headers = [];
    if (!allowedHeaders) {
      allowedHeaders = req.headers["access-control-request-headers"];
      headers.push([{
        key: "Vary",
        value: "Access-Control-Request-Headers"
      }]);
    } else if (allowedHeaders.join) {
      allowedHeaders = allowedHeaders.join(",");
    }
    if (allowedHeaders && allowedHeaders.length) {
      headers.push([{
        key: "Access-Control-Allow-Headers",
        value: allowedHeaders
      }]);
    }
    return headers;
  }
  function configureExposedHeaders(options) {
    var headers = options.exposedHeaders;
    if (!headers) {
      return null;
    } else if (headers.join) {
      headers = headers.join(",");
    }
    if (headers && headers.length) {
      return {
        key: "Access-Control-Expose-Headers",
        value: headers
      };
    }
    return null;
  }
  function configureMaxAge(options) {
    var maxAge = (typeof options.maxAge === "number" || options.maxAge) && options.maxAge.toString();
    if (maxAge && maxAge.length) {
      return {
        key: "Access-Control-Max-Age",
        value: maxAge
      };
    }
    return null;
  }
  function applyHeaders(headers, res) {
    for (var i = 0, n = headers.length; i < n; i++) {
      var header = headers[i];
      if (header) {
        if (Array.isArray(header)) {
          applyHeaders(header, res);
        } else if (header.key === "Vary" && header.value) {
          vary2(res, header.value);
        } else if (header.value) {
          res.setHeader(header.key, header.value);
        }
      }
    }
  }
  function cors2(options, req, res, next) {
    var headers = [], method = req.method && req.method.toUpperCase && req.method.toUpperCase();
    if (method === "OPTIONS") {
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options));
      headers.push(configureMethods(options));
      headers.push(configureAllowedHeaders(options, req));
      headers.push(configureMaxAge(options));
      headers.push(configureExposedHeaders(options));
      applyHeaders(headers, res);
      if (options.preflightContinue) {
        next();
      } else {
        res.statusCode = options.optionsSuccessStatus;
        res.setHeader("Content-Length", "0");
        res.end();
      }
    } else {
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options));
      headers.push(configureExposedHeaders(options));
      applyHeaders(headers, res);
      next();
    }
  }
  function middlewareWrapper(o) {
    var optionsCallback = null;
    if (typeof o === "function") {
      optionsCallback = o;
    } else {
      optionsCallback = function(req, cb) {
        cb(null, o);
      };
    }
    return function corsMiddleware(req, res, next) {
      optionsCallback(req, function(err, options) {
        if (err) {
          next(err);
        } else {
          var corsOptions = assign({}, defaults, options);
          var originCallback = null;
          if (corsOptions.origin && typeof corsOptions.origin === "function") {
            originCallback = corsOptions.origin;
          } else if (corsOptions.origin) {
            originCallback = function(origin, cb) {
              cb(null, corsOptions.origin);
            };
          }
          if (originCallback) {
            originCallback(req.headers.origin, function(err2, origin) {
              if (err2 || !origin) {
                next(err2);
              } else {
                corsOptions.origin = origin;
                cors2(corsOptions, req, res, next);
              }
            });
          } else {
            next();
          }
        }
      });
    };
  }
  lib.exports = middlewareWrapper;
})();
var cors = lib.exports;
async function startAppServer() {
  console.log("start server sd");
  const app2 = express__default["default"]();
  const port = 3333;
  app2.use(express__default["default"].json());
  app2.use(cors({
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    credentials: true
  }));
  const proxyMiddleware = dist.createProxyMiddleware("/comfyui", {
    target: "http://127.0.0.1:8188",
    changeOrigin: true,
    ws: true,
    pathRewrite: {
      "^/comfyui": ""
    }
  });
  app2.use("/comfyui", proxyMiddleware);
  app2.get("/", (req, res) => {
    res.send("Hello, Express + TypeScript! asdf");
  });
  app2.post("/api/data", (req, res) => {
    const { data } = req.body;
    res.json({ message: `Received data: ${data}` });
  });
  app2.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
  });
}
const rendererPath = require$$0__default$3["default"].join(__dirname, "../renderer");
console.log("started:", rendererPath);
require$$0$1.app.disableHardwareAcceleration();
require$$0$1.app.on("ready", async () => {
  await startAppServer();
  await createMainWindow();
  startIPC();
  startAutoUpdater();
});
require$$0$1.app.on("window-all-closed", require$$0$1.app.quit);
require$$0$1.app.on("activate", restoreOrCreateWindow);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGVjdHJvbi1pcy1kZXZAMS4yLjAvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWlzLWRldi9pbmRleC5qcyIsIi4uL3NyYy91dGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pcy1mdWxsd2lkdGgtY29kZS1wb2ludEAzLjAuMC9ub2RlX21vZHVsZXMvaXMtZnVsbHdpZHRoLWNvZGUtcG9pbnQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXN0cmFsLXJlZ2V4QDIuMC4wL25vZGVfbW9kdWxlcy9hc3RyYWwtcmVnZXgvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29sb3ItbmFtZUAxLjEuNC9ub2RlX21vZHVsZXMvY29sb3ItbmFtZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb2xvci1jb252ZXJ0QDIuMC4xL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2NvbnZlcnNpb25zLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbG9yLWNvbnZlcnRAMi4wLjEvbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29sb3ItY29udmVydEAyLjAuMS9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hbnNpLXN0eWxlc0A0LjMuMC9ub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2xpY2UtYW5zaUAzLjAuMC9ub2RlX21vZHVsZXMvc2xpY2UtYW5zaS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hbnNpLXJlZ2V4QDUuMC4xL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmlwLWFuc2lANi4wLjEvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZW1vamktcmVnZXhAOC4wLjAvbm9kZV9tb2R1bGVzL2Vtb2ppLXJlZ2V4L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmluZy13aWR0aEA0LjIuMy9ub2RlX21vZHVsZXMvc3RyaW5nLXdpZHRoL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NsaS10cnVuY2F0ZUAyLjEuMC9ub2RlX21vZHVsZXMvY2xpLXRydW5jYXRlL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BhdGgtZXhpc3RzQDQuMC4wL25vZGVfbW9kdWxlcy9wYXRoLWV4aXN0cy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9tb2RpZnktZmlsZW5hbWVAMS4xLjAvbm9kZV9tb2R1bGVzL21vZGlmeS1maWxlbmFtZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS91bnVzZWQtZmlsZW5hbWVAMi4xLjAvbm9kZV9tb2R1bGVzL3VudXNlZC1maWxlbmFtZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lc2NhcGUtZ29hdEAyLjEuMS9ub2RlX21vZHVsZXMvZXNjYXBlLWdvYXQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcHVwYUAyLjEuMS9ub2RlX21vZHVsZXMvcHVwYS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taW1lLWRiQDEuNTIuMC9ub2RlX21vZHVsZXMvbWltZS1kYi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9leHQtbGlzdEAyLjIuMi9ub2RlX21vZHVsZXMvZXh0LWxpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaXMtcGxhaW4tb2JqQDEuMS4wL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmovaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc29ydC1rZXlzQDEuMS4yL25vZGVfbW9kdWxlcy9zb3J0LWtleXMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc29ydC1rZXlzLWxlbmd0aEAxLjAuMS9ub2RlX21vZHVsZXMvc29ydC1rZXlzLWxlbmd0aC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9leHQtbmFtZUA1LjAuMC9ub2RlX21vZHVsZXMvZXh0LW5hbWUvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZWxlY3Ryb24tZGxAMy41LjEvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWRsL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VsZWN0cm9uLWlzLWRldkAyLjAuMC9ub2RlX21vZHVsZXMvZWxlY3Ryb24taXMtZGV2L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VsZWN0cm9uLWNvbnRleHQtbWVudUAzLjYuMS9ub2RlX21vZHVsZXMvZWxlY3Ryb24tY29udGV4dC1tZW51L2luZGV4LmpzIiwiLi4vc3JjL3dpbmRvd3MtbWFuYWdlci50cyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGVjdHJvbi1sb2dANS4wLjEvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWxvZy9zcmMvY29yZS9zY29wZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGVjdHJvbi1sb2dANS4wLjEvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWxvZy9zcmMvY29yZS9Mb2dnZXIuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZWxlY3Ryb24tbG9nQDUuMC4xL25vZGVfbW9kdWxlcy9lbGVjdHJvbi1sb2cvc3JjL3JlbmRlcmVyL2xpYi9SZW5kZXJlckVycm9ySGFuZGxlci5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGVjdHJvbi1sb2dANS4wLjEvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWxvZy9zcmMvcmVuZGVyZXIvbGliL3RyYW5zcG9ydHMvY29uc29sZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGVjdHJvbi1sb2dANS4wLjEvbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWxvZy9zcmMvcmVuZGVyZXIvbGliL3RyYW5zcG9ydHMvaXBjLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VsZWN0cm9uLWxvZ0A1LjAuMS9ub2RlX21vZHVsZXMvZWxlY3Ryb24tbG9nL3NyYy9yZW5kZXJlci9pbmRleC5qcyIsIi4uL3NyYy9wcmVsYXVuY2gudHMiLCIuLi9zcmMvYXV0by11cGRhdGUudHMiLCIuLi9zcmMvaXBjLnRzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2V2ZW50ZW1pdHRlcjNANC4wLjcvbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVxdWlyZXMtcG9ydEAxLjAuMC9ub2RlX21vZHVsZXMvcmVxdWlyZXMtcG9ydC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5QDEuMTguMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS9saWIvaHR0cC1wcm94eS9jb21tb24uanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eUAxLjE4LjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHkvbGliL2h0dHAtcHJveHkvcGFzc2VzL3dlYi1vdXRnb2luZy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9mb2xsb3ctcmVkaXJlY3RzQDEuMTUuMy9ub2RlX21vZHVsZXMvZm9sbG93LXJlZGlyZWN0cy9kZWJ1Zy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9mb2xsb3ctcmVkaXJlY3RzQDEuMTUuMy9ub2RlX21vZHVsZXMvZm9sbG93LXJlZGlyZWN0cy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5QDEuMTguMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS9saWIvaHR0cC1wcm94eS9wYXNzZXMvd2ViLWluY29taW5nLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2h0dHAtcHJveHlAMS4xOC4xL25vZGVfbW9kdWxlcy9odHRwLXByb3h5L2xpYi9odHRwLXByb3h5L3Bhc3Nlcy93cy1pbmNvbWluZy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5QDEuMTguMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS9saWIvaHR0cC1wcm94eS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5QDEuMTguMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS9saWIvaHR0cC1wcm94eS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5QDEuMTguMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pcy1wbGFpbi1vYmpAMy4wLjAvbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5LW1pZGRsZXdhcmVAMi4wLjZfQHR5cGVzK2V4cHJlc3NANC4xNy4yMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS1taWRkbGV3YXJlL2Rpc3QvZXJyb3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2h0dHAtcHJveHktbWlkZGxld2FyZUAyLjAuNl9AdHlwZXMrZXhwcmVzc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9odHRwLXByb3h5LW1pZGRsZXdhcmUvZGlzdC9sb2dnZXIuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2NvbmZpZy1mYWN0b3J5LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lzLWV4dGdsb2JAMi4xLjEvbm9kZV9tb2R1bGVzL2lzLWV4dGdsb2IvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaXMtZ2xvYkA0LjAuMy9ub2RlX21vZHVsZXMvaXMtZ2xvYi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9icmFjZXNAMy4wLjIvbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYnJhY2VzQDMuMC4yL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL3N0cmluZ2lmeS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pcy1udW1iZXJANy4wLjAvbm9kZV9tb2R1bGVzL2lzLW51bWJlci9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS90by1yZWdleC1yYW5nZUA1LjAuMS9ub2RlX21vZHVsZXMvdG8tcmVnZXgtcmFuZ2UvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZmlsbC1yYW5nZUA3LjAuMS9ub2RlX21vZHVsZXMvZmlsbC1yYW5nZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9icmFjZXNAMy4wLjIvbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvY29tcGlsZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9icmFjZXNAMy4wLjIvbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvZXhwYW5kLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JyYWNlc0AzLjAuMi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi9jb25zdGFudHMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYnJhY2VzQDMuMC4yL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL3BhcnNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JyYWNlc0AzLjAuMi9ub2RlX21vZHVsZXMvYnJhY2VzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BpY29tYXRjaEAyLjMuMS9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9jb25zdGFudHMuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcGljb21hdGNoQDIuMy4xL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3V0aWxzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BpY29tYXRjaEAyLjMuMS9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9zY2FuLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BpY29tYXRjaEAyLjMuMS9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9wYXJzZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9waWNvbWF0Y2hAMi4zLjEvbm9kZV9tb2R1bGVzL3BpY29tYXRjaC9saWIvcGljb21hdGNoLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BpY29tYXRjaEAyLjMuMS9ub2RlX21vZHVsZXMvcGljb21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWF0Y2hANC4wLjUvbm9kZV9tb2R1bGVzL21pY3JvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2NvbnRleHQtbWF0Y2hlci5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5LW1pZGRsZXdhcmVAMi4wLjZfQHR5cGVzK2V4cHJlc3NANC4xNy4yMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS1taWRkbGV3YXJlL2Rpc3QvX2hhbmRsZXJzLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2h0dHAtcHJveHktbWlkZGxld2FyZUAyLjAuNl9AdHlwZXMrZXhwcmVzc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9odHRwLXByb3h5LW1pZGRsZXdhcmUvZGlzdC9wYXRoLXJld3JpdGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2h0dHAtcHJveHktbWlkZGxld2FyZUAyLjAuNl9AdHlwZXMrZXhwcmVzc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9odHRwLXByb3h5LW1pZGRsZXdhcmUvZGlzdC9yb3V0ZXIuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2h0dHAtcHJveHktbWlkZGxld2FyZS5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5LW1pZGRsZXdhcmVAMi4wLjZfQHR5cGVzK2V4cHJlc3NANC4xNy4yMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS1taWRkbGV3YXJlL2Rpc3QvaGFuZGxlcnMvcmVzcG9uc2UtaW50ZXJjZXB0b3IuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2hhbmRsZXJzL2ZpeC1yZXF1ZXN0LWJvZHkuanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2hhbmRsZXJzL3B1YmxpYy5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odHRwLXByb3h5LW1pZGRsZXdhcmVAMi4wLjZfQHR5cGVzK2V4cHJlc3NANC4xNy4yMS9ub2RlX21vZHVsZXMvaHR0cC1wcm94eS1taWRkbGV3YXJlL2Rpc3QvaGFuZGxlcnMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHR0cC1wcm94eS1taWRkbGV3YXJlQDIuMC42X0B0eXBlcytleHByZXNzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2h0dHAtcHJveHktbWlkZGxld2FyZS9kaXN0L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL29iamVjdC1hc3NpZ25ANC4xLjEvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdmFyeUAxLjEuMi9ub2RlX21vZHVsZXMvdmFyeS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JzQDIuOC41L25vZGVfbW9kdWxlcy9jb3JzL2xpYi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGUvc3JjL2FwcC50cyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbmlmICh0eXBlb2YgZWxlY3Ryb24gPT09ICdzdHJpbmcnKSB7XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBydW5uaW5nIGluIGFuIEVsZWN0cm9uIGVudmlyb25tZW50IScpO1xufVxuXG5jb25zdCBhcHAgPSBlbGVjdHJvbi5hcHAgfHwgZWxlY3Ryb24ucmVtb3RlLmFwcDtcblxuY29uc3QgaXNFbnZTZXQgPSAnRUxFQ1RST05fSVNfREVWJyBpbiBwcm9jZXNzLmVudjtcbmNvbnN0IGdldEZyb21FbnYgPSBwYXJzZUludChwcm9jZXNzLmVudi5FTEVDVFJPTl9JU19ERVYsIDEwKSA9PT0gMTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0VudlNldCA/IGdldEZyb21FbnYgOiAhYXBwLmlzUGFja2FnZWQ7XG4iLCJjb25zdCBpc01hY09TID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2Rhcndpbic7XG5pbXBvcnQgaXNEZXYgZnJvbSAnZWxlY3Ryb24taXMtZGV2J1xuZXhwb3J0IHtcbiAgICBpc01hY09TLFxuICAgIGlzRGV2XG59XG5pbXBvcnQgY3J5cHRvIGZyb20gXCJjcnlwdG9cIjtcbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIHJldHVybiBjcnlwdG8ucmFuZG9tVVVJRCgpO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIHlvZGEgKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNGdWxsd2lkdGhDb2RlUG9pbnQgPSBjb2RlUG9pbnQgPT4ge1xuXHRpZiAoTnVtYmVyLmlzTmFOKGNvZGVQb2ludCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBDb2RlIHBvaW50cyBhcmUgZGVyaXZlZCBmcm9tOlxuXHQvLyBodHRwOi8vd3d3LnVuaXgub3JnL1B1YmxpYy9VTklEQVRBL0Vhc3RBc2lhbldpZHRoLnR4dFxuXHRpZiAoXG5cdFx0Y29kZVBvaW50ID49IDB4MTEwMCAmJiAoXG5cdFx0XHRjb2RlUG9pbnQgPD0gMHgxMTVGIHx8IC8vIEhhbmd1bCBKYW1vXG5cdFx0XHRjb2RlUG9pbnQgPT09IDB4MjMyOSB8fCAvLyBMRUZULVBPSU5USU5HIEFOR0xFIEJSQUNLRVRcblx0XHRcdGNvZGVQb2ludCA9PT0gMHgyMzJBIHx8IC8vIFJJR0hULVBPSU5USU5HIEFOR0xFIEJSQUNLRVRcblx0XHRcdC8vIENKSyBSYWRpY2FscyBTdXBwbGVtZW50IC4uIEVuY2xvc2VkIENKSyBMZXR0ZXJzIGFuZCBNb250aHNcblx0XHRcdCgweDJFODAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDMyNDcgJiYgY29kZVBvaW50ICE9PSAweDMwM0YpIHx8XG5cdFx0XHQvLyBFbmNsb3NlZCBDSksgTGV0dGVycyBhbmQgTW9udGhzIC4uIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcblx0XHRcdCgweDMyNTAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDREQkYpIHx8XG5cdFx0XHQvLyBDSksgVW5pZmllZCBJZGVvZ3JhcGhzIC4uIFlpIFJhZGljYWxzXG5cdFx0XHQoMHg0RTAwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhBNEM2KSB8fFxuXHRcdFx0Ly8gSGFuZ3VsIEphbW8gRXh0ZW5kZWQtQVxuXHRcdFx0KDB4QTk2MCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4QTk3QykgfHxcblx0XHRcdC8vIEhhbmd1bCBTeWxsYWJsZXNcblx0XHRcdCgweEFDMDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEQ3QTMpIHx8XG5cdFx0XHQvLyBDSksgQ29tcGF0aWJpbGl0eSBJZGVvZ3JhcGhzXG5cdFx0XHQoMHhGOTAwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGQUZGKSB8fFxuXHRcdFx0Ly8gVmVydGljYWwgRm9ybXNcblx0XHRcdCgweEZFMTAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEZFMTkpIHx8XG5cdFx0XHQvLyBDSksgQ29tcGF0aWJpbGl0eSBGb3JtcyAuLiBTbWFsbCBGb3JtIFZhcmlhbnRzXG5cdFx0XHQoMHhGRTMwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRTZCKSB8fFxuXHRcdFx0Ly8gSGFsZndpZHRoIGFuZCBGdWxsd2lkdGggRm9ybXNcblx0XHRcdCgweEZGMDEgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEZGNjApIHx8XG5cdFx0XHQoMHhGRkUwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRkU2KSB8fFxuXHRcdFx0Ly8gS2FuYSBTdXBwbGVtZW50XG5cdFx0XHQoMHgxQjAwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUIwMDEpIHx8XG5cdFx0XHQvLyBFbmNsb3NlZCBJZGVvZ3JhcGhpYyBTdXBwbGVtZW50XG5cdFx0XHQoMHgxRjIwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUYyNTEpIHx8XG5cdFx0XHQvLyBDSksgVW5pZmllZCBJZGVvZ3JhcGhzIEV4dGVuc2lvbiBCIC4uIFRlcnRpYXJ5IElkZW9ncmFwaGljIFBsYW5lXG5cdFx0XHQoMHgyMDAwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4M0ZGRkQpXG5cdFx0KVxuXHQpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdWxsd2lkdGhDb2RlUG9pbnQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gaXNGdWxsd2lkdGhDb2RlUG9pbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCByZWdleCA9ICdbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdJztcblxuY29uc3QgYXN0cmFsUmVnZXggPSBvcHRpb25zID0+IG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdCA/IG5ldyBSZWdFeHAoYF4ke3JlZ2V4fSRgKSA6IG5ldyBSZWdFeHAocmVnZXgsICdnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN0cmFsUmVnZXg7XG4iLCIndXNlIHN0cmljdCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcclxuXHRcImFudGlxdWV3aGl0ZVwiOiBbMjUwLCAyMzUsIDIxNV0sXHJcblx0XCJhcXVhXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcclxuXHRcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcclxuXHRcImJlaWdlXCI6IFsyNDUsIDI0NSwgMjIwXSxcclxuXHRcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXHJcblx0XCJibGFja1wiOiBbMCwgMCwgMF0sXHJcblx0XCJibGFuY2hlZGFsbW9uZFwiOiBbMjU1LCAyMzUsIDIwNV0sXHJcblx0XCJibHVlXCI6IFswLCAwLCAyNTVdLFxyXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcclxuXHRcImJyb3duXCI6IFsxNjUsIDQyLCA0Ml0sXHJcblx0XCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxyXG5cdFwiY2FkZXRibHVlXCI6IFs5NSwgMTU4LCAxNjBdLFxyXG5cdFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxyXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxyXG5cdFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXHJcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwLCAxNDksIDIzN10sXHJcblx0XCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXHJcblx0XCJjcmltc29uXCI6IFsyMjAsIDIwLCA2MF0sXHJcblx0XCJjeWFuXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcclxuXHRcImRhcmtjeWFuXCI6IFswLCAxMzksIDEzOV0sXHJcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQsIDEzNCwgMTFdLFxyXG5cdFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxyXG5cdFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcclxuXHRcImRhcmttYWdlbnRhXCI6IFsxMzksIDAsIDEzOV0sXHJcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUsIDEwNywgNDddLFxyXG5cdFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxyXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcclxuXHRcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXHJcblx0XCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcclxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXHJcblx0XCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXHJcblx0XCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3R1cnF1b2lzZVwiOiBbMCwgMjA2LCAyMDldLFxyXG5cdFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxyXG5cdFwiZGVlcHBpbmtcIjogWzI1NSwgMjAsIDE0N10sXHJcblx0XCJkZWVwc2t5Ymx1ZVwiOiBbMCwgMTkxLCAyNTVdLFxyXG5cdFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRvZGdlcmJsdWVcIjogWzMwLCAxNDQsIDI1NV0sXHJcblx0XCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcclxuXHRcImZsb3JhbHdoaXRlXCI6IFsyNTUsIDI1MCwgMjQwXSxcclxuXHRcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXHJcblx0XCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJnYWluc2Jvcm9cIjogWzIyMCwgMjIwLCAyMjBdLFxyXG5cdFwiZ2hvc3R3aGl0ZVwiOiBbMjQ4LCAyNDgsIDI1NV0sXHJcblx0XCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXHJcblx0XCJnb2xkZW5yb2RcIjogWzIxOCwgMTY1LCAzMl0sXHJcblx0XCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxyXG5cdFwiZ3JlZW55ZWxsb3dcIjogWzE3MywgMjU1LCA0N10sXHJcblx0XCJncmV5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcclxuXHRcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxyXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUsIDkyLCA5Ml0sXHJcblx0XCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxyXG5cdFwiaXZvcnlcIjogWzI1NSwgMjU1LCAyNDBdLFxyXG5cdFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxyXG5cdFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxyXG5cdFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXHJcblx0XCJsYXduZ3JlZW5cIjogWzEyNCwgMjUyLCAwXSxcclxuXHRcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXHJcblx0XCJsaWdodGJsdWVcIjogWzE3MywgMjE2LCAyMzBdLFxyXG5cdFwibGlnaHRjb3JhbFwiOiBbMjQwLCAxMjgsIDEyOF0sXHJcblx0XCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxyXG5cdFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxyXG5cdFwibGlnaHRncmF5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxyXG5cdFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXHJcblx0XCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXHJcblx0XCJsaWdodHNlYWdyZWVuXCI6IFszMiwgMTc4LCAxNzBdLFxyXG5cdFwibGlnaHRza3libHVlXCI6IFsxMzUsIDIwNiwgMjUwXSxcclxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c3RlZWxibHVlXCI6IFsxNzYsIDE5NiwgMjIyXSxcclxuXHRcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcclxuXHRcImxpbWVcIjogWzAsIDI1NSwgMF0sXHJcblx0XCJsaW1lZ3JlZW5cIjogWzUwLCAyMDUsIDUwXSxcclxuXHRcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcclxuXHRcIm1hZ2VudGFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcIm1hcm9vblwiOiBbMTI4LCAwLCAwXSxcclxuXHRcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxyXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1XSxcclxuXHRcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcclxuXHRcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXHJcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAsIDE3OSwgMTEzXSxcclxuXHRcIm1lZGl1bXNsYXRlYmx1ZVwiOiBbMTIzLCAxMDQsIDIzOF0sXHJcblx0XCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxyXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwgMjA5LCAyMDRdLFxyXG5cdFwibWVkaXVtdmlvbGV0cmVkXCI6IFsxOTksIDIxLCAxMzNdLFxyXG5cdFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXHJcblx0XCJtaW50Y3JlYW1cIjogWzI0NSwgMjU1LCAyNTBdLFxyXG5cdFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcclxuXHRcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcclxuXHRcIm5hdmFqb3doaXRlXCI6IFsyNTUsIDIyMiwgMTczXSxcclxuXHRcIm5hdnlcIjogWzAsIDAsIDEyOF0sXHJcblx0XCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcclxuXHRcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXHJcblx0XCJvbGl2ZWRyYWJcIjogWzEwNywgMTQyLCAzNV0sXHJcblx0XCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcclxuXHRcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXHJcblx0XCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxyXG5cdFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXHJcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxyXG5cdFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXHJcblx0XCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcclxuXHRcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxyXG5cdFwicGVhY2hwdWZmXCI6IFsyNTUsIDIxOCwgMTg1XSxcclxuXHRcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXHJcblx0XCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcclxuXHRcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxyXG5cdFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXHJcblx0XCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcclxuXHRcInJlYmVjY2FwdXJwbGVcIjogWzEwMiwgNTEsIDE1M10sXHJcblx0XCJyZWRcIjogWzI1NSwgMCwgMF0sXHJcblx0XCJyb3N5YnJvd25cIjogWzE4OCwgMTQzLCAxNDNdLFxyXG5cdFwicm95YWxibHVlXCI6IFs2NSwgMTA1LCAyMjVdLFxyXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcclxuXHRcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXHJcblx0XCJzYW5keWJyb3duXCI6IFsyNDQsIDE2NCwgOTZdLFxyXG5cdFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcclxuXHRcInNlYXNoZWxsXCI6IFsyNTUsIDI0NSwgMjM4XSxcclxuXHRcInNpZW5uYVwiOiBbMTYwLCA4MiwgNDVdLFxyXG5cdFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcclxuXHRcInNreWJsdWVcIjogWzEzNSwgMjA2LCAyMzVdLFxyXG5cdFwic2xhdGVibHVlXCI6IFsxMDYsIDkwLCAyMDVdLFxyXG5cdFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNsYXRlZ3JleVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbm93XCI6IFsyNTUsIDI1MCwgMjUwXSxcclxuXHRcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXHJcblx0XCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXHJcblx0XCJ0YW5cIjogWzIxMCwgMTgwLCAxNDBdLFxyXG5cdFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxyXG5cdFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXHJcblx0XCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcclxuXHRcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcclxuXHRcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXHJcblx0XCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXHJcblx0XCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXHJcblx0XCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcclxuXHRcInllbGxvd1wiOiBbMjU1LCAyNTUsIDBdLFxyXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cclxufTtcclxuIiwiLyogTUlUIGxpY2Vuc2UgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuY29uc3QgY3NzS2V5d29yZHMgPSByZXF1aXJlKCdjb2xvci1uYW1lJyk7XG5cbi8vIE5PVEU6IGNvbnZlcnNpb25zIHNob3VsZCBvbmx5IHJldHVybiBwcmltaXRpdmUgdmFsdWVzIChpLmUuIGFycmF5cywgb3Jcbi8vICAgICAgIHZhbHVlcyB0aGF0IGdpdmUgY29ycmVjdCBgdHlwZW9mYCByZXN1bHRzKS5cbi8vICAgICAgIGRvIG5vdCB1c2UgYm94IHZhbHVlcyB0eXBlcyAoaS5lLiBOdW1iZXIoKSwgU3RyaW5nKCksIGV0Yy4pXG5cbmNvbnN0IHJldmVyc2VLZXl3b3JkcyA9IHt9O1xuZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY3NzS2V5d29yZHMpKSB7XG5cdHJldmVyc2VLZXl3b3Jkc1tjc3NLZXl3b3Jkc1trZXldXSA9IGtleTtcbn1cblxuY29uc3QgY29udmVydCA9IHtcblx0cmdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3JnYid9LFxuXHRoc2w6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHNsJ30sXG5cdGhzdjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc3YnfSxcblx0aHdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2h3Yid9LFxuXHRjbXlrOiB7Y2hhbm5lbHM6IDQsIGxhYmVsczogJ2NteWsnfSxcblx0eHl6OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3h5eid9LFxuXHRsYWI6IHtjaGFubmVsczogMywgbGFiZWxzOiAnbGFiJ30sXG5cdGxjaDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsY2gnfSxcblx0aGV4OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydoZXgnXX0sXG5cdGtleXdvcmQ6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2tleXdvcmQnXX0sXG5cdGFuc2kxNjoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnYW5zaTE2J119LFxuXHRhbnNpMjU2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMjU2J119LFxuXHRoY2c6IHtjaGFubmVsczogMywgbGFiZWxzOiBbJ2gnLCAnYycsICdnJ119LFxuXHRhcHBsZToge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsncjE2JywgJ2cxNicsICdiMTYnXX0sXG5cdGdyYXk6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2dyYXknXX1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcblxuLy8gSGlkZSAuY2hhbm5lbHMgYW5kIC5sYWJlbHMgcHJvcGVydGllc1xuZm9yIChjb25zdCBtb2RlbCBvZiBPYmplY3Qua2V5cyhjb252ZXJ0KSkge1xuXHRpZiAoISgnY2hhbm5lbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0fVxuXG5cdGlmICghKCdsYWJlbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVsIGxhYmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0fVxuXG5cdGlmIChjb252ZXJ0W21vZGVsXS5sYWJlbHMubGVuZ3RoICE9PSBjb252ZXJ0W21vZGVsXS5jaGFubmVscykge1xuXHRcdHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBhbmQgbGFiZWwgY291bnRzIG1pc21hdGNoOiAnICsgbW9kZWwpO1xuXHR9XG5cblx0Y29uc3Qge2NoYW5uZWxzLCBsYWJlbHN9ID0gY29udmVydFttb2RlbF07XG5cdGRlbGV0ZSBjb252ZXJ0W21vZGVsXS5jaGFubmVscztcblx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W21vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogbGFiZWxzfSk7XG59XG5cbmNvbnZlcnQucmdiLmhzbCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXSAvIDI1NTtcblx0Y29uc3QgZyA9IHJnYlsxXSAvIDI1NTtcblx0Y29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcblx0Y29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHRjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcblx0bGV0IGg7XG5cdGxldCBzO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdGggPSAwO1xuXHR9IGVsc2UgaWYgKHIgPT09IG1heCkge1xuXHRcdGggPSAoZyAtIGIpIC8gZGVsdGE7XG5cdH0gZWxzZSBpZiAoZyA9PT0gbWF4KSB7XG5cdFx0aCA9IDIgKyAoYiAtIHIpIC8gZGVsdGE7XG5cdH0gZWxzZSBpZiAoYiA9PT0gbWF4KSB7XG5cdFx0aCA9IDQgKyAociAtIGcpIC8gZGVsdGE7XG5cdH1cblxuXHRoID0gTWF0aC5taW4oaCAqIDYwLCAzNjApO1xuXG5cdGlmIChoIDwgMCkge1xuXHRcdGggKz0gMzYwO1xuXHR9XG5cblx0Y29uc3QgbCA9IChtaW4gKyBtYXgpIC8gMjtcblxuXHRpZiAobWF4ID09PSBtaW4pIHtcblx0XHRzID0gMDtcblx0fSBlbHNlIGlmIChsIDw9IDAuNSkge1xuXHRcdHMgPSBkZWx0YSAvIChtYXggKyBtaW4pO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkZWx0YSAvICgyIC0gbWF4IC0gbWluKTtcblx0fVxuXG5cdHJldHVybiBbaCwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5oc3YgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGxldCByZGlmO1xuXHRsZXQgZ2RpZjtcblx0bGV0IGJkaWY7XG5cdGxldCBoO1xuXHRsZXQgcztcblxuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXHRjb25zdCB2ID0gTWF0aC5tYXgociwgZywgYik7XG5cdGNvbnN0IGRpZmYgPSB2IC0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IGRpZmZjID0gZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gKHYgLSBjKSAvIDYgLyBkaWZmICsgMSAvIDI7XG5cdH07XG5cblx0aWYgKGRpZmYgPT09IDApIHtcblx0XHRoID0gMDtcblx0XHRzID0gMDtcblx0fSBlbHNlIHtcblx0XHRzID0gZGlmZiAvIHY7XG5cdFx0cmRpZiA9IGRpZmZjKHIpO1xuXHRcdGdkaWYgPSBkaWZmYyhnKTtcblx0XHRiZGlmID0gZGlmZmMoYik7XG5cblx0XHRpZiAociA9PT0gdikge1xuXHRcdFx0aCA9IGJkaWYgLSBnZGlmO1xuXHRcdH0gZWxzZSBpZiAoZyA9PT0gdikge1xuXHRcdFx0aCA9ICgxIC8gMykgKyByZGlmIC0gYmRpZjtcblx0XHR9IGVsc2UgaWYgKGIgPT09IHYpIHtcblx0XHRcdGggPSAoMiAvIDMpICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXG5cdFx0aWYgKGggPCAwKSB7XG5cdFx0XHRoICs9IDE7XG5cdFx0fSBlbHNlIGlmIChoID4gMSkge1xuXHRcdFx0aCAtPSAxO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBbXG5cdFx0aCAqIDM2MCxcblx0XHRzICogMTAwLFxuXHRcdHYgKiAxMDBcblx0XTtcbn07XG5cbmNvbnZlcnQucmdiLmh3YiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXTtcblx0Y29uc3QgZyA9IHJnYlsxXTtcblx0bGV0IGIgPSByZ2JbMl07XG5cdGNvbnN0IGggPSBjb252ZXJ0LnJnYi5oc2wocmdiKVswXTtcblx0Y29uc3QgdyA9IDEgLyAyNTUgKiBNYXRoLm1pbihyLCBNYXRoLm1pbihnLCBiKSk7XG5cblx0YiA9IDEgLSAxIC8gMjU1ICogTWF0aC5tYXgociwgTWF0aC5tYXgoZywgYikpO1xuXG5cdHJldHVybiBbaCwgdyAqIDEwMCwgYiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5jbXlrID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdGNvbnN0IGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblx0Y29uc3QgYyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXHRjb25zdCBtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdGNvbnN0IHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcblxuXHRyZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufTtcblxuZnVuY3Rpb24gY29tcGFyYXRpdmVEaXN0YW5jZSh4LCB5KSB7XG5cdC8qXG5cdFx0U2VlIGh0dHBzOi8vZW4ubS53aWtpcGVkaWEub3JnL3dpa2kvRXVjbGlkZWFuX2Rpc3RhbmNlI1NxdWFyZWRfRXVjbGlkZWFuX2Rpc3RhbmNlXG5cdCovXG5cdHJldHVybiAoXG5cdFx0KCh4WzBdIC0geVswXSkgKiogMikgK1xuXHRcdCgoeFsxXSAtIHlbMV0pICoqIDIpICtcblx0XHQoKHhbMl0gLSB5WzJdKSAqKiAyKVxuXHQpO1xufVxuXG5jb252ZXJ0LnJnYi5rZXl3b3JkID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByZXZlcnNlZCA9IHJldmVyc2VLZXl3b3Jkc1tyZ2JdO1xuXHRpZiAocmV2ZXJzZWQpIHtcblx0XHRyZXR1cm4gcmV2ZXJzZWQ7XG5cdH1cblxuXHRsZXQgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHRsZXQgY3VycmVudENsb3Nlc3RLZXl3b3JkO1xuXG5cdGZvciAoY29uc3Qga2V5d29yZCBvZiBPYmplY3Qua2V5cyhjc3NLZXl3b3JkcykpIHtcblx0XHRjb25zdCB2YWx1ZSA9IGNzc0tleXdvcmRzW2tleXdvcmRdO1xuXG5cdFx0Ly8gQ29tcHV0ZSBjb21wYXJhdGl2ZSBkaXN0YW5jZVxuXHRcdGNvbnN0IGRpc3RhbmNlID0gY29tcGFyYXRpdmVEaXN0YW5jZShyZ2IsIHZhbHVlKTtcblxuXHRcdC8vIENoZWNrIGlmIGl0cyBsZXNzLCBpZiBzbyBzZXQgYXMgY2xvc2VzdFxuXHRcdGlmIChkaXN0YW5jZSA8IGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UpIHtcblx0XHRcdGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHRcdGN1cnJlbnRDbG9zZXN0S2V5d29yZCA9IGtleXdvcmQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGN1cnJlbnRDbG9zZXN0S2V5d29yZDtcbn07XG5cbmNvbnZlcnQua2V5d29yZC5yZ2IgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHRyZXR1cm4gY3NzS2V5d29yZHNba2V5d29yZF07XG59O1xuXG5jb252ZXJ0LnJnYi54eXogPSBmdW5jdGlvbiAocmdiKSB7XG5cdGxldCByID0gcmdiWzBdIC8gMjU1O1xuXHRsZXQgZyA9IHJnYlsxXSAvIDI1NTtcblx0bGV0IGIgPSByZ2JbMl0gLyAyNTU7XG5cblx0Ly8gQXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjA0MDQ1ID8gKCgociArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQpIDogKHIgLyAxMi45Mik7XG5cdGcgPSBnID4gMC4wNDA0NSA/ICgoKGcgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40KSA6IChnIC8gMTIuOTIpO1xuXHRiID0gYiA+IDAuMDQwNDUgPyAoKChiICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNCkgOiAoYiAvIDEyLjkyKTtcblxuXHRjb25zdCB4ID0gKHIgKiAwLjQxMjQpICsgKGcgKiAwLjM1NzYpICsgKGIgKiAwLjE4MDUpO1xuXHRjb25zdCB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHRjb25zdCB6ID0gKHIgKiAwLjAxOTMpICsgKGcgKiAwLjExOTIpICsgKGIgKiAwLjk1MDUpO1xuXG5cdHJldHVybiBbeCAqIDEwMCwgeSAqIDEwMCwgeiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5sYWIgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGNvbnN0IHh5eiA9IGNvbnZlcnQucmdiLnh5eihyZ2IpO1xuXHRsZXQgeCA9IHh5elswXTtcblx0bGV0IHkgPSB4eXpbMV07XG5cdGxldCB6ID0geHl6WzJdO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyAoeCAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/ICh5ICoqICgxIC8gMykpIDogKDcuNzg3ICogeSkgKyAoMTYgLyAxMTYpO1xuXHR6ID0geiA+IDAuMDA4ODU2ID8gKHogKiogKDEgLyAzKSkgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0Y29uc3QgbCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRjb25zdCBhID0gNTAwICogKHggLSB5KTtcblx0Y29uc3QgYiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQuaHNsLnJnYiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgaCA9IGhzbFswXSAvIDM2MDtcblx0Y29uc3QgcyA9IGhzbFsxXSAvIDEwMDtcblx0Y29uc3QgbCA9IGhzbFsyXSAvIDEwMDtcblx0bGV0IHQyO1xuXHRsZXQgdDM7XG5cdGxldCB2YWw7XG5cblx0aWYgKHMgPT09IDApIHtcblx0XHR2YWwgPSBsICogMjU1O1xuXHRcdHJldHVybiBbdmFsLCB2YWwsIHZhbF07XG5cdH1cblxuXHRpZiAobCA8IDAuNSkge1xuXHRcdHQyID0gbCAqICgxICsgcyk7XG5cdH0gZWxzZSB7XG5cdFx0dDIgPSBsICsgcyAtIGwgKiBzO1xuXHR9XG5cblx0Y29uc3QgdDEgPSAyICogbCAtIHQyO1xuXG5cdGNvbnN0IHJnYiA9IFswLCAwLCAwXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHR0MyA9IGggKyAxIC8gMyAqIC0oaSAtIDEpO1xuXHRcdGlmICh0MyA8IDApIHtcblx0XHRcdHQzKys7XG5cdFx0fVxuXG5cdFx0aWYgKHQzID4gMSkge1xuXHRcdFx0dDMtLTtcblx0XHR9XG5cblx0XHRpZiAoNiAqIHQzIDwgMSkge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDM7XG5cdFx0fSBlbHNlIGlmICgyICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0Mjtcblx0XHR9IGVsc2UgaWYgKDMgKiB0MyA8IDIpIHtcblx0XHRcdHZhbCA9IHQxICsgKHQyIC0gdDEpICogKDIgLyAzIC0gdDMpICogNjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsID0gdDE7XG5cdFx0fVxuXG5cdFx0cmdiW2ldID0gdmFsICogMjU1O1xuXHR9XG5cblx0cmV0dXJuIHJnYjtcbn07XG5cbmNvbnZlcnQuaHNsLmhzdiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgaCA9IGhzbFswXTtcblx0bGV0IHMgPSBoc2xbMV0gLyAxMDA7XG5cdGxldCBsID0gaHNsWzJdIC8gMTAwO1xuXHRsZXQgc21pbiA9IHM7XG5cdGNvbnN0IGxtaW4gPSBNYXRoLm1heChsLCAwLjAxKTtcblxuXHRsICo9IDI7XG5cdHMgKj0gKGwgPD0gMSkgPyBsIDogMiAtIGw7XG5cdHNtaW4gKj0gbG1pbiA8PSAxID8gbG1pbiA6IDIgLSBsbWluO1xuXHRjb25zdCB2ID0gKGwgKyBzKSAvIDI7XG5cdGNvbnN0IHN2ID0gbCA9PT0gMCA/ICgyICogc21pbikgLyAobG1pbiArIHNtaW4pIDogKDIgKiBzKSAvIChsICsgcyk7XG5cblx0cmV0dXJuIFtoLCBzdiAqIDEwMCwgdiAqIDEwMF07XG59O1xuXG5jb252ZXJ0Lmhzdi5yZ2IgPSBmdW5jdGlvbiAoaHN2KSB7XG5cdGNvbnN0IGggPSBoc3ZbMF0gLyA2MDtcblx0Y29uc3QgcyA9IGhzdlsxXSAvIDEwMDtcblx0bGV0IHYgPSBoc3ZbMl0gLyAxMDA7XG5cdGNvbnN0IGhpID0gTWF0aC5mbG9vcihoKSAlIDY7XG5cblx0Y29uc3QgZiA9IGggLSBNYXRoLmZsb29yKGgpO1xuXHRjb25zdCBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdGNvbnN0IHEgPSAyNTUgKiB2ICogKDEgLSAocyAqIGYpKTtcblx0Y29uc3QgdCA9IDI1NSAqIHYgKiAoMSAtIChzICogKDEgLSBmKSkpO1xuXHR2ICo9IDI1NTtcblxuXHRzd2l0Y2ggKGhpKSB7XG5cdFx0Y2FzZSAwOlxuXHRcdFx0cmV0dXJuIFt2LCB0LCBwXTtcblx0XHRjYXNlIDE6XG5cdFx0XHRyZXR1cm4gW3EsIHYsIHBdO1xuXHRcdGNhc2UgMjpcblx0XHRcdHJldHVybiBbcCwgdiwgdF07XG5cdFx0Y2FzZSAzOlxuXHRcdFx0cmV0dXJuIFtwLCBxLCB2XTtcblx0XHRjYXNlIDQ6XG5cdFx0XHRyZXR1cm4gW3QsIHAsIHZdO1xuXHRcdGNhc2UgNTpcblx0XHRcdHJldHVybiBbdiwgcCwgcV07XG5cdH1cbn07XG5cbmNvbnZlcnQuaHN2LmhzbCA9IGZ1bmN0aW9uIChoc3YpIHtcblx0Y29uc3QgaCA9IGhzdlswXTtcblx0Y29uc3QgcyA9IGhzdlsxXSAvIDEwMDtcblx0Y29uc3QgdiA9IGhzdlsyXSAvIDEwMDtcblx0Y29uc3Qgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHRsZXQgc2w7XG5cdGxldCBsO1xuXG5cdGwgPSAoMiAtIHMpICogdjtcblx0Y29uc3QgbG1pbiA9ICgyIC0gcykgKiB2bWluO1xuXHRzbCA9IHMgKiB2bWluO1xuXHRzbCAvPSAobG1pbiA8PSAxKSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0c2wgPSBzbCB8fCAwO1xuXHRsIC89IDI7XG5cblx0cmV0dXJuIFtoLCBzbCAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG4vLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtY29sb3IvI2h3Yi10by1yZ2JcbmNvbnZlcnQuaHdiLnJnYiA9IGZ1bmN0aW9uIChod2IpIHtcblx0Y29uc3QgaCA9IGh3YlswXSAvIDM2MDtcblx0bGV0IHdoID0gaHdiWzFdIC8gMTAwO1xuXHRsZXQgYmwgPSBod2JbMl0gLyAxMDA7XG5cdGNvbnN0IHJhdGlvID0gd2ggKyBibDtcblx0bGV0IGY7XG5cblx0Ly8gV2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRjb25zdCBpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdGNvbnN0IHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRjb25zdCBuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIExpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0bGV0IHI7XG5cdGxldCBnO1xuXHRsZXQgYjtcblx0LyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUsbm8tbXVsdGktc3BhY2VzICovXG5cdHN3aXRjaCAoaSkge1xuXHRcdGRlZmF1bHQ6XG5cdFx0Y2FzZSA2OlxuXHRcdGNhc2UgMDogciA9IHY7ICBnID0gbjsgIGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgIGcgPSB2OyAgYiA9IHdoOyBicmVhaztcblx0XHRjYXNlIDI6IHIgPSB3aDsgZyA9IHY7ICBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyAgYiA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgNDogciA9IG47ICBnID0gd2g7IGIgPSB2OyBicmVhaztcblx0XHRjYXNlIDU6IHIgPSB2OyAgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblx0LyogZXNsaW50LWVuYWJsZSBtYXgtc3RhdGVtZW50cy1wZXItbGluZSxuby1tdWx0aS1zcGFjZXMgKi9cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdGNvbnN0IGMgPSBjbXlrWzBdIC8gMTAwO1xuXHRjb25zdCBtID0gY215a1sxXSAvIDEwMDtcblx0Y29uc3QgeSA9IGNteWtbMl0gLyAxMDA7XG5cdGNvbnN0IGsgPSBjbXlrWzNdIC8gMTAwO1xuXG5cdGNvbnN0IHIgPSAxIC0gTWF0aC5taW4oMSwgYyAqICgxIC0gaykgKyBrKTtcblx0Y29uc3QgZyA9IDEgLSBNYXRoLm1pbigxLCBtICogKDEgLSBrKSArIGspO1xuXHRjb25zdCBiID0gMSAtIE1hdGgubWluKDEsIHkgKiAoMSAtIGspICsgayk7XG5cblx0cmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn07XG5cbmNvbnZlcnQueHl6LnJnYiA9IGZ1bmN0aW9uICh4eXopIHtcblx0Y29uc3QgeCA9IHh5elswXSAvIDEwMDtcblx0Y29uc3QgeSA9IHh5elsxXSAvIDEwMDtcblx0Y29uc3QgeiA9IHh5elsyXSAvIDEwMDtcblx0bGV0IHI7XG5cdGxldCBnO1xuXHRsZXQgYjtcblxuXHRyID0gKHggKiAzLjI0MDYpICsgKHkgKiAtMS41MzcyKSArICh6ICogLTAuNDk4Nik7XG5cdGcgPSAoeCAqIC0wLjk2ODkpICsgKHkgKiAxLjg3NTgpICsgKHogKiAwLjA0MTUpO1xuXHRiID0gKHggKiAwLjA1NTcpICsgKHkgKiAtMC4yMDQwKSArICh6ICogMS4wNTcwKTtcblxuXHQvLyBBc3N1bWUgc1JHQlxuXHRyID0gciA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChyICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IHIgKiAxMi45MjtcblxuXHRnID0gZyA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChnICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChiICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IGIgKiAxMi45MjtcblxuXHRyID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgciksIDEpO1xuXHRnID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZyksIDEpO1xuXHRiID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYiksIDEpO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5sYWIgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdGxldCB4ID0geHl6WzBdO1xuXHRsZXQgeSA9IHh5elsxXTtcblx0bGV0IHogPSB4eXpbMl07XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/ICh4ICoqICgxIC8gMykpIDogKDcuNzg3ICogeCkgKyAoMTYgLyAxMTYpO1xuXHR5ID0geSA+IDAuMDA4ODU2ID8gKHkgKiogKDEgLyAzKSkgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyAoeiAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRjb25zdCBsID0gKDExNiAqIHkpIC0gMTY7XG5cdGNvbnN0IGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRjb25zdCBiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5sYWIueHl6ID0gZnVuY3Rpb24gKGxhYikge1xuXHRjb25zdCBsID0gbGFiWzBdO1xuXHRjb25zdCBhID0gbGFiWzFdO1xuXHRjb25zdCBiID0gbGFiWzJdO1xuXHRsZXQgeDtcblx0bGV0IHk7XG5cdGxldCB6O1xuXG5cdHkgPSAobCArIDE2KSAvIDExNjtcblx0eCA9IGEgLyA1MDAgKyB5O1xuXHR6ID0geSAtIGIgLyAyMDA7XG5cblx0Y29uc3QgeTIgPSB5ICoqIDM7XG5cdGNvbnN0IHgyID0geCAqKiAzO1xuXHRjb25zdCB6MiA9IHogKiogMztcblx0eSA9IHkyID4gMC4wMDg4NTYgPyB5MiA6ICh5IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cdHggPSB4MiA+IDAuMDA4ODU2ID8geDIgOiAoeCAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR6ID0gejIgPiAwLjAwODg1NiA/IHoyIDogKHogLSAxNiAvIDExNikgLyA3Ljc4NztcblxuXHR4ICo9IDk1LjA0Nztcblx0eSAqPSAxMDA7XG5cdHogKj0gMTA4Ljg4MztcblxuXHRyZXR1cm4gW3gsIHksIHpdO1xufTtcblxuY29udmVydC5sYWIubGNoID0gZnVuY3Rpb24gKGxhYikge1xuXHRjb25zdCBsID0gbGFiWzBdO1xuXHRjb25zdCBhID0gbGFiWzFdO1xuXHRjb25zdCBiID0gbGFiWzJdO1xuXHRsZXQgaDtcblxuXHRjb25zdCBociA9IE1hdGguYXRhbjIoYiwgYSk7XG5cdGggPSBociAqIDM2MCAvIDIgLyBNYXRoLlBJO1xuXG5cdGlmIChoIDwgMCkge1xuXHRcdGggKz0gMzYwO1xuXHR9XG5cblx0Y29uc3QgYyA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcblxuXHRyZXR1cm4gW2wsIGMsIGhdO1xufTtcblxuY29udmVydC5sY2gubGFiID0gZnVuY3Rpb24gKGxjaCkge1xuXHRjb25zdCBsID0gbGNoWzBdO1xuXHRjb25zdCBjID0gbGNoWzFdO1xuXHRjb25zdCBoID0gbGNoWzJdO1xuXG5cdGNvbnN0IGhyID0gaCAvIDM2MCAqIDIgKiBNYXRoLlBJO1xuXHRjb25zdCBhID0gYyAqIE1hdGguY29zKGhyKTtcblx0Y29uc3QgYiA9IGMgKiBNYXRoLnNpbihocik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzLCBzYXR1cmF0aW9uID0gbnVsbCkge1xuXHRjb25zdCBbciwgZywgYl0gPSBhcmdzO1xuXHRsZXQgdmFsdWUgPSBzYXR1cmF0aW9uID09PSBudWxsID8gY29udmVydC5yZ2IuaHN2KGFyZ3MpWzJdIDogc2F0dXJhdGlvbjsgLy8gSHN2IC0+IGFuc2kxNiBvcHRpbWl6YXRpb25cblxuXHR2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgLyA1MCk7XG5cblx0aWYgKHZhbHVlID09PSAwKSB7XG5cdFx0cmV0dXJuIDMwO1xuXHR9XG5cblx0bGV0IGFuc2kgPSAzMFxuXHRcdCsgKChNYXRoLnJvdW5kKGIgLyAyNTUpIDw8IDIpXG5cdFx0fCAoTWF0aC5yb3VuZChnIC8gMjU1KSA8PCAxKVxuXHRcdHwgTWF0aC5yb3VuZChyIC8gMjU1KSk7XG5cblx0aWYgKHZhbHVlID09PSAyKSB7XG5cdFx0YW5zaSArPSA2MDtcblx0fVxuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5oc3YuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gT3B0aW1pemF0aW9uIGhlcmU7IHdlIGFscmVhZHkga25vdyB0aGUgdmFsdWUgYW5kIGRvbid0IG5lZWQgdG8gZ2V0XG5cdC8vIGl0IGNvbnZlcnRlZCBmb3IgdXMuXG5cdHJldHVybiBjb252ZXJ0LnJnYi5hbnNpMTYoY29udmVydC5oc3YucmdiKGFyZ3MpLCBhcmdzWzJdKTtcbn07XG5cbmNvbnZlcnQucmdiLmFuc2kyNTYgPSBmdW5jdGlvbiAoYXJncykge1xuXHRjb25zdCByID0gYXJnc1swXTtcblx0Y29uc3QgZyA9IGFyZ3NbMV07XG5cdGNvbnN0IGIgPSBhcmdzWzJdO1xuXG5cdC8vIFdlIHVzZSB0aGUgZXh0ZW5kZWQgZ3JleXNjYWxlIHBhbGV0dGUgaGVyZSwgd2l0aCB0aGUgZXhjZXB0aW9uIG9mXG5cdC8vIGJsYWNrIGFuZCB3aGl0ZS4gbm9ybWFsIHBhbGV0dGUgb25seSBoYXMgNCBncmV5c2NhbGUgc2hhZGVzLlxuXHRpZiAociA9PT0gZyAmJiBnID09PSBiKSB7XG5cdFx0aWYgKHIgPCA4KSB7XG5cdFx0XHRyZXR1cm4gMTY7XG5cdFx0fVxuXG5cdFx0aWYgKHIgPiAyNDgpIHtcblx0XHRcdHJldHVybiAyMzE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgucm91bmQoKChyIC0gOCkgLyAyNDcpICogMjQpICsgMjMyO1xuXHR9XG5cblx0Y29uc3QgYW5zaSA9IDE2XG5cdFx0KyAoMzYgKiBNYXRoLnJvdW5kKHIgLyAyNTUgKiA1KSlcblx0XHQrICg2ICogTWF0aC5yb3VuZChnIC8gMjU1ICogNSkpXG5cdFx0KyBNYXRoLnJvdW5kKGIgLyAyNTUgKiA1KTtcblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuYW5zaTE2LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGxldCBjb2xvciA9IGFyZ3MgJSAxMDtcblxuXHQvLyBIYW5kbGUgZ3JleXNjYWxlXG5cdGlmIChjb2xvciA9PT0gMCB8fCBjb2xvciA9PT0gNykge1xuXHRcdGlmIChhcmdzID4gNTApIHtcblx0XHRcdGNvbG9yICs9IDMuNTtcblx0XHR9XG5cblx0XHRjb2xvciA9IGNvbG9yIC8gMTAuNSAqIDI1NTtcblxuXHRcdHJldHVybiBbY29sb3IsIGNvbG9yLCBjb2xvcl07XG5cdH1cblxuXHRjb25zdCBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0Y29uc3QgciA9ICgoY29sb3IgJiAxKSAqIG11bHQpICogMjU1O1xuXHRjb25zdCBnID0gKCgoY29sb3IgPj4gMSkgJiAxKSAqIG11bHQpICogMjU1O1xuXHRjb25zdCBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gSGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHRjb25zdCBjID0gKGFyZ3MgLSAyMzIpICogMTAgKyA4O1xuXHRcdHJldHVybiBbYywgYywgY107XG5cdH1cblxuXHRhcmdzIC09IDE2O1xuXG5cdGxldCByZW07XG5cdGNvbnN0IHIgPSBNYXRoLmZsb29yKGFyZ3MgLyAzNikgLyA1ICogMjU1O1xuXHRjb25zdCBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0Y29uc3QgYiA9IChyZW0gJSA2KSAvIDUgKiAyNTU7XG5cblx0cmV0dXJuIFtyLCBnLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmhleCA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGNvbnN0IGludGVnZXIgPSAoKE1hdGgucm91bmQoYXJnc1swXSkgJiAweEZGKSA8PCAxNilcblx0XHQrICgoTWF0aC5yb3VuZChhcmdzWzFdKSAmIDB4RkYpIDw8IDgpXG5cdFx0KyAoTWF0aC5yb3VuZChhcmdzWzJdKSAmIDB4RkYpO1xuXG5cdGNvbnN0IHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHRjb25zdCBtYXRjaCA9IGFyZ3MudG9TdHJpbmcoMTYpLm1hdGNoKC9bYS1mMC05XXs2fXxbYS1mMC05XXszfS9pKTtcblx0aWYgKCFtYXRjaCkge1xuXHRcdHJldHVybiBbMCwgMCwgMF07XG5cdH1cblxuXHRsZXQgY29sb3JTdHJpbmcgPSBtYXRjaFswXTtcblxuXHRpZiAobWF0Y2hbMF0ubGVuZ3RoID09PSAzKSB7XG5cdFx0Y29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5zcGxpdCgnJykubWFwKGNoYXIgPT4ge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0Y29uc3QgaW50ZWdlciA9IHBhcnNlSW50KGNvbG9yU3RyaW5nLCAxNik7XG5cdGNvbnN0IHIgPSAoaW50ZWdlciA+PiAxNikgJiAweEZGO1xuXHRjb25zdCBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHRjb25zdCBiID0gaW50ZWdlciAmIDB4RkY7XG5cblx0cmV0dXJuIFtyLCBnLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmhjZyA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXSAvIDI1NTtcblx0Y29uc3QgZyA9IHJnYlsxXSAvIDI1NTtcblx0Y29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcblx0Y29uc3QgbWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgociwgZyksIGIpO1xuXHRjb25zdCBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdGNvbnN0IGNocm9tYSA9IChtYXggLSBtaW4pO1xuXHRsZXQgZ3JheXNjYWxlO1xuXHRsZXQgaHVlO1xuXG5cdGlmIChjaHJvbWEgPCAxKSB7XG5cdFx0Z3JheXNjYWxlID0gbWluIC8gKDEgLSBjaHJvbWEpO1xuXHR9IGVsc2Uge1xuXHRcdGdyYXlzY2FsZSA9IDA7XG5cdH1cblxuXHRpZiAoY2hyb21hIDw9IDApIHtcblx0XHRodWUgPSAwO1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gcikge1xuXHRcdGh1ZSA9ICgoZyAtIGIpIC8gY2hyb21hKSAlIDY7XG5cdH0gZWxzZVxuXHRpZiAobWF4ID09PSBnKSB7XG5cdFx0aHVlID0gMiArIChiIC0gcikgLyBjaHJvbWE7XG5cdH0gZWxzZSB7XG5cdFx0aHVlID0gNCArIChyIC0gZykgLyBjaHJvbWE7XG5cdH1cblxuXHRodWUgLz0gNjtcblx0aHVlICU9IDE7XG5cblx0cmV0dXJuIFtodWUgKiAzNjAsIGNocm9tYSAqIDEwMCwgZ3JheXNjYWxlICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHNsLmhjZyA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgcyA9IGhzbFsxXSAvIDEwMDtcblx0Y29uc3QgbCA9IGhzbFsyXSAvIDEwMDtcblxuXHRjb25zdCBjID0gbCA8IDAuNSA/ICgyLjAgKiBzICogbCkgOiAoMi4wICogcyAqICgxLjAgLSBsKSk7XG5cblx0bGV0IGYgPSAwO1xuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAobCAtIDAuNSAqIGMpIC8gKDEuMCAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtoc2xbMF0sIGMgKiAxMDAsIGYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YuaGNnID0gZnVuY3Rpb24gKGhzdikge1xuXHRjb25zdCBzID0gaHN2WzFdIC8gMTAwO1xuXHRjb25zdCB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdGNvbnN0IGMgPSBzICogdjtcblx0bGV0IGYgPSAwO1xuXG5cdGlmIChjIDwgMS4wKSB7XG5cdFx0ZiA9ICh2IC0gYykgLyAoMSAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtoc3ZbMF0sIGMgKiAxMDAsIGYgKiAxMDBdO1xufTtcblxuY29udmVydC5oY2cucmdiID0gZnVuY3Rpb24gKGhjZykge1xuXHRjb25zdCBoID0gaGNnWzBdIC8gMzYwO1xuXHRjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuXHRjb25zdCBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdGlmIChjID09PSAwLjApIHtcblx0XHRyZXR1cm4gW2cgKiAyNTUsIGcgKiAyNTUsIGcgKiAyNTVdO1xuXHR9XG5cblx0Y29uc3QgcHVyZSA9IFswLCAwLCAwXTtcblx0Y29uc3QgaGkgPSAoaCAlIDEpICogNjtcblx0Y29uc3QgdiA9IGhpICUgMTtcblx0Y29uc3QgdyA9IDEgLSB2O1xuXHRsZXQgbWcgPSAwO1xuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lICovXG5cdHN3aXRjaCAoTWF0aC5mbG9vcihoaSkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IHY7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHRwdXJlWzBdID0gdzsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSB2OyBicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IHc7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRjYXNlIDQ6XG5cdFx0XHRwdXJlWzBdID0gdjsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0cHVyZVswXSA9IDE7IHB1cmVbMV0gPSAwOyBwdXJlWzJdID0gdztcblx0fVxuXHQvKiBlc2xpbnQtZW5hYmxlIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lICovXG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0Y29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcblx0Y29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRjb25zdCB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdGxldCBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0Y29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcblx0Y29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRjb25zdCBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdGxldCBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdGNvbnN0IGMgPSBoY2dbMV0gLyAxMDA7XG5cdGNvbnN0IGcgPSBoY2dbMl0gLyAxMDA7XG5cdGNvbnN0IHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHRjb25zdCB3ID0gaHdiWzFdIC8gMTAwO1xuXHRjb25zdCBiID0gaHdiWzJdIC8gMTAwO1xuXHRjb25zdCB2ID0gMSAtIGI7XG5cdGNvbnN0IGMgPSB2IC0gdztcblx0bGV0IGcgPSAwO1xuXG5cdGlmIChjIDwgMSkge1xuXHRcdGcgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHdiWzBdLCBjICogMTAwLCBnICogMTAwXTtcbn07XG5cbmNvbnZlcnQuYXBwbGUucmdiID0gZnVuY3Rpb24gKGFwcGxlKSB7XG5cdHJldHVybiBbKGFwcGxlWzBdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMV0gLyA2NTUzNSkgKiAyNTUsIChhcHBsZVsyXSAvIDY1NTM1KSAqIDI1NV07XG59O1xuXG5jb252ZXJ0LnJnYi5hcHBsZSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0cmV0dXJuIFsocmdiWzBdIC8gMjU1KSAqIDY1NTM1LCAocmdiWzFdIC8gMjU1KSAqIDY1NTM1LCAocmdiWzJdIC8gMjU1KSAqIDY1NTM1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHRyZXR1cm4gW2FyZ3NbMF0gLyAxMDAgKiAyNTUsIGFyZ3NbMF0gLyAxMDAgKiAyNTUsIGFyZ3NbMF0gLyAxMDAgKiAyNTVdO1xufTtcblxuY29udmVydC5ncmF5LmhzbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHJldHVybiBbMCwgMCwgYXJnc1swXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuaHN2ID0gY29udmVydC5ncmF5LmhzbDtcblxuY29udmVydC5ncmF5Lmh3YiA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMTAwLCBncmF5WzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5jbXlrID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFswLCAwLCAwLCBncmF5WzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5sYWIgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gW2dyYXlbMF0sIDAsIDBdO1xufTtcblxuY29udmVydC5ncmF5LmhleCA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdGNvbnN0IHZhbCA9IE1hdGgucm91bmQoZ3JheVswXSAvIDEwMCAqIDI1NSkgJiAweEZGO1xuXHRjb25zdCBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdGNvbnN0IHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LnJnYi5ncmF5ID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCB2YWwgPSAocmdiWzBdICsgcmdiWzFdICsgcmdiWzJdKSAvIDM7XG5cdHJldHVybiBbdmFsIC8gMjU1ICogMTAwXTtcbn07XG4iLCJjb25zdCBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcblxuLypcblx0VGhpcyBmdW5jdGlvbiByb3V0ZXMgYSBtb2RlbCB0byBhbGwgb3RoZXIgbW9kZWxzLlxuXG5cdGFsbCBmdW5jdGlvbnMgdGhhdCBhcmUgcm91dGVkIGhhdmUgYSBwcm9wZXJ0eSBgLmNvbnZlcnNpb25gIGF0dGFjaGVkXG5cdHRvIHRoZSByZXR1cm5lZCBzeW50aGV0aWMgZnVuY3Rpb24uIFRoaXMgcHJvcGVydHkgaXMgYW4gYXJyYXlcblx0b2Ygc3RyaW5ncywgZWFjaCB3aXRoIHRoZSBzdGVwcyBpbiBiZXR3ZWVuIHRoZSAnZnJvbScgYW5kICd0bydcblx0Y29sb3IgbW9kZWxzIChpbmNsdXNpdmUpLlxuXG5cdGNvbnZlcnNpb25zIHRoYXQgYXJlIG5vdCBwb3NzaWJsZSBzaW1wbHkgYXJlIG5vdCBpbmNsdWRlZC5cbiovXG5cbmZ1bmN0aW9uIGJ1aWxkR3JhcGgoKSB7XG5cdGNvbnN0IGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0Y29uc3QgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5cdGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRncmFwaFttb2RlbHNbaV1dID0ge1xuXHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vMS12cy1pbmZpbml0eVxuXHRcdFx0Ly8gbWljcm8tb3B0LCBidXQgdGhpcyBpcyBzaW1wbGUuXG5cdFx0XHRkaXN0YW5jZTogLTEsXG5cdFx0XHRwYXJlbnQ6IG51bGxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVhZHRoLWZpcnN0X3NlYXJjaFxuZnVuY3Rpb24gZGVyaXZlQkZTKGZyb21Nb2RlbCkge1xuXHRjb25zdCBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcblx0Y29uc3QgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gVW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0Y29uc3QgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuXHRcdGNvbnN0IGFkamFjZW50cyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zW2N1cnJlbnRdKTtcblxuXHRcdGZvciAobGV0IGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGNvbnN0IGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0Y29uc3Qgbm9kZSA9IGdyYXBoW2FkamFjZW50XTtcblxuXHRcdFx0aWYgKG5vZGUuZGlzdGFuY2UgPT09IC0xKSB7XG5cdFx0XHRcdG5vZGUuZGlzdGFuY2UgPSBncmFwaFtjdXJyZW50XS5kaXN0YW5jZSArIDE7XG5cdFx0XHRcdG5vZGUucGFyZW50ID0gY3VycmVudDtcblx0XHRcdFx0cXVldWUudW5zaGlmdChhZGphY2VudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG5mdW5jdGlvbiBsaW5rKGZyb20sIHRvKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoYXJncykge1xuXHRcdHJldHVybiB0byhmcm9tKGFyZ3MpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpIHtcblx0Y29uc3QgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuXHRsZXQgZm4gPSBjb252ZXJzaW9uc1tncmFwaFt0b01vZGVsXS5wYXJlbnRdW3RvTW9kZWxdO1xuXG5cdGxldCBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG5cdHdoaWxlIChncmFwaFtjdXJdLnBhcmVudCkge1xuXHRcdHBhdGgudW5zaGlmdChncmFwaFtjdXJdLnBhcmVudCk7XG5cdFx0Zm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG5cdFx0Y3VyID0gZ3JhcGhbY3VyXS5wYXJlbnQ7XG5cdH1cblxuXHRmbi5jb252ZXJzaW9uID0gcGF0aDtcblx0cmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29uc3QgZ3JhcGggPSBkZXJpdmVCRlMoZnJvbU1vZGVsKTtcblx0Y29uc3QgY29udmVyc2lvbiA9IHt9O1xuXG5cdGNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yIChsZXQgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGNvbnN0IHRvTW9kZWwgPSBtb2RlbHNbaV07XG5cdFx0Y29uc3Qgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuXG5cdFx0aWYgKG5vZGUucGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBObyBwb3NzaWJsZSBjb252ZXJzaW9uLCBvciB0aGlzIG5vZGUgaXMgdGhlIHNvdXJjZSBtb2RlbC5cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnZlcnNpb25bdG9Nb2RlbF0gPSB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCk7XG5cdH1cblxuXHRyZXR1cm4gY29udmVyc2lvbjtcbn07XG5cbiIsImNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuY29uc3Qgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbmNvbnN0IGNvbnZlcnQgPSB7fTtcblxuY29uc3QgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5mdW5jdGlvbiB3cmFwUmF3KGZuKSB7XG5cdGNvbnN0IHdyYXBwZWRGbiA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0Y29uc3QgYXJnMCA9IGFyZ3NbMF07XG5cdFx0aWYgKGFyZzAgPT09IHVuZGVmaW5lZCB8fCBhcmcwID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJnMDtcblx0XHR9XG5cblx0XHRpZiAoYXJnMC5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gYXJnMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4oYXJncyk7XG5cdH07XG5cblx0Ly8gUHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5mdW5jdGlvbiB3cmFwUm91bmRlZChmbikge1xuXHRjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdGNvbnN0IGFyZzAgPSBhcmdzWzBdO1xuXG5cdFx0aWYgKGFyZzAgPT09IHVuZGVmaW5lZCB8fCBhcmcwID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJnMDtcblx0XHR9XG5cblx0XHRpZiAoYXJnMC5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gYXJnMDtcblx0XHR9XG5cblx0XHRjb25zdCByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIFdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKGxldCBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIFByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnJvbU1vZGVsID0+IHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0Y29uc3Qgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0Y29uc3Qgcm91dGVNb2RlbHMgPSBPYmplY3Qua2V5cyhyb3V0ZXMpO1xuXG5cdHJvdXRlTW9kZWxzLmZvckVhY2godG9Nb2RlbCA9PiB7XG5cdFx0Y29uc3QgZm4gPSByb3V0ZXNbdG9Nb2RlbF07XG5cblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0gPSB3cmFwUm91bmRlZChmbik7XG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdLnJhdyA9IHdyYXBSYXcoZm4pO1xuXHR9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHdyYXBBbnNpMTYgPSAoZm4sIG9mZnNldCkgPT4gKC4uLmFyZ3MpID0+IHtcblx0Y29uc3QgY29kZSA9IGZuKC4uLmFyZ3MpO1xuXHRyZXR1cm4gYFxcdTAwMUJbJHtjb2RlICsgb2Zmc2V0fW1gO1xufTtcblxuY29uc3Qgd3JhcEFuc2kyNTYgPSAoZm4sIG9mZnNldCkgPT4gKC4uLmFyZ3MpID0+IHtcblx0Y29uc3QgY29kZSA9IGZuKC4uLmFyZ3MpO1xuXHRyZXR1cm4gYFxcdTAwMUJbJHszOCArIG9mZnNldH07NTske2NvZGV9bWA7XG59O1xuXG5jb25zdCB3cmFwQW5zaTE2bSA9IChmbiwgb2Zmc2V0KSA9PiAoLi4uYXJncykgPT4ge1xuXHRjb25zdCByZ2IgPSBmbiguLi5hcmdzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7MzggKyBvZmZzZXR9OzI7JHtyZ2JbMF19OyR7cmdiWzFdfTske3JnYlsyXX1tYDtcbn07XG5cbmNvbnN0IGFuc2kyYW5zaSA9IG4gPT4gbjtcbmNvbnN0IHJnYjJyZ2IgPSAociwgZywgYikgPT4gW3IsIGcsIGJdO1xuXG5jb25zdCBzZXRMYXp5UHJvcGVydHkgPSAob2JqZWN0LCBwcm9wZXJ0eSwgZ2V0KSA9PiB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCB7XG5cdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IGdldCgpO1xuXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwge1xuXHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRjb25maWd1cmFibGU6IHRydWVcblx0fSk7XG59O1xuXG4vKiogQHR5cGUge3R5cGVvZiBpbXBvcnQoJ2NvbG9yLWNvbnZlcnQnKX0gKi9cbmxldCBjb2xvckNvbnZlcnQ7XG5jb25zdCBtYWtlRHluYW1pY1N0eWxlcyA9ICh3cmFwLCB0YXJnZXRTcGFjZSwgaWRlbnRpdHksIGlzQmFja2dyb3VuZCkgPT4ge1xuXHRpZiAoY29sb3JDb252ZXJ0ID09PSB1bmRlZmluZWQpIHtcblx0XHRjb2xvckNvbnZlcnQgPSByZXF1aXJlKCdjb2xvci1jb252ZXJ0Jyk7XG5cdH1cblxuXHRjb25zdCBvZmZzZXQgPSBpc0JhY2tncm91bmQgPyAxMCA6IDA7XG5cdGNvbnN0IHN0eWxlcyA9IHt9O1xuXG5cdGZvciAoY29uc3QgW3NvdXJjZVNwYWNlLCBzdWl0ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29sb3JDb252ZXJ0KSkge1xuXHRcdGNvbnN0IG5hbWUgPSBzb3VyY2VTcGFjZSA9PT0gJ2Fuc2kxNicgPyAnYW5zaScgOiBzb3VyY2VTcGFjZTtcblx0XHRpZiAoc291cmNlU3BhY2UgPT09IHRhcmdldFNwYWNlKSB7XG5cdFx0XHRzdHlsZXNbbmFtZV0gPSB3cmFwKGlkZW50aXR5LCBvZmZzZXQpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHN1aXRlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0c3R5bGVzW25hbWVdID0gd3JhcChzdWl0ZVt0YXJnZXRTcGFjZV0sIG9mZnNldCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn07XG5cbmZ1bmN0aW9uIGFzc2VtYmxlU3R5bGVzKCkge1xuXHRjb25zdCBjb2RlcyA9IG5ldyBNYXAoKTtcblx0Y29uc3Qgc3R5bGVzID0ge1xuXHRcdG1vZGlmaWVyOiB7XG5cdFx0XHRyZXNldDogWzAsIDBdLFxuXHRcdFx0Ly8gMjEgaXNuJ3Qgd2lkZWx5IHN1cHBvcnRlZCBhbmQgMjIgZG9lcyB0aGUgc2FtZSB0aGluZ1xuXHRcdFx0Ym9sZDogWzEsIDIyXSxcblx0XHRcdGRpbTogWzIsIDIyXSxcblx0XHRcdGl0YWxpYzogWzMsIDIzXSxcblx0XHRcdHVuZGVybGluZTogWzQsIDI0XSxcblx0XHRcdGludmVyc2U6IFs3LCAyN10sXG5cdFx0XHRoaWRkZW46IFs4LCAyOF0sXG5cdFx0XHRzdHJpa2V0aHJvdWdoOiBbOSwgMjldXG5cdFx0fSxcblx0XHRjb2xvcjoge1xuXHRcdFx0YmxhY2s6IFszMCwgMzldLFxuXHRcdFx0cmVkOiBbMzEsIDM5XSxcblx0XHRcdGdyZWVuOiBbMzIsIDM5XSxcblx0XHRcdHllbGxvdzogWzMzLCAzOV0sXG5cdFx0XHRibHVlOiBbMzQsIDM5XSxcblx0XHRcdG1hZ2VudGE6IFszNSwgMzldLFxuXHRcdFx0Y3lhbjogWzM2LCAzOV0sXG5cdFx0XHR3aGl0ZTogWzM3LCAzOV0sXG5cblx0XHRcdC8vIEJyaWdodCBjb2xvclxuXHRcdFx0YmxhY2tCcmlnaHQ6IFs5MCwgMzldLFxuXHRcdFx0cmVkQnJpZ2h0OiBbOTEsIDM5XSxcblx0XHRcdGdyZWVuQnJpZ2h0OiBbOTIsIDM5XSxcblx0XHRcdHllbGxvd0JyaWdodDogWzkzLCAzOV0sXG5cdFx0XHRibHVlQnJpZ2h0OiBbOTQsIDM5XSxcblx0XHRcdG1hZ2VudGFCcmlnaHQ6IFs5NSwgMzldLFxuXHRcdFx0Y3lhbkJyaWdodDogWzk2LCAzOV0sXG5cdFx0XHR3aGl0ZUJyaWdodDogWzk3LCAzOV1cblx0XHR9LFxuXHRcdGJnQ29sb3I6IHtcblx0XHRcdGJnQmxhY2s6IFs0MCwgNDldLFxuXHRcdFx0YmdSZWQ6IFs0MSwgNDldLFxuXHRcdFx0YmdHcmVlbjogWzQyLCA0OV0sXG5cdFx0XHRiZ1llbGxvdzogWzQzLCA0OV0sXG5cdFx0XHRiZ0JsdWU6IFs0NCwgNDldLFxuXHRcdFx0YmdNYWdlbnRhOiBbNDUsIDQ5XSxcblx0XHRcdGJnQ3lhbjogWzQ2LCA0OV0sXG5cdFx0XHRiZ1doaXRlOiBbNDcsIDQ5XSxcblxuXHRcdFx0Ly8gQnJpZ2h0IGNvbG9yXG5cdFx0XHRiZ0JsYWNrQnJpZ2h0OiBbMTAwLCA0OV0sXG5cdFx0XHRiZ1JlZEJyaWdodDogWzEwMSwgNDldLFxuXHRcdFx0YmdHcmVlbkJyaWdodDogWzEwMiwgNDldLFxuXHRcdFx0YmdZZWxsb3dCcmlnaHQ6IFsxMDMsIDQ5XSxcblx0XHRcdGJnQmx1ZUJyaWdodDogWzEwNCwgNDldLFxuXHRcdFx0YmdNYWdlbnRhQnJpZ2h0OiBbMTA1LCA0OV0sXG5cdFx0XHRiZ0N5YW5CcmlnaHQ6IFsxMDYsIDQ5XSxcblx0XHRcdGJnV2hpdGVCcmlnaHQ6IFsxMDcsIDQ5XVxuXHRcdH1cblx0fTtcblxuXHQvLyBBbGlhcyBicmlnaHQgYmxhY2sgYXMgZ3JheSAoYW5kIGdyZXkpXG5cdHN0eWxlcy5jb2xvci5ncmF5ID0gc3R5bGVzLmNvbG9yLmJsYWNrQnJpZ2h0O1xuXHRzdHlsZXMuYmdDb2xvci5iZ0dyYXkgPSBzdHlsZXMuYmdDb2xvci5iZ0JsYWNrQnJpZ2h0O1xuXHRzdHlsZXMuY29sb3IuZ3JleSA9IHN0eWxlcy5jb2xvci5ibGFja0JyaWdodDtcblx0c3R5bGVzLmJnQ29sb3IuYmdHcmV5ID0gc3R5bGVzLmJnQ29sb3IuYmdCbGFja0JyaWdodDtcblxuXHRmb3IgKGNvbnN0IFtncm91cE5hbWUsIGdyb3VwXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZXMpKSB7XG5cdFx0Zm9yIChjb25zdCBbc3R5bGVOYW1lLCBzdHlsZV0gb2YgT2JqZWN0LmVudHJpZXMoZ3JvdXApKSB7XG5cdFx0XHRzdHlsZXNbc3R5bGVOYW1lXSA9IHtcblx0XHRcdFx0b3BlbjogYFxcdTAwMUJbJHtzdHlsZVswXX1tYCxcblx0XHRcdFx0Y2xvc2U6IGBcXHUwMDFCWyR7c3R5bGVbMV19bWBcblx0XHRcdH07XG5cblx0XHRcdGdyb3VwW3N0eWxlTmFtZV0gPSBzdHlsZXNbc3R5bGVOYW1lXTtcblxuXHRcdFx0Y29kZXMuc2V0KHN0eWxlWzBdLCBzdHlsZVsxXSk7XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgZ3JvdXBOYW1lLCB7XG5cdFx0XHR2YWx1ZTogZ3JvdXAsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHRcdH0pO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgJ2NvZGVzJywge1xuXHRcdHZhbHVlOiBjb2Rlcyxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHR9KTtcblxuXHRzdHlsZXMuY29sb3IuY2xvc2UgPSAnXFx1MDAxQlszOW0nO1xuXHRzdHlsZXMuYmdDb2xvci5jbG9zZSA9ICdcXHUwMDFCWzQ5bSc7XG5cblx0c2V0TGF6eVByb3BlcnR5KHN0eWxlcy5jb2xvciwgJ2Fuc2knLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTE2LCAnYW5zaTE2JywgYW5zaTJhbnNpLCBmYWxzZSkpO1xuXHRzZXRMYXp5UHJvcGVydHkoc3R5bGVzLmNvbG9yLCAnYW5zaTI1NicsICgpID0+IG1ha2VEeW5hbWljU3R5bGVzKHdyYXBBbnNpMjU2LCAnYW5zaTI1NicsIGFuc2kyYW5zaSwgZmFsc2UpKTtcblx0c2V0TGF6eVByb3BlcnR5KHN0eWxlcy5jb2xvciwgJ2Fuc2kxNm0nLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTE2bSwgJ3JnYicsIHJnYjJyZ2IsIGZhbHNlKSk7XG5cdHNldExhenlQcm9wZXJ0eShzdHlsZXMuYmdDb2xvciwgJ2Fuc2knLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTE2LCAnYW5zaTE2JywgYW5zaTJhbnNpLCB0cnVlKSk7XG5cdHNldExhenlQcm9wZXJ0eShzdHlsZXMuYmdDb2xvciwgJ2Fuc2kyNTYnLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTI1NiwgJ2Fuc2kyNTYnLCBhbnNpMmFuc2ksIHRydWUpKTtcblx0c2V0TGF6eVByb3BlcnR5KHN0eWxlcy5iZ0NvbG9yLCAnYW5zaTE2bScsICgpID0+IG1ha2VEeW5hbWljU3R5bGVzKHdyYXBBbnNpMTZtLCAncmdiJywgcmdiMnJnYiwgdHJ1ZSkpO1xuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbi8vIE1ha2UgdGhlIGV4cG9ydCBpbW11dGFibGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRnZXQ6IGFzc2VtYmxlU3R5bGVzXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IGlzRnVsbHdpZHRoQ29kZVBvaW50ID0gcmVxdWlyZSgnaXMtZnVsbHdpZHRoLWNvZGUtcG9pbnQnKTtcbmNvbnN0IGFzdHJhbFJlZ2V4ID0gcmVxdWlyZSgnYXN0cmFsLXJlZ2V4Jyk7XG5jb25zdCBhbnNpU3R5bGVzID0gcmVxdWlyZSgnYW5zaS1zdHlsZXMnKTtcblxuY29uc3QgRVNDQVBFUyA9IFtcblx0J1xcdTAwMUInLFxuXHQnXFx1MDA5Qidcbl07XG5cbmNvbnN0IHdyYXBBbnNpID0gY29kZSA9PiBgJHtFU0NBUEVTWzBdfVske2NvZGV9bWA7XG5cbmNvbnN0IGNoZWNrQW5zaSA9IChhbnNpQ29kZXMsIGlzRXNjYXBlcywgZW5kQW5zaUNvZGUpID0+IHtcblx0bGV0IG91dHB1dCA9IFtdO1xuXHRhbnNpQ29kZXMgPSBbLi4uYW5zaUNvZGVzXTtcblxuXHRmb3IgKGxldCBhbnNpQ29kZSBvZiBhbnNpQ29kZXMpIHtcblx0XHRjb25zdCBhbnNpQ29kZU9yaWdpbiA9IGFuc2lDb2RlO1xuXHRcdGlmIChhbnNpQ29kZS5tYXRjaCgnOycpKSB7XG5cdFx0XHRhbnNpQ29kZSA9IGFuc2lDb2RlLnNwbGl0KCc7JylbMF1bMF0gKyAnMCc7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaXRlbSA9IGFuc2lTdHlsZXMuY29kZXMuZ2V0KHBhcnNlSW50KGFuc2lDb2RlLCAxMCkpO1xuXHRcdGlmIChpdGVtKSB7XG5cdFx0XHRjb25zdCBpbmRleEVzY2FwZSA9IGFuc2lDb2Rlcy5pbmRleE9mKGl0ZW0udG9TdHJpbmcoKSk7XG5cdFx0XHRpZiAoaW5kZXhFc2NhcGUgPj0gMCkge1xuXHRcdFx0XHRhbnNpQ29kZXMuc3BsaWNlKGluZGV4RXNjYXBlLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHdyYXBBbnNpKGlzRXNjYXBlcyA/IGl0ZW0gOiBhbnNpQ29kZU9yaWdpbikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoaXNFc2NhcGVzKSB7XG5cdFx0XHRvdXRwdXQucHVzaCh3cmFwQW5zaSgwKSk7XG5cdFx0XHRicmVhaztcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0cHV0LnB1c2god3JhcEFuc2koYW5zaUNvZGVPcmlnaW4pKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoaXNFc2NhcGVzKSB7XG5cdFx0b3V0cHV0ID0gb3V0cHV0LmZpbHRlcigoZWxlbWVudCwgaW5kZXgpID0+IG91dHB1dC5pbmRleE9mKGVsZW1lbnQpID09PSBpbmRleCk7XG5cdFx0aWYgKGVuZEFuc2lDb2RlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IGZpc3RFc2NhcGVDb2RlID0gd3JhcEFuc2koYW5zaVN0eWxlcy5jb2Rlcy5nZXQocGFyc2VJbnQoZW5kQW5zaUNvZGUsIDEwKSkpO1xuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LnJlZHVjZSgoY3VycmVudCwgbmV4dCkgPT4gbmV4dCA9PT0gZmlzdEVzY2FwZUNvZGUgPyBbbmV4dCwgLi4uY3VycmVudF0gOiBbLi4uY3VycmVudCwgbmV4dF0sIFtdKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoc3RyaW5nLCBiZWdpbiwgZW5kKSA9PiB7XG5cdGNvbnN0IGNoYXJhY3RlcnMgPSBbLi4uc3RyaW5nLm5vcm1hbGl6ZSgpXTtcblx0Y29uc3QgYW5zaUNvZGVzID0gW107XG5cblx0ZW5kID0gdHlwZW9mIGVuZCA9PT0gJ251bWJlcicgPyBlbmQgOiBjaGFyYWN0ZXJzLmxlbmd0aDtcblxuXHRsZXQgaXNJbnNpZGVFc2NhcGUgPSBmYWxzZTtcblx0bGV0IGFuc2lDb2RlO1xuXHRsZXQgdmlzaWJsZSA9IDA7XG5cdGxldCBvdXRwdXQgPSAnJztcblxuXHRmb3IgKGNvbnN0IFtpbmRleCwgY2hhcmFjdGVyXSBvZiBjaGFyYWN0ZXJzLmVudHJpZXMoKSkge1xuXHRcdGxldCBsZWZ0RXNjYXBlID0gZmFsc2U7XG5cblx0XHRpZiAoRVNDQVBFUy5pbmNsdWRlcyhjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjb25zdCBjb2RlID0gL1xcZFtebV0qLy5leGVjKHN0cmluZy5zbGljZShpbmRleCwgaW5kZXggKyAxOCkpO1xuXHRcdFx0YW5zaUNvZGUgPSBjb2RlICYmIGNvZGUubGVuZ3RoID4gMCA/IGNvZGVbMF0gOiB1bmRlZmluZWQ7XG5cdFx0XHRpZiAodmlzaWJsZSA8IGVuZCkge1xuXHRcdFx0XHRpc0luc2lkZUVzY2FwZSA9IHRydWU7XG5cdFx0XHRcdGlmIChhbnNpQ29kZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YW5zaUNvZGVzLnB1c2goYW5zaUNvZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChpc0luc2lkZUVzY2FwZSAmJiBjaGFyYWN0ZXIgPT09ICdtJykge1xuXHRcdFx0aXNJbnNpZGVFc2NhcGUgPSBmYWxzZTtcblx0XHRcdGxlZnRFc2NhcGUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICghaXNJbnNpZGVFc2NhcGUgJiYgIWxlZnRFc2NhcGUpIHtcblx0XHRcdCsrdmlzaWJsZTtcblx0XHR9XG5cblx0XHRpZiAoIWFzdHJhbFJlZ2V4KHtleGFjdDogdHJ1ZX0pLnRlc3QoY2hhcmFjdGVyKSAmJiBpc0Z1bGx3aWR0aENvZGVQb2ludChjaGFyYWN0ZXIuY29kZVBvaW50QXQoKSkpIHtcblx0XHRcdCsrdmlzaWJsZTtcblx0XHR9XG5cblx0XHRpZiAodmlzaWJsZSA+IGJlZ2luICYmIHZpc2libGUgPD0gZW5kKSB7XG5cdFx0XHRvdXRwdXQgKz0gY2hhcmFjdGVyO1xuXHRcdH0gZWxzZSBpZiAodmlzaWJsZSA9PT0gYmVnaW4gJiYgIWlzSW5zaWRlRXNjYXBlICYmIGFuc2lDb2RlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdG91dHB1dCA9IGNoZWNrQW5zaShhbnNpQ29kZXMpO1xuXHRcdH0gZWxzZSBpZiAodmlzaWJsZSA+PSBlbmQpIHtcblx0XHRcdG91dHB1dCArPSBjaGVja0Fuc2koYW5zaUNvZGVzLCB0cnVlLCBhbnNpQ29kZSk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoe29ubHlGaXJzdCA9IGZhbHNlfSA9IHt9KSA9PiB7XG5cdGNvbnN0IHBhdHRlcm4gPSBbXG5cdFx0J1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNyknLFxuXHRcdCcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSdcblx0XS5qb2luKCd8Jyk7XG5cblx0cmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb25seUZpcnN0ID8gdW5kZWZpbmVkIDogJ2cnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBhbnNpUmVnZXggPSByZXF1aXJlKCdhbnNpLXJlZ2V4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nID0+IHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnID8gc3RyaW5nLnJlcGxhY2UoYW5zaVJlZ2V4KCksICcnKSA6IHN0cmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9tdGhzLmJlL2Vtb2ppXG4gIHJldHVybiAvXFx1RDgzQ1xcdURGRjRcXHVEQjQwXFx1REM2N1xcdURCNDBcXHVEQzYyKD86XFx1REI0MFxcdURDNjVcXHVEQjQwXFx1REM2RVxcdURCNDBcXHVEQzY3fFxcdURCNDBcXHVEQzczXFx1REI0MFxcdURDNjNcXHVEQjQwXFx1REM3NHxcXHVEQjQwXFx1REM3N1xcdURCNDBcXHVEQzZDXFx1REI0MFxcdURDNzMpXFx1REI0MFxcdURDN0Z8XFx1RDgzRFxcdURDNjgoPzpcXHVEODNDXFx1REZGQ1xcdTIwMEQoPzpcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NcXHVERkZCfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDXFx1REZGRlxcdTIwMEQoPzpcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OCg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSl8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdUQ4M0NcXHVERkZFXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkRcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkJcXHVERkZDXSl8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdTIwMEQoPzpcXHUyNzY0XFx1RkUwRlxcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY4fCg/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQoPzpcXHVEODNEXFx1REM2NlxcdTIwMERcXHVEODNEXFx1REM2NnxcXHVEODNEXFx1REM2N1xcdTIwMEQoPzpcXHVEODNEW1xcdURDNjZcXHVEQzY3XSkpfFxcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY3XFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2NlxcdURDNjddKXwoPzpcXHVEODNEW1xcdURDNjhcXHVEQzY5XSlcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pfFtcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRnxcXHVEODNEW1xcdURDNjZcXHVEQzY3XXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8KD86XFx1RDgzQ1xcdURGRkJcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkZcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkVcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkRcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkNcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF0pXFx1RkUwRnxcXHVEODNDXFx1REZGQlxcdTIwMEQoPzpcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXwoPzpcXHVEODNFXFx1REREMVxcdUQ4M0NcXHVERkZCXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxfFxcdUQ4M0RcXHVEQzY5XFx1RDgzQ1xcdURGRkNcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjkpXFx1RDgzQ1xcdURGRkJ8XFx1RDgzRVxcdURERDEoPzpcXHVEODNDXFx1REZGRlxcdTIwMERcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8XFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxKXwoPzpcXHVEODNFXFx1REREMVxcdUQ4M0NcXHVERkZFXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxfFxcdUQ4M0RcXHVEQzY5XFx1RDgzQ1xcdURGRkZcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pKSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSl8KD86XFx1RDgzRVxcdURERDFcXHVEODNDXFx1REZGQ1xcdTIwMERcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMXxcXHVEODNEXFx1REM2OVxcdUQ4M0NcXHVERkZEXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY5KSg/OlxcdUQ4M0NbXFx1REZGQlxcdURGRkNdKXxcXHVEODNEXFx1REM2OSg/OlxcdUQ4M0NcXHVERkZFXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSl8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdUQ4M0NcXHVERkZDXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4KD86XFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSl8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdUQ4M0NcXHVERkZCXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4KD86XFx1RDgzQ1tcXHVERkZDLVxcdURGRkZdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkRcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1MjAwRCg/OlxcdTI3NjRcXHVGRTBGXFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKXxcXHVEODNEW1xcdURDNjhcXHVEQzY5XSl8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdUQ4M0NcXHVERkZGXFx1MjAwRCg/OlxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKSl8XFx1RDgzRFxcdURDNjlcXHUyMDBEXFx1RDgzRFxcdURDNjlcXHUyMDBEKD86XFx1RDgzRFxcdURDNjZcXHUyMDBEXFx1RDgzRFxcdURDNjZ8XFx1RDgzRFxcdURDNjdcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pKXwoPzpcXHVEODNFXFx1REREMVxcdUQ4M0NcXHVERkZEXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxfFxcdUQ4M0RcXHVEQzY5XFx1RDgzQ1xcdURGRkVcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjkpKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRdKXxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2NlxcdTIwMERcXHVEODNEXFx1REM2NnxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2OVxcdTIwMEQoPzpcXHVEODNEW1xcdURDNjZcXHVEQzY3XSl8KD86XFx1RDgzRFxcdURDNDFcXHVGRTBGXFx1MjAwRFxcdUQ4M0RcXHVEREU4fFxcdUQ4M0RcXHVEQzY5KD86XFx1RDgzQ1xcdURGRkZcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkVcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkNcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkJcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzQ1xcdURGRkRcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1MjAwRFtcXHUyNjk1XFx1MjY5NlxcdTI3MDhdKXwoPzooPzpcXHUyNkY5fFxcdUQ4M0NbXFx1REZDQlxcdURGQ0NdfFxcdUQ4M0RcXHVERDc1KVxcdUZFMEZ8XFx1RDgzRFxcdURDNkZ8XFx1RDgzRVtcXHVERDNDXFx1RERERVxcdUREREZdKVxcdTIwMERbXFx1MjY0MFxcdTI2NDJdfCg/OlxcdTI2Rjl8XFx1RDgzQ1tcXHVERkNCXFx1REZDQ118XFx1RDgzRFxcdURENzUpKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMERbXFx1MjY0MFxcdTI2NDJdfCg/OlxcdUQ4M0NbXFx1REZDM1xcdURGQzRcXHVERkNBXXxcXHVEODNEW1xcdURDNkVcXHVEQzcxXFx1REM3M1xcdURDNzdcXHVEQzgxXFx1REM4MlxcdURDODZcXHVEQzg3XFx1REU0NS1cXHVERTQ3XFx1REU0QlxcdURFNERcXHVERTRFXFx1REVBM1xcdURFQjQtXFx1REVCNl18XFx1RDgzRVtcXHVERDI2XFx1REQzNy1cXHVERDM5XFx1REQzRFxcdUREM0VcXHVEREI4XFx1RERCOVxcdUREQ0QtXFx1RERDRlxcdURERDYtXFx1RERERF0pKD86KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMERbXFx1MjY0MFxcdTI2NDJdfFxcdTIwMERbXFx1MjY0MFxcdTI2NDJdKXxcXHVEODNDXFx1REZGNFxcdTIwMERcXHUyNjIwKVxcdUZFMEZ8XFx1RDgzRFxcdURDNjlcXHUyMDBEXFx1RDgzRFxcdURDNjdcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pfFxcdUQ4M0NcXHVERkYzXFx1RkUwRlxcdTIwMERcXHVEODNDXFx1REYwOHxcXHVEODNEXFx1REMxNVxcdTIwMERcXHVEODNFXFx1RERCQXxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2NnxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2N3xcXHVEODNDXFx1RERGRFxcdUQ4M0NcXHVEREYwfFxcdUQ4M0NcXHVEREY0XFx1RDgzQ1xcdURERjJ8XFx1RDgzQ1xcdURERjZcXHVEODNDXFx1RERFNnxbI1xcKjAtOV1cXHVGRTBGXFx1MjBFM3xcXHVEODNDXFx1RERFNyg/OlxcdUQ4M0NbXFx1RERFNlxcdURERTdcXHVEREU5LVxcdURERUZcXHVEREYxLVxcdURERjRcXHVEREY2LVxcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkVcXHVEREZGXSl8XFx1RDgzQ1xcdURERjkoPzpcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRFxcdURERUYtXFx1RERGNFxcdURERjdcXHVEREY5XFx1RERGQlxcdURERkNcXHVEREZGXSl8XFx1RDgzQ1xcdURERUEoPzpcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXSl8XFx1RDgzRVxcdURERDEoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfFxcdUQ4M0NcXHVEREY3KD86XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ10pfFxcdUQ4M0RcXHVEQzY5KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXxcXHVEODNDXFx1RERGMig/OlxcdUQ4M0NbXFx1RERFNlxcdURERTgtXFx1RERFRFxcdURERjAtXFx1RERGRl0pfFxcdUQ4M0NcXHVEREU2KD86XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXSl8XFx1RDgzQ1xcdURERjAoPzpcXHVEODNDW1xcdURERUFcXHVEREVDLVxcdURERUVcXHVEREYyXFx1RERGM1xcdURERjVcXHVEREY3XFx1RERGQ1xcdURERkVcXHVEREZGXSl8XFx1RDgzQ1xcdURERUQoPzpcXHVEODNDW1xcdURERjBcXHVEREYyXFx1RERGM1xcdURERjdcXHVEREY5XFx1RERGQV0pfFxcdUQ4M0NcXHVEREU5KD86XFx1RDgzQ1tcXHVEREVBXFx1RERFQ1xcdURERUZcXHVEREYwXFx1RERGMlxcdURERjRcXHVEREZGXSl8XFx1RDgzQ1xcdURERkUoPzpcXHVEODNDW1xcdURERUFcXHVEREY5XSl8XFx1RDgzQ1xcdURERUMoPzpcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVFXFx1RERGMS1cXHVEREYzXFx1RERGNS1cXHVEREZBXFx1RERGQ1xcdURERkVdKXxcXHVEODNDXFx1RERGOCg/OlxcdUQ4M0NbXFx1RERFNi1cXHVEREVBXFx1RERFQy1cXHVEREY0XFx1RERGNy1cXHVEREY5XFx1RERGQlxcdURERkQtXFx1RERGRl0pfFxcdUQ4M0NcXHVEREVCKD86XFx1RDgzQ1tcXHVEREVFLVxcdURERjBcXHVEREYyXFx1RERGNFxcdURERjddKXxcXHVEODNDXFx1RERGNSg/OlxcdUQ4M0NbXFx1RERFNlxcdURERUEtXFx1RERFRFxcdURERjAtXFx1RERGM1xcdURERjctXFx1RERGOVxcdURERkNcXHVEREZFXSl8XFx1RDgzQ1xcdURERkIoPzpcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdKXxcXHVEODNDXFx1RERGMyg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBLVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjRcXHVEREY1XFx1RERGN1xcdURERkFcXHVEREZGXSl8XFx1RDgzQ1xcdURERTgoPzpcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdKXxcXHVEODNDXFx1RERGMSg/OlxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXSl8XFx1RDgzQ1xcdURERkYoPzpcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ10pfFxcdUQ4M0NcXHVEREZDKD86XFx1RDgzQ1tcXHVEREVCXFx1RERGOF0pfFxcdUQ4M0NcXHVEREZBKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFQ1xcdURERjJcXHVEREYzXFx1RERGOFxcdURERkVcXHVEREZGXSl8XFx1RDgzQ1xcdURERUUoPzpcXHVEODNDW1xcdURERTgtXFx1RERFQVxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOV0pfFxcdUQ4M0NcXHVEREVGKD86XFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XSl8KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNzFcXHVEQzczXFx1REM3N1xcdURDODFcXHVEQzgyXFx1REM4NlxcdURDODdcXHVERTQ1LVxcdURFNDdcXHVERTRCXFx1REU0RFxcdURFNEVcXHVERUEzXFx1REVCNC1cXHVERUI2XXxcXHVEODNFW1xcdUREMjZcXHVERDM3LVxcdUREMzlcXHVERDNEXFx1REQzRVxcdUREQjhcXHVEREI5XFx1RERDRC1cXHVERENGXFx1RERENi1cXHVEREREXSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfCg/OlxcdTI2Rjl8XFx1RDgzQ1tcXHVERkNCXFx1REZDQ118XFx1RDgzRFxcdURENzUpKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXwoPzpbXFx1MjYxRFxcdTI3MEEtXFx1MjcwRF18XFx1RDgzQ1tcXHVERjg1XFx1REZDMlxcdURGQzddfFxcdUQ4M0RbXFx1REM0MlxcdURDNDNcXHVEQzQ2LVxcdURDNTBcXHVEQzY2XFx1REM2N1xcdURDNkItXFx1REM2RFxcdURDNzBcXHVEQzcyXFx1REM3NC1cXHVEQzc2XFx1REM3OFxcdURDN0NcXHVEQzgzXFx1REM4NVxcdURDQUFcXHVERDc0XFx1REQ3QVxcdUREOTBcXHVERDk1XFx1REQ5NlxcdURFNENcXHVERTRGXFx1REVDMFxcdURFQ0NdfFxcdUQ4M0VbXFx1REQwRlxcdUREMTgtXFx1REQxQ1xcdUREMUVcXHVERDFGXFx1REQzMC1cXHVERDM2XFx1RERCNVxcdUREQjZcXHVEREJCXFx1REREMi1cXHVEREQ1XSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfCg/OltcXHUyMzFBXFx1MjMxQlxcdTIzRTktXFx1MjNFQ1xcdTIzRjBcXHUyM0YzXFx1MjVGRFxcdTI1RkVcXHUyNjE0XFx1MjYxNVxcdTI2NDgtXFx1MjY1M1xcdTI2N0ZcXHUyNjkzXFx1MjZBMVxcdTI2QUFcXHUyNkFCXFx1MjZCRFxcdTI2QkVcXHUyNkM0XFx1MjZDNVxcdTI2Q0VcXHUyNkQ0XFx1MjZFQVxcdTI2RjJcXHUyNkYzXFx1MjZGNVxcdTI2RkFcXHUyNkZEXFx1MjcwNVxcdTI3MEFcXHUyNzBCXFx1MjcyOFxcdTI3NENcXHUyNzRFXFx1Mjc1My1cXHUyNzU1XFx1Mjc1N1xcdTI3OTUtXFx1Mjc5N1xcdTI3QjBcXHUyN0JGXFx1MkIxQlxcdTJCMUNcXHUyQjUwXFx1MkI1NV18XFx1RDgzQ1tcXHVEQzA0XFx1RENDRlxcdUREOEVcXHVERDkxLVxcdUREOUFcXHVEREU2LVxcdURERkZcXHVERTAxXFx1REUxQVxcdURFMkZcXHVERTMyLVxcdURFMzZcXHVERTM4LVxcdURFM0FcXHVERTUwXFx1REU1MVxcdURGMDAtXFx1REYyMFxcdURGMkQtXFx1REYzNVxcdURGMzctXFx1REY3Q1xcdURGN0UtXFx1REY5M1xcdURGQTAtXFx1REZDQVxcdURGQ0YtXFx1REZEM1xcdURGRTAtXFx1REZGMFxcdURGRjRcXHVERkY4LVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVEQzNFXFx1REM0MFxcdURDNDItXFx1RENGQ1xcdURDRkYtXFx1REQzRFxcdURENEItXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdUREN0FcXHVERDk1XFx1REQ5NlxcdUREQTRcXHVEREZCLVxcdURFNEZcXHVERTgwLVxcdURFQzVcXHVERUNDXFx1REVEMC1cXHVERUQyXFx1REVENVxcdURFRUJcXHVERUVDXFx1REVGNC1cXHVERUZBXFx1REZFMC1cXHVERkVCXXxcXHVEODNFW1xcdUREMEQtXFx1REQzQVxcdUREM0MtXFx1REQ0NVxcdURENDctXFx1REQ3MVxcdURENzMtXFx1REQ3NlxcdUREN0EtXFx1RERBMlxcdUREQTUtXFx1RERBQVxcdUREQUUtXFx1RERDQVxcdUREQ0QtXFx1RERGRlxcdURFNzAtXFx1REU3M1xcdURFNzgtXFx1REU3QVxcdURFODAtXFx1REU4MlxcdURFOTAtXFx1REU5NV0pfCg/OlsjXFwqMC05XFx4QTlcXHhBRVxcdTIwM0NcXHUyMDQ5XFx1MjEyMlxcdTIxMzlcXHUyMTk0LVxcdTIxOTlcXHUyMUE5XFx1MjFBQVxcdTIzMUFcXHUyMzFCXFx1MjMyOFxcdTIzQ0ZcXHUyM0U5LVxcdTIzRjNcXHUyM0Y4LVxcdTIzRkFcXHUyNEMyXFx1MjVBQVxcdTI1QUJcXHUyNUI2XFx1MjVDMFxcdTI1RkItXFx1MjVGRVxcdTI2MDAtXFx1MjYwNFxcdTI2MEVcXHUyNjExXFx1MjYxNFxcdTI2MTVcXHUyNjE4XFx1MjYxRFxcdTI2MjBcXHUyNjIyXFx1MjYyM1xcdTI2MjZcXHUyNjJBXFx1MjYyRVxcdTI2MkZcXHUyNjM4LVxcdTI2M0FcXHUyNjQwXFx1MjY0MlxcdTI2NDgtXFx1MjY1M1xcdTI2NUZcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdFXFx1MjY3RlxcdTI2OTItXFx1MjY5N1xcdTI2OTlcXHUyNjlCXFx1MjY5Q1xcdTI2QTBcXHUyNkExXFx1MjZBQVxcdTI2QUJcXHUyNkIwXFx1MjZCMVxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzVcXHUyNkM4XFx1MjZDRVxcdTI2Q0ZcXHUyNkQxXFx1MjZEM1xcdTI2RDRcXHUyNkU5XFx1MjZFQVxcdTI2RjAtXFx1MjZGNVxcdTI2RjctXFx1MjZGQVxcdTI2RkRcXHUyNzAyXFx1MjcwNVxcdTI3MDgtXFx1MjcwRFxcdTI3MEZcXHUyNzEyXFx1MjcxNFxcdTI3MTZcXHUyNzFEXFx1MjcyMVxcdTI3MjhcXHUyNzMzXFx1MjczNFxcdTI3NDRcXHUyNzQ3XFx1Mjc0Q1xcdTI3NEVcXHUyNzUzLVxcdTI3NTVcXHUyNzU3XFx1Mjc2M1xcdTI3NjRcXHUyNzk1LVxcdTI3OTdcXHUyN0ExXFx1MjdCMFxcdTI3QkZcXHUyOTM0XFx1MjkzNVxcdTJCMDUtXFx1MkIwN1xcdTJCMUJcXHUyQjFDXFx1MkI1MFxcdTJCNTVcXHUzMDMwXFx1MzAzRFxcdTMyOTdcXHUzMjk5XXxcXHVEODNDW1xcdURDMDRcXHVEQ0NGXFx1REQ3MFxcdURENzFcXHVERDdFXFx1REQ3RlxcdUREOEVcXHVERDkxLVxcdUREOUFcXHVEREU2LVxcdURERkZcXHVERTAxXFx1REUwMlxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjFcXHVERjI0LVxcdURGOTNcXHVERjk2XFx1REY5N1xcdURGOTktXFx1REY5QlxcdURGOUUtXFx1REZGMFxcdURGRjMtXFx1REZGNVxcdURGRjctXFx1REZGRl18XFx1RDgzRFtcXHVEQzAwLVxcdURDRkRcXHVEQ0ZGLVxcdUREM0RcXHVERDQ5LVxcdURENEVcXHVERDUwLVxcdURENjdcXHVERDZGXFx1REQ3MFxcdURENzMtXFx1REQ3QVxcdUREODdcXHVERDhBLVxcdUREOERcXHVERDkwXFx1REQ5NVxcdUREOTZcXHVEREE0XFx1RERBNVxcdUREQThcXHVEREIxXFx1RERCMlxcdUREQkNcXHVEREMyLVxcdUREQzRcXHVEREQxLVxcdURERDNcXHVERERDLVxcdUREREVcXHVEREUxXFx1RERFM1xcdURERThcXHVEREVGXFx1RERGM1xcdURERkEtXFx1REU0RlxcdURFODAtXFx1REVDNVxcdURFQ0ItXFx1REVEMlxcdURFRDVcXHVERUUwLVxcdURFRTVcXHVERUU5XFx1REVFQlxcdURFRUNcXHVERUYwXFx1REVGMy1cXHVERUZBXFx1REZFMC1cXHVERkVCXXxcXHVEODNFW1xcdUREMEQtXFx1REQzQVxcdUREM0MtXFx1REQ0NVxcdURENDctXFx1REQ3MVxcdURENzMtXFx1REQ3NlxcdUREN0EtXFx1RERBMlxcdUREQTUtXFx1RERBQVxcdUREQUUtXFx1RERDQVxcdUREQ0QtXFx1RERGRlxcdURFNzAtXFx1REU3M1xcdURFNzgtXFx1REU3QVxcdURFODAtXFx1REU4MlxcdURFOTAtXFx1REU5NV0pXFx1RkUwRnwoPzpbXFx1MjYxRFxcdTI2RjlcXHUyNzBBLVxcdTI3MERdfFxcdUQ4M0NbXFx1REY4NVxcdURGQzItXFx1REZDNFxcdURGQzdcXHVERkNBLVxcdURGQ0NdfFxcdUQ4M0RbXFx1REM0MlxcdURDNDNcXHVEQzQ2LVxcdURDNTBcXHVEQzY2LVxcdURDNzhcXHVEQzdDXFx1REM4MS1cXHVEQzgzXFx1REM4NS1cXHVEQzg3XFx1REM4RlxcdURDOTFcXHVEQ0FBXFx1REQ3NFxcdURENzVcXHVERDdBXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1REU0NS1cXHVERTQ3XFx1REU0Qi1cXHVERTRGXFx1REVBM1xcdURFQjQtXFx1REVCNlxcdURFQzBcXHVERUNDXXxcXHVEODNFW1xcdUREMEZcXHVERDE4LVxcdUREMUZcXHVERDI2XFx1REQzMC1cXHVERDM5XFx1REQzQy1cXHVERDNFXFx1RERCNVxcdUREQjZcXHVEREI4XFx1RERCOVxcdUREQkJcXHVERENELVxcdUREQ0ZcXHVEREQxLVxcdURERERdKS9nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IHN0cmlwQW5zaSA9IHJlcXVpcmUoJ3N0cmlwLWFuc2knKTtcbmNvbnN0IGlzRnVsbHdpZHRoQ29kZVBvaW50ID0gcmVxdWlyZSgnaXMtZnVsbHdpZHRoLWNvZGUtcG9pbnQnKTtcbmNvbnN0IGVtb2ppUmVnZXggPSByZXF1aXJlKCdlbW9qaS1yZWdleCcpO1xuXG5jb25zdCBzdHJpbmdXaWR0aCA9IHN0cmluZyA9PiB7XG5cdGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJyB8fCBzdHJpbmcubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRzdHJpbmcgPSBzdHJpcEFuc2koc3RyaW5nKTtcblxuXHRpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoZW1vamlSZWdleCgpLCAnICAnKTtcblxuXHRsZXQgd2lkdGggPSAwO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgY29kZSA9IHN0cmluZy5jb2RlUG9pbnRBdChpKTtcblxuXHRcdC8vIElnbm9yZSBjb250cm9sIGNoYXJhY3RlcnNcblx0XHRpZiAoY29kZSA8PSAweDFGIHx8IChjb2RlID49IDB4N0YgJiYgY29kZSA8PSAweDlGKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Ly8gSWdub3JlIGNvbWJpbmluZyBjaGFyYWN0ZXJzXG5cdFx0aWYgKGNvZGUgPj0gMHgzMDAgJiYgY29kZSA8PSAweDM2Rikge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Ly8gU3Vycm9nYXRlc1xuXHRcdGlmIChjb2RlID4gMHhGRkZGKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0d2lkdGggKz0gaXNGdWxsd2lkdGhDb2RlUG9pbnQoY29kZSkgPyAyIDogMTtcblx0fVxuXG5cdHJldHVybiB3aWR0aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nV2lkdGg7XG4vLyBUT0RPOiByZW1vdmUgdGhpcyBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gc3RyaW5nV2lkdGg7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBzbGljZUFuc2kgPSByZXF1aXJlKCdzbGljZS1hbnNpJyk7XG5jb25zdCBzdHJpbmdXaWR0aCA9IHJlcXVpcmUoJ3N0cmluZy13aWR0aCcpO1xuXG5mdW5jdGlvbiBnZXRJbmRleE9mTmVhcmVzdFNwYWNlKHN0cmluZywgaW5kZXgsIHNob3VsZFNlYXJjaFJpZ2h0KSB7XG5cdGlmIChzdHJpbmcuY2hhckF0KGluZGV4KSA9PT0gJyAnKSB7XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG5cdFx0aWYgKHNob3VsZFNlYXJjaFJpZ2h0KSB7XG5cdFx0XHRpZiAoc3RyaW5nLmNoYXJBdChpbmRleCArIGkpID09PSAnICcpIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4ICsgaTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHN0cmluZy5jaGFyQXQoaW5kZXggLSBpKSA9PT0gJyAnKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggLSBpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBpbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAodGV4dCwgY29sdW1ucywgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0ge1xuXHRcdHBvc2l0aW9uOiAnZW5kJyxcblx0XHRwcmVmZXJUcnVuY2F0aW9uT25TcGFjZTogZmFsc2UsXG5cdFx0Li4ub3B0aW9uc1xuXHR9O1xuXG5cdGNvbnN0IHtwb3NpdGlvbiwgc3BhY2UsIHByZWZlclRydW5jYXRpb25PblNwYWNlfSA9IG9wdGlvbnM7XG5cdGxldCBlbGxpcHNpcyA9ICfigKYnO1xuXHRsZXQgZWxsaXBzaXNXaWR0aCA9IDE7XG5cblx0aWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGlucHV0XFxgIHRvIGJlIGEgc3RyaW5nLCBnb3QgJHt0eXBlb2YgdGV4dH1gKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgY29sdW1ucyAhPT0gJ251bWJlcicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBjb2x1bW5zXFxgIHRvIGJlIGEgbnVtYmVyLCBnb3QgJHt0eXBlb2YgY29sdW1uc31gKTtcblx0fVxuXG5cdGlmIChjb2x1bW5zIDwgMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdGlmIChjb2x1bW5zID09PSAxKSB7XG5cdFx0cmV0dXJuIGVsbGlwc2lzO1xuXHR9XG5cblx0Y29uc3QgbGVuZ3RoID0gc3RyaW5nV2lkdGgodGV4dCk7XG5cblx0aWYgKGxlbmd0aCA8PSBjb2x1bW5zKSB7XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRpZiAocG9zaXRpb24gPT09ICdzdGFydCcpIHtcblx0XHRpZiAocHJlZmVyVHJ1bmNhdGlvbk9uU3BhY2UpIHtcblx0XHRcdGNvbnN0IG5lYXJlc3RTcGFjZSA9IGdldEluZGV4T2ZOZWFyZXN0U3BhY2UodGV4dCwgbGVuZ3RoIC0gY29sdW1ucyArIDEsIHRydWUpO1xuXHRcdFx0cmV0dXJuIGVsbGlwc2lzICsgc2xpY2VBbnNpKHRleHQsIG5lYXJlc3RTcGFjZSwgbGVuZ3RoKS50cmltKCk7XG5cdFx0fVxuXG5cdFx0aWYgKHNwYWNlID09PSB0cnVlKSB7XG5cdFx0XHRlbGxpcHNpcyArPSAnICc7XG5cdFx0XHRlbGxpcHNpc1dpZHRoID0gMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxsaXBzaXMgKyBzbGljZUFuc2kodGV4dCwgbGVuZ3RoIC0gY29sdW1ucyArIGVsbGlwc2lzV2lkdGgsIGxlbmd0aCk7XG5cdH1cblxuXHRpZiAocG9zaXRpb24gPT09ICdtaWRkbGUnKSB7XG5cdFx0aWYgKHNwYWNlID09PSB0cnVlKSB7XG5cdFx0XHRlbGxpcHNpcyA9ICcgJyArIGVsbGlwc2lzICsgJyAnO1xuXHRcdFx0ZWxsaXBzaXNXaWR0aCA9IDM7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaGFsZiA9IE1hdGguZmxvb3IoY29sdW1ucyAvIDIpO1xuXG5cdFx0aWYgKHByZWZlclRydW5jYXRpb25PblNwYWNlKSB7XG5cdFx0XHRjb25zdCBzcGFjZU5lYXJGaXJzdEJyZWFrUG9pbnQgPSBnZXRJbmRleE9mTmVhcmVzdFNwYWNlKHRleHQsIGhhbGYpO1xuXHRcdFx0Y29uc3Qgc3BhY2VOZWFyU2Vjb25kQnJlYWtQb2ludCA9IGdldEluZGV4T2ZOZWFyZXN0U3BhY2UodGV4dCwgbGVuZ3RoIC0gKGNvbHVtbnMgLSBoYWxmKSArIDEsIHRydWUpO1xuXHRcdFx0cmV0dXJuIHNsaWNlQW5zaSh0ZXh0LCAwLCBzcGFjZU5lYXJGaXJzdEJyZWFrUG9pbnQpICsgZWxsaXBzaXMgKyBzbGljZUFuc2kodGV4dCwgc3BhY2VOZWFyU2Vjb25kQnJlYWtQb2ludCwgbGVuZ3RoKS50cmltKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdHNsaWNlQW5zaSh0ZXh0LCAwLCBoYWxmKSArXG5cdFx0XHRlbGxpcHNpcyArXG5cdFx0XHRzbGljZUFuc2kodGV4dCwgbGVuZ3RoIC0gKGNvbHVtbnMgLSBoYWxmKSArIGVsbGlwc2lzV2lkdGgsIGxlbmd0aClcblx0XHQpO1xuXHR9XG5cblx0aWYgKHBvc2l0aW9uID09PSAnZW5kJykge1xuXHRcdGlmIChwcmVmZXJUcnVuY2F0aW9uT25TcGFjZSkge1xuXHRcdFx0Y29uc3QgbmVhcmVzdFNwYWNlID0gZ2V0SW5kZXhPZk5lYXJlc3RTcGFjZSh0ZXh0LCBjb2x1bW5zIC0gMSk7XG5cdFx0XHRyZXR1cm4gc2xpY2VBbnNpKHRleHQsIDAsIG5lYXJlc3RTcGFjZSkgKyBlbGxpcHNpcztcblx0XHR9XG5cblx0XHRpZiAoc3BhY2UgPT09IHRydWUpIHtcblx0XHRcdGVsbGlwc2lzID0gJyAnICsgZWxsaXBzaXM7XG5cdFx0XHRlbGxpcHNpc1dpZHRoID0gMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2xpY2VBbnNpKHRleHQsIDAsIGNvbHVtbnMgLSBlbGxpcHNpc1dpZHRoKSArIGVsbGlwc2lzO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBcXGBvcHRpb25zLnBvc2l0aW9uXFxgIHRvIGJlIGVpdGhlciBcXGBzdGFydFxcYCwgXFxgbWlkZGxlXFxgIG9yIFxcYGVuZFxcYCwgZ290ICR7cG9zaXRpb259YCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qge3Byb21pc2lmeX0gPSByZXF1aXJlKCd1dGlsJyk7XG5cbmNvbnN0IHBBY2Nlc3MgPSBwcm9taXNpZnkoZnMuYWNjZXNzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBwYXRoID0+IHtcblx0dHJ5IHtcblx0XHRhd2FpdCBwQWNjZXNzKHBhdGgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5zeW5jID0gcGF0aCA9PiB7XG5cdHRyeSB7XG5cdFx0ZnMuYWNjZXNzU3luYyhwYXRoKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoXykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1vZGlmeUZpbGVuYW1lKHB0aCwgbW9kaWZpZXIpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2BwYXRoYCBhbmQgYG1vZGlmaWVyYCByZXF1aXJlZCcpO1xuXHR9XG5cblx0aWYgKEFycmF5LmlzQXJyYXkocHRoKSkge1xuXHRcdHJldHVybiBwdGgubWFwKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0cmV0dXJuIG1vZGlmeUZpbGVuYW1lKGVsLCBtb2RpZmllcik7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgZXh0ID0gcGF0aC5leHRuYW1lKHB0aCk7XG5cdHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKHB0aCksIG1vZGlmaWVyKHBhdGguYmFzZW5hbWUocHRoLCBleHQpLCBleHQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBwYXRoRXhpc3RzID0gcmVxdWlyZSgncGF0aC1leGlzdHMnKTtcbmNvbnN0IG1vZGlmeUZpbGVuYW1lID0gcmVxdWlyZSgnbW9kaWZ5LWZpbGVuYW1lJyk7XG5cbmNvbnN0IGluY3JlbWVudGVyID0gZmlsZVBhdGggPT4ge1xuXHRsZXQgY291bnRlciA9IDA7XG5cdHJldHVybiAoKSA9PiBtb2RpZnlGaWxlbmFtZShmaWxlUGF0aCwgKGZpbGVuYW1lLCBleHRlbnNpb24pID0+IGAke2ZpbGVuYW1lfSAoJHsrK2NvdW50ZXJ9KSR7ZXh0ZW5zaW9ufWApO1xufTtcblxuY29uc3QgdW51c2VkRmlsZW5hbWUgPSBmaWxlUGF0aCA9PiB7XG5cdGNvbnN0IGdldEZpbGVQYXRoID0gaW5jcmVtZW50ZXIoZmlsZVBhdGgpO1xuXHRjb25zdCBmaW5kID0gYXN5bmMgbmV3RmlsZVBhdGggPT4gYXdhaXQgcGF0aEV4aXN0cyhuZXdGaWxlUGF0aCkgPyBmaW5kKGdldEZpbGVQYXRoKCkpIDogbmV3RmlsZVBhdGg7XG5cdHJldHVybiBmaW5kKGZpbGVQYXRoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdW51c2VkRmlsZW5hbWU7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHVudXNlZEZpbGVuYW1lO1xuXG5tb2R1bGUuZXhwb3J0cy5zeW5jID0gZmlsZVBhdGggPT4ge1xuXHRjb25zdCBnZXRGaWxlUGF0aCA9IGluY3JlbWVudGVyKGZpbGVQYXRoKTtcblx0Y29uc3QgZmluZCA9IG5ld0ZpbGVQYXRoID0+IHBhdGhFeGlzdHMuc3luYyhuZXdGaWxlUGF0aCkgPyBmaW5kKGdldEZpbGVQYXRoKCkpIDogbmV3RmlsZVBhdGg7XG5cdHJldHVybiBmaW5kKGZpbGVQYXRoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuaHRtbEVzY2FwZSA9IHN0cmluZyA9PiBzdHJpbmdcblx0LnJlcGxhY2UoLyYvZywgJyZhbXA7Jylcblx0LnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuXHQucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuXHQucmVwbGFjZSgvPC9nLCAnJmx0OycpXG5cdC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG5cbmV4cG9ydHMuaHRtbFVuZXNjYXBlID0gaHRtbFN0cmluZyA9PiBodG1sU3RyaW5nXG5cdC5yZXBsYWNlKC8mZ3Q7L2csICc+Jylcblx0LnJlcGxhY2UoLyZsdDsvZywgJzwnKVxuXHQucmVwbGFjZSgvJiMwPzM5Oy9nLCAnXFwnJylcblx0LnJlcGxhY2UoLyZxdW90Oy9nLCAnXCInKVxuXHQucmVwbGFjZSgvJmFtcDsvZywgJyYnKTtcblxuZXhwb3J0cy5odG1sRXNjYXBlVGFnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4ge1xuXHRsZXQgb3V0cHV0ID0gc3RyaW5nc1swXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRvdXRwdXQgPSBvdXRwdXQgKyBleHBvcnRzLmh0bWxFc2NhcGUoU3RyaW5nKHZhbHVlc1tpXSkpICsgc3RyaW5nc1tpICsgMV07XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0O1xufTtcblxuZXhwb3J0cy5odG1sVW5lc2NhcGVUYWcgPSAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiB7XG5cdGxldCBvdXRwdXQgPSBzdHJpbmdzWzBdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHRcdG91dHB1dCA9IG91dHB1dCArIGV4cG9ydHMuaHRtbFVuZXNjYXBlKFN0cmluZyh2YWx1ZXNbaV0pKSArIHN0cmluZ3NbaSArIDFdO1xuXHR9XG5cblx0cmV0dXJuIG91dHB1dDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCB7aHRtbEVzY2FwZX0gPSByZXF1aXJlKCdlc2NhcGUtZ29hdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh0ZW1wbGF0ZSwgZGF0YSkgPT4ge1xuXHRpZiAodHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgXFxgc3RyaW5nXFxgIGluIHRoZSBmaXJzdCBhcmd1bWVudCwgZ290IFxcYCR7dHlwZW9mIHRlbXBsYXRlfVxcYGApO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGFuIFxcYG9iamVjdFxcYCBvciBcXGBBcnJheVxcYCBpbiB0aGUgc2Vjb25kIGFyZ3VtZW50LCBnb3QgXFxgJHt0eXBlb2YgZGF0YX1cXGBgKTtcblx0fVxuXG5cdC8vIFRoZSByZWdleCB0cmllcyB0byBtYXRjaCBlaXRoZXIgYSBudW1iZXIgaW5zaWRlIGB7eyB9fWAgb3IgYSB2YWxpZCBKUyBpZGVudGlmaWVyIG9yIGtleSBwYXRoLlxuXHRjb25zdCBkb3VibGVCcmFjZVJlZ2V4ID0gL3t7KFxcZCt8W2EteiRfXVthLXpcXGQkX10qPyg/OlxcLlthLXpcXGQkX10qPykqPyl9fS9naTtcblxuXHRpZiAoZG91YmxlQnJhY2VSZWdleC50ZXN0KHRlbXBsYXRlKSkge1xuXHRcdHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShkb3VibGVCcmFjZVJlZ2V4LCAoXywga2V5KSA9PiB7XG5cdFx0XHRsZXQgcmVzdWx0ID0gZGF0YTtcblxuXHRcdFx0Zm9yIChjb25zdCBwcm9wZXJ0eSBvZiBrZXkuc3BsaXQoJy4nKSkge1xuXHRcdFx0XHRyZXN1bHQgPSByZXN1bHQgPyByZXN1bHRbcHJvcGVydHldIDogJyc7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBodG1sRXNjYXBlKFN0cmluZyhyZXN1bHQpKTtcblx0XHR9KTtcblx0fVxuXG5cdGNvbnN0IGJyYWNlUmVnZXggPSAveyhcXGQrfFthLXokX11bYS16XFxkJF9dKj8oPzpcXC5bYS16XFxkJF9dKj8pKj8pfS9naTtcblxuXHRyZXR1cm4gdGVtcGxhdGUucmVwbGFjZShicmFjZVJlZ2V4LCAoXywga2V5KSA9PiB7XG5cdFx0bGV0IHJlc3VsdCA9IGRhdGE7XG5cblx0XHRmb3IgKGNvbnN0IHByb3BlcnR5IG9mIGtleS5zcGxpdCgnLicpKSB7XG5cdFx0XHRyZXN1bHQgPSByZXN1bHQgPyByZXN1bHRbcHJvcGVydHldIDogJyc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFN0cmluZyhyZXN1bHQpO1xuXHR9KTtcbn07XG4iLCIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUtMjAyMiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCIndXNlIHN0cmljdCc7XG52YXIgbWltZURiID0gcmVxdWlyZSgnbWltZS1kYicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHJldCA9IHt9O1xuXG5cdE9iamVjdC5rZXlzKG1pbWVEYikuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuXHRcdHZhciB2YWwgPSBtaW1lRGJbeF07XG5cblx0XHRpZiAodmFsLmV4dGVuc2lvbnMgJiYgdmFsLmV4dGVuc2lvbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFsLmV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoeSkge1xuXHRcdFx0XHRyZXRbeV0gPSB4O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gcmV0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0dmFyIHByb3RvdHlwZTtcblx0cmV0dXJuIHRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIChwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCksIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc1BsYWluT2JqID0gcmVxdWlyZSgnaXMtcGxhaW4tb2JqJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuXHRpZiAoIWlzUGxhaW5PYmoob2JqKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgcGxhaW4gb2JqZWN0Jyk7XG5cdH1cblxuXHRvcHRzID0gb3B0cyB8fCB7fTtcblxuXHQvLyBERVBSRUNBVEVEXG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdG9wdHMgPSB7Y29tcGFyZTogb3B0c307XG5cdH1cblxuXHR2YXIgZGVlcCA9IG9wdHMuZGVlcDtcblx0dmFyIHNlZW5JbnB1dCA9IFtdO1xuXHR2YXIgc2Vlbk91dHB1dCA9IFtdO1xuXG5cdHZhciBzb3J0S2V5cyA9IGZ1bmN0aW9uICh4KSB7XG5cdFx0dmFyIHNlZW5JbmRleCA9IHNlZW5JbnB1dC5pbmRleE9mKHgpO1xuXG5cdFx0aWYgKHNlZW5JbmRleCAhPT0gLTEpIHtcblx0XHRcdHJldHVybiBzZWVuT3V0cHV0W3NlZW5JbmRleF07XG5cdFx0fVxuXG5cdFx0dmFyIHJldCA9IHt9O1xuXHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoeCkuc29ydChvcHRzLmNvbXBhcmUpO1xuXG5cdFx0c2VlbklucHV0LnB1c2goeCk7XG5cdFx0c2Vlbk91dHB1dC5wdXNoKHJldCk7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBrZXkgPSBrZXlzW2ldO1xuXHRcdFx0dmFyIHZhbCA9IHhba2V5XTtcblxuXHRcdFx0cmV0W2tleV0gPSBkZWVwICYmIGlzUGxhaW5PYmoodmFsKSA/IHNvcnRLZXlzKHZhbCkgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblxuXHRyZXR1cm4gc29ydEtleXMob2JqKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzb3J0S2V5cyA9IHJlcXVpcmUoJ3NvcnQta2V5cycpO1xuXG4vKipcbiAqIFNvcnQgb2JqZWN0IGtleXMgYnkgbGVuZ3RoXG4gKlxuICogQHBhcmFtIG9ialxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5kZXNjID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gc29ydEtleXMob2JqLCBmdW5jdGlvbiAoYSwgYikge1xuXHRcdHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuXHR9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuYXNjID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gc29ydEtleXMob2JqLCBmdW5jdGlvbiAoYSwgYikge1xuXHRcdHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuXHR9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IGV4dExpc3QgPSByZXF1aXJlKCdleHQtbGlzdCcpO1xuY29uc3Qgc29ydEtleXNMZW5ndGggPSByZXF1aXJlKCdzb3J0LWtleXMtbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IHtcblx0Y29uc3Qgb2JqID0gc29ydEtleXNMZW5ndGguZGVzYyhleHRMaXN0KCkpO1xuXHRjb25zdCBleHRzID0gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoeCA9PiBzdHIuZW5kc1dpdGgoeCkpO1xuXG5cdGlmIChleHRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdHJldHVybiBleHRzLm1hcCh4ID0+ICh7XG5cdFx0ZXh0OiB4LFxuXHRcdG1pbWU6IG9ialt4XVxuXHR9KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5taW1lID0gc3RyID0+IHtcblx0Y29uc3Qgb2JqID0gc29ydEtleXNMZW5ndGguZGVzYyhleHRMaXN0KCkpO1xuXHRjb25zdCBleHRzID0gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoeCA9PiBvYmpbeF0gPT09IHN0cik7XG5cblx0aWYgKGV4dHMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0cmV0dXJuIGV4dHMubWFwKHggPT4gKHtcblx0XHRleHQ6IHgsXG5cdFx0bWltZTogb2JqW3hdXG5cdH0pKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qge2FwcCwgQnJvd3NlcldpbmRvdywgc2hlbGwsIGRpYWxvZ30gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgdW51c2VkRmlsZW5hbWUgPSByZXF1aXJlKCd1bnVzZWQtZmlsZW5hbWUnKTtcbmNvbnN0IHB1cGEgPSByZXF1aXJlKCdwdXBhJyk7XG5jb25zdCBleHROYW1lID0gcmVxdWlyZSgnZXh0LW5hbWUnKTtcblxuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5jb25zdCBnZXRGaWxlbmFtZUZyb21NaW1lID0gKG5hbWUsIG1pbWUpID0+IHtcblx0Y29uc3QgZXh0ZW5zaW9ucyA9IGV4dE5hbWUubWltZShtaW1lKTtcblxuXHRpZiAoZXh0ZW5zaW9ucy5sZW5ndGggIT09IDEpIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdHJldHVybiBgJHtuYW1lfS4ke2V4dGVuc2lvbnNbMF0uZXh0fWA7XG59O1xuXG5jb25zdCBtYWpvckVsZWN0cm9uVmVyc2lvbiA9ICgpID0+IHtcblx0Y29uc3QgdmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb24uc3BsaXQoJy4nKTtcblx0cmV0dXJuIE51bWJlci5wYXJzZUludCh2ZXJzaW9uWzBdLCAxMCk7XG59O1xuXG5jb25zdCBnZXRXaW5kb3dGcm9tQnJvd3NlclZpZXcgPSB3ZWJDb250ZW50cyA9PiB7XG5cdGZvciAoY29uc3QgY3VycmVudFdpbmRvdyBvZiBCcm93c2VyV2luZG93LmdldEFsbFdpbmRvd3MoKSkge1xuXHRcdGZvciAoY29uc3QgY3VycmVudEJyb3dzZXJWaWV3IG9mIGN1cnJlbnRXaW5kb3cuZ2V0QnJvd3NlclZpZXdzKCkpIHtcblx0XHRcdGlmIChjdXJyZW50QnJvd3NlclZpZXcud2ViQ29udGVudHMuaWQgPT09IHdlYkNvbnRlbnRzLmlkKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50V2luZG93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuY29uc3QgZ2V0V2luZG93RnJvbVdlYkNvbnRlbnRzID0gd2ViQ29udGVudHMgPT4ge1xuXHRsZXQgd2luZG93Xztcblx0Y29uc3Qgd2ViQ29udGVudHNUeXBlID0gd2ViQ29udGVudHMuZ2V0VHlwZSgpO1xuXHRzd2l0Y2ggKHdlYkNvbnRlbnRzVHlwZSkge1xuXHRcdGNhc2UgJ3dlYnZpZXcnOlxuXHRcdFx0d2luZG93XyA9IEJyb3dzZXJXaW5kb3cuZnJvbVdlYkNvbnRlbnRzKHdlYkNvbnRlbnRzLmhvc3RXZWJDb250ZW50cyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdicm93c2VyVmlldyc6XG5cdFx0XHR3aW5kb3dfID0gZ2V0V2luZG93RnJvbUJyb3dzZXJWaWV3KHdlYkNvbnRlbnRzKTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR3aW5kb3dfID0gQnJvd3NlcldpbmRvdy5mcm9tV2ViQ29udGVudHMod2ViQ29udGVudHMpO1xuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHRyZXR1cm4gd2luZG93Xztcbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXIoc2Vzc2lvbiwgb3B0aW9ucywgY2FsbGJhY2sgPSAoKSA9PiB7fSkge1xuXHRjb25zdCBkb3dubG9hZEl0ZW1zID0gbmV3IFNldCgpO1xuXHRsZXQgcmVjZWl2ZWRCeXRlcyA9IDA7XG5cdGxldCBjb21wbGV0ZWRCeXRlcyA9IDA7XG5cdGxldCB0b3RhbEJ5dGVzID0gMDtcblx0Y29uc3QgYWN0aXZlRG93bmxvYWRJdGVtcyA9ICgpID0+IGRvd25sb2FkSXRlbXMuc2l6ZTtcblx0Y29uc3QgcHJvZ3Jlc3NEb3dubG9hZEl0ZW1zID0gKCkgPT4gcmVjZWl2ZWRCeXRlcyAvIHRvdGFsQnl0ZXM7XG5cblx0b3B0aW9ucyA9IHtcblx0XHRzaG93QmFkZ2U6IHRydWUsXG5cdFx0c2hvd1Byb2dyZXNzQmFyOiB0cnVlLFxuXHRcdC4uLm9wdGlvbnNcblx0fTtcblxuXHRjb25zdCBsaXN0ZW5lciA9IChldmVudCwgaXRlbSwgd2ViQ29udGVudHMpID0+IHtcblx0XHRkb3dubG9hZEl0ZW1zLmFkZChpdGVtKTtcblx0XHR0b3RhbEJ5dGVzICs9IGl0ZW0uZ2V0VG90YWxCeXRlcygpO1xuXG5cdFx0Y29uc3Qgd2luZG93XyA9IG1ham9yRWxlY3Ryb25WZXJzaW9uKCkgPj0gMTIgPyBCcm93c2VyV2luZG93LmZyb21XZWJDb250ZW50cyh3ZWJDb250ZW50cykgOiBnZXRXaW5kb3dGcm9tV2ViQ29udGVudHMod2ViQ29udGVudHMpO1xuXG5cdFx0aWYgKG9wdGlvbnMuZGlyZWN0b3J5ICYmICFwYXRoLmlzQWJzb2x1dGUob3B0aW9ucy5kaXJlY3RvcnkpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgZGlyZWN0b3J5YCBvcHRpb24gbXVzdCBiZSBhbiBhYnNvbHV0ZSBwYXRoJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlyZWN0b3J5ID0gb3B0aW9ucy5kaXJlY3RvcnkgfHwgYXBwLmdldFBhdGgoJ2Rvd25sb2FkcycpO1xuXG5cdFx0bGV0IGZpbGVQYXRoO1xuXHRcdGlmIChvcHRpb25zLmZpbGVuYW1lKSB7XG5cdFx0XHRmaWxlUGF0aCA9IHBhdGguam9pbihkaXJlY3RvcnksIG9wdGlvbnMuZmlsZW5hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBmaWxlbmFtZSA9IGl0ZW0uZ2V0RmlsZW5hbWUoKTtcblx0XHRcdGNvbnN0IG5hbWUgPSBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpID8gZmlsZW5hbWUgOiBnZXRGaWxlbmFtZUZyb21NaW1lKGZpbGVuYW1lLCBpdGVtLmdldE1pbWVUeXBlKCkpO1xuXG5cdFx0XHRmaWxlUGF0aCA9IG9wdGlvbnMub3ZlcndyaXRlID8gcGF0aC5qb2luKGRpcmVjdG9yeSwgbmFtZSkgOiB1bnVzZWRGaWxlbmFtZS5zeW5jKHBhdGguam9pbihkaXJlY3RvcnksIG5hbWUpKTtcblx0XHR9XG5cblx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSBvcHRpb25zLmVycm9yTWVzc2FnZSB8fCAnVGhlIGRvd25sb2FkIG9mIHtmaWxlbmFtZX0gd2FzIGludGVycnVwdGVkJztcblxuXHRcdGlmIChvcHRpb25zLnNhdmVBcykge1xuXHRcdFx0aXRlbS5zZXRTYXZlRGlhbG9nT3B0aW9ucyh7ZGVmYXVsdFBhdGg6IGZpbGVQYXRoLCAuLi5vcHRpb25zLmRpYWxvZ09wdGlvbnN9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aXRlbS5zZXRTYXZlUGF0aChmaWxlUGF0aCk7XG5cdFx0fVxuXG5cdFx0aXRlbS5vbigndXBkYXRlZCcsICgpID0+IHtcblx0XHRcdHJlY2VpdmVkQnl0ZXMgPSBjb21wbGV0ZWRCeXRlcztcblx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBkb3dubG9hZEl0ZW1zKSB7XG5cdFx0XHRcdHJlY2VpdmVkQnl0ZXMgKz0gaXRlbS5nZXRSZWNlaXZlZEJ5dGVzKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25zLnNob3dCYWRnZSAmJiBbJ2RhcndpbicsICdsaW51eCddLmluY2x1ZGVzKHByb2Nlc3MucGxhdGZvcm0pKSB7XG5cdFx0XHRcdGFwcC5iYWRnZUNvdW50ID0gYWN0aXZlRG93bmxvYWRJdGVtcygpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXdpbmRvd18uaXNEZXN0cm95ZWQoKSAmJiBvcHRpb25zLnNob3dQcm9ncmVzc0Jhcikge1xuXHRcdFx0XHR3aW5kb3dfLnNldFByb2dyZXNzQmFyKHByb2dyZXNzRG93bmxvYWRJdGVtcygpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLm9uUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Y29uc3QgaXRlbVRyYW5zZmVycmVkQnl0ZXMgPSBpdGVtLmdldFJlY2VpdmVkQnl0ZXMoKTtcblx0XHRcdFx0Y29uc3QgaXRlbVRvdGFsQnl0ZXMgPSBpdGVtLmdldFRvdGFsQnl0ZXMoKTtcblxuXHRcdFx0XHRvcHRpb25zLm9uUHJvZ3Jlc3Moe1xuXHRcdFx0XHRcdHBlcmNlbnQ6IGl0ZW1Ub3RhbEJ5dGVzID8gaXRlbVRyYW5zZmVycmVkQnl0ZXMgLyBpdGVtVG90YWxCeXRlcyA6IDAsXG5cdFx0XHRcdFx0dHJhbnNmZXJyZWRCeXRlczogaXRlbVRyYW5zZmVycmVkQnl0ZXMsXG5cdFx0XHRcdFx0dG90YWxCeXRlczogaXRlbVRvdGFsQnl0ZXNcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5vblRvdGFsUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0b3B0aW9ucy5vblRvdGFsUHJvZ3Jlc3Moe1xuXHRcdFx0XHRcdHBlcmNlbnQ6IHByb2dyZXNzRG93bmxvYWRJdGVtcygpLFxuXHRcdFx0XHRcdHRyYW5zZmVycmVkQnl0ZXM6IHJlY2VpdmVkQnl0ZXMsXG5cdFx0XHRcdFx0dG90YWxCeXRlc1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGl0ZW0ub24oJ2RvbmUnLCAoZXZlbnQsIHN0YXRlKSA9PiB7XG5cdFx0XHRjb21wbGV0ZWRCeXRlcyArPSBpdGVtLmdldFRvdGFsQnl0ZXMoKTtcblx0XHRcdGRvd25sb2FkSXRlbXMuZGVsZXRlKGl0ZW0pO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5zaG93QmFkZ2UgJiYgWydkYXJ3aW4nLCAnbGludXgnXS5pbmNsdWRlcyhwcm9jZXNzLnBsYXRmb3JtKSkge1xuXHRcdFx0XHRhcHAuYmFkZ2VDb3VudCA9IGFjdGl2ZURvd25sb2FkSXRlbXMoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF3aW5kb3dfLmlzRGVzdHJveWVkKCkgJiYgIWFjdGl2ZURvd25sb2FkSXRlbXMoKSkge1xuXHRcdFx0XHR3aW5kb3dfLnNldFByb2dyZXNzQmFyKC0xKTtcblx0XHRcdFx0cmVjZWl2ZWRCeXRlcyA9IDA7XG5cdFx0XHRcdGNvbXBsZXRlZEJ5dGVzID0gMDtcblx0XHRcdFx0dG90YWxCeXRlcyA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25zLnVucmVnaXN0ZXJXaGVuRG9uZSkge1xuXHRcdFx0XHRzZXNzaW9uLnJlbW92ZUxpc3RlbmVyKCd3aWxsLWRvd25sb2FkJywgbGlzdGVuZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3dpdGNoXG5cdFx0XHRpZiAoc3RhdGUgPT09ICdjYW5jZWxsZWQnKSB7XG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5vbkNhbmNlbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdG9wdGlvbnMub25DYW5jZWwoaXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FsbGJhY2sobmV3IENhbmNlbEVycm9yKCkpO1xuXHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gJ2ludGVycnVwdGVkJykge1xuXHRcdFx0XHRjb25zdCBtZXNzYWdlID0gcHVwYShlcnJvck1lc3NhZ2UsIHtmaWxlbmFtZTogcGF0aC5iYXNlbmFtZShmaWxlUGF0aCl9KTtcblx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKG1lc3NhZ2UpKTtcblx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG5cdFx0XHRcdGNvbnN0IHNhdmVQYXRoID0gaXRlbS5nZXRTYXZlUGF0aCgpO1xuXG5cdFx0XHRcdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuXHRcdFx0XHRcdGFwcC5kb2NrLmRvd25sb2FkRmluaXNoZWQoc2F2ZVBhdGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG9wdGlvbnMub3BlbkZvbGRlcldoZW5Eb25lKSB7XG5cdFx0XHRcdFx0c2hlbGwuc2hvd0l0ZW1JbkZvbGRlcihzYXZlUGF0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMub25Db21wbGV0ZWQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRvcHRpb25zLm9uQ29tcGxldGVkKHtcblx0XHRcdFx0XHRcdGZpbGVOYW1lOiBpdGVtLmdldEZpbGVuYW1lKCksIC8vIEp1c3QgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBUT0RPOiBSZW1vdmUgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cblx0XHRcdFx0XHRcdGZpbGVuYW1lOiBpdGVtLmdldEZpbGVuYW1lKCksXG5cdFx0XHRcdFx0XHRwYXRoOiBzYXZlUGF0aCxcblx0XHRcdFx0XHRcdGZpbGVTaXplOiBpdGVtLmdldFJlY2VpdmVkQnl0ZXMoKSxcblx0XHRcdFx0XHRcdG1pbWVUeXBlOiBpdGVtLmdldE1pbWVUeXBlKCksXG5cdFx0XHRcdFx0XHR1cmw6IGl0ZW0uZ2V0VVJMKClcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrKG51bGwsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLm9uU3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0b3B0aW9ucy5vblN0YXJ0ZWQoaXRlbSk7XG5cdFx0fVxuXHR9O1xuXG5cdHNlc3Npb24ub24oJ3dpbGwtZG93bmxvYWQnLCBsaXN0ZW5lcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuXHRhcHAub24oJ3Nlc3Npb24tY3JlYXRlZCcsIHNlc3Npb24gPT4ge1xuXHRcdHJlZ2lzdGVyTGlzdGVuZXIoc2Vzc2lvbiwgb3B0aW9ucywgKGVycm9yLCBfKSA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0Y29uc3QgZXJyb3JUaXRsZSA9IG9wdGlvbnMuZXJyb3JUaXRsZSB8fCAnRG93bmxvYWQgRXJyb3InO1xuXHRcdFx0XHRkaWFsb2cuc2hvd0Vycm9yQm94KGVycm9yVGl0bGUsIGVycm9yLm1lc3NhZ2UpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmRvd25sb2FkID0gKHdpbmRvd18sIHVybCwgb3B0aW9ucykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRvcHRpb25zID0ge1xuXHRcdC4uLm9wdGlvbnMsXG5cdFx0dW5yZWdpc3RlcldoZW5Eb25lOiB0cnVlXG5cdH07XG5cblx0cmVnaXN0ZXJMaXN0ZW5lcih3aW5kb3dfLndlYkNvbnRlbnRzLnNlc3Npb24sIG9wdGlvbnMsIChlcnJvciwgaXRlbSkgPT4ge1xuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzb2x2ZShpdGVtKTtcblx0XHR9XG5cdH0pO1xuXG5cdHdpbmRvd18ud2ViQ29udGVudHMuZG93bmxvYWRVUkwodXJsKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cy5DYW5jZWxFcnJvciA9IENhbmNlbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZWxlY3Ryb24gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuXG5pZiAodHlwZW9mIGVsZWN0cm9uID09PSAnc3RyaW5nJykge1xuXHR0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgcnVubmluZyBpbiBhbiBFbGVjdHJvbiBlbnZpcm9ubWVudCEnKTtcbn1cblxuY29uc3QgaXNFbnZTZXQgPSAnRUxFQ1RST05fSVNfREVWJyBpbiBwcm9jZXNzLmVudjtcbmNvbnN0IGdldEZyb21FbnYgPSBOdW1iZXIucGFyc2VJbnQocHJvY2Vzcy5lbnYuRUxFQ1RST05fSVNfREVWLCAxMCkgPT09IDE7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFbnZTZXQgPyBnZXRGcm9tRW52IDogIWVsZWN0cm9uLmFwcC5pc1BhY2thZ2VkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZWxlY3Ryb24gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgY2xpVHJ1bmNhdGUgPSByZXF1aXJlKCdjbGktdHJ1bmNhdGUnKTtcbmNvbnN0IHtkb3dubG9hZH0gPSByZXF1aXJlKCdlbGVjdHJvbi1kbCcpO1xuY29uc3QgaXNEZXYgPSByZXF1aXJlKCdlbGVjdHJvbi1pcy1kZXYnKTtcblxuY29uc3Qgd2ViQ29udGVudHMgPSB3aW4gPT4gd2luLndlYkNvbnRlbnRzIHx8ICh3aW4uaWQgJiYgd2luKTtcblxuY29uc3QgZGVjb3JhdGVNZW51SXRlbSA9IG1lbnVJdGVtID0+IHtcblx0cmV0dXJuIChvcHRpb25zID0ge30pID0+IHtcblx0XHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgIW9wdGlvbnMuY2xpY2spIHtcblx0XHRcdG1lbnVJdGVtLnRyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZW51SXRlbTtcblx0fTtcbn07XG5cbmNvbnN0IHJlbW92ZVVudXNlZE1lbnVJdGVtcyA9IG1lbnVUZW1wbGF0ZSA9PiB7XG5cdGxldCBub3REZWxldGVkUHJldmlvdXNFbGVtZW50O1xuXG5cdHJldHVybiBtZW51VGVtcGxhdGVcblx0XHQuZmlsdGVyKG1lbnVJdGVtID0+IG1lbnVJdGVtICE9PSB1bmRlZmluZWQgJiYgbWVudUl0ZW0gIT09IGZhbHNlICYmIG1lbnVJdGVtLnZpc2libGUgIT09IGZhbHNlICYmIG1lbnVJdGVtLnZpc2libGUgIT09ICcnKVxuXHRcdC5maWx0ZXIoKG1lbnVJdGVtLCBpbmRleCwgYXJyYXkpID0+IHtcblx0XHRcdGNvbnN0IHRvRGVsZXRlID0gbWVudUl0ZW0udHlwZSA9PT0gJ3NlcGFyYXRvcicgJiYgKCFub3REZWxldGVkUHJldmlvdXNFbGVtZW50IHx8IGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxIHx8IGFycmF5W2luZGV4ICsgMV0udHlwZSA9PT0gJ3NlcGFyYXRvcicpO1xuXHRcdFx0bm90RGVsZXRlZFByZXZpb3VzRWxlbWVudCA9IHRvRGVsZXRlID8gbm90RGVsZXRlZFByZXZpb3VzRWxlbWVudCA6IG1lbnVJdGVtO1xuXHRcdFx0cmV0dXJuICF0b0RlbGV0ZTtcblx0XHR9KTtcbn07XG5cbmNvbnN0IGNyZWF0ZSA9ICh3aW4sIG9wdGlvbnMpID0+IHtcblx0Y29uc3QgaGFuZGxlQ29udGV4dE1lbnUgPSAoZXZlbnQsIHByb3BzKSA9PiB7XG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNob3VsZFNob3dNZW51ID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuc2hvdWxkU2hvd01lbnUoZXZlbnQsIHByb3BzKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB7ZWRpdEZsYWdzfSA9IHByb3BzO1xuXHRcdGNvbnN0IGhhc1RleHQgPSBwcm9wcy5zZWxlY3Rpb25UZXh0Lmxlbmd0aCA+IDA7XG5cdFx0Y29uc3QgaXNMaW5rID0gQm9vbGVhbihwcm9wcy5saW5rVVJMKTtcblx0XHRjb25zdCBjYW4gPSB0eXBlID0+IGVkaXRGbGFnc1tgY2FuJHt0eXBlfWBdICYmIGhhc1RleHQ7XG5cblx0XHRjb25zdCBkZWZhdWx0QWN0aW9ucyA9IHtcblx0XHRcdHNlcGFyYXRvcjogKCkgPT4gKHt0eXBlOiAnc2VwYXJhdG9yJ30pLFxuXHRcdFx0bGVhcm5TcGVsbGluZzogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnbGVhcm5TcGVsbGluZycsXG5cdFx0XHRcdGxhYmVsOiAnJkxlYXJuIFNwZWxsaW5nJyxcblx0XHRcdFx0dmlzaWJsZTogQm9vbGVhbihwcm9wcy5pc0VkaXRhYmxlICYmIGhhc1RleHQgJiYgcHJvcHMubWlzc3BlbGxlZFdvcmQpLFxuXHRcdFx0XHRjbGljaygpIHtcblx0XHRcdFx0XHRjb25zdCB0YXJnZXQgPSB3ZWJDb250ZW50cyh3aW4pO1xuXHRcdFx0XHRcdHRhcmdldC5zZXNzaW9uLmFkZFdvcmRUb1NwZWxsQ2hlY2tlckRpY3Rpb25hcnkocHJvcHMubWlzc3BlbGxlZFdvcmQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdGxvb2tVcFNlbGVjdGlvbjogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnbG9va1VwU2VsZWN0aW9uJyxcblx0XHRcdFx0bGFiZWw6ICdMb29rIFVwIOKAnHtzZWxlY3Rpb2594oCdJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicgJiYgaGFzVGV4dCAmJiAhaXNMaW5rLFxuXHRcdFx0XHRjbGljaygpIHtcblx0XHRcdFx0XHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicpIHtcblx0XHRcdFx0XHRcdHdlYkNvbnRlbnRzKHdpbikuc2hvd0RlZmluaXRpb25Gb3JTZWxlY3Rpb24oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0c2VhcmNoV2l0aEdvb2dsZTogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnc2VhcmNoV2l0aEdvb2dsZScsXG5cdFx0XHRcdGxhYmVsOiAnJlNlYXJjaCB3aXRoIEdvb2dsZScsXG5cdFx0XHRcdHZpc2libGU6IGhhc1RleHQsXG5cdFx0XHRcdGNsaWNrKCkge1xuXHRcdFx0XHRcdGNvbnN0IHVybCA9IG5ldyBVUkwoJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoJyk7XG5cdFx0XHRcdFx0dXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3EnLCBwcm9wcy5zZWxlY3Rpb25UZXh0KTtcblx0XHRcdFx0XHRlbGVjdHJvbi5zaGVsbC5vcGVuRXh0ZXJuYWwodXJsLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdGN1dDogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnY3V0Jyxcblx0XHRcdFx0bGFiZWw6ICdDdSZ0Jyxcblx0XHRcdFx0ZW5hYmxlZDogY2FuKCdDdXQnKSxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMuaXNFZGl0YWJsZSxcblx0XHRcdFx0Y2xpY2sobWVudUl0ZW0pIHtcblx0XHRcdFx0XHRjb25zdCB0YXJnZXQgPSB3ZWJDb250ZW50cyh3aW4pO1xuXG5cdFx0XHRcdFx0aWYgKCFtZW51SXRlbS50cmFuc2Zvcm0gJiYgdGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHR0YXJnZXQuY3V0KCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHByb3BzLnNlbGVjdGlvblRleHQgPSBtZW51SXRlbS50cmFuc2Zvcm0gPyBtZW51SXRlbS50cmFuc2Zvcm0ocHJvcHMuc2VsZWN0aW9uVGV4dCkgOiBwcm9wcy5zZWxlY3Rpb25UZXh0O1xuXHRcdFx0XHRcdFx0ZWxlY3Ryb24uY2xpcGJvYXJkLndyaXRlVGV4dChwcm9wcy5zZWxlY3Rpb25UZXh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0Y29weTogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnY29weScsXG5cdFx0XHRcdGxhYmVsOiAnJkNvcHknLFxuXHRcdFx0XHRlbmFibGVkOiBjYW4oJ0NvcHknKSxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMuaXNFZGl0YWJsZSB8fCBoYXNUZXh0LFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdGNvbnN0IHRhcmdldCA9IHdlYkNvbnRlbnRzKHdpbik7XG5cblx0XHRcdFx0XHRpZiAoIW1lbnVJdGVtLnRyYW5zZm9ybSAmJiB0YXJnZXQpIHtcblx0XHRcdFx0XHRcdHRhcmdldC5jb3B5KCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHByb3BzLnNlbGVjdGlvblRleHQgPSBtZW51SXRlbS50cmFuc2Zvcm0gPyBtZW51SXRlbS50cmFuc2Zvcm0ocHJvcHMuc2VsZWN0aW9uVGV4dCkgOiBwcm9wcy5zZWxlY3Rpb25UZXh0O1xuXHRcdFx0XHRcdFx0ZWxlY3Ryb24uY2xpcGJvYXJkLndyaXRlVGV4dChwcm9wcy5zZWxlY3Rpb25UZXh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0cGFzdGU6IGRlY29yYXRlTWVudUl0ZW0oe1xuXHRcdFx0XHRpZDogJ3Bhc3RlJyxcblx0XHRcdFx0bGFiZWw6ICcmUGFzdGUnLFxuXHRcdFx0XHRlbmFibGVkOiBlZGl0RmxhZ3MuY2FuUGFzdGUsXG5cdFx0XHRcdHZpc2libGU6IHByb3BzLmlzRWRpdGFibGUsXG5cdFx0XHRcdGNsaWNrKG1lbnVJdGVtKSB7XG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0ID0gd2ViQ29udGVudHMod2luKTtcblxuXHRcdFx0XHRcdGlmIChtZW51SXRlbS50cmFuc2Zvcm0pIHtcblx0XHRcdFx0XHRcdGxldCBjbGlwYm9hcmRDb250ZW50ID0gZWxlY3Ryb24uY2xpcGJvYXJkLnJlYWRUZXh0KHByb3BzLnNlbGVjdGlvblRleHQpO1xuXHRcdFx0XHRcdFx0Y2xpcGJvYXJkQ29udGVudCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShjbGlwYm9hcmRDb250ZW50KSA6IGNsaXBib2FyZENvbnRlbnQ7XG5cdFx0XHRcdFx0XHR0YXJnZXQuaW5zZXJ0VGV4dChjbGlwYm9hcmRDb250ZW50KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGFyZ2V0LnBhc3RlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdHNlbGVjdEFsbDogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnc2VsZWN0QWxsJyxcblx0XHRcdFx0bGFiZWw6ICdTZWxlY3QgJkFsbCcsXG5cdFx0XHRcdGNsaWNrKCkge1xuXHRcdFx0XHRcdHdlYkNvbnRlbnRzKHdpbikuc2VsZWN0QWxsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0c2F2ZUltYWdlOiBkZWNvcmF0ZU1lbnVJdGVtKHtcblx0XHRcdFx0aWQ6ICdzYXZlSW1hZ2UnLFxuXHRcdFx0XHRsYWJlbDogJ1NhdmUgSSZtYWdlJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubWVkaWFUeXBlID09PSAnaW1hZ2UnLFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdHByb3BzLnNyY1VSTCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShwcm9wcy5zcmNVUkwpIDogcHJvcHMuc3JjVVJMO1xuXHRcdFx0XHRcdGRvd25sb2FkKHdpbiwgcHJvcHMuc3JjVVJMKTtcblx0XHRcdFx0fVxuXHRcdFx0fSksXG5cdFx0XHRzYXZlSW1hZ2VBczogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnc2F2ZUltYWdlQXMnLFxuXHRcdFx0XHRsYWJlbDogJ1NhJnZlIEltYWdlIEFz4oCmJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubWVkaWFUeXBlID09PSAnaW1hZ2UnLFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdHByb3BzLnNyY1VSTCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShwcm9wcy5zcmNVUkwpIDogcHJvcHMuc3JjVVJMO1xuXHRcdFx0XHRcdGRvd25sb2FkKHdpbiwgcHJvcHMuc3JjVVJMLCB7c2F2ZUFzOiB0cnVlfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0c2F2ZVZpZGVvOiBkZWNvcmF0ZU1lbnVJdGVtKHtcblx0XHRcdFx0aWQ6ICdzYXZlVmlkZW8nLFxuXHRcdFx0XHRsYWJlbDogJ1NhdmUgVmlkZSZvJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubWVkaWFUeXBlID09PSAndmlkZW8nLFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdHByb3BzLnNyY1VSTCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShwcm9wcy5zcmNVUkwpIDogcHJvcHMuc3JjVVJMO1xuXHRcdFx0XHRcdGRvd25sb2FkKHdpbiwgcHJvcHMuc3JjVVJMKTtcblx0XHRcdFx0fVxuXHRcdFx0fSksXG5cdFx0XHRzYXZlVmlkZW9BczogZGVjb3JhdGVNZW51SXRlbSh7XG5cdFx0XHRcdGlkOiAnc2F2ZVZpZGVvQXMnLFxuXHRcdFx0XHRsYWJlbDogJ1NhdmUgVmlkZW8mIEFz4oCmJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubWVkaWFUeXBlID09PSAndmlkZW8nLFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdHByb3BzLnNyY1VSTCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShwcm9wcy5zcmNVUkwpIDogcHJvcHMuc3JjVVJMO1xuXHRcdFx0XHRcdGRvd25sb2FkKHdpbiwgcHJvcHMuc3JjVVJMLCB7c2F2ZUFzOiB0cnVlfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0Y29weUxpbms6IGRlY29yYXRlTWVudUl0ZW0oe1xuXHRcdFx0XHRpZDogJ2NvcHlMaW5rJyxcblx0XHRcdFx0bGFiZWw6ICdDb3B5IExpbiZrJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubGlua1VSTC5sZW5ndGggPiAwICYmIHByb3BzLm1lZGlhVHlwZSA9PT0gJ25vbmUnLFxuXHRcdFx0XHRjbGljayhtZW51SXRlbSkge1xuXHRcdFx0XHRcdHByb3BzLmxpbmtVUkwgPSBtZW51SXRlbS50cmFuc2Zvcm0gPyBtZW51SXRlbS50cmFuc2Zvcm0ocHJvcHMubGlua1VSTCkgOiBwcm9wcy5saW5rVVJMO1xuXG5cdFx0XHRcdFx0ZWxlY3Ryb24uY2xpcGJvYXJkLndyaXRlKHtcblx0XHRcdFx0XHRcdGJvb2ttYXJrOiBwcm9wcy5saW5rVGV4dCxcblx0XHRcdFx0XHRcdHRleHQ6IHByb3BzLmxpbmtVUkxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSksXG5cdFx0XHRzYXZlTGlua0FzOiBkZWNvcmF0ZU1lbnVJdGVtKHtcblx0XHRcdFx0aWQ6ICdzYXZlTGlua0FzJyxcblx0XHRcdFx0bGFiZWw6ICdTYXZlIExpbmsgQXPigKYnLFxuXHRcdFx0XHR2aXNpYmxlOiBwcm9wcy5saW5rVVJMLmxlbmd0aCA+IDAgJiYgcHJvcHMubWVkaWFUeXBlID09PSAnbm9uZScsXG5cdFx0XHRcdGNsaWNrKG1lbnVJdGVtKSB7XG5cdFx0XHRcdFx0cHJvcHMubGlua1VSTCA9IG1lbnVJdGVtLnRyYW5zZm9ybSA/IG1lbnVJdGVtLnRyYW5zZm9ybShwcm9wcy5saW5rVVJMKSA6IHByb3BzLmxpbmtVUkw7XG5cdFx0XHRcdFx0ZG93bmxvYWQod2luLCBwcm9wcy5saW5rVVJMLCB7c2F2ZUFzOiB0cnVlfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0Y29weUltYWdlOiBkZWNvcmF0ZU1lbnVJdGVtKHtcblx0XHRcdFx0aWQ6ICdjb3B5SW1hZ2UnLFxuXHRcdFx0XHRsYWJlbDogJ0NvcCZ5IEltYWdlJyxcblx0XHRcdFx0dmlzaWJsZTogcHJvcHMubWVkaWFUeXBlID09PSAnaW1hZ2UnLFxuXHRcdFx0XHRjbGljaygpIHtcblx0XHRcdFx0XHR3ZWJDb250ZW50cyh3aW4pLmNvcHlJbWFnZUF0KHByb3BzLngsIHByb3BzLnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdGNvcHlJbWFnZUFkZHJlc3M6IGRlY29yYXRlTWVudUl0ZW0oe1xuXHRcdFx0XHRpZDogJ2NvcHlJbWFnZUFkZHJlc3MnLFxuXHRcdFx0XHRsYWJlbDogJ0Mmb3B5IEltYWdlIEFkZHJlc3MnLFxuXHRcdFx0XHR2aXNpYmxlOiBwcm9wcy5tZWRpYVR5cGUgPT09ICdpbWFnZScsXG5cdFx0XHRcdGNsaWNrKG1lbnVJdGVtKSB7XG5cdFx0XHRcdFx0cHJvcHMuc3JjVVJMID0gbWVudUl0ZW0udHJhbnNmb3JtID8gbWVudUl0ZW0udHJhbnNmb3JtKHByb3BzLnNyY1VSTCkgOiBwcm9wcy5zcmNVUkw7XG5cblx0XHRcdFx0XHRlbGVjdHJvbi5jbGlwYm9hcmQud3JpdGUoe1xuXHRcdFx0XHRcdFx0Ym9va21hcms6IHByb3BzLnNyY1VSTCxcblx0XHRcdFx0XHRcdHRleHQ6IHByb3BzLnNyY1VSTFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdGNvcHlWaWRlb0FkZHJlc3M6IGRlY29yYXRlTWVudUl0ZW0oe1xuXHRcdFx0XHRpZDogJ2NvcHlWaWRlb0FkZHJlc3MnLFxuXHRcdFx0XHRsYWJlbDogJ0NvcHkgVmlkZW8gQWQmZHJlc3MnLFxuXHRcdFx0XHR2aXNpYmxlOiBwcm9wcy5tZWRpYVR5cGUgPT09ICd2aWRlbycsXG5cdFx0XHRcdGNsaWNrKG1lbnVJdGVtKSB7XG5cdFx0XHRcdFx0cHJvcHMuc3JjVVJMID0gbWVudUl0ZW0udHJhbnNmb3JtID8gbWVudUl0ZW0udHJhbnNmb3JtKHByb3BzLnNyY1VSTCkgOiBwcm9wcy5zcmNVUkw7XG5cblx0XHRcdFx0XHRlbGVjdHJvbi5jbGlwYm9hcmQud3JpdGUoe1xuXHRcdFx0XHRcdFx0Ym9va21hcms6IHByb3BzLnNyY1VSTCxcblx0XHRcdFx0XHRcdHRleHQ6IHByb3BzLnNyY1VSTFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdGluc3BlY3Q6ICgpID0+ICh7XG5cdFx0XHRcdGlkOiAnaW5zcGVjdCcsXG5cdFx0XHRcdGxhYmVsOiAnSSZuc3BlY3QgRWxlbWVudCcsXG5cdFx0XHRcdGNsaWNrKCkge1xuXHRcdFx0XHRcdHdlYkNvbnRlbnRzKHdpbikuaW5zcGVjdEVsZW1lbnQocHJvcHMueCwgcHJvcHMueSk7XG5cblx0XHRcdFx0XHRpZiAod2ViQ29udGVudHMod2luKS5pc0RldlRvb2xzT3BlbmVkKCkpIHtcblx0XHRcdFx0XHRcdHdlYkNvbnRlbnRzKHdpbikuZGV2VG9vbHNXZWJDb250ZW50cy5mb2N1cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSksXG5cdFx0XHRzZXJ2aWNlczogKCkgPT4gKHtcblx0XHRcdFx0aWQ6ICdzZXJ2aWNlcycsXG5cdFx0XHRcdGxhYmVsOiAnU2VydmljZXMnLFxuXHRcdFx0XHRyb2xlOiAnc2VydmljZXMnLFxuXHRcdFx0XHR2aXNpYmxlOiBwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJyAmJiAocHJvcHMuaXNFZGl0YWJsZSB8fCBoYXNUZXh0KVxuXHRcdFx0fSlcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2hvdWxkU2hvd0luc3BlY3RFbGVtZW50ID0gdHlwZW9mIG9wdGlvbnMuc2hvd0luc3BlY3RFbGVtZW50ID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNob3dJbnNwZWN0RWxlbWVudCA6IGlzRGV2O1xuXHRcdGNvbnN0IHNob3VsZFNob3dTZWxlY3RBbGwgPSBvcHRpb25zLnNob3dTZWxlY3RBbGwgfHwgKG9wdGlvbnMuc2hvd1NlbGVjdEFsbCAhPT0gZmFsc2UgJiYgcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicpO1xuXG5cdFx0ZnVuY3Rpb24gd29yZChzdWdnZXN0aW9uKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpZDogJ2RpY3Rpb25hcnlTdWdnZXN0aW9ucycsXG5cdFx0XHRcdGxhYmVsOiBzdWdnZXN0aW9uLFxuXHRcdFx0XHR2aXNpYmxlOiBCb29sZWFuKHByb3BzLmlzRWRpdGFibGUgJiYgaGFzVGV4dCAmJiBwcm9wcy5taXNzcGVsbGVkV29yZCksXG5cdFx0XHRcdGNsaWNrKG1lbnVJdGVtKSB7XG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0ID0gd2ViQ29udGVudHMod2luKTtcblx0XHRcdFx0XHR0YXJnZXQucmVwbGFjZU1pc3NwZWxsaW5nKG1lbnVJdGVtLmxhYmVsKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRsZXQgZGljdGlvbmFyeVN1Z2dlc3Rpb25zID0gW107XG5cdFx0aWYgKGhhc1RleHQgJiYgcHJvcHMubWlzc3BlbGxlZFdvcmQgJiYgcHJvcHMuZGljdGlvbmFyeVN1Z2dlc3Rpb25zLmxlbmd0aCA+IDApIHtcblx0XHRcdGRpY3Rpb25hcnlTdWdnZXN0aW9ucyA9IHByb3BzLmRpY3Rpb25hcnlTdWdnZXN0aW9ucy5tYXAoc3VnZ2VzdGlvbiA9PiB3b3JkKHN1Z2dlc3Rpb24pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGljdGlvbmFyeVN1Z2dlc3Rpb25zLnB1c2goXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZDogJ2RpY3Rpb25hcnlTdWdnZXN0aW9ucycsXG5cdFx0XHRcdFx0bGFiZWw6ICdObyBHdWVzc2VzIEZvdW5kJyxcblx0XHRcdFx0XHR2aXNpYmxlOiBCb29sZWFuKGhhc1RleHQgJiYgcHJvcHMubWlzc3BlbGxlZFdvcmQpLFxuXHRcdFx0XHRcdGVuYWJsZWQ6IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0bGV0IG1lbnVUZW1wbGF0ZSA9IFtcblx0XHRcdGRpY3Rpb25hcnlTdWdnZXN0aW9ucy5sZW5ndGggPiAwICYmIGRlZmF1bHRBY3Rpb25zLnNlcGFyYXRvcigpLFxuXHRcdFx0Li4uZGljdGlvbmFyeVN1Z2dlc3Rpb25zLFxuXHRcdFx0ZGVmYXVsdEFjdGlvbnMuc2VwYXJhdG9yKCksXG5cdFx0XHRvcHRpb25zLnNob3dMZWFyblNwZWxsaW5nICE9PSBmYWxzZSAmJiBkZWZhdWx0QWN0aW9ucy5sZWFyblNwZWxsaW5nKCksXG5cdFx0XHRkZWZhdWx0QWN0aW9ucy5zZXBhcmF0b3IoKSxcblx0XHRcdG9wdGlvbnMuc2hvd0xvb2tVcFNlbGVjdGlvbiAhPT0gZmFsc2UgJiYgZGVmYXVsdEFjdGlvbnMubG9va1VwU2VsZWN0aW9uKCksXG5cdFx0XHRkZWZhdWx0QWN0aW9ucy5zZXBhcmF0b3IoKSxcblx0XHRcdG9wdGlvbnMuc2hvd1NlYXJjaFdpdGhHb29nbGUgIT09IGZhbHNlICYmIGRlZmF1bHRBY3Rpb25zLnNlYXJjaFdpdGhHb29nbGUoKSxcblx0XHRcdGRlZmF1bHRBY3Rpb25zLnNlcGFyYXRvcigpLFxuXHRcdFx0ZGVmYXVsdEFjdGlvbnMuY3V0KCksXG5cdFx0XHRkZWZhdWx0QWN0aW9ucy5jb3B5KCksXG5cdFx0XHRkZWZhdWx0QWN0aW9ucy5wYXN0ZSgpLFxuXHRcdFx0c2hvdWxkU2hvd1NlbGVjdEFsbCAmJiBkZWZhdWx0QWN0aW9ucy5zZWxlY3RBbGwoKSxcblx0XHRcdGRlZmF1bHRBY3Rpb25zLnNlcGFyYXRvcigpLFxuXHRcdFx0b3B0aW9ucy5zaG93U2F2ZUltYWdlICYmIGRlZmF1bHRBY3Rpb25zLnNhdmVJbWFnZSgpLFxuXHRcdFx0b3B0aW9ucy5zaG93U2F2ZUltYWdlQXMgJiYgZGVmYXVsdEFjdGlvbnMuc2F2ZUltYWdlQXMoKSxcblx0XHRcdG9wdGlvbnMuc2hvd0NvcHlJbWFnZSAhPT0gZmFsc2UgJiYgZGVmYXVsdEFjdGlvbnMuY29weUltYWdlKCksXG5cdFx0XHRvcHRpb25zLnNob3dDb3B5SW1hZ2VBZGRyZXNzICYmIGRlZmF1bHRBY3Rpb25zLmNvcHlJbWFnZUFkZHJlc3MoKSxcblx0XHRcdG9wdGlvbnMuc2hvd1NhdmVWaWRlbyAmJiBkZWZhdWx0QWN0aW9ucy5zYXZlVmlkZW8oKSxcblx0XHRcdG9wdGlvbnMuc2hvd1NhdmVWaWRlb0FzICYmIGRlZmF1bHRBY3Rpb25zLnNhdmVWaWRlb0FzKCksXG5cdFx0XHRvcHRpb25zLnNob3dDb3B5VmlkZW9BZGRyZXNzICYmIGRlZmF1bHRBY3Rpb25zLmNvcHlWaWRlb0FkZHJlc3MoKSxcblx0XHRcdGRlZmF1bHRBY3Rpb25zLnNlcGFyYXRvcigpLFxuXHRcdFx0b3B0aW9ucy5zaG93Q29weUxpbmsgIT09IGZhbHNlICYmIGRlZmF1bHRBY3Rpb25zLmNvcHlMaW5rKCksXG5cdFx0XHRvcHRpb25zLnNob3dTYXZlTGlua0FzICYmIGRlZmF1bHRBY3Rpb25zLnNhdmVMaW5rQXMoKSxcblx0XHRcdGRlZmF1bHRBY3Rpb25zLnNlcGFyYXRvcigpLFxuXHRcdFx0c2hvdWxkU2hvd0luc3BlY3RFbGVtZW50ICYmIGRlZmF1bHRBY3Rpb25zLmluc3BlY3QoKSxcblx0XHRcdG9wdGlvbnMuc2hvd1NlcnZpY2VzICYmIGRlZmF1bHRBY3Rpb25zLnNlcnZpY2VzKCksXG5cdFx0XHRkZWZhdWx0QWN0aW9ucy5zZXBhcmF0b3IoKVxuXHRcdF07XG5cblx0XHRpZiAob3B0aW9ucy5tZW51KSB7XG5cdFx0XHRtZW51VGVtcGxhdGUgPSBvcHRpb25zLm1lbnUoZGVmYXVsdEFjdGlvbnMsIHByb3BzLCB3aW4sIGRpY3Rpb25hcnlTdWdnZXN0aW9ucywgZXZlbnQpO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLnByZXBlbmQpIHtcblx0XHRcdGNvbnN0IHJlc3VsdCA9IG9wdGlvbnMucHJlcGVuZChkZWZhdWx0QWN0aW9ucywgcHJvcHMsIHdpbiwgZXZlbnQpO1xuXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG5cdFx0XHRcdG1lbnVUZW1wbGF0ZS51bnNoaWZ0KC4uLnJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuYXBwZW5kKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBvcHRpb25zLmFwcGVuZChkZWZhdWx0QWN0aW9ucywgcHJvcHMsIHdpbiwgZXZlbnQpO1xuXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG5cdFx0XHRcdG1lbnVUZW1wbGF0ZS5wdXNoKC4uLnJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyIG91dCBsZWFkaW5nL3RyYWlsaW5nIHNlcGFyYXRvcnNcblx0XHQvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vZWxlY3Ryb24vZWxlY3Ryb24vaXNzdWVzLzU4Njlcblx0XHRtZW51VGVtcGxhdGUgPSByZW1vdmVVbnVzZWRNZW51SXRlbXMobWVudVRlbXBsYXRlKTtcblxuXHRcdGZvciAoY29uc3QgbWVudUl0ZW0gb2YgbWVudVRlbXBsYXRlKSB7XG5cdFx0XHQvLyBBcHBseSBjdXN0b20gbGFiZWxzIGZvciBkZWZhdWx0IG1lbnUgaXRlbXNcblx0XHRcdGlmIChvcHRpb25zLmxhYmVscyAmJiBvcHRpb25zLmxhYmVsc1ttZW51SXRlbS5pZF0pIHtcblx0XHRcdFx0bWVudUl0ZW0ubGFiZWwgPSBvcHRpb25zLmxhYmVsc1ttZW51SXRlbS5pZF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlcGxhY2UgcGxhY2Vob2xkZXJzIGluIG1lbnUgaXRlbSBsYWJlbHNcblx0XHRcdGlmICh0eXBlb2YgbWVudUl0ZW0ubGFiZWwgPT09ICdzdHJpbmcnICYmIG1lbnVJdGVtLmxhYmVsLmluY2x1ZGVzKCd7c2VsZWN0aW9ufScpKSB7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdGlvblN0cmluZyA9IHR5cGVvZiBwcm9wcy5zZWxlY3Rpb25UZXh0ID09PSAnc3RyaW5nJyA/IHByb3BzLnNlbGVjdGlvblRleHQudHJpbSgpIDogJyc7XG5cdFx0XHRcdG1lbnVJdGVtLmxhYmVsID0gbWVudUl0ZW0ubGFiZWwucmVwbGFjZSgne3NlbGVjdGlvbn0nLCBjbGlUcnVuY2F0ZShzZWxlY3Rpb25TdHJpbmcsIDI1KS5yZXBsYWNlKC8mL2csICcmJicpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobWVudVRlbXBsYXRlLmxlbmd0aCA+IDApIHtcblx0XHRcdGNvbnN0IG1lbnUgPSBlbGVjdHJvbi5NZW51LmJ1aWxkRnJvbVRlbXBsYXRlKG1lbnVUZW1wbGF0ZSk7XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5vblNob3cgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0bWVudS5vbignbWVudS13aWxsLXNob3cnLCBvcHRpb25zLm9uU2hvdyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5vbkNsb3NlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdG1lbnUub24oJ21lbnUtd2lsbC1jbG9zZScsIG9wdGlvbnMub25DbG9zZSk7XG5cdFx0XHR9XG5cblx0XHRcdG1lbnUucG9wdXAod2luKTtcblx0XHR9XG5cdH07XG5cblx0d2ViQ29udGVudHMod2luKS5vbignY29udGV4dC1tZW51JywgaGFuZGxlQ29udGV4dE1lbnUpO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKHdpbi5pc0Rlc3Ryb3llZCgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0d2ViQ29udGVudHMod2luKS5yZW1vdmVMaXN0ZW5lcignY29udGV4dC1tZW51JywgaGFuZGxlQ29udGV4dE1lbnUpO1xuXHR9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0aW9ucyA9IHt9KSA9PiB7XG5cdGlmIChwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgZWxlY3Ryb24tY29udGV4dC1tZW51IGluIHRoZSByZW5kZXJlciBwcm9jZXNzIScpO1xuXHR9XG5cblx0bGV0IGlzRGlzcG9zZWQgPSBmYWxzZTtcblx0Y29uc3QgZGlzcG9zYWJsZXMgPSBbXTtcblxuXHRjb25zdCBpbml0ID0gd2luID0+IHtcblx0XHRpZiAoaXNEaXNwb3NlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRpc3Bvc2VNZW51ID0gY3JlYXRlKHdpbiwgb3B0aW9ucyk7XG5cblx0XHRkaXNwb3NhYmxlcy5wdXNoKGRpc3Bvc2VNZW51KTtcblx0XHRjb25zdCByZW1vdmVEaXNwb3NhYmxlID0gKCkgPT4ge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBkaXNwb3NhYmxlcy5pbmRleE9mKGRpc3Bvc2VNZW51KTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0ZGlzcG9zYWJsZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKHR5cGVvZiB3aW4ub25jZSAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gU3VwcG9ydCBmb3IgQnJvd3NlclZpZXdcblx0XHRcdHdpbi5vbmNlKCdjbG9zZWQnLCByZW1vdmVEaXNwb3NhYmxlKTtcblx0XHR9XG5cblx0XHRkaXNwb3NhYmxlcy5wdXNoKCgpID0+IHtcblx0XHRcdHdpbi5vZmYoJ2Nsb3NlZCcsIHJlbW92ZURpc3Bvc2FibGUpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGNvbnN0IGRpc3Bvc2UgPSAoKSA9PiB7XG5cdFx0Zm9yIChjb25zdCBkaXNwb3NlIG9mIGRpc3Bvc2FibGVzKSB7XG5cdFx0XHRkaXNwb3NlKCk7XG5cdFx0fVxuXG5cdFx0ZGlzcG9zYWJsZXMubGVuZ3RoID0gMDtcblx0XHRpc0Rpc3Bvc2VkID0gdHJ1ZTtcblx0fTtcblxuXHRpZiAob3B0aW9ucy53aW5kb3cpIHtcblx0XHRjb25zdCB3aW4gPSBvcHRpb25zLndpbmRvdztcblxuXHRcdC8vIFdoZW4gd2luZG93IGlzIGEgd2VidmlldyB0aGF0IGhhcyBub3QgeWV0IGZpbmlzaGVkIGxvYWRpbmcgd2ViQ29udGVudHMgaXMgbm90IGF2YWlsYWJsZVxuXHRcdGlmICh3ZWJDb250ZW50cyh3aW4pID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IG9uRG9tUmVhZHkgPSAoKSA9PiB7XG5cdFx0XHRcdGluaXQod2luKTtcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGxpc3RlbmVyRnVuY3Rpb24gPSB3aW4uYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW4uYWRkTGlzdGVuZXI7XG5cdFx0XHRsaXN0ZW5lckZ1bmN0aW9uKCdkb20tcmVhZHknLCBvbkRvbVJlYWR5LCB7b25jZTogdHJ1ZX0pO1xuXG5cdFx0XHRkaXNwb3NhYmxlcy5wdXNoKCgpID0+IHtcblx0XHRcdFx0d2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RvbS1yZWFkeScsIG9uRG9tUmVhZHksIHtvbmNlOiB0cnVlfSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGRpc3Bvc2U7XG5cdFx0fVxuXG5cdFx0aW5pdCh3aW4pO1xuXG5cdFx0cmV0dXJuIGRpc3Bvc2U7XG5cdH1cblxuXHRmb3IgKGNvbnN0IHdpbiBvZiBlbGVjdHJvbi5Ccm93c2VyV2luZG93LmdldEFsbFdpbmRvd3MoKSkge1xuXHRcdGluaXQod2luKTtcblx0fVxuXG5cdGNvbnN0IG9uV2luZG93Q3JlYXRlZCA9IChldmVudCwgd2luKSA9PiB7XG5cdFx0aW5pdCh3aW4pO1xuXHR9O1xuXG5cdGVsZWN0cm9uLmFwcC5vbignYnJvd3Nlci13aW5kb3ctY3JlYXRlZCcsIG9uV2luZG93Q3JlYXRlZCk7XG5cdGRpc3Bvc2FibGVzLnB1c2goKCkgPT4ge1xuXHRcdGVsZWN0cm9uLmFwcC5yZW1vdmVMaXN0ZW5lcignYnJvd3Nlci13aW5kb3ctY3JlYXRlZCcsIG9uV2luZG93Q3JlYXRlZCk7XG5cdH0pO1xuXG5cdHJldHVybiBkaXNwb3NlO1xufTtcbiIsImltcG9ydCB7IEJyb3dzZXJWaWV3LCBCcm93c2VyV2luZG93LCBhcHAgfSBmcm9tIFwiZWxlY3Ryb25cIjtcbmltcG9ydCBpc0RldiBmcm9tIFwiZWxlY3Ryb24taXMtZGV2XCI7XG5cbmltcG9ydCB7IGlzTWFjT1MsIHV1aWQgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gXCJ1cmxcIjtcbmltcG9ydCBjb250ZXh0TWVudSBmcm9tICdlbGVjdHJvbi1jb250ZXh0LW1lbnUnO1xuXG4vLyB0eXBlIGRlZmluZVxuZXhwb3J0IGludGVyZmFjZSBJV2luZG93SW5zdGFuY2Uge1xuICB3aW5kb3c6IEJyb3dzZXJWaWV3O1xuICBuYW1lOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFRhYkxpc3Qge1xuICB0YWJzOiBzdHJpbmdbXTtcbiAgYWN0aXZlOiBzdHJpbmc7XG59XG5cbi8vIGdvbGJhbCBkYXRhXG5sZXQgbGlzdFdpbmRvdzogSVdpbmRvd0luc3RhbmNlW10gPSBbXTtcbmxldCBtYWluV2luZG93OiBCcm93c2VyV2luZG93O1xuY29uc3QgZGVmYXVsdFdpbmRvd1VybCA9IGlzRGV2XG4gID8gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCdcbiAgOiBmb3JtYXQoe1xuICAgIHBhdGhuYW1lOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vcmVuZGVyZXIvb3V0L2luZGV4Lmh0bWwnKSxcbiAgICBwcm90b2NvbDogJ2ZpbGU6JyxcbiAgICBzbGFzaGVzOiB0cnVlLFxuICB9KTtcblxuY29uc3QgcHJlbG9hZF9qc19wYXRoID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuLi8uLi9wcmVsb2FkL2Rpc3QvXCIsIFwiaW5kZXguanNcIik7XG4vKipcbiAqIGNyZWF0ZSBtYWluIHdpbmRvdyB0byBtYW5hZ2VyIHRhYiB3aW5kb3dzXG4gKiBodHRwczovL3d3dy5lbGVjdHJvbmpzLm9yZy9kb2NzL2xhdGVzdC9hcGkvYnJvd3Nlci12aWV3XG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU1haW5XaW5kb3coKSB7XG4gIGlmIChtYWluV2luZG93KSB7XG4gICAgcmV0dXJuIG1haW5XaW5kb3c7XG4gIH1cbiAgY29uc3Qgd2luZG93ID0gbmV3IEJyb3dzZXJXaW5kb3coe1xuICAgIHNob3c6IGZhbHNlLFxuICAgIHdpZHRoOiA4MDAsXG4gICAgaGVpZ2h0OiA2MDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc01hY09TID8gXCIjRDFENURCXCIgOiBcIiM2QjcyODBcIixcbiAgICB0aXRsZUJhclN0eWxlOiBpc01hY09TID8gJ2hpZGRlbkluc2V0JyA6ICdkZWZhdWx0JyxcbiAgICBmcmFtZTogaXNNYWNPUyxcbiAgICB3ZWJQcmVmZXJlbmNlczoge1xuICAgICAgZGV2VG9vbHM6IGlzRGV2LFxuICAgICAgLy8gZW5hYmxlUmVtb3RlTW9kdWxlOiBmYWxzZSxcbiAgICAgIGNvbnRleHRJc29sYXRpb246IHRydWUsXG4gICAgICBub2RlSW50ZWdyYXRpb246IGZhbHNlLFxuICAgICAgcHJlbG9hZDogcHJlbG9hZF9qc19wYXRoLFxuICAgICAgZGlzYWJsZURpYWxvZ3M6IGZhbHNlLFxuICAgICAgc2FmZURpYWxvZ3M6IHRydWUsXG4gICAgICBlbmFibGVXZWJTUUw6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuXG4gIG1haW5XaW5kb3cgPSB3aW5kb3c7XG5cbiAgaWYgKGlzRGV2KSB7XG4gICAgbWFpbldpbmRvdy53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoeyBtb2RlOiAnZGV0YWNoJyB9KVxuICB9XG5cbiAgd2luZG93Lm9uKCdjbG9zZWQnLCAoKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1haW5XaW5kb3cgPSBudWxsO1xuICAgIGxpc3RXaW5kb3cuZm9yRWFjaChpbnN0YW5jZSA9PiB7XG4gICAgICAoaW5zdGFuY2Uud2luZG93LndlYkNvbnRlbnRzIGFzIGFueSk/LmRlc3Ryb3koKSAvLyBUT0RPOiBlbGVjdHJvbiBoYXZlbid0IG1ha2UgZG9jdW1lbnQgZm9yIGl0LiBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbGVjdHJvbi9lbGVjdHJvbi9pc3N1ZXMvMjY5MjlcbiAgICB9KTtcbiAgICBsaXN0V2luZG93ID0gW107XG4gIH0pXG5cbiAgaWYgKGlzRGV2KSB7XG4gICAgd2luZG93LmxvYWRVUkwoYCR7ZGVmYXVsdFdpbmRvd1VybH0vdGFic2ApO1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE86IFdoYXQgaWYgSSBuZWVkIHRvIGxvYWQgdGhlIHRhYnMuaHRtbCBmaWxlXG4gICAgd2luZG93LmxvYWRVUkwoXCJhcHA6Ly8tL3RhYnNcIik7XG4gIH1cblxuICAvLyB3aW5kb3cubWF4aW1pemUoKTtcbiAgd2luZG93LnNob3coKTtcblxuICBjb25zdCB3aW5kb3dWaWV3ID0gYXdhaXQgY3JlYXRlV2luZG93KGRlZmF1bHRXaW5kb3dVcmwrXCIvXCIpO1xuICBzZXRUYWIod2luZG93Vmlldyk7XG59XG5cbmltcG9ydCB7IGRvd25sb2FkIH0gZnJvbSAnZWxlY3Ryb24tZGwnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdpbmRvdyhocmVmOiBzdHJpbmcpIHtcbiAgLy8gQ3JlYXRlIHRoZSBicm93c2VyIHZpZXcuXG4gIGNvbnN0IHdpbmRvdyA9IG5ldyBCcm93c2VyVmlldyh7XG4gICAgd2ViUHJlZmVyZW5jZXM6IHtcbiAgICAgIGRldlRvb2xzOiBpc0RldixcbiAgICAgIGNvbnRleHRJc29sYXRpb246IHRydWUsXG4gICAgICBub2RlSW50ZWdyYXRpb246IGZhbHNlLFxuICAgICAgcHJlbG9hZDogcHJlbG9hZF9qc19wYXRoLFxuICAgICAgZGlzYWJsZURpYWxvZ3M6IGZhbHNlLFxuICAgICAgc2FmZURpYWxvZ3M6IHRydWUsXG4gICAgICBlbmFibGVXZWJTUUw6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnRleHRNZW51KHtcbiAgICB3aW5kb3csXG4gICAgLy8gcHJlcGVuZDogKGRlZmF1bHRBY3Rpb25zOiBhbnksIHBhcmFtcywgd2luZG93OiBhbnkpID0+IFtcbiAgICAvLyAgIC4uLmRlZmF1bHRBY3Rpb25zLFxuICAgIC8vICAge1xuICAgIC8vICAgICBsYWJlbDogJ0Rvd25sb2FkIEltYWdlJyxcbiAgICAvLyAgICAgdmlzaWJsZTogcGFyYW1zLm1lZGlhVHlwZSA9PT0gJ2ltYWdlJyxcbiAgICAvLyAgICAgY2xpY2s6IGFzeW5jICgpID0+IHtcbiAgICAvLyAgICAgICAvLyDkuIvovb3lm77niYfnmoTpgLvovpFcbiAgICAvLyAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgIC8vICAgICAgICAgZGlyZWN0b3J5OiBhcHAuZ2V0UGF0aCgnZG93bmxvYWRzJyksIC8vIOS4i+i9veWIsOezu+e7n+eahOS4i+i9veebruW9lVxuICAgIC8vICAgICAgICAgZmlsZW5hbWU6IGBpbWFnZV8ke0RhdGUubm93KCl9LnBuZ2AsIC8vIOWPr+S7peagueaNrumcgOimgeS/ruaUueaWh+S7tuWQjVxuICAgIC8vICAgICAgIH07XG4gICAgLy8gICAgICAgdHJ5IHtcbiAgICAvLyAgICAgICAgIGF3YWl0IGRvd25sb2FkKHdpbmRvdywgcGFyYW1zLnNyY1VSTCwgb3B0aW9ucyk7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnSW1hZ2UgZG93bmxvYWRlZCBzdWNjZXNzZnVsbHkhJyk7XG4gICAgLy8gICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRvd25sb2FkaW5nIGltYWdlOicsIGVycm9yKTtcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgIH0sXG4gICAgLy8gICB9XG4gICAgLy8gXSxcbiAgfSk7XG5cbiAgd2luZG93LndlYkNvbnRlbnRzLmxvYWRVUkwoaHJlZik7XG5cbiAgaWYgKGlzRGV2KSB7XG4gICAgd2luZG93LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scyh7IG1vZGU6ICdkZXRhY2gnIH0pXG4gIH1cblxuICB3aW5kb3cud2ViQ29udGVudHMub24oXCJkaWQtZmluaXNoLWxvYWRcIiwgKCkgPT4ge1xuICAgIC8vIHdpbmRvdy53ZWJDb250ZW50cy5zZW5kKFwic2V0LXNvY2tldFwiLCB7fSk7XG4gIH0pO1xuXG4gIGxpc3RXaW5kb3cucHVzaCh7XG4gICAgd2luZG93LFxuICAgIG5hbWU6IGBUYWItJHt1dWlkKCl9YFxuICB9KTtcblxuICBtYWluV2luZG93IS53ZWJDb250ZW50cy5zZW5kKCd0YWJDaGFuZ2UnLCBnZXRUYWJEYXRhKCkpO1xuICByZXR1cm4gd2luZG93O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYkRhdGEoKTogVGFiTGlzdHtcbiAgcmV0dXJuIHtcbiAgICB0YWJzOiBsaXN0V2luZG93Lm1hcCgoaW5zdGFuY2UpID0+IGluc3RhbmNlLm5hbWUpLFxuICAgIGFjdGl2ZTogbGlzdFdpbmRvdy5maW5kKChpbnN0YW5jZSkgPT4gaW5zdGFuY2Uud2luZG93LndlYkNvbnRlbnRzLmlkID09PSBtYWluV2luZG93IS5nZXRCcm93c2VyVmlldygpPy53ZWJDb250ZW50cz8uaWQpPy5uYW1lIHx8ICcnXG4gIH1cbn1cblxuLy8gU2V0IGFjdGl2ZSB0YWJcbmV4cG9ydCBmdW5jdGlvbiBzZXRUYWIoaW5zdGFuY2U6IEJyb3dzZXJWaWV3KSB7XG4gIG1haW5XaW5kb3chLnNldEJyb3dzZXJWaWV3KGluc3RhbmNlKTtcbiAgaW5zdGFuY2Uuc2V0Qm91bmRzKHsgeDogMCwgeTogMzYsIHdpZHRoOiBtYWluV2luZG93IS5nZXRCb3VuZHMoKS53aWR0aCwgaGVpZ2h0OiBtYWluV2luZG93IS5nZXRCb3VuZHMoKS5oZWlnaHQgLSAzNiB9KVxuICBpbnN0YW5jZS5zZXRBdXRvUmVzaXplKHsgd2lkdGg6IHRydWUsIGhlaWdodDogdHJ1ZSwgaG9yaXpvbnRhbDogZmFsc2UsIHZlcnRpY2FsOiBmYWxzZSB9KTtcbiAgbWFpbldpbmRvdyEud2ViQ29udGVudHMuc2VuZCgndGFiQ2hhbmdlJywgZ2V0VGFiRGF0YSgpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG5ld1RhYigpe1xuICBjb25zdCB3aW5kb3cgPSBhd2FpdCBjcmVhdGVXaW5kb3cobWFpbldpbmRvdy5nZXRCcm93c2VyVmlldygpPy53ZWJDb250ZW50cy5nZXRVUkwoKSEpO1xuICBzZXRUYWIod2luZG93KTtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIGV4aXN0aW5nIEJyb3dzZXJXaW5kb3cgb3IgQ3JlYXRlIG5ldyBCcm93c2VyV2luZG93XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXN0b3JlT3JDcmVhdGVXaW5kb3coKSB7XG4gIGxldCB3aW5kb3cgPSBtYWluV2luZG93O1xuXG4gIGlmICh3aW5kb3cgPT09IHVuZGVmaW5lZCkge1xuICAgIGF3YWl0IGNyZWF0ZU1haW5XaW5kb3coKTtcbiAgICB3aW5kb3cgPSBtYWluV2luZG93O1xuICB9XG5cbiAgaWYgKHdpbmRvdy5pc01pbmltaXplZCgpKSB7XG4gICAgd2luZG93LnJlc3RvcmUoKTtcbiAgfVxuXG4gIHdpbmRvdy5mb2N1cygpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjb3BlRmFjdG9yeTtcblxuZnVuY3Rpb24gc2NvcGVGYWN0b3J5KGxvZ2dlcikge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGUsIHtcbiAgICBkZWZhdWx0TGFiZWw6IHsgdmFsdWU6ICcnLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgIGxhYmVsUGFkZGluZzogeyB2YWx1ZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBtYXhMYWJlbExlbmd0aDogeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBsYWJlbExlbmd0aDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBzY29wZS5sYWJlbFBhZGRpbmcpIHtcbiAgICAgICAgICBjYXNlICdib29sZWFuJzogcmV0dXJuIHNjb3BlLmxhYmVsUGFkZGluZyA/IHNjb3BlLm1heExhYmVsTGVuZ3RoIDogMDtcbiAgICAgICAgICBjYXNlICdudW1iZXInOiByZXR1cm4gc2NvcGUubGFiZWxQYWRkaW5nO1xuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNjb3BlKGxhYmVsKSB7XG4gICAgc2NvcGUubWF4TGFiZWxMZW5ndGggPSBNYXRoLm1heChzY29wZS5tYXhMYWJlbExlbmd0aCwgbGFiZWwubGVuZ3RoKTtcblxuICAgIGNvbnN0IG5ld1Njb3BlID0ge307XG4gICAgZm9yIChjb25zdCBsZXZlbCBvZiBbLi4ubG9nZ2VyLmxldmVscywgJ2xvZyddKSB7XG4gICAgICBuZXdTY29wZVtsZXZlbF0gPSAoLi4uZCkgPT4gbG9nZ2VyLmxvZ0RhdGEoZCwgeyBsZXZlbCwgc2NvcGU6IGxhYmVsIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U2NvcGU7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2NvcGVGYWN0b3J5ID0gcmVxdWlyZSgnLi9zY29wZScpO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVycm9yXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB3YXJuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBpbmZvXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB2ZXJib3NlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkZWJ1Z1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2lsbHlcbiAqL1xuY2xhc3MgTG9nZ2VyIHtcbiAgc3RhdGljIGluc3RhbmNlcyA9IHt9O1xuXG4gIGVycm9ySGFuZGxlciA9IG51bGw7XG4gIGV2ZW50TG9nZ2VyID0gbnVsbDtcbiAgZnVuY3Rpb25zID0ge307XG4gIGhvb2tzID0gW107XG4gIGlzRGV2ID0gZmFsc2U7XG4gIGxldmVscyA9IG51bGw7XG4gIGxvZ0lkID0gbnVsbDtcbiAgc2NvcGUgPSBudWxsO1xuICB0cmFuc3BvcnRzID0ge307XG4gIHZhcmlhYmxlcyA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBhbGxvd1Vua25vd25MZXZlbCA9IGZhbHNlLFxuICAgIGVycm9ySGFuZGxlcixcbiAgICBldmVudExvZ2dlcixcbiAgICBpbml0aWFsaXplRm4sXG4gICAgaXNEZXYgPSBmYWxzZSxcbiAgICBsZXZlbHMgPSBbJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICd2ZXJib3NlJywgJ2RlYnVnJywgJ3NpbGx5J10sXG4gICAgbG9nSWQsXG4gICAgdHJhbnNwb3J0RmFjdG9yaWVzID0ge30sXG4gICAgdmFyaWFibGVzLFxuICB9ID0ge30pIHtcbiAgICB0aGlzLmFkZExldmVsID0gdGhpcy5hZGRMZXZlbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY3JlYXRlID0gdGhpcy5jcmVhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvZ0RhdGEgPSB0aGlzLmxvZ0RhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLnByb2Nlc3NNZXNzYWdlID0gdGhpcy5wcm9jZXNzTWVzc2FnZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5hbGxvd1Vua25vd25MZXZlbCA9IGFsbG93VW5rbm93bkxldmVsO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUZuID0gaW5pdGlhbGl6ZUZuO1xuICAgIHRoaXMuaXNEZXYgPSBpc0RldjtcbiAgICB0aGlzLmxldmVscyA9IGxldmVscztcbiAgICB0aGlzLmxvZ0lkID0gbG9nSWQ7XG4gICAgdGhpcy50cmFuc3BvcnRGYWN0b3JpZXMgPSB0cmFuc3BvcnRGYWN0b3JpZXM7XG4gICAgdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXMgfHwge307XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlRmFjdG9yeSh0aGlzKTtcblxuICAgIHRoaXMuYWRkTGV2ZWwoJ2xvZycsIGZhbHNlKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5sZXZlbHMpIHtcbiAgICAgIHRoaXMuYWRkTGV2ZWwobmFtZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuICAgIGVycm9ySGFuZGxlcj8uc2V0T3B0aW9ucyh7IGxvZ0ZuOiB0aGlzLmVycm9yIH0pO1xuXG4gICAgdGhpcy5ldmVudExvZ2dlciA9IGV2ZW50TG9nZ2VyO1xuICAgIGV2ZW50TG9nZ2VyPy5zZXRPcHRpb25zKHsgbG9nZ2VyOiB0aGlzIH0pO1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgZmFjdG9yeV0gb2YgT2JqZWN0LmVudHJpZXModHJhbnNwb3J0RmFjdG9yaWVzKSkge1xuICAgICAgdGhpcy50cmFuc3BvcnRzW25hbWVdID0gZmFjdG9yeSh0aGlzKTtcbiAgICB9XG5cbiAgICBMb2dnZXIuaW5zdGFuY2VzW2xvZ0lkXSA9IHRoaXM7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoeyBsb2dJZCB9KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzW2xvZ0lkXSB8fCB0aGlzLmluc3RhbmNlcy5kZWZhdWx0O1xuICB9XG5cbiAgYWRkTGV2ZWwobGV2ZWwsIGluZGV4ID0gdGhpcy5sZXZlbHMubGVuZ3RoKSB7XG4gICAgaWYgKGluZGV4ICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5sZXZlbHMuc3BsaWNlKGluZGV4LCAwLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgdGhpc1tsZXZlbF0gPSAoLi4uYXJncykgPT4gdGhpcy5sb2dEYXRhKGFyZ3MsIHsgbGV2ZWwgfSk7XG4gICAgdGhpcy5mdW5jdGlvbnNbbGV2ZWxdID0gdGhpc1tsZXZlbF07XG4gIH1cblxuICBjYXRjaEVycm9ycyhvcHRpb25zKSB7XG4gICAgdGhpcy5wcm9jZXNzTWVzc2FnZShcbiAgICAgIHtcbiAgICAgICAgZGF0YTogWydsb2cuY2F0Y2hFcnJvcnMgaXMgZGVwcmVjYXRlZC4gVXNlIGxvZy5lcnJvckhhbmRsZXIgaW5zdGVhZCddLFxuICAgICAgICBsZXZlbDogJ3dhcm4nLFxuICAgICAgfSxcbiAgICAgIHsgdHJhbnNwb3J0czogWydjb25zb2xlJ10gfSxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlci5zdGFydENhdGNoaW5nKG9wdGlvbnMpO1xuICB9XG5cbiAgY3JlYXRlKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0geyBsb2dJZDogb3B0aW9ucyB9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTG9nZ2VyKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBlcnJvckhhbmRsZXI6IHRoaXMuZXJyb3JIYW5kbGVyLFxuICAgICAgaW5pdGlhbGl6ZUZuOiB0aGlzLmluaXRpYWxpemVGbixcbiAgICAgIGlzRGV2OiB0aGlzLmlzRGV2LFxuICAgICAgdHJhbnNwb3J0RmFjdG9yaWVzOiB0aGlzLnRyYW5zcG9ydEZhY3RvcmllcyxcbiAgICAgIHZhcmlhYmxlczogeyAuLi50aGlzLnZhcmlhYmxlcyB9LFxuICAgIH0pO1xuICB9XG5cbiAgY29tcGFyZUxldmVscyhwYXNzTGV2ZWwsIGNoZWNrTGV2ZWwsIGxldmVscyA9IHRoaXMubGV2ZWxzKSB7XG4gICAgY29uc3QgcGFzcyA9IGxldmVscy5pbmRleE9mKHBhc3NMZXZlbCk7XG4gICAgY29uc3QgY2hlY2sgPSBsZXZlbHMuaW5kZXhPZihjaGVja0xldmVsKTtcbiAgICBpZiAoY2hlY2sgPT09IC0xIHx8IHBhc3MgPT09IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hlY2sgPD0gcGFzcztcbiAgfVxuXG4gIGluaXRpYWxpemUoeyBwcmVsb2FkID0gdHJ1ZSwgc3B5UmVuZGVyZXJDb25zb2xlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgdGhpcy5pbml0aWFsaXplRm4oeyBsb2dnZXI6IHRoaXMsIHByZWxvYWQsIHNweVJlbmRlcmVyQ29uc29sZSB9KTtcbiAgfVxuXG4gIGxvZ0RhdGEoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5wcm9jZXNzTWVzc2FnZSh7IGRhdGEsIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICBwcm9jZXNzTWVzc2FnZShtZXNzYWdlLCB7IHRyYW5zcG9ydHMgPSB0aGlzLnRyYW5zcG9ydHMgfSA9IHt9KSB7XG4gICAgaWYgKG1lc3NhZ2UuY21kID09PSAnZXJyb3JIYW5kbGVyJykge1xuICAgICAgdGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlKG1lc3NhZ2UuZXJyb3IsIHtcbiAgICAgICAgZXJyb3JOYW1lOiBtZXNzYWdlLmVycm9yTmFtZSxcbiAgICAgICAgcHJvY2Vzc1R5cGU6ICdyZW5kZXJlcicsXG4gICAgICAgIHNob3dEaWFsb2c6IEJvb2xlYW4obWVzc2FnZS5zaG93RGlhbG9nKSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IG1lc3NhZ2UubGV2ZWw7XG4gICAgaWYgKCF0aGlzLmFsbG93VW5rbm93bkxldmVsKSB7XG4gICAgICBsZXZlbCA9IHRoaXMubGV2ZWxzLmluY2x1ZGVzKG1lc3NhZ2UubGV2ZWwpID8gbWVzc2FnZS5sZXZlbCA6ICdpbmZvJztcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxpemVkTWVzc2FnZSA9IHtcbiAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICAuLi5tZXNzYWdlLFxuICAgICAgbGV2ZWwsXG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgLi4udGhpcy52YXJpYWJsZXMsXG4gICAgICAgIC4uLm1lc3NhZ2UudmFyaWFibGVzLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCBbdHJhbnNOYW1lLCB0cmFuc0ZuXSBvZiB0aGlzLnRyYW5zcG9ydEVudHJpZXModHJhbnNwb3J0cykpIHtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNGbiAhPT0gJ2Z1bmN0aW9uJyB8fCB0cmFuc0ZuLmxldmVsID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmNvbXBhcmVMZXZlbHModHJhbnNGbi5sZXZlbCwgbWVzc2FnZS5sZXZlbCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkTXNnID0gdGhpcy5ob29rcy5yZWR1Y2UoKG1zZywgaG9vaykgPT4ge1xuICAgICAgICAgIHJldHVybiBtc2cgPyBob29rKG1zZywgdHJhbnNGbiwgdHJhbnNOYW1lKSA6IG1zZztcbiAgICAgICAgfSwgbm9ybWFsaXplZE1lc3NhZ2UpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1lZE1zZykge1xuICAgICAgICAgIHRyYW5zRm4oeyAuLi50cmFuc2Zvcm1lZE1zZywgZGF0YTogWy4uLnRyYW5zZm9ybWVkTXNnLmRhdGFdIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc0ludGVybmFsRXJyb3JGbihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm9jZXNzSW50ZXJuYWxFcnJvckZuKF9lKSB7XG4gICAgLy8gRG8gbm90aGluZyBieSBkZWZhdWx0XG4gIH1cblxuICB0cmFuc3BvcnRFbnRyaWVzKHRyYW5zcG9ydHMgPSB0aGlzLnRyYW5zcG9ydHMpIHtcbiAgICBjb25zdCB0cmFuc3BvcnRBcnJheSA9IEFycmF5LmlzQXJyYXkodHJhbnNwb3J0cylcbiAgICAgID8gdHJhbnNwb3J0c1xuICAgICAgOiBPYmplY3QuZW50cmllcyh0cmFuc3BvcnRzKTtcblxuICAgIHJldHVybiB0cmFuc3BvcnRBcnJheVxuICAgICAgLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBpdGVtKSB7XG4gICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydHNbaXRlbV0gPyBbaXRlbSwgdGhpcy50cmFuc3BvcnRzW2l0ZW1dXSA6IG51bGw7XG4gICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgcmV0dXJuIFtpdGVtLm5hbWUsIGl0ZW1dO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExvZ2dlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbmNvbnN0IGNvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5cbmNsYXNzIFJlbmRlcmVyRXJyb3JIYW5kbGVyIHtcbiAgbG9nRm4gPSBudWxsO1xuICBvbkVycm9yID0gbnVsbDtcbiAgc2hvd0RpYWxvZyA9IGZhbHNlO1xuICBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoeyBsb2dGbiA9IG51bGwgfSA9IHt9KSB7XG4gICAgdGhpcy5oYW5kbGVFcnJvciA9IHRoaXMuaGFuZGxlRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJlamVjdGlvbiA9IHRoaXMuaGFuZGxlUmVqZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGFydENhdGNoaW5nID0gdGhpcy5zdGFydENhdGNoaW5nLmJpbmQodGhpcyk7XG4gICAgdGhpcy5sb2dGbiA9IGxvZ0ZuO1xuICB9XG5cbiAgaGFuZGxlKGVycm9yLCB7XG4gICAgbG9nRm4gPSB0aGlzLmxvZ0ZuLFxuICAgIGVycm9yTmFtZSA9ICcnLFxuICAgIG9uRXJyb3IgPSB0aGlzLm9uRXJyb3IsXG4gICAgc2hvd0RpYWxvZyA9IHRoaXMuc2hvd0RpYWxvZyxcbiAgfSA9IHt9KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChvbkVycm9yPy4oeyBlcnJvciwgZXJyb3JOYW1lLCBwcm9jZXNzVHlwZTogJ3JlbmRlcmVyJyB9KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgbG9nRm4oeyBlcnJvciwgZXJyb3JOYW1lLCBzaG93RGlhbG9nIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgY29uc29sZUVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBzZXRPcHRpb25zKHsgbG9nRm4sIG9uRXJyb3IsIHByZXZlbnREZWZhdWx0LCBzaG93RGlhbG9nIH0pIHtcbiAgICBpZiAodHlwZW9mIGxvZ0ZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmxvZ0ZuID0gbG9nRm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJldmVudERlZmF1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2hvd0RpYWxvZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLnNob3dEaWFsb2cgPSBzaG93RGlhbG9nO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0Q2F0Y2hpbmcoeyBvbkVycm9yLCBzaG93RGlhbG9nIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5zZXRPcHRpb25zKHsgb25FcnJvciwgc2hvd0RpYWxvZyB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdD8uKCk7XG4gICAgICB0aGlzLmhhbmRsZUVycm9yKGV2ZW50LmVycm9yIHx8IGV2ZW50KTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnByZXZlbnREZWZhdWx0ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0Py4oKTtcbiAgICAgIHRoaXMuaGFuZGxlUmVqZWN0aW9uKGV2ZW50LnJlYXNvbiB8fCBldmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVFcnJvcihlcnJvcikge1xuICAgIHRoaXMuaGFuZGxlKGVycm9yLCB7IGVycm9yTmFtZTogJ1VuaGFuZGxlZCcgfSk7XG4gIH1cblxuICBoYW5kbGVSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgY29uc3QgZXJyb3IgPSByZWFzb24gaW5zdGFuY2VvZiBFcnJvclxuICAgICAgPyByZWFzb25cbiAgICAgIDogbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHJlYXNvbikpO1xuICAgIHRoaXMuaGFuZGxlKGVycm9yLCB7IGVycm9yTmFtZTogJ1VuaGFuZGxlZCByZWplY3Rpb24nIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyZXJFcnJvckhhbmRsZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zb2xlVHJhbnNwb3J0UmVuZGVyZXJGYWN0b3J5O1xuXG5jb25zdCBjb25zb2xlTWV0aG9kcyA9IHtcbiAgZXJyb3I6IGNvbnNvbGUuZXJyb3IsXG4gIHdhcm46IGNvbnNvbGUud2FybixcbiAgaW5mbzogY29uc29sZS5pbmZvLFxuICB2ZXJib3NlOiBjb25zb2xlLmluZm8sXG4gIGRlYnVnOiBjb25zb2xlLmRlYnVnLFxuICBzaWxseTogY29uc29sZS5kZWJ1ZyxcbiAgbG9nOiBjb25zb2xlLmxvZyxcbn07XG5cbmZ1bmN0aW9uIGNvbnNvbGVUcmFuc3BvcnRSZW5kZXJlckZhY3RvcnkobG9nZ2VyKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHRyYW5zcG9ydCwge1xuICAgIGZvcm1hdDogJ3tofTp7aX06e3N9Lnttc317c2NvcGV9IOKAuiB7dGV4dH0nLFxuXG4gICAgZm9ybWF0RGF0YUZuKHtcbiAgICAgIGRhdGEgPSBbXSxcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpLFxuICAgICAgZm9ybWF0ID0gdHJhbnNwb3J0LmZvcm1hdCxcbiAgICAgIGxvZ0lkID0gbG9nZ2VyLmxvZ0lkLFxuICAgICAgc2NvcGUgPSBsb2dnZXIuc2NvcGVOYW1lLFxuICAgICAgLi4ubWVzc2FnZVxuICAgIH0pIHtcbiAgICAgIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQoeyAuLi5tZXNzYWdlLCBkYXRhLCBkYXRlLCBsb2dJZCwgc2NvcGUgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZm9ybWF0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cblxuICAgICAgZGF0YS51bnNoaWZ0KGZvcm1hdCk7XG5cbiAgICAgIC8vIENvbmNhdGVuYXRlIGZpcnN0IHR3byBkYXRhIGl0ZW1zIHRvIHN1cHBvcnQgcHJpbnRmLWxpa2UgdGVtcGxhdGVzXG4gICAgICBpZiAodHlwZW9mIGRhdGFbMV0gPT09ICdzdHJpbmcnICYmIGRhdGFbMV0ubWF0Y2goLyVbMWNkZmlPb3NdLykpIHtcbiAgICAgICAgZGF0YSA9IFtgJHtkYXRhWzBdfSAke2RhdGFbMV19YCwgLi4uZGF0YS5zbGljZSgyKV07XG4gICAgICB9XG5cbiAgICAgIGRhdGFbMF0gPSBkYXRhWzBdXG4gICAgICAgIC5yZXBsYWNlKC9cXHsoXFx3Kyl9L2csIChzdWJzdHJpbmcsIG5hbWUpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xldmVsJzogcmV0dXJuIG1lc3NhZ2UubGV2ZWw7XG4gICAgICAgICAgICBjYXNlICdsb2dJZCc6IHJldHVybiBsb2dJZDtcbiAgICAgICAgICAgIGNhc2UgJ3Njb3BlJzogcmV0dXJuIHNjb3BlID8gYCAoJHtzY29wZX0pYCA6ICcnO1xuICAgICAgICAgICAgY2FzZSAndGV4dCc6IHJldHVybiAnJztcblxuICAgICAgICAgICAgY2FzZSAneSc6IHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoMTApO1xuICAgICAgICAgICAgY2FzZSAnbSc6IHJldHVybiAoZGF0ZS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoMTApXG4gICAgICAgICAgICAgIC5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICAgICAgY2FzZSAnZCc6IHJldHVybiBkYXRlLmdldERhdGUoKS50b1N0cmluZygxMCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOiByZXR1cm4gZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKDEwKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICAgICAgY2FzZSAnaSc6IHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygxMCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKCkudG9TdHJpbmcoMTApLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgICAgICBjYXNlICdtcyc6IHJldHVybiBkYXRlLmdldE1pbGxpc2Vjb25kcygpLnRvU3RyaW5nKDEwKVxuICAgICAgICAgICAgICAucGFkU3RhcnQoMywgJzAnKTtcbiAgICAgICAgICAgIGNhc2UgJ2lzbyc6IHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UudmFyaWFibGVzPy5bbmFtZV0gfHwgc3Vic3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRyaW0oKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcblxuICAgIHdyaXRlRm4oeyBtZXNzYWdlOiB7IGxldmVsLCBkYXRhIH0gfSkge1xuICAgICAgY29uc3QgY29uc29sZUxvZ0ZuID0gY29uc29sZU1ldGhvZHNbbGV2ZWxdIHx8IGNvbnNvbGVNZXRob2RzLmluZm87XG5cbiAgICAgIC8vIG1ha2UgYW4gZW1wdHkgY2FsbCBzdGFja1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBjb25zb2xlTG9nRm4oLi4uZGF0YSkpO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgZnVuY3Rpb24gdHJhbnNwb3J0KG1lc3NhZ2UpIHtcbiAgICB0cmFuc3BvcnQud3JpdGVGbih7XG4gICAgICBtZXNzYWdlOiB7IC4uLm1lc3NhZ2UsIGRhdGE6IHRyYW5zcG9ydC5mb3JtYXREYXRhRm4obWVzc2FnZSkgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlwY1RyYW5zcG9ydFJlbmRlcmVyRmFjdG9yeTtcblxuY29uc3QgUkVTVFJJQ1RFRF9UWVBFUyA9IG5ldyBTZXQoW1Byb21pc2UsIFdlYWtNYXAsIFdlYWtTZXRdKTtcblxuZnVuY3Rpb24gaXBjVHJhbnNwb3J0UmVuZGVyZXJGYWN0b3J5KGxvZ2dlcikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih0cmFuc3BvcnQsIHtcbiAgICBkZXB0aDogNSxcblxuICAgIHNlcmlhbGl6ZUZuKGRhdGEsIHsgZGVwdGggPSA1LCBzZWVuID0gbmV3IFdlYWtTZXQoKSB9ID0ge30pIHtcbiAgICAgIGlmIChkZXB0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGBbJHt0eXBlb2YgZGF0YX1dYDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlZW4uaGFzKGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICBpZiAoWydmdW5jdGlvbicsICdzeW1ib2wnXS5pbmNsdWRlcyh0eXBlb2YgZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpbWl0aXZlIHR5cGVzIChpbmNsdWRpbmcgbnVsbCBhbmQgdW5kZWZpbmVkKVxuICAgICAgaWYgKE9iamVjdChkYXRhKSAhPT0gZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cblxuICAgICAgLy8gT2JqZWN0IHR5cGVzXG5cbiAgICAgIGlmIChSRVNUUklDVEVEX1RZUEVTLmhhcyhkYXRhLmNvbnN0cnVjdG9yKSkge1xuICAgICAgICByZXR1cm4gYFske2RhdGEuY29uc3RydWN0b3IubmFtZX1dYDtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEubWFwKChpdGVtKSA9PiB0cmFuc3BvcnQuc2VyaWFsaXplRm4oXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgICB7IGxldmVsOiBkZXB0aCAtIDEsIHNlZW4gfSxcbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc3RhY2s7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFwKFxuICAgICAgICAgIEFycmF5XG4gICAgICAgICAgICAuZnJvbShkYXRhKVxuICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBbXG4gICAgICAgICAgICAgIHRyYW5zcG9ydC5zZXJpYWxpemVGbihrZXksIHsgbGV2ZWw6IGRlcHRoIC0gMSwgc2VlbiB9KSxcbiAgICAgICAgICAgICAgdHJhbnNwb3J0LnNlcmlhbGl6ZUZuKHZhbHVlLCB7IGxldmVsOiBkZXB0aCAtIDEsIHNlZW4gfSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQoXG4gICAgICAgICAgQXJyYXkuZnJvbShkYXRhKS5tYXAoXG4gICAgICAgICAgICAodmFsKSA9PiB0cmFuc3BvcnQuc2VyaWFsaXplRm4odmFsLCB7IGxldmVsOiBkZXB0aCAtIDEsIHNlZW4gfSksXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgc2Vlbi5hZGQoZGF0YSk7XG5cbiAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGRhdGEpLm1hcChcbiAgICAgICAgICAoW2tleSwgdmFsdWVdKSA9PiBbXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VyaWFsaXplRm4odmFsdWUsIHsgbGV2ZWw6IGRlcHRoIC0gMSwgc2VlbiB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICBmdW5jdGlvbiB0cmFuc3BvcnQobWVzc2FnZSkge1xuICAgIGlmICghd2luZG93Ll9fZWxlY3Ryb25Mb2cpIHtcbiAgICAgIGxvZ2dlci5wcm9jZXNzTWVzc2FnZShcbiAgICAgICAge1xuICAgICAgICAgIGRhdGE6IFsnZWxlY3Ryb24tbG9nOiBsb2dnZXIgaXNuXFwndCBpbml0aWFsaXplZCBpbiB0aGUgbWFpbiBwcm9jZXNzJ10sXG4gICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgIH0sXG4gICAgICAgIHsgdHJhbnNwb3J0czogWydjb25zb2xlJ10gfSxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIF9fZWxlY3Ryb25Mb2cuc2VuZFRvTWFpbih0cmFuc3BvcnQuc2VyaWFsaXplRm4obWVzc2FnZSwge1xuICAgICAgICBkZXB0aDogdHJhbnNwb3J0LmRlcHRoLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci50cmFuc3BvcnRzLmNvbnNvbGUoe1xuICAgICAgICBkYXRhOiBbJ2VsZWN0cm9uTG9nLnRyYW5zcG9ydHMuaXBjJywgZSwgJ2RhdGE6JywgbWVzc2FnZS5kYXRhXSxcbiAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi4vY29yZS9Mb2dnZXInKTtcbmNvbnN0IFJlbmRlcmVyRXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi9saWIvUmVuZGVyZXJFcnJvckhhbmRsZXInKTtcbmNvbnN0IHRyYW5zcG9ydENvbnNvbGUgPSByZXF1aXJlKCcuL2xpYi90cmFuc3BvcnRzL2NvbnNvbGUnKTtcbmNvbnN0IHRyYW5zcG9ydElwYyA9IHJlcXVpcmUoJy4vbGliL3RyYW5zcG9ydHMvaXBjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTG9nZ2VyKCk7XG5tb2R1bGUuZXhwb3J0cy5Mb2dnZXIgPSBMb2dnZXI7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHM7XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcigpIHtcbiAgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih7XG4gICAgYWxsb3dVbmtub3duTGV2ZWw6IHRydWUsXG4gICAgZXJyb3JIYW5kbGVyOiBuZXcgUmVuZGVyZXJFcnJvckhhbmRsZXIoKSxcbiAgICBpbml0aWFsaXplRm46ICgpID0+IHt9LFxuICAgIGxvZ0lkOiAnZGVmYXVsdCcsXG4gICAgdHJhbnNwb3J0RmFjdG9yaWVzOiB7XG4gICAgICBjb25zb2xlOiB0cmFuc3BvcnRDb25zb2xlLFxuICAgICAgaXBjOiB0cmFuc3BvcnRJcGMsXG4gICAgfSxcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIHByb2Nlc3NUeXBlOiAncmVuZGVyZXInLFxuICAgIH0sXG4gIH0pO1xuXG4gIGxvZ2dlci5lcnJvckhhbmRsZXIuc2V0T3B0aW9ucyh7XG4gICAgbG9nRm4oeyBlcnJvciwgZXJyb3JOYW1lLCBzaG93RGlhbG9nIH0pIHtcbiAgICAgIGxvZ2dlci50cmFuc3BvcnRzLmNvbnNvbGUoe1xuICAgICAgICBkYXRhOiBbZXJyb3JOYW1lLCBlcnJvcl0uZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgIH0pO1xuICAgICAgbG9nZ2VyLnRyYW5zcG9ydHMuaXBjKHtcbiAgICAgICAgY21kOiAnZXJyb3JIYW5kbGVyJyxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjYXVzZTogZXJyb3I/LmNhdXNlLFxuICAgICAgICAgIGNvZGU6IGVycm9yPy5jb2RlLFxuICAgICAgICAgIG5hbWU6IGVycm9yPy5uYW1lLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yPy5tZXNzYWdlLFxuICAgICAgICAgIHN0YWNrOiBlcnJvcj8uc3RhY2ssXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yTmFtZSxcbiAgICAgICAgbG9nSWQ6IGxvZ2dlci5sb2dJZCxcbiAgICAgICAgc2hvd0RpYWxvZyxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0Jykge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGNtZCwgbG9nSWQsIC4uLm1lc3NhZ2UgfSA9IGV2ZW50LmRhdGEgfHwge307XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IExvZ2dlci5nZXRJbnN0YW5jZSh7IGxvZ0lkIH0pO1xuXG4gICAgICBpZiAoY21kID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgaW5zdGFuY2UucHJvY2Vzc01lc3NhZ2UobWVzc2FnZSwgeyB0cmFuc3BvcnRzOiBbJ2NvbnNvbGUnXSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRvIHN1cHBvcnQgY3VzdG9tIGxldmVsc1xuICByZXR1cm4gbmV3IFByb3h5KGxvZ2dlciwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKC4uLmRhdGEpID0+IGxvZ2dlci5sb2dEYXRhKGRhdGEsIHsgbGV2ZWw6IHByb3AgfSk7XG4gICAgfSxcbiAgfSk7XG59XG4iLCJpbXBvcnQgbG9nIGZyb20gJ2VsZWN0cm9uLWxvZyc7XG5pbXBvcnQgeyBpc0RldiB9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyBsb2dzXG5pZiAoIWlzRGV2KSB7XG4gIGxvZy50cmFuc3BvcnRzLmZpbGUubGV2ZWwgPSBcInZlcmJvc2VcIjtcbn1cblxuLy8gZXJyIGhhbmRsZVxucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbG9nLmVycm9yKTsiLCJpbXBvcnQgeyBNZXNzYWdlQm94T3B0aW9ucywgYXBwLCBhdXRvVXBkYXRlciwgZGlhbG9nIH0gZnJvbSBcImVsZWN0cm9uXCI7XG5pbXBvcnQgbG9nIGZyb20gJ2VsZWN0cm9uLWxvZyc7XG5cbi8vIGNvbnN0IGlzTWFjT1MgPSBmYWxzZTtcbmltcG9ydCBpc0RldiBmcm9tIFwiZWxlY3Ryb24taXMtZGV2XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEF1dG9VcGRhdGVyKCkge1xuICAgIC8vIEhhbmRsZSBjcmVhdGluZy9yZW1vdmluZyBzaG9ydGN1dHMgb24gV2luZG93cyB3aGVuIGluc3RhbGxpbmcvdW5pbnN0YWxsaW5nLlxuICAgIGlmIChyZXF1aXJlKCdlbGVjdHJvbi1zcXVpcnJlbC1zdGFydHVwJykpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuICAgICAgICBhcHAucXVpdCgpO1xuICAgIH1cbiAgICBpZiAoIWlzRGV2KSB7XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IFwiaHR0cHM6Ly9yZWZpLXVwZGF0ZXIudmVyY2VsLmFwcFwiO1xuICAgICAgICBjb25zdCBmZWVkID0gYCR7c2VydmVyfS91cGRhdGUvJHtwcm9jZXNzLnBsYXRmb3JtfS8ke2FwcC5nZXRWZXJzaW9uKCl9YFxuICAgIFxuICAgICAgICBhdXRvVXBkYXRlci5zZXRGZWVkVVJMKHsgdXJsOiBmZWVkLCBzZXJ2ZXJUeXBlOiBcImpzb25cIiB9KVxuICAgIFxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBhdXRvVXBkYXRlci5jaGVja0ZvclVwZGF0ZXMoKVxuICAgICAgICB9LCA2MDAwMCk7XG4gICAgXG4gICAgICAgIGF1dG9VcGRhdGVyLm9uKCd1cGRhdGUtZG93bmxvYWRlZCcsIChfLCByZWxlYXNlTm90ZXMsIHJlbGVhc2VOYW1lKSA9PiB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ0Rvd25sb2FkZWQgbmV3IHVwZGF0ZScpO1xuICAgICAgICAgICAgY29uc3QgZGlhbG9nT3B0czogTWVzc2FnZUJveE9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0eXBlOiAnaW5mbycsXG4gICAgICAgICAgICBidXR0b25zOiBbJ1Jlc3RhcnQnLCAnTGF0ZXInXSxcbiAgICAgICAgICAgIHRpdGxlOiAnQXBwbGljYXRpb24gVXBkYXRlJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyByZWxlYXNlTm90ZXMgOiByZWxlYXNlTmFtZSxcbiAgICAgICAgICAgIGRldGFpbDogJ0EgbmV3IHZlcnNpb24gaGFzIGJlZW4gZG93bmxvYWRlZC4gUmVzdGFydCB0aGUgYXBwbGljYXRpb24gdG8gYXBwbHkgdGhlIHVwZGF0ZXMuJ1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZGlhbG9nLnNob3dNZXNzYWdlQm94KGRpYWxvZ09wdHMpLnRoZW4oKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmV0dXJuVmFsdWUucmVzcG9uc2UgPT09IDApIGF1dG9VcGRhdGVyLnF1aXRBbmRJbnN0YWxsKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICBhdXRvVXBkYXRlci5vbignZXJyb3InLCBtZXNzYWdlID0+IHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignVGhlcmUgd2FzIGEgcHJvYmxlbSB1cGRhdGluZyB0aGUgYXBwbGljYXRpb24nKVxuICAgICAgICAgICAgbG9nLmVycm9yKG1lc3NhZ2UpXG4gICAgICAgIH0pXG4gICAgfSBcbn1cblxuXG4iLCJpbXBvcnQgeyBJcGNNYWluRXZlbnQsIGlwY01haW4gfSBmcm9tIFwiZWxlY3Ryb25cIlxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRJUEMoKSB7XG4gIC8vIGxpc3RlbiB0aGUgY2hhbm5lbCBgbWVzc2FnZWAgYW5kIHJlc2VuZCB0aGUgcmVjZWl2ZWQgbWVzc2FnZSB0byB0aGUgcmVuZGVyZXIgcHJvY2Vzc1xuICBpcGNNYWluLm9uKCdtZXNzYWdlJywgKGV2ZW50OiBJcGNNYWluRXZlbnQsIG1lc3NhZ2U6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpXG4gICAgc2V0VGltZW91dCgoKSA9PiBldmVudC5zZW5kZXIuc2VuZCgnbWVzc2FnZScsICdoaSBmcm9tIGVsZWN0cm9uJyksIDUwMClcbiAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuIiwidmFyIGNvbW1vbiAgID0gZXhwb3J0cyxcbiAgICB1cmwgICAgICA9IHJlcXVpcmUoJ3VybCcpLFxuICAgIGV4dGVuZCAgID0gcmVxdWlyZSgndXRpbCcpLl9leHRlbmQsXG4gICAgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0Jyk7XG5cbnZhciB1cGdyYWRlSGVhZGVyID0gLyhefCwpXFxzKnVwZ3JhZGVcXHMqKCR8LCkvaSxcbiAgICBpc1NTTCA9IC9eaHR0cHN8d3NzLztcblxuLyoqXG4gKiBTaW1wbGUgUmVnZXggZm9yIHRlc3RpbmcgaWYgcHJvdG9jb2wgaXMgaHR0cHNcbiAqL1xuY29tbW9uLmlzU1NMID0gaXNTU0w7XG4vKipcbiAqIENvcGllcyB0aGUgcmlnaHQgaGVhZGVycyBmcm9tIGBvcHRpb25zYCBhbmQgYHJlcWAgdG9cbiAqIGBvdXRnb2luZ2Agd2hpY2ggaXMgdGhlbiB1c2VkIHRvIGZpcmUgdGhlIHByb3hpZWRcbiAqIHJlcXVlc3QuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgY29tbW9uLnNldHVwT3V0Z29pbmcob3V0Z29pbmcsIG9wdGlvbnMsIHJlcSlcbiAqICAgIC8vID0+IHsgaG9zdDogLi4uLCBob3N0bmFtZTogLi4ufVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBPdXRnb2luZyBCYXNlIG9iamVjdCB0byBiZSBmaWxsZWQgd2l0aCByZXF1aXJlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge09iamVjdH0gT3B0aW9ucyBDb25maWcgb2JqZWN0IHBhc3NlZCB0byB0aGUgcHJveHlcbiAqIEBwYXJhbSB7Q2xpZW50UmVxdWVzdH0gUmVxIFJlcXVlc3QgT2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gRm9yd2FyZCBTdHJpbmcgdG8gc2VsZWN0IGZvcndhcmQgb3IgdGFyZ2V0XG4gKsKgXG4gKiBAcmV0dXJuIHtPYmplY3R9IE91dGdvaW5nIE9iamVjdCB3aXRoIGFsbCByZXF1aXJlZCBwcm9wZXJ0aWVzIHNldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNvbW1vbi5zZXR1cE91dGdvaW5nID0gZnVuY3Rpb24ob3V0Z29pbmcsIG9wdGlvbnMsIHJlcSwgZm9yd2FyZCkge1xuICBvdXRnb2luZy5wb3J0ID0gb3B0aW9uc1tmb3J3YXJkIHx8ICd0YXJnZXQnXS5wb3J0IHx8XG4gICAgICAgICAgICAgICAgICAoaXNTU0wudGVzdChvcHRpb25zW2ZvcndhcmQgfHwgJ3RhcmdldCddLnByb3RvY29sKSA/IDQ0MyA6IDgwKTtcblxuICBbJ2hvc3QnLCAnaG9zdG5hbWUnLCAnc29ja2V0UGF0aCcsICdwZngnLCAna2V5JyxcbiAgICAncGFzc3BocmFzZScsICdjZXJ0JywgJ2NhJywgJ2NpcGhlcnMnLCAnc2VjdXJlUHJvdG9jb2wnXS5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uKGUpIHsgb3V0Z29pbmdbZV0gPSBvcHRpb25zW2ZvcndhcmQgfHwgJ3RhcmdldCddW2VdOyB9XG4gICk7XG5cbiAgb3V0Z29pbmcubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgcmVxLm1ldGhvZDtcbiAgb3V0Z29pbmcuaGVhZGVycyA9IGV4dGVuZCh7fSwgcmVxLmhlYWRlcnMpO1xuXG4gIGlmIChvcHRpb25zLmhlYWRlcnMpe1xuICAgIGV4dGVuZChvdXRnb2luZy5oZWFkZXJzLCBvcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYXV0aCkge1xuICAgIG91dGdvaW5nLmF1dGggPSBvcHRpb25zLmF1dGg7XG4gIH1cbiAgXG4gIGlmIChvcHRpb25zLmNhKSB7XG4gICAgICBvdXRnb2luZy5jYSA9IG9wdGlvbnMuY2E7XG4gIH1cblxuICBpZiAoaXNTU0wudGVzdChvcHRpb25zW2ZvcndhcmQgfHwgJ3RhcmdldCddLnByb3RvY29sKSkge1xuICAgIG91dGdvaW5nLnJlamVjdFVuYXV0aG9yaXplZCA9ICh0eXBlb2Ygb3B0aW9ucy5zZWN1cmUgPT09IFwidW5kZWZpbmVkXCIpID8gdHJ1ZSA6IG9wdGlvbnMuc2VjdXJlO1xuICB9XG5cblxuICBvdXRnb2luZy5hZ2VudCA9IG9wdGlvbnMuYWdlbnQgfHwgZmFsc2U7XG4gIG91dGdvaW5nLmxvY2FsQWRkcmVzcyA9IG9wdGlvbnMubG9jYWxBZGRyZXNzO1xuXG4gIC8vXG4gIC8vIFJlbWFyazogSWYgd2UgYXJlIGZhbHNlIGFuZCBub3QgdXBncmFkaW5nLCBzZXQgdGhlIGNvbm5lY3Rpb246IGNsb3NlLiBUaGlzIGlzIHRoZSByaWdodCB0aGluZyB0byBkb1xuICAvLyBhcyBub2RlIGNvcmUgZG9lc24ndCBoYW5kbGUgdGhpcyBDT01QTEVURUxZIHByb3Blcmx5IHlldC5cbiAgLy9cbiAgaWYgKCFvdXRnb2luZy5hZ2VudCkge1xuICAgIG91dGdvaW5nLmhlYWRlcnMgPSBvdXRnb2luZy5oZWFkZXJzIHx8IHt9O1xuICAgIGlmICh0eXBlb2Ygb3V0Z29pbmcuaGVhZGVycy5jb25uZWN0aW9uICE9PSAnc3RyaW5nJ1xuICAgICAgICB8fCAhdXBncmFkZUhlYWRlci50ZXN0KG91dGdvaW5nLmhlYWRlcnMuY29ubmVjdGlvbilcbiAgICAgICApIHsgb3V0Z29pbmcuaGVhZGVycy5jb25uZWN0aW9uID0gJ2Nsb3NlJzsgfVxuICB9XG5cblxuICAvLyB0aGUgZmluYWwgcGF0aCBpcyB0YXJnZXQgcGF0aCArIHJlbGF0aXZlIHBhdGggcmVxdWVzdGVkIGJ5IHVzZXI6XG4gIHZhciB0YXJnZXQgPSBvcHRpb25zW2ZvcndhcmQgfHwgJ3RhcmdldCddO1xuICB2YXIgdGFyZ2V0UGF0aCA9IHRhcmdldCAmJiBvcHRpb25zLnByZXBlbmRQYXRoICE9PSBmYWxzZVxuICAgID8gKHRhcmdldC5wYXRoIHx8ICcnKVxuICAgIDogJyc7XG5cbiAgLy9cbiAgLy8gUmVtYXJrOiBDYW4gd2Ugc29tZWhvdyBub3QgdXNlIHVybC5wYXJzZSBhcyBhIHBlcmYgb3B0aW1pemF0aW9uP1xuICAvL1xuICB2YXIgb3V0Z29pbmdQYXRoID0gIW9wdGlvbnMudG9Qcm94eVxuICAgID8gKHVybC5wYXJzZShyZXEudXJsKS5wYXRoIHx8ICcnKVxuICAgIDogcmVxLnVybDtcblxuICAvL1xuICAvLyBSZW1hcms6IGlnbm9yZVBhdGggd2lsbCBqdXN0IHN0cmFpZ2h0IHVwIGlnbm9yZSB3aGF0ZXZlciB0aGUgcmVxdWVzdCdzXG4gIC8vIHBhdGggaXMuIFRoaXMgY2FuIGJlIGxhYmVsZWQgYXMgRk9PVC1HVU4gbWF0ZXJpYWwgaWYgeW91IGRvIG5vdCBrbm93IHdoYXRcbiAgLy8geW91IGFyZSBkb2luZyBhbmQgYXJlIHVzaW5nIGNvbmZsaWN0aW5nIG9wdGlvbnMuXG4gIC8vXG4gIG91dGdvaW5nUGF0aCA9ICFvcHRpb25zLmlnbm9yZVBhdGggPyBvdXRnb2luZ1BhdGggOiAnJztcblxuICBvdXRnb2luZy5wYXRoID0gY29tbW9uLnVybEpvaW4odGFyZ2V0UGF0aCwgb3V0Z29pbmdQYXRoKTtcblxuICBpZiAob3B0aW9ucy5jaGFuZ2VPcmlnaW4pIHtcbiAgICBvdXRnb2luZy5oZWFkZXJzLmhvc3QgPVxuICAgICAgcmVxdWlyZWQob3V0Z29pbmcucG9ydCwgb3B0aW9uc1tmb3J3YXJkIHx8ICd0YXJnZXQnXS5wcm90b2NvbCkgJiYgIWhhc1BvcnQob3V0Z29pbmcuaG9zdClcbiAgICAgICAgPyBvdXRnb2luZy5ob3N0ICsgJzonICsgb3V0Z29pbmcucG9ydFxuICAgICAgICA6IG91dGdvaW5nLmhvc3Q7XG4gIH1cbiAgcmV0dXJuIG91dGdvaW5nO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHByb3BlciBjb25maWd1cmF0aW9uIGZvciBzb2NrZXRzLFxuICogc2V0IG5vIGRlbGF5IGFuZCBzZXQga2VlcCBhbGl2ZSwgYWxzbyBzZXRcbiAqIHRoZSB0aW1lb3V0IHRvIDAuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgY29tbW9uLnNldHVwU29ja2V0KHNvY2tldClcbiAqICAgIC8vID0+IFNvY2tldFxuICpcbiAqIEBwYXJhbSB7U29ja2V0fSBTb2NrZXQgaW5zdGFuY2UgdG8gc2V0dXBcbiAqwqBcbiAqIEByZXR1cm4ge1NvY2tldH0gUmV0dXJuIHRoZSBjb25maWd1cmVkIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5jb21tb24uc2V0dXBTb2NrZXQgPSBmdW5jdGlvbihzb2NrZXQpIHtcbiAgc29ja2V0LnNldFRpbWVvdXQoMCk7XG4gIHNvY2tldC5zZXROb0RlbGF5KHRydWUpO1xuXG4gIHNvY2tldC5zZXRLZWVwQWxpdmUodHJ1ZSwgMCk7XG5cbiAgcmV0dXJuIHNvY2tldDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBwb3J0IG51bWJlciBmcm9tIHRoZSBob3N0LiBPciBndWVzcyBpdCBiYXNlZCBvbiB0aGUgY29ubmVjdGlvbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxIEluY29taW5nIEhUVFAgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBwb3J0IG51bWJlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuY29tbW9uLmdldFBvcnQgPSBmdW5jdGlvbihyZXEpIHtcbiAgdmFyIHJlcyA9IHJlcS5oZWFkZXJzLmhvc3QgPyByZXEuaGVhZGVycy5ob3N0Lm1hdGNoKC86KFxcZCspLykgOiAnJztcblxuICByZXR1cm4gcmVzID9cbiAgICByZXNbMV0gOlxuICAgIGNvbW1vbi5oYXNFbmNyeXB0ZWRDb25uZWN0aW9uKHJlcSkgPyAnNDQzJyA6ICc4MCc7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSByZXF1ZXN0IGhhcyBhbiBlbmNyeXB0ZWQgY29ubmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcSBJbmNvbWluZyBIVFRQIHJlcXVlc3QuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciB0aGUgY29ubmVjdGlvbiBpcyBlbmNyeXB0ZWQgb3Igbm90LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5jb21tb24uaGFzRW5jcnlwdGVkQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHJlcSkge1xuICByZXR1cm4gQm9vbGVhbihyZXEuY29ubmVjdGlvbi5lbmNyeXB0ZWQgfHwgcmVxLmNvbm5lY3Rpb24ucGFpcik7XG59O1xuXG4vKipcbiAqIE9TLWFnbm9zdGljIGpvaW4gKGRvZXNuJ3QgYnJlYWsgb24gVVJMcyBsaWtlIHBhdGguam9pbiBkb2VzIG9uIFdpbmRvd3MpPlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGdlbmVyYXRlZCBwYXRoLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmNvbW1vbi51cmxKb2luID0gZnVuY3Rpb24oKSB7XG4gICAgLy9cbiAgICAvLyBXZSBkbyBub3Qgd2FudCB0byBtZXNzIHdpdGggdGhlIHF1ZXJ5IHN0cmluZy4gQWxsIHdlIHdhbnQgdG8gdG91Y2ggaXMgdGhlIHBhdGguXG4gICAgLy9cbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgbGFzdEluZGV4ID0gYXJncy5sZW5ndGggLSAxLFxuICAgICAgbGFzdCA9IGFyZ3NbbGFzdEluZGV4XSxcbiAgICAgIGxhc3RTZWdzID0gbGFzdC5zcGxpdCgnPycpLFxuICAgICAgcmV0U2VncztcblxuICBhcmdzW2xhc3RJbmRleF0gPSBsYXN0U2Vncy5zaGlmdCgpO1xuXG4gIC8vXG4gIC8vIEpvaW4gYWxsIHN0cmluZ3MsIGJ1dCByZW1vdmUgZW1wdHkgc3RyaW5ncyBzbyB3ZSBkb24ndCBnZXQgZXh0cmEgc2xhc2hlcyBmcm9tXG4gIC8vIGpvaW5pbmcgZS5nLiBbJycsICdhbSddXG4gIC8vXG4gIHJldFNlZ3MgPSBbXG4gICAgYXJncy5maWx0ZXIoQm9vbGVhbikuam9pbignLycpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8rL2csICcvJylcbiAgICAgICAgLnJlcGxhY2UoJ2h0dHA6LycsICdodHRwOi8vJylcbiAgICAgICAgLnJlcGxhY2UoJ2h0dHBzOi8nLCAnaHR0cHM6Ly8nKVxuICBdO1xuXG4gIC8vIE9ubHkgam9pbiB0aGUgcXVlcnkgc3RyaW5nIGlmIGl0IGV4aXN0cyBzbyB3ZSBkb24ndCBoYXZlIHRyYWlsaW5nIGEgJz8nXG4gIC8vIG9uIGV2ZXJ5IHJlcXVlc3RcblxuICAvLyBIYW5kbGUgY2FzZSB3aGVyZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSA/IGluIHRoZSBVUkwuXG4gIHJldFNlZ3MucHVzaC5hcHBseShyZXRTZWdzLCBsYXN0U2Vncyk7XG5cbiAgcmV0dXJuIHJldFNlZ3Muam9pbignPycpXG59O1xuXG4vKipcbiAqIFJld3JpdGVzIG9yIHJlbW92ZXMgdGhlIGRvbWFpbiBvZiBhIGNvb2tpZSBoZWFkZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gSGVhZGVyXG4gKiBAcGFyYW0ge09iamVjdH0gQ29uZmlnLCBtYXBwaW5nIG9mIGRvbWFpbiB0byByZXdyaXR0ZW4gZG9tYWluLlxuICogICAgICAgICAgICAgICAgICcqJyBrZXkgdG8gbWF0Y2ggYW55IGRvbWFpbiwgbnVsbCB2YWx1ZSB0byByZW1vdmUgdGhlIGRvbWFpbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuY29tbW9uLnJld3JpdGVDb29raWVQcm9wZXJ0eSA9IGZ1bmN0aW9uIHJld3JpdGVDb29raWVQcm9wZXJ0eShoZWFkZXIsIGNvbmZpZywgcHJvcGVydHkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyKSkge1xuICAgIHJldHVybiBoZWFkZXIubWFwKGZ1bmN0aW9uIChoZWFkZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm4gcmV3cml0ZUNvb2tpZVByb3BlcnR5KGhlYWRlckVsZW1lbnQsIGNvbmZpZywgcHJvcGVydHkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBoZWFkZXIucmVwbGFjZShuZXcgUmVnRXhwKFwiKDtcXFxccypcIiArIHByb3BlcnR5ICsgXCI9KShbXjtdKylcIiwgJ2knKSwgZnVuY3Rpb24obWF0Y2gsIHByZWZpeCwgcHJldmlvdXNWYWx1ZSkge1xuICAgIHZhciBuZXdWYWx1ZTtcbiAgICBpZiAocHJldmlvdXNWYWx1ZSBpbiBjb25maWcpIHtcbiAgICAgIG5ld1ZhbHVlID0gY29uZmlnW3ByZXZpb3VzVmFsdWVdO1xuICAgIH0gZWxzZSBpZiAoJyonIGluIGNvbmZpZykge1xuICAgICAgbmV3VmFsdWUgPSBjb25maWdbJyonXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ubyBtYXRjaCwgcmV0dXJuIHByZXZpb3VzIHZhbHVlXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgLy9yZXBsYWNlIHZhbHVlXG4gICAgICByZXR1cm4gcHJlZml4ICsgbmV3VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vcmVtb3ZlIHZhbHVlXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQ2hlY2sgdGhlIGhvc3QgYW5kIHNlZSBpZiBpdCBwb3RlbnRpYWxseSBoYXMgYSBwb3J0IGluIGl0IChrZWVwIGl0IHNpbXBsZSlcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gV2hldGhlciB3ZSBoYXZlIG9uZSBvciBub3RcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFzUG9ydChob3N0KSB7XG4gIHJldHVybiAhIX5ob3N0LmluZGV4T2YoJzonKTtcbn07XG4iLCJ2YXIgdXJsICAgID0gcmVxdWlyZSgndXJsJyksXG4gICAgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cblxudmFyIHJlZGlyZWN0UmVnZXggPSAvXjIwMXwzMCgxfDJ8N3w4KSQvO1xuXG4vKiFcbiAqIEFycmF5IG9mIHBhc3Nlcy5cbiAqXG4gKiBBIGBwYXNzYCBpcyBqdXN0IGEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBgcmVxLCByZXMsIG9wdGlvbnNgXG4gKiBzbyB0aGF0IHlvdSBjYW4gZWFzaWx5IGFkZCBuZXcgY2hlY2tzIHdoaWxlIHN0aWxsIGtlZXBpbmcgdGhlIGJhc2VcbiAqIGZsZXhpYmxlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0geyAvLyA8LS1cblxuICAvKipcbiAgICogSWYgaXMgYSBIVFRQIDEuMCByZXF1ZXN0LCByZW1vdmUgY2h1bmsgaGVhZGVyc1xuICAgKlxuICAgKiBAcGFyYW0ge0NsaWVudFJlcXVlc3R9IFJlcSBSZXF1ZXN0IG9iamVjdFxuICAgKsKgQHBhcmFtIHtJbmNvbWluZ01lc3NhZ2V9IFJlcyBSZXNwb25zZSBvYmplY3RcbiAgICogQHBhcmFtIHtwcm94eVJlc3BvbnNlfSBSZXMgUmVzcG9uc2Ugb2JqZWN0IGZyb20gdGhlIHByb3h5IHJlcXVlc3RcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICByZW1vdmVDaHVua2VkOiBmdW5jdGlvbiByZW1vdmVDaHVua2VkKHJlcSwgcmVzLCBwcm94eVJlcykge1xuICAgIGlmIChyZXEuaHR0cFZlcnNpb24gPT09ICcxLjAnKSB7XG4gICAgICBkZWxldGUgcHJveHlSZXMuaGVhZGVyc1sndHJhbnNmZXItZW5jb2RpbmcnXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIGlzIGEgSFRUUCAxLjAgcmVxdWVzdCwgc2V0IHRoZSBjb3JyZWN0IGNvbm5lY3Rpb24gaGVhZGVyXG4gICAqIG9yIGlmIGNvbm5lY3Rpb24gaGVhZGVyIG5vdCBwcmVzZW50LCB0aGVuIHVzZSBga2VlcC1hbGl2ZWBcbiAgICpcbiAgICogQHBhcmFtIHtDbGllbnRSZXF1ZXN0fSBSZXEgUmVxdWVzdCBvYmplY3RcbiAgICrCoEBwYXJhbSB7SW5jb21pbmdNZXNzYWdlfSBSZXMgUmVzcG9uc2Ugb2JqZWN0XG4gICAqIEBwYXJhbSB7cHJveHlSZXNwb25zZX0gUmVzIFJlc3BvbnNlIG9iamVjdCBmcm9tIHRoZSBwcm94eSByZXF1ZXN0XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2V0Q29ubmVjdGlvbjogZnVuY3Rpb24gc2V0Q29ubmVjdGlvbihyZXEsIHJlcywgcHJveHlSZXMpIHtcbiAgICBpZiAocmVxLmh0dHBWZXJzaW9uID09PSAnMS4wJykge1xuICAgICAgcHJveHlSZXMuaGVhZGVycy5jb25uZWN0aW9uID0gcmVxLmhlYWRlcnMuY29ubmVjdGlvbiB8fCAnY2xvc2UnO1xuICAgIH0gZWxzZSBpZiAocmVxLmh0dHBWZXJzaW9uICE9PSAnMi4wJyAmJiAhcHJveHlSZXMuaGVhZGVycy5jb25uZWN0aW9uKSB7XG4gICAgICBwcm94eVJlcy5oZWFkZXJzLmNvbm5lY3Rpb24gPSByZXEuaGVhZGVycy5jb25uZWN0aW9uIHx8ICdrZWVwLWFsaXZlJztcbiAgICB9XG4gIH0sXG5cbiAgc2V0UmVkaXJlY3RIb3N0UmV3cml0ZTogZnVuY3Rpb24gc2V0UmVkaXJlY3RIb3N0UmV3cml0ZShyZXEsIHJlcywgcHJveHlSZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoKG9wdGlvbnMuaG9zdFJld3JpdGUgfHwgb3B0aW9ucy5hdXRvUmV3cml0ZSB8fCBvcHRpb25zLnByb3RvY29sUmV3cml0ZSlcbiAgICAgICAgJiYgcHJveHlSZXMuaGVhZGVyc1snbG9jYXRpb24nXVxuICAgICAgICAmJiByZWRpcmVjdFJlZ2V4LnRlc3QocHJveHlSZXMuc3RhdHVzQ29kZSkpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB1cmwucGFyc2Uob3B0aW9ucy50YXJnZXQpO1xuICAgICAgdmFyIHUgPSB1cmwucGFyc2UocHJveHlSZXMuaGVhZGVyc1snbG9jYXRpb24nXSk7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgcmVkaXJlY3RlZCBob3N0IG1hdGNoZXMgdGhlIHRhcmdldCBob3N0IGJlZm9yZSByZXdyaXRpbmdcbiAgICAgIGlmICh0YXJnZXQuaG9zdCAhPSB1Lmhvc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5ob3N0UmV3cml0ZSkge1xuICAgICAgICB1Lmhvc3QgPSBvcHRpb25zLmhvc3RSZXdyaXRlO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmF1dG9SZXdyaXRlKSB7XG4gICAgICAgIHUuaG9zdCA9IHJlcS5oZWFkZXJzWydob3N0J107XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wcm90b2NvbFJld3JpdGUpIHtcbiAgICAgICAgdS5wcm90b2NvbCA9IG9wdGlvbnMucHJvdG9jb2xSZXdyaXRlO1xuICAgICAgfVxuXG4gICAgICBwcm94eVJlcy5oZWFkZXJzWydsb2NhdGlvbiddID0gdS5mb3JtYXQoKTtcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBDb3B5IGhlYWRlcnMgZnJvbSBwcm94eVJlc3BvbnNlIHRvIHJlc3BvbnNlXG4gICAqIHNldCBlYWNoIGhlYWRlciBpbiByZXNwb25zZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpZW50UmVxdWVzdH0gUmVxIFJlcXVlc3Qgb2JqZWN0XG4gICAqwqBAcGFyYW0ge0luY29taW5nTWVzc2FnZX0gUmVzIFJlc3BvbnNlIG9iamVjdFxuICAgKiBAcGFyYW0ge3Byb3h5UmVzcG9uc2V9IFJlcyBSZXNwb25zZSBvYmplY3QgZnJvbSB0aGUgcHJveHkgcmVxdWVzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gT3B0aW9ucyBvcHRpb25zLmNvb2tpZURvbWFpblJld3JpdGU6IENvbmZpZyB0byByZXdyaXRlIGNvb2tpZSBkb21haW5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB3cml0ZUhlYWRlcnM6IGZ1bmN0aW9uIHdyaXRlSGVhZGVycyhyZXEsIHJlcywgcHJveHlSZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgcmV3cml0ZUNvb2tpZURvbWFpbkNvbmZpZyA9IG9wdGlvbnMuY29va2llRG9tYWluUmV3cml0ZSxcbiAgICAgICAgcmV3cml0ZUNvb2tpZVBhdGhDb25maWcgPSBvcHRpb25zLmNvb2tpZVBhdGhSZXdyaXRlLFxuICAgICAgICBwcmVzZXJ2ZUhlYWRlcktleUNhc2UgPSBvcHRpb25zLnByZXNlcnZlSGVhZGVyS2V5Q2FzZSxcbiAgICAgICAgcmF3SGVhZGVyS2V5TWFwLFxuICAgICAgICBzZXRIZWFkZXIgPSBmdW5jdGlvbihrZXksIGhlYWRlcikge1xuICAgICAgICAgIGlmIChoZWFkZXIgPT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKHJld3JpdGVDb29raWVEb21haW5Db25maWcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICAgICAgaGVhZGVyID0gY29tbW9uLnJld3JpdGVDb29raWVQcm9wZXJ0eShoZWFkZXIsIHJld3JpdGVDb29raWVEb21haW5Db25maWcsICdkb21haW4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJld3JpdGVDb29raWVQYXRoQ29uZmlnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgICAgIGhlYWRlciA9IGNvbW1vbi5yZXdyaXRlQ29va2llUHJvcGVydHkoaGVhZGVyLCByZXdyaXRlQ29va2llUGF0aENvbmZpZywgJ3BhdGgnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLnNldEhlYWRlcihTdHJpbmcoa2V5KS50cmltKCksIGhlYWRlcik7XG4gICAgICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHJld3JpdGVDb29raWVEb21haW5Db25maWcgPT09ICdzdHJpbmcnKSB7IC8vYWxzbyB0ZXN0IGZvciAnJ1xuICAgICAgcmV3cml0ZUNvb2tpZURvbWFpbkNvbmZpZyA9IHsgJyonOiByZXdyaXRlQ29va2llRG9tYWluQ29uZmlnIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXdyaXRlQ29va2llUGF0aENvbmZpZyA9PT0gJ3N0cmluZycpIHsgLy9hbHNvIHRlc3QgZm9yICcnXG4gICAgICByZXdyaXRlQ29va2llUGF0aENvbmZpZyA9IHsgJyonOiByZXdyaXRlQ29va2llUGF0aENvbmZpZyB9O1xuICAgIH1cblxuICAgIC8vIG1lc3NhZ2UucmF3SGVhZGVycyBpcyBhZGRlZCBpbjogdjAuMTEuNlxuICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9yYXdoZWFkZXJzXG4gICAgaWYgKHByZXNlcnZlSGVhZGVyS2V5Q2FzZSAmJiBwcm94eVJlcy5yYXdIZWFkZXJzICE9IHVuZGVmaW5lZCkge1xuICAgICAgcmF3SGVhZGVyS2V5TWFwID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3h5UmVzLnJhd0hlYWRlcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3h5UmVzLnJhd0hlYWRlcnNbaV07XG4gICAgICAgIHJhd0hlYWRlcktleU1hcFtrZXkudG9Mb3dlckNhc2UoKV0gPSBrZXk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMocHJveHlSZXMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBoZWFkZXIgPSBwcm94eVJlcy5oZWFkZXJzW2tleV07XG4gICAgICBpZiAocHJlc2VydmVIZWFkZXJLZXlDYXNlICYmIHJhd0hlYWRlcktleU1hcCkge1xuICAgICAgICBrZXkgPSByYXdIZWFkZXJLZXlNYXBba2V5XSB8fCBrZXk7XG4gICAgICB9XG4gICAgICBzZXRIZWFkZXIoa2V5LCBoZWFkZXIpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0YXR1c0NvZGUgZnJvbSB0aGUgcHJveHlSZXNwb25zZVxuICAgKlxuICAgKiBAcGFyYW0ge0NsaWVudFJlcXVlc3R9IFJlcSBSZXF1ZXN0IG9iamVjdFxuICAgKsKgQHBhcmFtIHtJbmNvbWluZ01lc3NhZ2V9IFJlcyBSZXNwb25zZSBvYmplY3RcbiAgICogQHBhcmFtIHtwcm94eVJlc3BvbnNlfSBSZXMgUmVzcG9uc2Ugb2JqZWN0IGZyb20gdGhlIHByb3h5IHJlcXVlc3RcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB3cml0ZVN0YXR1c0NvZGU6IGZ1bmN0aW9uIHdyaXRlU3RhdHVzQ29kZShyZXEsIHJlcywgcHJveHlSZXMpIHtcbiAgICAvLyBGcm9tIE5vZGUuanMgZG9jczogcmVzcG9uc2Uud3JpdGVIZWFkKHN0YXR1c0NvZGVbLCBzdGF0dXNNZXNzYWdlXVssIGhlYWRlcnNdKVxuICAgIGlmKHByb3h5UmVzLnN0YXR1c01lc3NhZ2UpIHtcbiAgICAgIHJlcy5zdGF0dXNDb2RlID0gcHJveHlSZXMuc3RhdHVzQ29kZTtcbiAgICAgIHJlcy5zdGF0dXNNZXNzYWdlID0gcHJveHlSZXMuc3RhdHVzTWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnN0YXR1c0NvZGUgPSBwcm94eVJlcy5zdGF0dXNDb2RlO1xuICAgIH1cbiAgfVxuXG59O1xuIiwidmFyIGRlYnVnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkZWJ1Zykge1xuICAgIHRyeSB7XG4gICAgICAvKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IG9mZiAqL1xuICAgICAgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJmb2xsb3ctcmVkaXJlY3RzXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgLyogKi8gfVxuICAgIGlmICh0eXBlb2YgZGVidWcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZGVidWcgPSBmdW5jdGlvbiAoKSB7IC8qICovIH07XG4gICAgfVxuICB9XG4gIGRlYnVnLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuIiwidmFyIHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG52YXIgVVJMID0gdXJsLlVSTDtcbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG52YXIgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKFwic3RyZWFtXCIpLldyaXRhYmxlO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG52YXIgZGVidWcgPSByZXF1aXJlKFwiLi9kZWJ1Z1wiKTtcblxuLy8gQ3JlYXRlIGhhbmRsZXJzIHRoYXQgcGFzcyBldmVudHMgZnJvbSBuYXRpdmUgcmVxdWVzdHNcbnZhciBldmVudHMgPSBbXCJhYm9ydFwiLCBcImFib3J0ZWRcIiwgXCJjb25uZWN0XCIsIFwiZXJyb3JcIiwgXCJzb2NrZXRcIiwgXCJ0aW1lb3V0XCJdO1xudmFyIGV2ZW50SGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50SGFuZGxlcnNbZXZlbnRdID0gZnVuY3Rpb24gKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB0aGlzLl9yZWRpcmVjdGFibGUuZW1pdChldmVudCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIH07XG59KTtcblxudmFyIEludmFsaWRVcmxFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfSU5WQUxJRF9VUkxcIixcbiAgXCJJbnZhbGlkIFVSTFwiLFxuICBUeXBlRXJyb3Jcbik7XG4vLyBFcnJvciB0eXBlcyB3aXRoIGNvZGVzXG52YXIgUmVkaXJlY3Rpb25FcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfUkVESVJFQ1RJT05fRkFJTFVSRVwiLFxuICBcIlJlZGlyZWN0ZWQgcmVxdWVzdCBmYWlsZWRcIlxuKTtcbnZhciBUb29NYW55UmVkaXJlY3RzRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUU1wiLFxuICBcIk1heGltdW0gbnVtYmVyIG9mIHJlZGlyZWN0cyBleGNlZWRlZFwiXG4pO1xudmFyIE1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9NQVhfQk9EWV9MRU5HVEhfRVhDRUVERURcIixcbiAgXCJSZXF1ZXN0IGJvZHkgbGFyZ2VyIHRoYW4gbWF4Qm9keUxlbmd0aCBsaW1pdFwiXG4pO1xudmFyIFdyaXRlQWZ0ZXJFbmRFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORFwiLFxuICBcIndyaXRlIGFmdGVyIGVuZFwiXG4pO1xuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxudmFyIGRlc3Ryb3kgPSBXcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSB8fCBub29wO1xuXG4vLyBBbiBIVFRQKFMpIHJlcXVlc3QgdGhhdCBjYW4gYmUgcmVkaXJlY3RlZFxuZnVuY3Rpb24gUmVkaXJlY3RhYmxlUmVxdWVzdChvcHRpb25zLCByZXNwb25zZUNhbGxiYWNrKSB7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJlcXVlc3RcbiAgV3JpdGFibGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5fc2FuaXRpemVPcHRpb25zKG9wdGlvbnMpO1xuICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5fZW5kaW5nID0gZmFsc2U7XG4gIHRoaXMuX3JlZGlyZWN0Q291bnQgPSAwO1xuICB0aGlzLl9yZWRpcmVjdHMgPSBbXTtcbiAgdGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggPSAwO1xuICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcblxuICAvLyBBdHRhY2ggYSBjYWxsYmFjayBpZiBwYXNzZWRcbiAgaWYgKHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICB0aGlzLm9uKFwicmVzcG9uc2VcIiwgcmVzcG9uc2VDYWxsYmFjayk7XG4gIH1cblxuICAvLyBSZWFjdCB0byByZXNwb25zZXMgb2YgbmF0aXZlIHJlcXVlc3RzXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fb25OYXRpdmVSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHNlbGYuX3Byb2Nlc3NSZXNwb25zZShyZXNwb25zZSk7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSB0aGUgZmlyc3QgcmVxdWVzdFxuICB0aGlzLl9wZXJmb3JtUmVxdWVzdCgpO1xufVxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICBkZXN0cm95UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCk7XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LmFib3J0KCk7XG4gIHRoaXMuZW1pdChcImFib3J0XCIpO1xufTtcblxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICBkZXN0cm95UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCwgZXJyb3IpO1xuICBkZXN0cm95LmNhbGwodGhpcywgZXJyb3IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIFdyaXRlcyBidWZmZXJlZCBkYXRhIHRvIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgLy8gV3JpdGluZyBpcyBub3QgYWxsb3dlZCBpZiBlbmQgaGFzIGJlZW4gY2FsbGVkXG4gIGlmICh0aGlzLl9lbmRpbmcpIHtcbiAgICB0aHJvdyBuZXcgV3JpdGVBZnRlckVuZEVycm9yKCk7XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBpbnB1dCBhbmQgc2hpZnQgcGFyYW1ldGVycyBpZiBuZWNlc3NhcnlcbiAgaWYgKCFpc1N0cmluZyhkYXRhKSAmJiAhaXNCdWZmZXIoZGF0YSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGF0YSBzaG91bGQgYmUgYSBzdHJpbmcsIEJ1ZmZlciBvciBVaW50OEFycmF5XCIpO1xuICB9XG4gIGlmIChpc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNhbGxiYWNrID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgLy8gSWdub3JlIGVtcHR5IGJ1ZmZlcnMsIHNpbmNlIHdyaXRpbmcgdGhlbSBkb2Vzbid0IGludm9rZSB0aGUgY2FsbGJhY2tcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy8yMjA2NlxuICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICAvLyBPbmx5IHdyaXRlIHdoZW4gd2UgZG9uJ3QgZXhjZWVkIHRoZSBtYXhpbXVtIGJvZHkgbGVuZ3RoXG4gIGlmICh0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCArIGRhdGEubGVuZ3RoIDw9IHRoaXMuX29wdGlvbnMubWF4Qm9keUxlbmd0aCkge1xuICAgIHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoICs9IGRhdGEubGVuZ3RoO1xuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycy5wdXNoKHsgZGF0YTogZGF0YSwgZW5jb2Rpbmc6IGVuY29kaW5nIH0pO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LndyaXRlKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gIH1cbiAgLy8gRXJyb3Igd2hlbiB3ZSBleGNlZWQgdGhlIG1heGltdW0gYm9keSBsZW5ndGhcbiAgZWxzZSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IE1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yKCkpO1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxufTtcblxuLy8gRW5kcyB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAvLyBTaGlmdCBwYXJhbWV0ZXJzIGlmIG5lY2Vzc2FyeVxuICBpZiAoaXNGdW5jdGlvbihkYXRhKSkge1xuICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICBkYXRhID0gZW5jb2RpbmcgPSBudWxsO1xuICB9XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW5jb2RpbmcpKSB7XG4gICAgY2FsbGJhY2sgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICAvLyBXcml0ZSBkYXRhIGlmIG5lZWRlZCBhbmQgZW5kXG4gIGlmICghZGF0YSkge1xuICAgIHRoaXMuX2VuZGVkID0gdGhpcy5fZW5kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9jdXJyZW50UmVxdWVzdC5lbmQobnVsbCwgbnVsbCwgY2FsbGJhY2spO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3VycmVudFJlcXVlc3QgPSB0aGlzLl9jdXJyZW50UmVxdWVzdDtcbiAgICB0aGlzLndyaXRlKGRhdGEsIGVuY29kaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLl9lbmRlZCA9IHRydWU7XG4gICAgICBjdXJyZW50UmVxdWVzdC5lbmQobnVsbCwgbnVsbCwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHRoaXMuX2VuZGluZyA9IHRydWU7XG4gIH1cbn07XG5cbi8vIFNldHMgYSBoZWFkZXIgdmFsdWUgb24gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9vcHRpb25zLmhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgdGhpcy5fY3VycmVudFJlcXVlc3Quc2V0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbn07XG5cbi8vIENsZWFycyBhIGhlYWRlciB2YWx1ZSBvbiB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMuX29wdGlvbnMuaGVhZGVyc1tuYW1lXTtcbiAgdGhpcy5fY3VycmVudFJlcXVlc3QucmVtb3ZlSGVhZGVyKG5hbWUpO1xufTtcblxuLy8gR2xvYmFsIHRpbWVvdXQgZm9yIGFsbCB1bmRlcmx5aW5nIHJlcXVlc3RzXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKG1zZWNzLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gRGVzdHJveXMgdGhlIHNvY2tldCBvbiB0aW1lb3V0XG4gIGZ1bmN0aW9uIGRlc3Ryb3lPblRpbWVvdXQoc29ja2V0KSB7XG4gICAgc29ja2V0LnNldFRpbWVvdXQobXNlY3MpO1xuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcihcInRpbWVvdXRcIiwgc29ja2V0LmRlc3Ryb3kpO1xuICAgIHNvY2tldC5hZGRMaXN0ZW5lcihcInRpbWVvdXRcIiwgc29ja2V0LmRlc3Ryb3kpO1xuICB9XG5cbiAgLy8gU2V0cyB1cCBhIHRpbWVyIHRvIHRyaWdnZXIgYSB0aW1lb3V0IGV2ZW50XG4gIGZ1bmN0aW9uIHN0YXJ0VGltZXIoc29ja2V0KSB7XG4gICAgaWYgKHNlbGYuX3RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl90aW1lb3V0KTtcbiAgICB9XG4gICAgc2VsZi5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5lbWl0KFwidGltZW91dFwiKTtcbiAgICAgIGNsZWFyVGltZXIoKTtcbiAgICB9LCBtc2Vjcyk7XG4gICAgZGVzdHJveU9uVGltZW91dChzb2NrZXQpO1xuICB9XG5cbiAgLy8gU3RvcHMgYSB0aW1lb3V0IGZyb20gdHJpZ2dlcmluZ1xuICBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgIC8vIENsZWFyIHRoZSB0aW1lb3V0XG4gICAgaWYgKHNlbGYuX3RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl90aW1lb3V0KTtcbiAgICAgIHNlbGYuX3RpbWVvdXQgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIGFsbCBhdHRhY2hlZCBsaXN0ZW5lcnNcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwiYWJvcnRcIiwgY2xlYXJUaW1lcik7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIGNsZWFyVGltZXIpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJyZXNwb25zZVwiLCBjbGVhclRpbWVyKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgY2xlYXJUaW1lcik7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGlmICghc2VsZi5zb2NrZXQpIHtcbiAgICAgIHNlbGYuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKFwic29ja2V0XCIsIHN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEF0dGFjaCBjYWxsYmFjayBpZiBwYXNzZWRcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbihcInRpbWVvdXRcIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU3RhcnQgdGhlIHRpbWVyIGlmIG9yIHdoZW4gdGhlIHNvY2tldCBpcyBvcGVuZWRcbiAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgc3RhcnRUaW1lcih0aGlzLnNvY2tldCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3Qub25jZShcInNvY2tldFwiLCBzdGFydFRpbWVyKTtcbiAgfVxuXG4gIC8vIENsZWFuIHVwIG9uIGV2ZW50c1xuICB0aGlzLm9uKFwic29ja2V0XCIsIGRlc3Ryb3lPblRpbWVvdXQpO1xuICB0aGlzLm9uKFwiYWJvcnRcIiwgY2xlYXJUaW1lcik7XG4gIHRoaXMub24oXCJlcnJvclwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbihcInJlc3BvbnNlXCIsIGNsZWFyVGltZXIpO1xuICB0aGlzLm9uKFwiY2xvc2VcIiwgY2xlYXJUaW1lcik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBQcm94eSBhbGwgb3RoZXIgcHVibGljIENsaWVudFJlcXVlc3QgbWV0aG9kc1xuW1xuICBcImZsdXNoSGVhZGVyc1wiLCBcImdldEhlYWRlclwiLFxuICBcInNldE5vRGVsYXlcIiwgXCJzZXRTb2NrZXRLZWVwQWxpdmVcIixcbl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIFJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50UmVxdWVzdFttZXRob2RdKGEsIGIpO1xuICB9O1xufSk7XG5cbi8vIFByb3h5IGFsbCBwdWJsaWMgQ2xpZW50UmVxdWVzdCBwcm9wZXJ0aWVzXG5bXCJhYm9ydGVkXCIsIFwiY29ubmVjdGlvblwiLCBcInNvY2tldFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUsIHByb3BlcnR5LCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jdXJyZW50UmVxdWVzdFtwcm9wZXJ0eV07IH0sXG4gIH0pO1xufSk7XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9zYW5pdGl6ZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAvLyBFbnN1cmUgaGVhZGVycyBhcmUgYWx3YXlzIHByZXNlbnRcbiAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIC8vIFNpbmNlIGh0dHAucmVxdWVzdCB0cmVhdHMgaG9zdCBhcyBhbiBhbGlhcyBvZiBob3N0bmFtZSxcbiAgLy8gYnV0IHRoZSB1cmwgbW9kdWxlIGludGVycHJldHMgaG9zdCBhcyBob3N0bmFtZSBwbHVzIHBvcnQsXG4gIC8vIGVsaW1pbmF0ZSB0aGUgaG9zdCBwcm9wZXJ0eSB0byBhdm9pZCBjb25mdXNpb24uXG4gIGlmIChvcHRpb25zLmhvc3QpIHtcbiAgICAvLyBVc2UgaG9zdG5hbWUgaWYgc2V0LCBiZWNhdXNlIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgaWYgKCFvcHRpb25zLmhvc3RuYW1lKSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gb3B0aW9ucy5ob3N0O1xuICAgIH1cbiAgICBkZWxldGUgb3B0aW9ucy5ob3N0O1xuICB9XG5cbiAgLy8gQ29tcGxldGUgdGhlIFVSTCBvYmplY3Qgd2hlbiBuZWNlc3NhcnlcbiAgaWYgKCFvcHRpb25zLnBhdGhuYW1lICYmIG9wdGlvbnMucGF0aCkge1xuICAgIHZhciBzZWFyY2hQb3MgPSBvcHRpb25zLnBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaFBvcyA8IDApIHtcbiAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aC5zdWJzdHJpbmcoMCwgc2VhcmNoUG9zKTtcbiAgICAgIG9wdGlvbnMuc2VhcmNoID0gb3B0aW9ucy5wYXRoLnN1YnN0cmluZyhzZWFyY2hQb3MpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBFeGVjdXRlcyB0aGUgbmV4dCBuYXRpdmUgcmVxdWVzdCAoaW5pdGlhbCBvciByZWRpcmVjdClcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9wZXJmb3JtUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gTG9hZCB0aGUgbmF0aXZlIHByb3RvY29sXG4gIHZhciBwcm90b2NvbCA9IHRoaXMuX29wdGlvbnMucHJvdG9jb2w7XG4gIHZhciBuYXRpdmVQcm90b2NvbCA9IHRoaXMuX29wdGlvbnMubmF0aXZlUHJvdG9jb2xzW3Byb3RvY29sXTtcbiAgaWYgKCFuYXRpdmVQcm90b2NvbCkge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBUeXBlRXJyb3IoXCJVbnN1cHBvcnRlZCBwcm90b2NvbCBcIiArIHByb3RvY29sKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgc3BlY2lmaWVkLCB1c2UgdGhlIGFnZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3RvY29sXG4gIC8vIChIVFRQIGFuZCBIVFRQUyB1c2UgZGlmZmVyZW50IHR5cGVzIG9mIGFnZW50cylcbiAgaWYgKHRoaXMuX29wdGlvbnMuYWdlbnRzKSB7XG4gICAgdmFyIHNjaGVtZSA9IHByb3RvY29sLnNsaWNlKDAsIC0xKTtcbiAgICB0aGlzLl9vcHRpb25zLmFnZW50ID0gdGhpcy5fb3B0aW9ucy5hZ2VudHNbc2NoZW1lXTtcbiAgfVxuXG4gIC8vIENyZWF0ZSB0aGUgbmF0aXZlIHJlcXVlc3QgYW5kIHNldCB1cCBpdHMgZXZlbnQgaGFuZGxlcnNcbiAgdmFyIHJlcXVlc3QgPSB0aGlzLl9jdXJyZW50UmVxdWVzdCA9XG4gICAgICAgIG5hdGl2ZVByb3RvY29sLnJlcXVlc3QodGhpcy5fb3B0aW9ucywgdGhpcy5fb25OYXRpdmVSZXNwb25zZSk7XG4gIHJlcXVlc3QuX3JlZGlyZWN0YWJsZSA9IHRoaXM7XG4gIGZvciAodmFyIGV2ZW50IG9mIGV2ZW50cykge1xuICAgIHJlcXVlc3Qub24oZXZlbnQsIGV2ZW50SGFuZGxlcnNbZXZlbnRdKTtcbiAgfVxuXG4gIC8vIFJGQzcyMzDCpzUuMy4xOiBXaGVuIG1ha2luZyBhIHJlcXVlc3QgZGlyZWN0bHkgdG8gYW4gb3JpZ2luIHNlcnZlciwgW+KApl1cbiAgLy8gYSBjbGllbnQgTVVTVCBzZW5kIG9ubHkgdGhlIGFic29sdXRlIHBhdGggW+KApl0gYXMgdGhlIHJlcXVlc3QtdGFyZ2V0LlxuICB0aGlzLl9jdXJyZW50VXJsID0gL15cXC8vLnRlc3QodGhpcy5fb3B0aW9ucy5wYXRoKSA/XG4gICAgdXJsLmZvcm1hdCh0aGlzLl9vcHRpb25zKSA6XG4gICAgLy8gV2hlbiBtYWtpbmcgYSByZXF1ZXN0IHRvIGEgcHJveHksIFvigKZdXG4gICAgLy8gYSBjbGllbnQgTVVTVCBzZW5kIHRoZSB0YXJnZXQgVVJJIGluIGFic29sdXRlLWZvcm0gW+KApl0uXG4gICAgdGhpcy5fb3B0aW9ucy5wYXRoO1xuXG4gIC8vIEVuZCBhIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICAvLyAoVGhlIGZpcnN0IHJlcXVlc3QgbXVzdCBiZSBlbmRlZCBleHBsaWNpdGx5IHdpdGggUmVkaXJlY3RhYmxlUmVxdWVzdCNlbmQpXG4gIGlmICh0aGlzLl9pc1JlZGlyZWN0KSB7XG4gICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgZW50aXR5IGFuZCBlbmRcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBidWZmZXJzID0gdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzO1xuICAgIChmdW5jdGlvbiB3cml0ZU5leHQoZXJyb3IpIHtcbiAgICAgIC8vIE9ubHkgd3JpdGUgaWYgdGhpcyByZXF1ZXN0IGhhcyBub3QgYmVlbiByZWRpcmVjdGVkIHlldFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChyZXF1ZXN0ID09PSBzZWxmLl9jdXJyZW50UmVxdWVzdCkge1xuICAgICAgICAvLyBSZXBvcnQgYW55IHdyaXRlIGVycm9yc1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdyaXRlIHRoZSBuZXh0IGJ1ZmZlciBpZiB0aGVyZSBhcmUgc3RpbGwgbGVmdFxuICAgICAgICBlbHNlIGlmIChpIDwgYnVmZmVycy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpKytdO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgaWYgKCFyZXF1ZXN0LmZpbmlzaGVkKSB7XG4gICAgICAgICAgICByZXF1ZXN0LndyaXRlKGJ1ZmZlci5kYXRhLCBidWZmZXIuZW5jb2RpbmcsIHdyaXRlTmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVuZCB0aGUgcmVxdWVzdCBpZiBgZW5kYCBoYXMgYmVlbiBjYWxsZWQgb24gdXNcbiAgICAgICAgZWxzZSBpZiAoc2VsZi5fZW5kZWQpIHtcbiAgICAgICAgICByZXF1ZXN0LmVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSgpKTtcbiAgfVxufTtcblxuLy8gUHJvY2Vzc2VzIGEgcmVzcG9uc2UgZnJvbSB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3Byb2Nlc3NSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAvLyBTdG9yZSB0aGUgcmVkaXJlY3RlZCByZXNwb25zZVxuICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gIGlmICh0aGlzLl9vcHRpb25zLnRyYWNrUmVkaXJlY3RzKSB7XG4gICAgdGhpcy5fcmVkaXJlY3RzLnB1c2goe1xuICAgICAgdXJsOiB0aGlzLl9jdXJyZW50VXJsLFxuICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgfSk7XG4gIH1cblxuICAvLyBSRkM3MjMxwqc2LjQ6IFRoZSAzeHggKFJlZGlyZWN0aW9uKSBjbGFzcyBvZiBzdGF0dXMgY29kZSBpbmRpY2F0ZXNcbiAgLy8gdGhhdCBmdXJ0aGVyIGFjdGlvbiBuZWVkcyB0byBiZSB0YWtlbiBieSB0aGUgdXNlciBhZ2VudCBpbiBvcmRlciB0b1xuICAvLyBmdWxmaWxsIHRoZSByZXF1ZXN0LiBJZiBhIExvY2F0aW9uIGhlYWRlciBmaWVsZCBpcyBwcm92aWRlZCxcbiAgLy8gdGhlIHVzZXIgYWdlbnQgTUFZIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3QgaXRzIHJlcXVlc3QgdG8gdGhlIFVSSVxuICAvLyByZWZlcmVuY2VkIGJ5IHRoZSBMb2NhdGlvbiBmaWVsZCB2YWx1ZSxcbiAgLy8gZXZlbiBpZiB0aGUgc3BlY2lmaWMgc3RhdHVzIGNvZGUgaXMgbm90IHVuZGVyc3Rvb2QuXG5cbiAgLy8gSWYgdGhlIHJlc3BvbnNlIGlzIG5vdCBhIHJlZGlyZWN0OyByZXR1cm4gaXQgYXMtaXNcbiAgdmFyIGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbjtcbiAgaWYgKCFsb2NhdGlvbiB8fCB0aGlzLl9vcHRpb25zLmZvbGxvd1JlZGlyZWN0cyA9PT0gZmFsc2UgfHxcbiAgICAgIHN0YXR1c0NvZGUgPCAzMDAgfHwgc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICByZXNwb25zZS5yZXNwb25zZVVybCA9IHRoaXMuX2N1cnJlbnRVcmw7XG4gICAgcmVzcG9uc2UucmVkaXJlY3RzID0gdGhpcy5fcmVkaXJlY3RzO1xuICAgIHRoaXMuZW1pdChcInJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcblxuICAgIC8vIENsZWFuIHVwXG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIHNvIGFib3J0IHRoZSBjdXJyZW50IHJlcXVlc3RcbiAgZGVzdHJveVJlcXVlc3QodGhpcy5fY3VycmVudFJlcXVlc3QpO1xuICAvLyBEaXNjYXJkIHRoZSByZW1haW5kZXIgb2YgdGhlIHJlc3BvbnNlIHRvIGF2b2lkIHdhaXRpbmcgZm9yIGRhdGFcbiAgcmVzcG9uc2UuZGVzdHJveSgpO1xuXG4gIC8vIFJGQzcyMzHCpzYuNDogQSBjbGllbnQgU0hPVUxEIGRldGVjdCBhbmQgaW50ZXJ2ZW5lXG4gIC8vIGluIGN5Y2xpY2FsIHJlZGlyZWN0aW9ucyAoaS5lLiwgXCJpbmZpbml0ZVwiIHJlZGlyZWN0aW9uIGxvb3BzKS5cbiAgaWYgKCsrdGhpcy5fcmVkaXJlY3RDb3VudCA+IHRoaXMuX29wdGlvbnMubWF4UmVkaXJlY3RzKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IFRvb01hbnlSZWRpcmVjdHNFcnJvcigpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdG9yZSB0aGUgcmVxdWVzdCBoZWFkZXJzIGlmIGFwcGxpY2FibGVcbiAgdmFyIHJlcXVlc3RIZWFkZXJzO1xuICB2YXIgYmVmb3JlUmVkaXJlY3QgPSB0aGlzLl9vcHRpb25zLmJlZm9yZVJlZGlyZWN0O1xuICBpZiAoYmVmb3JlUmVkaXJlY3QpIHtcbiAgICByZXF1ZXN0SGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgLy8gVGhlIEhvc3QgaGVhZGVyIHdhcyBzZXQgYnkgbmF0aXZlUHJvdG9jb2wucmVxdWVzdFxuICAgICAgSG9zdDogcmVzcG9uc2UucmVxLmdldEhlYWRlcihcImhvc3RcIiksXG4gICAgfSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIC8vIFJGQzcyMzHCpzYuNDogQXV0b21hdGljIHJlZGlyZWN0aW9uIG5lZWRzIHRvIGRvbmUgd2l0aFxuICAvLyBjYXJlIGZvciBtZXRob2RzIG5vdCBrbm93biB0byBiZSBzYWZlLCBb4oCmXVxuICAvLyBSRkM3MjMxwqc2LjQuMuKAkzM6IEZvciBoaXN0b3JpY2FsIHJlYXNvbnMsIGEgdXNlciBhZ2VudCBNQVkgY2hhbmdlXG4gIC8vIHRoZSByZXF1ZXN0IG1ldGhvZCBmcm9tIFBPU1QgdG8gR0VUIGZvciB0aGUgc3Vic2VxdWVudCByZXF1ZXN0LlxuICB2YXIgbWV0aG9kID0gdGhpcy5fb3B0aW9ucy5tZXRob2Q7XG4gIGlmICgoc3RhdHVzQ29kZSA9PT0gMzAxIHx8IHN0YXR1c0NvZGUgPT09IDMwMikgJiYgdGhpcy5fb3B0aW9ucy5tZXRob2QgPT09IFwiUE9TVFwiIHx8XG4gICAgICAvLyBSRkM3MjMxwqc2LjQuNDogVGhlIDMwMyAoU2VlIE90aGVyKSBzdGF0dXMgY29kZSBpbmRpY2F0ZXMgdGhhdFxuICAgICAgLy8gdGhlIHNlcnZlciBpcyByZWRpcmVjdGluZyB0aGUgdXNlciBhZ2VudCB0byBhIGRpZmZlcmVudCByZXNvdXJjZSBb4oCmXVxuICAgICAgLy8gQSB1c2VyIGFnZW50IGNhbiBwZXJmb3JtIGEgcmV0cmlldmFsIHJlcXVlc3QgdGFyZ2V0aW5nIHRoYXQgVVJJXG4gICAgICAvLyAoYSBHRVQgb3IgSEVBRCByZXF1ZXN0IGlmIHVzaW5nIEhUVFApIFvigKZdXG4gICAgICAoc3RhdHVzQ29kZSA9PT0gMzAzKSAmJiAhL14oPzpHRVR8SEVBRCkkLy50ZXN0KHRoaXMuX29wdGlvbnMubWV0aG9kKSkge1xuICAgIHRoaXMuX29wdGlvbnMubWV0aG9kID0gXCJHRVRcIjtcbiAgICAvLyBEcm9wIGEgcG9zc2libGUgZW50aXR5IGFuZCBoZWFkZXJzIHJlbGF0ZWQgdG8gaXRcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcbiAgICByZW1vdmVNYXRjaGluZ0hlYWRlcnMoL15jb250ZW50LS9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gRHJvcCB0aGUgSG9zdCBoZWFkZXIsIGFzIHRoZSByZWRpcmVjdCBtaWdodCBsZWFkIHRvIGEgZGlmZmVyZW50IGhvc3RcbiAgdmFyIGN1cnJlbnRIb3N0SGVhZGVyID0gcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKC9eaG9zdCQvaSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcblxuICAvLyBJZiB0aGUgcmVkaXJlY3QgaXMgcmVsYXRpdmUsIGNhcnJ5IG92ZXIgdGhlIGhvc3Qgb2YgdGhlIGxhc3QgcmVxdWVzdFxuICB2YXIgY3VycmVudFVybFBhcnRzID0gdXJsLnBhcnNlKHRoaXMuX2N1cnJlbnRVcmwpO1xuICB2YXIgY3VycmVudEhvc3QgPSBjdXJyZW50SG9zdEhlYWRlciB8fCBjdXJyZW50VXJsUGFydHMuaG9zdDtcbiAgdmFyIGN1cnJlbnRVcmwgPSAvXlxcdys6Ly50ZXN0KGxvY2F0aW9uKSA/IHRoaXMuX2N1cnJlbnRVcmwgOlxuICAgIHVybC5mb3JtYXQoT2JqZWN0LmFzc2lnbihjdXJyZW50VXJsUGFydHMsIHsgaG9zdDogY3VycmVudEhvc3QgfSkpO1xuXG4gIC8vIERldGVybWluZSB0aGUgVVJMIG9mIHRoZSByZWRpcmVjdGlvblxuICB2YXIgcmVkaXJlY3RVcmw7XG4gIHRyeSB7XG4gICAgcmVkaXJlY3RVcmwgPSB1cmwucmVzb2x2ZShjdXJyZW50VXJsLCBsb2NhdGlvbik7XG4gIH1cbiAgY2F0Y2ggKGNhdXNlKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IFJlZGlyZWN0aW9uRXJyb3IoeyBjYXVzZTogY2F1c2UgfSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENyZWF0ZSB0aGUgcmVkaXJlY3RlZCByZXF1ZXN0XG4gIGRlYnVnKFwicmVkaXJlY3RpbmcgdG9cIiwgcmVkaXJlY3RVcmwpO1xuICB0aGlzLl9pc1JlZGlyZWN0ID0gdHJ1ZTtcbiAgdmFyIHJlZGlyZWN0VXJsUGFydHMgPSB1cmwucGFyc2UocmVkaXJlY3RVcmwpO1xuICBPYmplY3QuYXNzaWduKHRoaXMuX29wdGlvbnMsIHJlZGlyZWN0VXJsUGFydHMpO1xuXG4gIC8vIERyb3AgY29uZmlkZW50aWFsIGhlYWRlcnMgd2hlbiByZWRpcmVjdGluZyB0byBhIGxlc3Mgc2VjdXJlIHByb3RvY29sXG4gIC8vIG9yIHRvIGEgZGlmZmVyZW50IGRvbWFpbiB0aGF0IGlzIG5vdCBhIHN1cGVyZG9tYWluXG4gIGlmIChyZWRpcmVjdFVybFBhcnRzLnByb3RvY29sICE9PSBjdXJyZW50VXJsUGFydHMucHJvdG9jb2wgJiZcbiAgICAgcmVkaXJlY3RVcmxQYXJ0cy5wcm90b2NvbCAhPT0gXCJodHRwczpcIiB8fFxuICAgICByZWRpcmVjdFVybFBhcnRzLmhvc3QgIT09IGN1cnJlbnRIb3N0ICYmXG4gICAgICFpc1N1YmRvbWFpbihyZWRpcmVjdFVybFBhcnRzLmhvc3QsIGN1cnJlbnRIb3N0KSkge1xuICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXig/OmF1dGhvcml6YXRpb258Y29va2llKSQvaSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIC8vIEV2YWx1YXRlIHRoZSBiZWZvcmVSZWRpcmVjdCBjYWxsYmFja1xuICBpZiAoaXNGdW5jdGlvbihiZWZvcmVSZWRpcmVjdCkpIHtcbiAgICB2YXIgcmVzcG9uc2VEZXRhaWxzID0ge1xuICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgfTtcbiAgICB2YXIgcmVxdWVzdERldGFpbHMgPSB7XG4gICAgICB1cmw6IGN1cnJlbnRVcmwsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGJlZm9yZVJlZGlyZWN0KHRoaXMuX29wdGlvbnMsIHJlc3BvbnNlRGV0YWlscywgcmVxdWVzdERldGFpbHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9zYW5pdGl6ZU9wdGlvbnModGhpcy5fb3B0aW9ucyk7XG4gIH1cblxuICAvLyBQZXJmb3JtIHRoZSByZWRpcmVjdGVkIHJlcXVlc3RcbiAgdHJ5IHtcbiAgICB0aGlzLl9wZXJmb3JtUmVxdWVzdCgpO1xuICB9XG4gIGNhdGNoIChjYXVzZSkge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBSZWRpcmVjdGlvbkVycm9yKHsgY2F1c2U6IGNhdXNlIH0pKTtcbiAgfVxufTtcblxuLy8gV3JhcHMgdGhlIGtleS92YWx1ZSBvYmplY3Qgb2YgcHJvdG9jb2xzIHdpdGggcmVkaXJlY3QgZnVuY3Rpb25hbGl0eVxuZnVuY3Rpb24gd3JhcChwcm90b2NvbHMpIHtcbiAgLy8gRGVmYXVsdCBzZXR0aW5nc1xuICB2YXIgZXhwb3J0cyA9IHtcbiAgICBtYXhSZWRpcmVjdHM6IDIxLFxuICAgIG1heEJvZHlMZW5ndGg6IDEwICogMTAyNCAqIDEwMjQsXG4gIH07XG5cbiAgLy8gV3JhcCBlYWNoIHByb3RvY29sXG4gIHZhciBuYXRpdmVQcm90b2NvbHMgPSB7fTtcbiAgT2JqZWN0LmtleXMocHJvdG9jb2xzKS5mb3JFYWNoKGZ1bmN0aW9uIChzY2hlbWUpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBzY2hlbWUgKyBcIjpcIjtcbiAgICB2YXIgbmF0aXZlUHJvdG9jb2wgPSBuYXRpdmVQcm90b2NvbHNbcHJvdG9jb2xdID0gcHJvdG9jb2xzW3NjaGVtZV07XG4gICAgdmFyIHdyYXBwZWRQcm90b2NvbCA9IGV4cG9ydHNbc2NoZW1lXSA9IE9iamVjdC5jcmVhdGUobmF0aXZlUHJvdG9jb2wpO1xuXG4gICAgLy8gRXhlY3V0ZXMgYSByZXF1ZXN0LCBmb2xsb3dpbmcgcmVkaXJlY3RzXG4gICAgZnVuY3Rpb24gcmVxdWVzdChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIC8vIFBhcnNlIHBhcmFtZXRlcnNcbiAgICAgIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgdmFyIHBhcnNlZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXJzZWQgPSB1cmxUb09wdGlvbnMobmV3IFVSTChpbnB1dCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIHBhcnNlZCA9IHVybC5wYXJzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1N0cmluZyhwYXJzZWQucHJvdG9jb2wpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRVcmxFcnJvcih7IGlucHV0IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gcGFyc2VkO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoVVJMICYmIChpbnB1dCBpbnN0YW5jZW9mIFVSTCkpIHtcbiAgICAgICAgaW5wdXQgPSB1cmxUb09wdGlvbnMoaW5wdXQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IGlucHV0O1xuICAgICAgICBpbnB1dCA9IHsgcHJvdG9jb2w6IHByb3RvY29sIH07XG4gICAgICB9XG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWF4UmVkaXJlY3RzOiBleHBvcnRzLm1heFJlZGlyZWN0cyxcbiAgICAgICAgbWF4Qm9keUxlbmd0aDogZXhwb3J0cy5tYXhCb2R5TGVuZ3RoLFxuICAgICAgfSwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5uYXRpdmVQcm90b2NvbHMgPSBuYXRpdmVQcm90b2NvbHM7XG4gICAgICBpZiAoIWlzU3RyaW5nKG9wdGlvbnMuaG9zdCkgJiYgIWlzU3RyaW5nKG9wdGlvbnMuaG9zdG5hbWUpKSB7XG4gICAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBcIjo6MVwiO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQuZXF1YWwob3B0aW9ucy5wcm90b2NvbCwgcHJvdG9jb2wsIFwicHJvdG9jb2wgbWlzbWF0Y2hcIik7XG4gICAgICBkZWJ1ZyhcIm9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbmV3IFJlZGlyZWN0YWJsZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGVzIGEgR0VUIHJlcXVlc3QsIGZvbGxvd2luZyByZWRpcmVjdHNcbiAgICBmdW5jdGlvbiBnZXQoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgd3JhcHBlZFJlcXVlc3QgPSB3cmFwcGVkUHJvdG9jb2wucmVxdWVzdChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgd3JhcHBlZFJlcXVlc3QuZW5kKCk7XG4gICAgICByZXR1cm4gd3JhcHBlZFJlcXVlc3Q7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBwcm9wZXJ0aWVzIG9uIHRoZSB3cmFwcGVkIHByb3RvY29sXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3JhcHBlZFByb3RvY29sLCB7XG4gICAgICByZXF1ZXN0OiB7IHZhbHVlOiByZXF1ZXN0LCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBnZXQ6IHsgdmFsdWU6IGdldCwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGV4cG9ydHM7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBub29wKCkgeyAvKiBlbXB0eSAqLyB9XG5cbi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC91cmwuanNcbmZ1bmN0aW9uIHVybFRvT3B0aW9ucyh1cmxPYmplY3QpIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgcHJvdG9jb2w6IHVybE9iamVjdC5wcm90b2NvbCxcbiAgICBob3N0bmFtZTogdXJsT2JqZWN0Lmhvc3RuYW1lLnN0YXJ0c1dpdGgoXCJbXCIpID9cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB1cmxPYmplY3QuaG9zdG5hbWUuc2xpY2UoMSwgLTEpIDpcbiAgICAgIHVybE9iamVjdC5ob3N0bmFtZSxcbiAgICBoYXNoOiB1cmxPYmplY3QuaGFzaCxcbiAgICBzZWFyY2g6IHVybE9iamVjdC5zZWFyY2gsXG4gICAgcGF0aG5hbWU6IHVybE9iamVjdC5wYXRobmFtZSxcbiAgICBwYXRoOiB1cmxPYmplY3QucGF0aG5hbWUgKyB1cmxPYmplY3Quc2VhcmNoLFxuICAgIGhyZWY6IHVybE9iamVjdC5ocmVmLFxuICB9O1xuICBpZiAodXJsT2JqZWN0LnBvcnQgIT09IFwiXCIpIHtcbiAgICBvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsT2JqZWN0LnBvcnQpO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNYXRjaGluZ0hlYWRlcnMocmVnZXgsIGhlYWRlcnMpIHtcbiAgdmFyIGxhc3RWYWx1ZTtcbiAgZm9yICh2YXIgaGVhZGVyIGluIGhlYWRlcnMpIHtcbiAgICBpZiAocmVnZXgudGVzdChoZWFkZXIpKSB7XG4gICAgICBsYXN0VmFsdWUgPSBoZWFkZXJzW2hlYWRlcl07XG4gICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGxhc3RWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgbGFzdFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSA/XG4gICAgdW5kZWZpbmVkIDogU3RyaW5nKGxhc3RWYWx1ZSkudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgYmFzZUNsYXNzKSB7XG4gIC8vIENyZWF0ZSBjb25zdHJ1Y3RvclxuICBmdW5jdGlvbiBDdXN0b21FcnJvcihwcm9wZXJ0aWVzKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwcm9wZXJ0aWVzIHx8IHt9KTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuY2F1c2UgPyBtZXNzYWdlICsgXCI6IFwiICsgdGhpcy5jYXVzZS5tZXNzYWdlIDogbWVzc2FnZTtcbiAgfVxuXG4gIC8vIEF0dGFjaCBjb25zdHJ1Y3RvciBhbmQgc2V0IGRlZmF1bHQgcHJvcGVydGllc1xuICBDdXN0b21FcnJvci5wcm90b3R5cGUgPSBuZXcgKGJhc2VDbGFzcyB8fCBFcnJvcikoKTtcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3VzdG9tRXJyb3I7XG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZS5uYW1lID0gXCJFcnJvciBbXCIgKyBjb2RlICsgXCJdXCI7XG4gIHJldHVybiBDdXN0b21FcnJvcjtcbn1cblxuZnVuY3Rpb24gZGVzdHJveVJlcXVlc3QocmVxdWVzdCwgZXJyb3IpIHtcbiAgZm9yICh2YXIgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcihldmVudCwgZXZlbnRIYW5kbGVyc1tldmVudF0pO1xuICB9XG4gIHJlcXVlc3Qub24oXCJlcnJvclwiLCBub29wKTtcbiAgcmVxdWVzdC5kZXN0cm95KGVycm9yKTtcbn1cblxuZnVuY3Rpb24gaXNTdWJkb21haW4oc3ViZG9tYWluLCBkb21haW4pIHtcbiAgYXNzZXJ0KGlzU3RyaW5nKHN1YmRvbWFpbikgJiYgaXNTdHJpbmcoZG9tYWluKSk7XG4gIHZhciBkb3QgPSBzdWJkb21haW4ubGVuZ3RoIC0gZG9tYWluLmxlbmd0aCAtIDE7XG4gIHJldHVybiBkb3QgPiAwICYmIHN1YmRvbWFpbltkb3RdID09PSBcIi5cIiAmJiBzdWJkb21haW4uZW5kc1dpdGgoZG9tYWluKTtcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgKFwibGVuZ3RoXCIgaW4gdmFsdWUpO1xufVxuXG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXAoeyBodHRwOiBodHRwLCBodHRwczogaHR0cHMgfSk7XG5tb2R1bGUuZXhwb3J0cy53cmFwID0gd3JhcDtcbiIsInZhciBodHRwTmF0aXZlICAgPSByZXF1aXJlKCdodHRwJyksXG4gICAgaHR0cHNOYXRpdmUgID0gcmVxdWlyZSgnaHR0cHMnKSxcbiAgICB3ZWJfbyAgPSByZXF1aXJlKCcuL3dlYi1vdXRnb2luZycpLFxuICAgIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpLFxuICAgIGZvbGxvd1JlZGlyZWN0cyA9IHJlcXVpcmUoJ2ZvbGxvdy1yZWRpcmVjdHMnKTtcblxud2ViX28gPSBPYmplY3Qua2V5cyh3ZWJfbykubWFwKGZ1bmN0aW9uKHBhc3MpIHtcbiAgcmV0dXJuIHdlYl9vW3Bhc3NdO1xufSk7XG5cbnZhciBuYXRpdmVBZ2VudHMgPSB7IGh0dHA6IGh0dHBOYXRpdmUsIGh0dHBzOiBodHRwc05hdGl2ZSB9O1xuXG4vKiFcbiAqIEFycmF5IG9mIHBhc3Nlcy5cbiAqXG4gKiBBIGBwYXNzYCBpcyBqdXN0IGEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBgcmVxLCByZXMsIG9wdGlvbnNgXG4gKiBzbyB0aGF0IHlvdSBjYW4gZWFzaWx5IGFkZCBuZXcgY2hlY2tzIHdoaWxlIHN0aWxsIGtlZXBpbmcgdGhlIGJhc2VcbiAqIGZsZXhpYmxlLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFNldHMgYGNvbnRlbnQtbGVuZ3RoYCB0byAnMCcgaWYgcmVxdWVzdCBpcyBvZiBERUxFVEUgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtDbGllbnRSZXF1ZXN0fSBSZXEgUmVxdWVzdCBvYmplY3RcbiAgICrCoEBwYXJhbSB7SW5jb21pbmdNZXNzYWdlfSBSZXMgUmVzcG9uc2Ugb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBPcHRpb25zIENvbmZpZyBvYmplY3QgcGFzc2VkIHRvIHRoZSBwcm94eVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgZGVsZXRlTGVuZ3RoOiBmdW5jdGlvbiBkZWxldGVMZW5ndGgocmVxLCByZXMsIG9wdGlvbnMpIHtcbiAgICBpZigocmVxLm1ldGhvZCA9PT0gJ0RFTEVURScgfHwgcmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKVxuICAgICAgICYmICFyZXEuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkge1xuICAgICAgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSAnMCc7XG4gICAgICBkZWxldGUgcmVxLmhlYWRlcnNbJ3RyYW5zZmVyLWVuY29kaW5nJ107XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRpbWVvdXQgaW4gcmVxdWVzdCBzb2NrZXQgaWYgaXQgd2FzIHNwZWNpZmllZCBpbiBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NsaWVudFJlcXVlc3R9IFJlcSBSZXF1ZXN0IG9iamVjdFxuICAgKsKgQHBhcmFtIHtJbmNvbWluZ01lc3NhZ2V9IFJlcyBSZXNwb25zZSBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IE9wdGlvbnMgQ29uZmlnIG9iamVjdCBwYXNzZWQgdG8gdGhlIHByb3h5XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHJlcSwgcmVzLCBvcHRpb25zKSB7XG4gICAgaWYob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICByZXEuc29ja2V0LnNldFRpbWVvdXQob3B0aW9ucy50aW1lb3V0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYHgtZm9yd2FyZGVkLSpgIGhlYWRlcnMgaWYgc3BlY2lmaWVkIGluIGNvbmZpZy5cbiAgICpcbiAgICogQHBhcmFtIHtDbGllbnRSZXF1ZXN0fSBSZXEgUmVxdWVzdCBvYmplY3RcbiAgICrCoEBwYXJhbSB7SW5jb21pbmdNZXNzYWdlfSBSZXMgUmVzcG9uc2Ugb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBPcHRpb25zIENvbmZpZyBvYmplY3QgcGFzc2VkIHRvIHRoZSBwcm94eVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgWEhlYWRlcnM6IGZ1bmN0aW9uIFhIZWFkZXJzKHJlcSwgcmVzLCBvcHRpb25zKSB7XG4gICAgaWYoIW9wdGlvbnMueGZ3ZCkgcmV0dXJuO1xuXG4gICAgdmFyIGVuY3J5cHRlZCA9IHJlcS5pc1NwZHkgfHwgY29tbW9uLmhhc0VuY3J5cHRlZENvbm5lY3Rpb24ocmVxKTtcbiAgICB2YXIgdmFsdWVzID0ge1xuICAgICAgZm9yICA6IHJlcS5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3MgfHwgcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzLFxuICAgICAgcG9ydCA6IGNvbW1vbi5nZXRQb3J0KHJlcSksXG4gICAgICBwcm90bzogZW5jcnlwdGVkID8gJ2h0dHBzJyA6ICdodHRwJ1xuICAgIH07XG5cbiAgICBbJ2ZvcicsICdwb3J0JywgJ3Byb3RvJ10uZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC0nICsgaGVhZGVyXSA9XG4gICAgICAgIChyZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtJyArIGhlYWRlcl0gfHwgJycpICtcbiAgICAgICAgKHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC0nICsgaGVhZGVyXSA/ICcsJyA6ICcnKSArXG4gICAgICAgIHZhbHVlc1toZWFkZXJdO1xuICAgIH0pO1xuXG4gICAgcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWhvc3QnXSA9IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1ob3N0J10gfHwgcmVxLmhlYWRlcnNbJ2hvc3QnXSB8fCAnJztcbiAgfSxcblxuICAvKipcbiAgICogRG9lcyB0aGUgYWN0dWFsIHByb3h5aW5nLiBJZiBgZm9yd2FyZGAgaXMgZW5hYmxlZCBmaXJlcyB1cFxuICAgKiBhIEZvcndhcmRTdHJlYW0sIHNhbWUgaGFwcGVucyBmb3IgUHJveHlTdHJlYW0uIFRoZSByZXF1ZXN0XG4gICAqIGp1c3QgZGllcyBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpZW50UmVxdWVzdH0gUmVxIFJlcXVlc3Qgb2JqZWN0XG4gICAqwqBAcGFyYW0ge0luY29taW5nTWVzc2FnZX0gUmVzIFJlc3BvbnNlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gT3B0aW9ucyBDb25maWcgb2JqZWN0IHBhc3NlZCB0byB0aGUgcHJveHlcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIHN0cmVhbTogZnVuY3Rpb24gc3RyZWFtKHJlcSwgcmVzLCBvcHRpb25zLCBfLCBzZXJ2ZXIsIGNsYikge1xuXG4gICAgLy8gQW5kIHdlIGJlZ2luIVxuICAgIHNlcnZlci5lbWl0KCdzdGFydCcsIHJlcSwgcmVzLCBvcHRpb25zLnRhcmdldCB8fCBvcHRpb25zLmZvcndhcmQpO1xuXG4gICAgdmFyIGFnZW50cyA9IG9wdGlvbnMuZm9sbG93UmVkaXJlY3RzID8gZm9sbG93UmVkaXJlY3RzIDogbmF0aXZlQWdlbnRzO1xuICAgIHZhciBodHRwID0gYWdlbnRzLmh0dHA7XG4gICAgdmFyIGh0dHBzID0gYWdlbnRzLmh0dHBzO1xuXG4gICAgaWYob3B0aW9ucy5mb3J3YXJkKSB7XG4gICAgICAvLyBJZiBmb3J3YXJkIGVuYWJsZSwgc28ganVzdCBwaXBlIHRoZSByZXF1ZXN0XG4gICAgICB2YXIgZm9yd2FyZFJlcSA9IChvcHRpb25zLmZvcndhcmQucHJvdG9jb2wgPT09ICdodHRwczonID8gaHR0cHMgOiBodHRwKS5yZXF1ZXN0KFxuICAgICAgICBjb21tb24uc2V0dXBPdXRnb2luZyhvcHRpb25zLnNzbCB8fCB7fSwgb3B0aW9ucywgcmVxLCAnZm9yd2FyZCcpXG4gICAgICApO1xuXG4gICAgICAvLyBlcnJvciBoYW5kbGVyIChlLmcuIEVDT05OUkVTRVQsIEVDT05OUkVGVVNFRClcbiAgICAgIC8vIEhhbmRsZSBlcnJvcnMgb24gaW5jb21pbmcgcmVxdWVzdCBhcyB3ZWxsIGFzIGl0IG1ha2VzIHNlbnNlIHRvXG4gICAgICB2YXIgZm9yd2FyZEVycm9yID0gY3JlYXRlRXJyb3JIYW5kbGVyKGZvcndhcmRSZXEsIG9wdGlvbnMuZm9yd2FyZCk7XG4gICAgICByZXEub24oJ2Vycm9yJywgZm9yd2FyZEVycm9yKTtcbiAgICAgIGZvcndhcmRSZXEub24oJ2Vycm9yJywgZm9yd2FyZEVycm9yKTtcblxuICAgICAgKG9wdGlvbnMuYnVmZmVyIHx8IHJlcSkucGlwZShmb3J3YXJkUmVxKTtcbiAgICAgIGlmKCFvcHRpb25zLnRhcmdldCkgeyByZXR1cm4gcmVzLmVuZCgpOyB9XG4gICAgfVxuXG4gICAgLy8gUmVxdWVzdCBpbml0YWxpemF0aW9uXG4gICAgdmFyIHByb3h5UmVxID0gKG9wdGlvbnMudGFyZ2V0LnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzIDogaHR0cCkucmVxdWVzdChcbiAgICAgIGNvbW1vbi5zZXR1cE91dGdvaW5nKG9wdGlvbnMuc3NsIHx8IHt9LCBvcHRpb25zLCByZXEpXG4gICAgKTtcblxuICAgIC8vIEVuYWJsZSBkZXZlbG9wZXJzIHRvIG1vZGlmeSB0aGUgcHJveHlSZXEgYmVmb3JlIGhlYWRlcnMgYXJlIHNlbnRcbiAgICBwcm94eVJlcS5vbignc29ja2V0JywgZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgICBpZihzZXJ2ZXIgJiYgIXByb3h5UmVxLmdldEhlYWRlcignZXhwZWN0JykpIHtcbiAgICAgICAgc2VydmVyLmVtaXQoJ3Byb3h5UmVxJywgcHJveHlSZXEsIHJlcSwgcmVzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGFsbG93IG91dGdvaW5nIHNvY2tldCB0byB0aW1lb3V0IHNvIHRoYXQgd2UgY291bGRcbiAgICAvLyBzaG93IGFuIGVycm9yIHBhZ2UgYXQgdGhlIGluaXRpYWwgcmVxdWVzdFxuICAgIGlmKG9wdGlvbnMucHJveHlUaW1lb3V0KSB7XG4gICAgICBwcm94eVJlcS5zZXRUaW1lb3V0KG9wdGlvbnMucHJveHlUaW1lb3V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHByb3h5UmVxLmFib3J0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgd2UgYWJvcnQgcHJveHkgaWYgcmVxdWVzdCBpcyBhYm9ydGVkXG4gICAgcmVxLm9uKCdhYm9ydGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgcHJveHlSZXEuYWJvcnQoKTtcbiAgICB9KTtcblxuICAgIC8vIGhhbmRsZSBlcnJvcnMgaW4gcHJveHkgYW5kIGluY29taW5nIHJlcXVlc3QsIGp1c3QgbGlrZSBmb3IgZm9yd2FyZCBwcm94eVxuICAgIHZhciBwcm94eUVycm9yID0gY3JlYXRlRXJyb3JIYW5kbGVyKHByb3h5UmVxLCBvcHRpb25zLnRhcmdldCk7XG4gICAgcmVxLm9uKCdlcnJvcicsIHByb3h5RXJyb3IpO1xuICAgIHByb3h5UmVxLm9uKCdlcnJvcicsIHByb3h5RXJyb3IpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRXJyb3JIYW5kbGVyKHByb3h5UmVxLCB1cmwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBwcm94eUVycm9yKGVycikge1xuICAgICAgICBpZiAocmVxLnNvY2tldC5kZXN0cm95ZWQgJiYgZXJyLmNvZGUgPT09ICdFQ09OTlJFU0VUJykge1xuICAgICAgICAgIHNlcnZlci5lbWl0KCdlY29ubnJlc2V0JywgZXJyLCByZXEsIHJlcywgdXJsKTtcbiAgICAgICAgICByZXR1cm4gcHJveHlSZXEuYWJvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGIpIHtcbiAgICAgICAgICBjbGIoZXJyLCByZXEsIHJlcywgdXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXJ2ZXIuZW1pdCgnZXJyb3InLCBlcnIsIHJlcSwgcmVzLCB1cmwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKG9wdGlvbnMuYnVmZmVyIHx8IHJlcSkucGlwZShwcm94eVJlcSk7XG5cbiAgICBwcm94eVJlcS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihwcm94eVJlcykge1xuICAgICAgaWYoc2VydmVyKSB7IHNlcnZlci5lbWl0KCdwcm94eVJlcycsIHByb3h5UmVzLCByZXEsIHJlcyk7IH1cblxuICAgICAgaWYoIXJlcy5oZWFkZXJzU2VudCAmJiAhb3B0aW9ucy5zZWxmSGFuZGxlUmVzcG9uc2UpIHtcbiAgICAgICAgZm9yKHZhciBpPTA7IGkgPCB3ZWJfby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKHdlYl9vW2ldKHJlcSwgcmVzLCBwcm94eVJlcywgb3B0aW9ucykpIHsgYnJlYWs7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlcy5maW5pc2hlZCkge1xuICAgICAgICAvLyBBbGxvdyB1cyB0byBsaXN0ZW4gd2hlbiB0aGUgcHJveHkgaGFzIGNvbXBsZXRlZFxuICAgICAgICBwcm94eVJlcy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChzZXJ2ZXIpIHNlcnZlci5lbWl0KCdlbmQnLCByZXEsIHJlcywgcHJveHlSZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2UgcGlwZSB0byB0aGUgcmVzcG9uc2UgdW5sZXNzIGl0cyBleHBlY3RlZCB0byBiZSBoYW5kbGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgIGlmICghb3B0aW9ucy5zZWxmSGFuZGxlUmVzcG9uc2UpIHByb3h5UmVzLnBpcGUocmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXJ2ZXIpIHNlcnZlci5lbWl0KCdlbmQnLCByZXEsIHJlcywgcHJveHlSZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn07XG4iLCJ2YXIgaHR0cCAgID0gcmVxdWlyZSgnaHR0cCcpLFxuICAgIGh0dHBzICA9IHJlcXVpcmUoJ2h0dHBzJyksXG4gICAgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbi8qIVxuICogQXJyYXkgb2YgcGFzc2VzLlxuICpcbiAqIEEgYHBhc3NgIGlzIGp1c3QgYSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIG9uIGByZXEsIHNvY2tldCwgb3B0aW9uc2BcbiAqIHNvIHRoYXQgeW91IGNhbiBlYXNpbHkgYWRkIG5ldyBjaGVja3Mgd2hpbGUgc3RpbGwga2VlcGluZyB0aGUgYmFzZVxuICogZmxleGlibGUuXG4gKi9cblxuLypcbiAqIFdlYnNvY2tldHMgUGFzc2VzXG4gKlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBXZWJTb2NrZXQgcmVxdWVzdHMgbXVzdCBoYXZlIHRoZSBgR0VUYCBtZXRob2QgYW5kXG4gICAqIHRoZSBgdXBncmFkZTp3ZWJzb2NrZXRgIGhlYWRlclxuICAgKlxuICAgKiBAcGFyYW0ge0NsaWVudFJlcXVlc3R9IFJlcSBSZXF1ZXN0IG9iamVjdFxuICAgKsKgQHBhcmFtIHtTb2NrZXR9IFdlYnNvY2tldFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgY2hlY2tNZXRob2RBbmRIZWFkZXIgOiBmdW5jdGlvbiBjaGVja01ldGhvZEFuZEhlYWRlcihyZXEsIHNvY2tldCkge1xuICAgIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJyB8fCAhcmVxLmhlYWRlcnMudXBncmFkZSkge1xuICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChyZXEuaGVhZGVycy51cGdyYWRlLnRvTG93ZXJDYXNlKCkgIT09ICd3ZWJzb2NrZXQnKSB7XG4gICAgICBzb2NrZXQuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGB4LWZvcndhcmRlZC0qYCBoZWFkZXJzIGlmIHNwZWNpZmllZCBpbiBjb25maWcuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpZW50UmVxdWVzdH0gUmVxIFJlcXVlc3Qgb2JqZWN0XG4gICAqwqBAcGFyYW0ge1NvY2tldH0gV2Vic29ja2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBPcHRpb25zIENvbmZpZyBvYmplY3QgcGFzc2VkIHRvIHRoZSBwcm94eVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgWEhlYWRlcnMgOiBmdW5jdGlvbiBYSGVhZGVycyhyZXEsIHNvY2tldCwgb3B0aW9ucykge1xuICAgIGlmKCFvcHRpb25zLnhmd2QpIHJldHVybjtcblxuICAgIHZhciB2YWx1ZXMgPSB7XG4gICAgICBmb3IgIDogcmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzcyB8fCByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3MsXG4gICAgICBwb3J0IDogY29tbW9uLmdldFBvcnQocmVxKSxcbiAgICAgIHByb3RvOiBjb21tb24uaGFzRW5jcnlwdGVkQ29ubmVjdGlvbihyZXEpID8gJ3dzcycgOiAnd3MnXG4gICAgfTtcblxuICAgIFsnZm9yJywgJ3BvcnQnLCAncHJvdG8nXS5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLScgKyBoZWFkZXJdID1cbiAgICAgICAgKHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC0nICsgaGVhZGVyXSB8fCAnJykgK1xuICAgICAgICAocmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLScgKyBoZWFkZXJdID8gJywnIDogJycpICtcbiAgICAgICAgdmFsdWVzW2hlYWRlcl07XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERvZXMgdGhlIGFjdHVhbCBwcm94eWluZy4gTWFrZSB0aGUgcmVxdWVzdCBhbmQgdXBncmFkZSBpdFxuICAgKiBzZW5kIHRoZSBTd2l0Y2hpbmcgUHJvdG9jb2xzIHJlcXVlc3QgYW5kIHBpcGUgdGhlIHNvY2tldHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpZW50UmVxdWVzdH0gUmVxIFJlcXVlc3Qgb2JqZWN0XG4gICAqwqBAcGFyYW0ge1NvY2tldH0gV2Vic29ja2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBPcHRpb25zIENvbmZpZyBvYmplY3QgcGFzc2VkIHRvIHRoZSBwcm94eVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHN0cmVhbSA6IGZ1bmN0aW9uIHN0cmVhbShyZXEsIHNvY2tldCwgb3B0aW9ucywgaGVhZCwgc2VydmVyLCBjbGIpIHtcblxuICAgIHZhciBjcmVhdGVIdHRwSGVhZGVyID0gZnVuY3Rpb24obGluZSwgaGVhZGVycykge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGhlYWRlcnMpLnJlZHVjZShmdW5jdGlvbiAoaGVhZCwga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGhlYWRlcnNba2V5XTtcblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgaGVhZC5wdXNoKGtleSArICc6ICcgKyB2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGhlYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaGVhZC5wdXNoKGtleSArICc6ICcgKyB2YWx1ZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWQ7XG4gICAgICB9LCBbbGluZV0pXG4gICAgICAuam9pbignXFxyXFxuJykgKyAnXFxyXFxuXFxyXFxuJztcbiAgICB9XG5cbiAgICBjb21tb24uc2V0dXBTb2NrZXQoc29ja2V0KTtcblxuICAgIGlmIChoZWFkICYmIGhlYWQubGVuZ3RoKSBzb2NrZXQudW5zaGlmdChoZWFkKTtcblxuXG4gICAgdmFyIHByb3h5UmVxID0gKGNvbW1vbi5pc1NTTC50ZXN0KG9wdGlvbnMudGFyZ2V0LnByb3RvY29sKSA/IGh0dHBzIDogaHR0cCkucmVxdWVzdChcbiAgICAgIGNvbW1vbi5zZXR1cE91dGdvaW5nKG9wdGlvbnMuc3NsIHx8IHt9LCBvcHRpb25zLCByZXEpXG4gICAgKTtcblxuICAgIC8vIEVuYWJsZSBkZXZlbG9wZXJzIHRvIG1vZGlmeSB0aGUgcHJveHlSZXEgYmVmb3JlIGhlYWRlcnMgYXJlIHNlbnRcbiAgICBpZiAoc2VydmVyKSB7IHNlcnZlci5lbWl0KCdwcm94eVJlcVdzJywgcHJveHlSZXEsIHJlcSwgc29ja2V0LCBvcHRpb25zLCBoZWFkKTsgfVxuXG4gICAgLy8gRXJyb3IgSGFuZGxlclxuICAgIHByb3h5UmVxLm9uKCdlcnJvcicsIG9uT3V0Z29pbmdFcnJvcik7XG4gICAgcHJveHlSZXEub24oJ3Jlc3BvbnNlJywgZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gaWYgdXBncmFkZSBldmVudCBpc24ndCBnb2luZyB0byBoYXBwZW4sIGNsb3NlIHRoZSBzb2NrZXRcbiAgICAgIGlmICghcmVzLnVwZ3JhZGUpIHtcbiAgICAgICAgc29ja2V0LndyaXRlKGNyZWF0ZUh0dHBIZWFkZXIoJ0hUVFAvJyArIHJlcy5odHRwVmVyc2lvbiArICcgJyArIHJlcy5zdGF0dXNDb2RlICsgJyAnICsgcmVzLnN0YXR1c01lc3NhZ2UsIHJlcy5oZWFkZXJzKSk7XG4gICAgICAgIHJlcy5waXBlKHNvY2tldCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwcm94eVJlcS5vbigndXBncmFkZScsIGZ1bmN0aW9uKHByb3h5UmVzLCBwcm94eVNvY2tldCwgcHJveHlIZWFkKSB7XG4gICAgICBwcm94eVNvY2tldC5vbignZXJyb3InLCBvbk91dGdvaW5nRXJyb3IpO1xuXG4gICAgICAvLyBBbGxvdyB1cyB0byBsaXN0ZW4gd2hlbiB0aGUgd2Vic29ja2V0IGhhcyBjb21wbGV0ZWRcbiAgICAgIHByb3h5U29ja2V0Lm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlcnZlci5lbWl0KCdjbG9zZScsIHByb3h5UmVzLCBwcm94eVNvY2tldCwgcHJveHlIZWFkKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUaGUgcGlwZSBiZWxvdyB3aWxsIGVuZCBwcm94eVNvY2tldCBpZiBzb2NrZXQgY2xvc2VzIGNsZWFubHksIGJ1dCBub3RcbiAgICAgIC8vIGlmIGl0IGVycm9ycyAoZWcsIHZhbmlzaGVzIGZyb20gdGhlIG5ldCBhbmQgc3RhcnRzIHJldHVybmluZ1xuICAgICAgLy8gRUhPU1RVTlJFQUNIKS4gV2UgbmVlZCB0byBkbyB0aGF0IGV4cGxpY2l0bHkuXG4gICAgICBzb2NrZXQub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBwcm94eVNvY2tldC5lbmQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb21tb24uc2V0dXBTb2NrZXQocHJveHlTb2NrZXQpO1xuXG4gICAgICBpZiAocHJveHlIZWFkICYmIHByb3h5SGVhZC5sZW5ndGgpIHByb3h5U29ja2V0LnVuc2hpZnQocHJveHlIZWFkKTtcblxuICAgICAgLy9cbiAgICAgIC8vIFJlbWFyazogSGFuZGxlIHdyaXRpbmcgdGhlIGhlYWRlcnMgdG8gdGhlIHNvY2tldCB3aGVuIHN3aXRjaGluZyBwcm90b2NvbHNcbiAgICAgIC8vIEFsc28gaGFuZGxlcyB3aGVuIGEgaGVhZGVyIGlzIGFuIGFycmF5XG4gICAgICAvL1xuICAgICAgc29ja2V0LndyaXRlKGNyZWF0ZUh0dHBIZWFkZXIoJ0hUVFAvMS4xIDEwMSBTd2l0Y2hpbmcgUHJvdG9jb2xzJywgcHJveHlSZXMuaGVhZGVycykpO1xuXG4gICAgICBwcm94eVNvY2tldC5waXBlKHNvY2tldCkucGlwZShwcm94eVNvY2tldCk7XG5cbiAgICAgIHNlcnZlci5lbWl0KCdvcGVuJywgcHJveHlTb2NrZXQpO1xuICAgICAgc2VydmVyLmVtaXQoJ3Byb3h5U29ja2V0JywgcHJveHlTb2NrZXQpOyAgLy9ERVBSRUNBVEVELlxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb3h5UmVxLmVuZCgpOyAvLyBYWFg6IENIRUNLIElGIFRISVMgSVMgVEhJUyBDT1JSRUNUXG5cbiAgICBmdW5jdGlvbiBvbk91dGdvaW5nRXJyb3IoZXJyKSB7XG4gICAgICBpZiAoY2xiKSB7XG4gICAgICAgIGNsYihlcnIsIHJlcSwgc29ja2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcnZlci5lbWl0KCdlcnJvcicsIGVyciwgcmVxLCBzb2NrZXQpO1xuICAgICAgfVxuICAgICAgc29ja2V0LmVuZCgpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciBodHRwUHJveHkgPSBtb2R1bGUuZXhwb3J0cyxcbiAgICBleHRlbmQgICAgPSByZXF1aXJlKCd1dGlsJykuX2V4dGVuZCxcbiAgICBwYXJzZV91cmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZSxcbiAgICBFRTMgICAgICAgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyksXG4gICAgaHR0cCAgICAgID0gcmVxdWlyZSgnaHR0cCcpLFxuICAgIGh0dHBzICAgICA9IHJlcXVpcmUoJ2h0dHBzJyksXG4gICAgd2ViICAgICAgID0gcmVxdWlyZSgnLi9wYXNzZXMvd2ViLWluY29taW5nJyksXG4gICAgd3MgICAgICAgID0gcmVxdWlyZSgnLi9wYXNzZXMvd3MtaW5jb21pbmcnKTtcblxuaHR0cFByb3h5LlNlcnZlciA9IFByb3h5U2VydmVyO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlIGxvYWRlciBmb3JcbiAqIGVpdGhlciBgd3NgIG9yIGB3ZWJgJ3MgIHBhc3Nlcy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICBodHRwUHJveHkuY3JlYXRlUmlnaHRQcm94eSgnd3MnKVxuICogICAgLy8gPT4gW0Z1bmN0aW9uXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBUeXBlIEVpdGhlciAnd3MnIG9yICd3ZWInXG4gKsKgXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gTG9hZGVyIEZ1bmN0aW9uIHRoYXQgd2hlbiBjYWxsZWQgcmV0dXJucyBhbiBpdGVyYXRvciBmb3IgdGhlIHJpZ2h0IHBhc3Nlc1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJpZ2h0UHJveHkodHlwZSkge1xuXG4gIHJldHVybiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJlcSwgcmVzIC8qLCBbaGVhZF0sIFtvcHRzXSAqLykge1xuICAgICAgdmFyIHBhc3NlcyA9ICh0eXBlID09PSAnd3MnKSA/IHRoaXMud3NQYXNzZXMgOiB0aGlzLndlYlBhc3NlcyxcbiAgICAgICAgICBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgIGNudHIgPSBhcmdzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgaGVhZCwgY2JsO1xuXG4gICAgICAvKiBvcHRpb25hbCBhcmdzIHBhcnNlIGJlZ2luICovXG4gICAgICBpZih0eXBlb2YgYXJnc1tjbnRyXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYmwgPSBhcmdzW2NudHJdO1xuXG4gICAgICAgIGNudHItLTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gb3B0aW9ucztcbiAgICAgIGlmKFxuICAgICAgICAhKGFyZ3NbY250cl0gaW5zdGFuY2VvZiBCdWZmZXIpICYmXG4gICAgICAgIGFyZ3NbY250cl0gIT09IHJlc1xuICAgICAgKSB7XG4gICAgICAgIC8vQ29weSBnbG9iYWwgb3B0aW9uc1xuICAgICAgICByZXF1ZXN0T3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgICAgIC8vT3ZlcndyaXRlIHdpdGggcmVxdWVzdCBvcHRpb25zXG4gICAgICAgIGV4dGVuZChyZXF1ZXN0T3B0aW9ucywgYXJnc1tjbnRyXSk7XG5cbiAgICAgICAgY250ci0tO1xuICAgICAgfVxuXG4gICAgICBpZihhcmdzW2NudHJdIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgIGhlYWQgPSBhcmdzW2NudHJdO1xuICAgICAgfVxuXG4gICAgICAvKiBvcHRpb25hbCBhcmdzIHBhcnNlIGVuZCAqL1xuXG4gICAgICBbJ3RhcmdldCcsICdmb3J3YXJkJ10uZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdE9wdGlvbnNbZV0gPT09ICdzdHJpbmcnKVxuICAgICAgICAgIHJlcXVlc3RPcHRpb25zW2VdID0gcGFyc2VfdXJsKHJlcXVlc3RPcHRpb25zW2VdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlcXVlc3RPcHRpb25zLnRhcmdldCAmJiAhcmVxdWVzdE9wdGlvbnMuZm9yd2FyZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgcHJvcGVyIFVSTCBhcyB0YXJnZXQnKSk7XG4gICAgICB9XG5cbiAgICAgIGZvcih2YXIgaT0wOyBpIDwgcGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsIG9mIHBhc3NlcyBmdW5jdGlvbnNcbiAgICAgICAgICogcGFzcyhyZXEsIHJlcywgb3B0aW9ucywgaGVhZClcbiAgICAgICAgICpcbiAgICAgICAgICogSW4gV2ViU29ja2V0cyBjYXNlIHRoZSBgcmVzYCB2YXJpYWJsZVxuICAgICAgICAgKiByZWZlciB0byB0aGUgY29ubmVjdGlvbiBzb2NrZXRcbiAgICAgICAgICogcGFzcyhyZXEsIHNvY2tldCwgb3B0aW9ucywgaGVhZClcbiAgICAgICAgICovXG4gICAgICAgIGlmKHBhc3Nlc1tpXShyZXEsIHJlcywgcmVxdWVzdE9wdGlvbnMsIGhlYWQsIHRoaXMsIGNibCkpIHsgLy8gcGFzc2VzIGNhbiByZXR1cm4gYSB0cnV0aHkgdmFsdWUgdG8gaGFsdCB0aGUgbG9vcFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cbmh0dHBQcm94eS5jcmVhdGVSaWdodFByb3h5ID0gY3JlYXRlUmlnaHRQcm94eTtcblxuZnVuY3Rpb24gUHJveHlTZXJ2ZXIob3B0aW9ucykge1xuICBFRTMuY2FsbCh0aGlzKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5wcmVwZW5kUGF0aCA9IG9wdGlvbnMucHJlcGVuZFBhdGggPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlO1xuXG4gIHRoaXMud2ViID0gdGhpcy5wcm94eVJlcXVlc3QgICAgICAgICAgID0gY3JlYXRlUmlnaHRQcm94eSgnd2ViJykob3B0aW9ucyk7XG4gIHRoaXMud3MgID0gdGhpcy5wcm94eVdlYnNvY2tldFJlcXVlc3QgID0gY3JlYXRlUmlnaHRQcm94eSgnd3MnKShvcHRpb25zKTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLndlYlBhc3NlcyA9IE9iamVjdC5rZXlzKHdlYikubWFwKGZ1bmN0aW9uKHBhc3MpIHtcbiAgICByZXR1cm4gd2ViW3Bhc3NdO1xuICB9KTtcblxuICB0aGlzLndzUGFzc2VzID0gT2JqZWN0LmtleXMod3MpLm1hcChmdW5jdGlvbihwYXNzKSB7XG4gICAgcmV0dXJuIHdzW3Bhc3NdO1xuICB9KTtcblxuICB0aGlzLm9uKCdlcnJvcicsIHRoaXMub25FcnJvciwgdGhpcyk7XG5cbn1cblxucmVxdWlyZSgndXRpbCcpLmluaGVyaXRzKFByb3h5U2VydmVyLCBFRTMpO1xuXG5Qcm94eVNlcnZlci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgLy9cbiAgLy8gUmVtYXJrOiBSZXBsaWNhdGUgbm9kZSBjb3JlIGJlaGF2aW9yIHVzaW5nIEVFM1xuICAvLyBzbyB3ZSBmb3JjZSBwZW9wbGUgdG8gaGFuZGxlIHRoZWlyIG93biBlcnJvcnNcbiAgLy9cbiAgaWYodGhpcy5saXN0ZW5lcnMoJ2Vycm9yJykubGVuZ3RoID09PSAxKSB7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xuXG5Qcm94eVNlcnZlci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24ocG9ydCwgaG9zdG5hbWUpIHtcbiAgdmFyIHNlbGYgICAgPSB0aGlzLFxuICAgICAgY2xvc3VyZSA9IGZ1bmN0aW9uKHJlcSwgcmVzKSB7IHNlbGYud2ViKHJlcSwgcmVzKTsgfTtcblxuICB0aGlzLl9zZXJ2ZXIgID0gdGhpcy5vcHRpb25zLnNzbCA/XG4gICAgaHR0cHMuY3JlYXRlU2VydmVyKHRoaXMub3B0aW9ucy5zc2wsIGNsb3N1cmUpIDpcbiAgICBodHRwLmNyZWF0ZVNlcnZlcihjbG9zdXJlKTtcblxuICBpZih0aGlzLm9wdGlvbnMud3MpIHtcbiAgICB0aGlzLl9zZXJ2ZXIub24oJ3VwZ3JhZGUnLCBmdW5jdGlvbihyZXEsIHNvY2tldCwgaGVhZCkgeyBzZWxmLndzKHJlcSwgc29ja2V0LCBoZWFkKTsgfSk7XG4gIH1cblxuICB0aGlzLl9zZXJ2ZXIubGlzdGVuKHBvcnQsIGhvc3RuYW1lKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblByb3h5U2VydmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHRoaXMuX3NlcnZlcikge1xuICAgIHRoaXMuX3NlcnZlci5jbG9zZShkb25lKTtcbiAgfVxuXG4gIC8vIFdyYXAgY2FsbGJhY2sgdG8gbnVsbGlmeSBzZXJ2ZXIgYWZ0ZXIgYWxsIG9wZW4gY29ubmVjdGlvbnMgYXJlIGNsb3NlZC5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBzZWxmLl9zZXJ2ZXIgPSBudWxsO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59O1xuXG5Qcm94eVNlcnZlci5wcm90b3R5cGUuYmVmb3JlID0gZnVuY3Rpb24odHlwZSwgcGFzc05hbWUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlICE9PSAnd3MnICYmIHR5cGUgIT09ICd3ZWInKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0eXBlIG11c3QgYmUgYHdlYmAgb3IgYHdzYCcpO1xuICB9XG4gIHZhciBwYXNzZXMgPSAodHlwZSA9PT0gJ3dzJykgPyB0aGlzLndzUGFzc2VzIDogdGhpcy53ZWJQYXNzZXMsXG4gICAgICBpID0gZmFsc2U7XG5cbiAgcGFzc2VzLmZvckVhY2goZnVuY3Rpb24odiwgaWR4KSB7XG4gICAgaWYodi5uYW1lID09PSBwYXNzTmFtZSkgaSA9IGlkeDtcbiAgfSlcblxuICBpZihpID09PSBmYWxzZSkgdGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIHBhc3MnKTtcblxuICBwYXNzZXMuc3BsaWNlKGksIDAsIGNhbGxiYWNrKTtcbn07XG5Qcm94eVNlcnZlci5wcm90b3R5cGUuYWZ0ZXIgPSBmdW5jdGlvbih0eXBlLCBwYXNzTmFtZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGUgIT09ICd3cycgJiYgdHlwZSAhPT0gJ3dlYicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3R5cGUgbXVzdCBiZSBgd2ViYCBvciBgd3NgJyk7XG4gIH1cbiAgdmFyIHBhc3NlcyA9ICh0eXBlID09PSAnd3MnKSA/IHRoaXMud3NQYXNzZXMgOiB0aGlzLndlYlBhc3NlcyxcbiAgICAgIGkgPSBmYWxzZTtcblxuICBwYXNzZXMuZm9yRWFjaChmdW5jdGlvbih2LCBpZHgpIHtcbiAgICBpZih2Lm5hbWUgPT09IHBhc3NOYW1lKSBpID0gaWR4O1xuICB9KVxuXG4gIGlmKGkgPT09IGZhbHNlKSB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggcGFzcycpO1xuXG4gIHBhc3Nlcy5zcGxpY2UoaSsrLCAwLCBjYWxsYmFjayk7XG59O1xuIiwiIC8vIFVzZSBleHBsaWNpdCAvaW5kZXguanMgdG8gaGVscCBicm93c2VyaWZ5IG5lZ29jaWF0aW9uIGluIHJlcXVpcmUgJy9saWIvaHR0cC1wcm94eScgKCEpXG52YXIgUHJveHlTZXJ2ZXIgPSByZXF1aXJlKCcuL2h0dHAtcHJveHkvaW5kZXguanMnKS5TZXJ2ZXI7XG5cblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBwcm94eSBzZXJ2ZXIuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgaHR0cFByb3h5LmNyZWF0ZVByb3h5U2VydmVyKHsgLi4gfSwgODAwMClcbiAqICAgIC8vID0+ICd7IHdlYjogW0Z1bmN0aW9uXSwgd3M6IFtGdW5jdGlvbl0gLi4uIH0nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IE9wdGlvbnMgQ29uZmlnIG9iamVjdCBwYXNzZWQgdG8gdGhlIHByb3h5XG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBQcm94eSBQcm94eSBvYmplY3Qgd2l0aCBoYW5kbGVycyBmb3IgYHdzYCBhbmQgYHdlYmAgcmVxdWVzdHNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUHJveHlTZXJ2ZXIob3B0aW9ucykge1xuICAvKlxuICAgKiAgYG9wdGlvbnNgIGlzIG5lZWRlZCBhbmQgaXQgbXVzdCBoYXZlIHRoZSBmb2xsb3dpbmcgbGF5b3V0OlxuICAgKlxuICAgKiAge1xuICAgKiAgICB0YXJnZXQgOiA8dXJsIHN0cmluZyB0byBiZSBwYXJzZWQgd2l0aCB0aGUgdXJsIG1vZHVsZT5cbiAgICogICAgZm9yd2FyZDogPHVybCBzdHJpbmcgdG8gYmUgcGFyc2VkIHdpdGggdGhlIHVybCBtb2R1bGU+XG4gICAqICAgIGFnZW50ICA6IDxvYmplY3QgdG8gYmUgcGFzc2VkIHRvIGh0dHAocykucmVxdWVzdD5cbiAgICogICAgc3NsICAgIDogPG9iamVjdCB0byBiZSBwYXNzZWQgdG8gaHR0cHMuY3JlYXRlU2VydmVyKCk+XG4gICAqICAgIHdzICAgICA6IDx0cnVlL2ZhbHNlLCBpZiB5b3Ugd2FudCB0byBwcm94eSB3ZWJzb2NrZXRzPlxuICAgKiAgICB4ZndkICAgOiA8dHJ1ZS9mYWxzZSwgYWRkcyB4LWZvcndhcmQgaGVhZGVycz5cbiAgICogICAgc2VjdXJlIDogPHRydWUvZmFsc2UsIHZlcmlmeSBTU0wgY2VydGlmaWNhdGU+XG4gICAqICAgIHRvUHJveHk6IDx0cnVlL2ZhbHNlLCBleHBsaWNpdGx5IHNwZWNpZnkgaWYgd2UgYXJlIHByb3h5aW5nIHRvIGFub3RoZXIgcHJveHk+XG4gICAqICAgIHByZXBlbmRQYXRoOiA8dHJ1ZS9mYWxzZSwgRGVmYXVsdDogdHJ1ZSAtIHNwZWNpZnkgd2hldGhlciB5b3Ugd2FudCB0byBwcmVwZW5kIHRoZSB0YXJnZXQncyBwYXRoIHRvIHRoZSBwcm94eSBwYXRoPlxuICAgKiAgICBpZ25vcmVQYXRoOiA8dHJ1ZS9mYWxzZSwgRGVmYXVsdDogZmFsc2UgLSBzcGVjaWZ5IHdoZXRoZXIgeW91IHdhbnQgdG8gaWdub3JlIHRoZSBwcm94eSBwYXRoIG9mIHRoZSBpbmNvbWluZyByZXF1ZXN0PlxuICAgKiAgICBsb2NhbEFkZHJlc3MgOiA8TG9jYWwgaW50ZXJmYWNlIHN0cmluZyB0byBiaW5kIGZvciBvdXRnb2luZyBjb25uZWN0aW9ucz5cbiAgICogICAgY2hhbmdlT3JpZ2luOiA8dHJ1ZS9mYWxzZSwgRGVmYXVsdDogZmFsc2UgLSBjaGFuZ2VzIHRoZSBvcmlnaW4gb2YgdGhlIGhvc3QgaGVhZGVyIHRvIHRoZSB0YXJnZXQgVVJMPlxuICAgKiAgICBwcmVzZXJ2ZUhlYWRlcktleUNhc2U6IDx0cnVlL2ZhbHNlLCBEZWZhdWx0OiBmYWxzZSAtIHNwZWNpZnkgd2hldGhlciB5b3Ugd2FudCB0byBrZWVwIGxldHRlciBjYXNlIG9mIHJlc3BvbnNlIGhlYWRlciBrZXkgPlxuICAgKiAgICBhdXRoICAgOiBCYXNpYyBhdXRoZW50aWNhdGlvbiBpLmUuICd1c2VyOnBhc3N3b3JkJyB0byBjb21wdXRlIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyLlxuICAgKiAgICBob3N0UmV3cml0ZTogcmV3cml0ZXMgdGhlIGxvY2F0aW9uIGhvc3RuYW1lIG9uICgyMDEvMzAxLzMwMi8zMDcvMzA4KSByZWRpcmVjdHMsIERlZmF1bHQ6IG51bGwuXG4gICAqICAgIGF1dG9SZXdyaXRlOiByZXdyaXRlcyB0aGUgbG9jYXRpb24gaG9zdC9wb3J0IG9uICgyMDEvMzAxLzMwMi8zMDcvMzA4KSByZWRpcmVjdHMgYmFzZWQgb24gcmVxdWVzdGVkIGhvc3QvcG9ydC4gRGVmYXVsdDogZmFsc2UuXG4gICAqICAgIHByb3RvY29sUmV3cml0ZTogcmV3cml0ZXMgdGhlIGxvY2F0aW9uIHByb3RvY29sIG9uICgyMDEvMzAxLzMwMi8zMDcvMzA4KSByZWRpcmVjdHMgdG8gJ2h0dHAnIG9yICdodHRwcycuIERlZmF1bHQ6IG51bGwuXG4gICAqICB9XG4gICAqXG4gICAqICBOT1RFOiBgb3B0aW9ucy53c2AgYW5kIGBvcHRpb25zLnNzbGAgYXJlIG9wdGlvbmFsLlxuICAgKiAgICBgb3B0aW9ucy50YXJnZXQgYW5kIGBvcHRpb25zLmZvcndhcmRgIGNhbm5vdCBiZVxuICAgKiAgICBib3RoIG1pc3NpbmdcbiAgICogIH1cbiAgICovXG5cbiAgcmV0dXJuIG5ldyBQcm94eVNlcnZlcihvcHRpb25zKTtcbn1cblxuXG5Qcm94eVNlcnZlci5jcmVhdGVQcm94eVNlcnZlciA9IGNyZWF0ZVByb3h5U2VydmVyO1xuUHJveHlTZXJ2ZXIuY3JlYXRlU2VydmVyICAgICAgPSBjcmVhdGVQcm94eVNlcnZlcjtcblByb3h5U2VydmVyLmNyZWF0ZVByb3h5ICAgICAgID0gY3JlYXRlUHJveHlTZXJ2ZXI7XG5cblxuXG5cbi8qKlxuICogRXhwb3J0IHRoZSBwcm94eSBcIlNlcnZlclwiIGFzIHRoZSBtYWluIGV4cG9ydC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBQcm94eVNlcnZlcjtcblxuIiwiLyohXG4gKiBDYXJvbiBkaW1vbmlvLCBjb24gb2NjaGkgZGkgYnJhZ2lhXG4gKiBsb3JvIGFjY2VubmFuZG8sIHR1dHRlIGxlIHJhY2NvZ2xpZTtcbiAqIGJhdHRlIGNvbCByZW1vIHF1YWx1bnF1ZSBz4oCZYWRhZ2lhIFxuICpcbiAqIENoYXJvbiB0aGUgZGVtb24sIHdpdGggdGhlIGV5ZXMgb2YgZ2xlZGUsXG4gKiBCZWNrb25pbmcgdG8gdGhlbSwgY29sbGVjdHMgdGhlbSBhbGwgdG9nZXRoZXIsXG4gKiBCZWF0cyB3aXRoIGhpcyBvYXIgd2hvZXZlciBsYWdzIGJlaGluZFxuICogICAgICAgICAgXG4gKiAgICAgICAgICBEYW50ZSAtIFRoZSBEaXZpbmUgQ29tZWR5IChDYW50byBJSUkpXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9odHRwLXByb3h5Jyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbHVlID0+IHtcblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcblx0cmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVSUk9SUyA9IHZvaWQgMDtcbnZhciBFUlJPUlM7XG4oZnVuY3Rpb24gKEVSUk9SUykge1xuICAgIEVSUk9SU1tcIkVSUl9DT05GSUdfRkFDVE9SWV9UQVJHRVRfTUlTU0lOR1wiXSA9IFwiW0hQTV0gTWlzc2luZyBcXFwidGFyZ2V0XFxcIiBvcHRpb24uIEV4YW1wbGU6IHt0YXJnZXQ6IFxcXCJodHRwOi8vd3d3LmV4YW1wbGUub3JnXFxcIn1cIjtcbiAgICBFUlJPUlNbXCJFUlJfQ09OVEVYVF9NQVRDSEVSX0dFTkVSSUNcIl0gPSBcIltIUE1dIEludmFsaWQgY29udGV4dC4gRXhwZWN0aW5nIHNvbWV0aGluZyBsaWtlOiBcXFwiL2FwaVxcXCIgb3IgW1xcXCIvYXBpXFxcIiwgXFxcIi9hamF4XFxcIl1cIjtcbiAgICBFUlJPUlNbXCJFUlJfQ09OVEVYVF9NQVRDSEVSX0lOVkFMSURfQVJSQVlcIl0gPSBcIltIUE1dIEludmFsaWQgY29udGV4dC4gRXhwZWN0aW5nIHNvbWV0aGluZyBsaWtlOiBbXFxcIi9hcGlcXFwiLCBcXFwiL2FqYXhcXFwiXSBvciBbXFxcIi9hcGkvKipcXFwiLCBcXFwiISoqLmh0bWxcXFwiXVwiO1xuICAgIEVSUk9SU1tcIkVSUl9QQVRIX1JFV1JJVEVSX0NPTkZJR1wiXSA9IFwiW0hQTV0gSW52YWxpZCBwYXRoUmV3cml0ZSBjb25maWcuIEV4cGVjdGluZyBvYmplY3Qgd2l0aCBwYXRoUmV3cml0ZSBjb25maWcgb3IgYSByZXdyaXRlIGZ1bmN0aW9uXCI7XG59KShFUlJPUlMgPSBleHBvcnRzLkVSUk9SUyB8fCAoZXhwb3J0cy5FUlJPUlMgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QXJyb3cgPSBleHBvcnRzLmdldEluc3RhbmNlID0gdm9pZCAwO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IGxvZ2dlckluc3RhbmNlO1xuY29uc3QgZGVmYXVsdFByb3ZpZGVyID0ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlOiBuby1jb25zb2xlXG4gICAgbG9nOiBjb25zb2xlLmxvZyxcbiAgICBkZWJ1ZzogY29uc29sZS5sb2csXG4gICAgaW5mbzogY29uc29sZS5pbmZvLFxuICAgIHdhcm46IGNvbnNvbGUud2FybixcbiAgICBlcnJvcjogY29uc29sZS5lcnJvcixcbn07XG4vLyBsb2cgbGV2ZWwgJ3dlaWdodCdcbnZhciBMRVZFTFM7XG4oZnVuY3Rpb24gKExFVkVMUykge1xuICAgIExFVkVMU1tMRVZFTFNbXCJkZWJ1Z1wiXSA9IDEwXSA9IFwiZGVidWdcIjtcbiAgICBMRVZFTFNbTEVWRUxTW1wiaW5mb1wiXSA9IDIwXSA9IFwiaW5mb1wiO1xuICAgIExFVkVMU1tMRVZFTFNbXCJ3YXJuXCJdID0gMzBdID0gXCJ3YXJuXCI7XG4gICAgTEVWRUxTW0xFVkVMU1tcImVycm9yXCJdID0gNTBdID0gXCJlcnJvclwiO1xuICAgIExFVkVMU1tMRVZFTFNbXCJzaWxlbnRcIl0gPSA4MF0gPSBcInNpbGVudFwiO1xufSkoTEVWRUxTIHx8IChMRVZFTFMgPSB7fSkpO1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7XG4gICAgaWYgKCFsb2dnZXJJbnN0YW5jZSkge1xuICAgICAgICBsb2dnZXJJbnN0YW5jZSA9IG5ldyBMb2dnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ2dlckluc3RhbmNlO1xufVxuZXhwb3J0cy5nZXRJbnN0YW5jZSA9IGdldEluc3RhbmNlO1xuY2xhc3MgTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zZXRMZXZlbCgnaW5mbycpO1xuICAgICAgICB0aGlzLnNldFByb3ZpZGVyKCgpID0+IGRlZmF1bHRQcm92aWRlcik7XG4gICAgfVxuICAgIC8vIGxvZyB3aWxsIGxvZyBtZXNzYWdlcywgcmVnYXJkbGVzcyBvZiBsb2dMZXZlbHNcbiAgICBsb2coKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIubG9nKHRoaXMuX2ludGVycG9sYXRlLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgIH1cbiAgICBkZWJ1ZygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nob3dMZXZlbCgnZGVidWcnKSkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlci5kZWJ1Zyh0aGlzLl9pbnRlcnBvbGF0ZS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmZvKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvd0xldmVsKCdpbmZvJykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXIuaW5mbyh0aGlzLl9pbnRlcnBvbGF0ZS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3YXJuKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvd0xldmVsKCd3YXJuJykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXIud2Fybih0aGlzLl9pbnRlcnBvbGF0ZS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlcnJvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nob3dMZXZlbCgnZXJyb3InKSkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlci5lcnJvcih0aGlzLl9pbnRlcnBvbGF0ZS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRMZXZlbCh2KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRMZXZlbCh2KSkge1xuICAgICAgICAgICAgdGhpcy5sb2dMZXZlbCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0UHJvdmlkZXIoZm4pIHtcbiAgICAgICAgaWYgKGZuICYmIHRoaXMuaXNWYWxpZFByb3ZpZGVyKGZuKSkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlciA9IGZuKGRlZmF1bHRQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNWYWxpZFByb3ZpZGVyKGZuUHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGZuUHJvdmlkZXIgJiYgdHlwZW9mIGZuUHJvdmlkZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW0hQTV0gTG9nIHByb3ZpZGVyIGNvbmZpZyBlcnJvci4gRXhwZWN0aW5nIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaXNWYWxpZExldmVsKGxldmVsTmFtZSkge1xuICAgICAgICBjb25zdCB2YWxpZExldmVscyA9IE9iamVjdC5rZXlzKExFVkVMUyk7XG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZExldmVscy5pbmNsdWRlcyhsZXZlbE5hbWUpO1xuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW0hQTV0gTG9nIGxldmVsIGVycm9yLiBJbnZhbGlkIGxvZ0xldmVsLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNpZGUgdG8gbG9nIG9yIG5vdCB0byBsb2csIGJhc2VkIG9uIHRoZSBsb2cgbGV2ZWxzICd3ZWlnaHQnXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgc2hvd0xldmVsIFtkZWJ1ZywgaW5mbywgd2FybiwgZXJyb3IsIHNpbGVudF1cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIF9zaG93TGV2ZWwoc2hvd0xldmVsKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY3VycmVudExvZ0xldmVsID0gTEVWRUxTW3RoaXMubG9nTGV2ZWxdO1xuICAgICAgICBpZiAoY3VycmVudExvZ0xldmVsICYmIGN1cnJlbnRMb2dMZXZlbCA8PSBMRVZFTFNbc2hvd0xldmVsXSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBtYWtlIHN1cmUgbG9nZ2VkIG1lc3NhZ2VzIGFuZCBpdHMgZGF0YSBhcmUgcmV0dXJuIGludGVycG9sYXRlZFxuICAgIC8vIG1ha2UgaXQgcG9zc2libGUgZm9yIGFkZGl0aW9uYWwgbG9nIGRhdGEsIHN1Y2ggZGF0ZS90aW1lIG9yIGN1c3RvbSBwcmVmaXguXG4gICAgX2ludGVycG9sYXRlKGZvcm1hdCwgLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB1dGlsLmZvcm1hdChmb3JtYXQsIC4uLmFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8qKlxuICogLT4gbm9ybWFsIHByb3h5XG4gKiA9PiByb3V0ZXJcbiAqIH4+IHBhdGhSZXdyaXRlXG4gKiDiiYg+IHJvdXRlciArIHBhdGhSZXdyaXRlXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBvcmlnaW5hbFBhdGhcbiAqIEBwYXJhbSAge1N0cmluZ30gbmV3UGF0aFxuICogQHBhcmFtICB7U3RyaW5nfSBvcmlnaW5hbFRhcmdldFxuICogQHBhcmFtICB7U3RyaW5nfSBuZXdUYXJnZXRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0QXJyb3cob3JpZ2luYWxQYXRoLCBuZXdQYXRoLCBvcmlnaW5hbFRhcmdldCwgbmV3VGFyZ2V0KSB7XG4gICAgY29uc3QgYXJyb3cgPSBbJz4nXTtcbiAgICBjb25zdCBpc05ld1RhcmdldCA9IG9yaWdpbmFsVGFyZ2V0ICE9PSBuZXdUYXJnZXQ7IC8vIHJvdXRlclxuICAgIGNvbnN0IGlzTmV3UGF0aCA9IG9yaWdpbmFsUGF0aCAhPT0gbmV3UGF0aDsgLy8gcGF0aFJld3JpdGVcbiAgICBpZiAoaXNOZXdQYXRoICYmICFpc05ld1RhcmdldCkge1xuICAgICAgICBhcnJvdy51bnNoaWZ0KCd+Jyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc05ld1BhdGggJiYgaXNOZXdUYXJnZXQpIHtcbiAgICAgICAgYXJyb3cudW5zaGlmdCgnPScpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05ld1BhdGggJiYgaXNOZXdUYXJnZXQpIHtcbiAgICAgICAgYXJyb3cudW5zaGlmdCgn4omIJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhcnJvdy51bnNoaWZ0KCctJyk7XG4gICAgfVxuICAgIHJldHVybiBhcnJvdy5qb2luKCcnKTtcbn1cbmV4cG9ydHMuZ2V0QXJyb3cgPSBnZXRBcnJvdztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVDb25maWcgPSB2b2lkIDA7XG5jb25zdCBpc1BsYWluT2JqID0gcmVxdWlyZShcImlzLXBsYWluLW9ialwiKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vbG9nZ2VyXCIpO1xuY29uc3QgbG9nZ2VyID0gKDAsIGxvZ2dlcl8xLmdldEluc3RhbmNlKSgpO1xuZnVuY3Rpb24gY3JlYXRlQ29uZmlnKGNvbnRleHQsIG9wdHMpIHtcbiAgICAvLyBzdHJ1Y3R1cmUgb2YgY29uZmlnIG9iamVjdCB0byBiZSByZXR1cm5lZFxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgY29udGV4dDogdW5kZWZpbmVkLFxuICAgICAgICBvcHRpb25zOiB7fSxcbiAgICB9O1xuICAgIC8vIGFwcC51c2UoJy9hcGknLCBwcm94eSh7dGFyZ2V0OidodHRwOi8vbG9jYWxob3N0OjkwMDAnfSkpO1xuICAgIGlmIChpc0NvbnRleHRsZXNzKGNvbnRleHQsIG9wdHMpKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZXh0ID0gJy8nO1xuICAgICAgICBjb25maWcub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oY29uZmlnLm9wdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICAvLyBhcHAudXNlKCcvYXBpJywgcHJveHkoJ2h0dHA6Ly9sb2NhbGhvc3Q6OTAwMCcpKTtcbiAgICAgICAgLy8gYXBwLnVzZShwcm94eSgnaHR0cDovL2xvY2FsaG9zdDo5MDAwL2FwaScpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTdHJpbmdTaG9ydEhhbmQoY29udGV4dCkpIHtcbiAgICAgICAgY29uc3Qgb1VybCA9IHVybC5wYXJzZShjb250ZXh0KTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gW29VcmwucHJvdG9jb2wsICcvLycsIG9VcmwuaG9zdF0uam9pbignJyk7XG4gICAgICAgIGNvbmZpZy5jb250ZXh0ID0gb1VybC5wYXRobmFtZSB8fCAnLyc7XG4gICAgICAgIGNvbmZpZy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihjb25maWcub3B0aW9ucywgeyB0YXJnZXQgfSwgb3B0cyk7XG4gICAgICAgIGlmIChvVXJsLnByb3RvY29sID09PSAnd3M6JyB8fCBvVXJsLnByb3RvY29sID09PSAnd3NzOicpIHtcbiAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLndzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHAudXNlKCcvYXBpJywgcHJveHkoe3RhcmdldDonaHR0cDovL2xvY2FsaG9zdDo5MDAwJ30pKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmZpZy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGNvbmZpZy5vcHRpb25zLCBvcHRzKTtcbiAgICB9XG4gICAgY29uZmlndXJlTG9nZ2VyKGNvbmZpZy5vcHRpb25zKTtcbiAgICBpZiAoIWNvbmZpZy5vcHRpb25zLnRhcmdldCAmJiAhY29uZmlnLm9wdGlvbnMucm91dGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnNfMS5FUlJPUlMuRVJSX0NPTkZJR19GQUNUT1JZX1RBUkdFVF9NSVNTSU5HKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmV4cG9ydHMuY3JlYXRlQ29uZmlnID0gY3JlYXRlQ29uZmlnO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBTdHJpbmcgb25seSB0YXJnZXQvY29uZmlnIGlzIHByb3ZpZGVkLlxuICogVGhpcyBjYW4gYmUganVzdCB0aGUgaG9zdCBvciB3aXRoIHRoZSBvcHRpb25hbCBwYXRoLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgIGFwcC51c2UoJy9hcGknLCBwcm94eSgnaHR0cDovL2xvY2FsaG9zdDo5MDAwJykpO1xuICogICAgICBhcHAudXNlKHByb3h5KCdodHRwOi8vbG9jYWxob3N0OjkwMDAvYXBpJykpO1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gIGNvbnRleHQgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nU2hvcnRIYW5kKGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAhIXVybC5wYXJzZShjb250ZXh0KS5ob3N0O1xuICAgIH1cbn1cbi8qKlxuICogQ2hlY2tzIGlmIGEgT2JqZWN0IG9ubHkgY29uZmlnIGlzIHByb3ZpZGVkLCB3aXRob3V0IGEgY29udGV4dC5cbiAqIEluIHRoaXMgY2FzZSB0aGUgYWxsIHBhdGhzIHdpbGwgYmUgcHJveGllZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIGFwcC51c2UoJy9hcGknLCBwcm94eSh7dGFyZ2V0OidodHRwOi8vbG9jYWxob3N0OjkwMDAnfSkpO1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gIGNvbnRleHQgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7Kn0gICAgICAgb3B0cyAgICBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gaXNDb250ZXh0bGVzcyhjb250ZXh0LCBvcHRzKSB7XG4gICAgcmV0dXJuIGlzUGxhaW5PYmooY29udGV4dCkgJiYgKG9wdHMgPT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvcHRzKS5sZW5ndGggPT09IDApO1xufVxuZnVuY3Rpb24gY29uZmlndXJlTG9nZ2VyKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5sb2dMZXZlbCkge1xuICAgICAgICBsb2dnZXIuc2V0TGV2ZWwob3B0aW9ucy5sb2dMZXZlbCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxvZ1Byb3ZpZGVyKSB7XG4gICAgICAgIGxvZ2dlci5zZXRQcm92aWRlcihvcHRpb25zLmxvZ1Byb3ZpZGVyKTtcbiAgICB9XG59XG4iLCIvKiFcbiAqIGlzLWV4dGdsb2IgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLWV4dGdsb2I+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTYsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFeHRnbG9iKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IC8oXFxcXCkufChbQD8hKypdXFwoLipcXCkpL2cuZXhlYyhzdHIpKSkge1xuICAgIGlmIChtYXRjaFsyXSkgcmV0dXJuIHRydWU7XG4gICAgc3RyID0gc3RyLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIvKiFcbiAqIGlzLWdsb2IgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLWdsb2I+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbnZhciBpc0V4dGdsb2IgPSByZXF1aXJlKCdpcy1leHRnbG9iJyk7XG52YXIgY2hhcnMgPSB7ICd7JzogJ30nLCAnKCc6ICcpJywgJ1snOiAnXSd9O1xudmFyIHN0cmljdENoZWNrID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmIChzdHJbMF0gPT09ICchJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBwaXBlSW5kZXggPSAtMjtcbiAgdmFyIGNsb3NlU3F1YXJlSW5kZXggPSAtMjtcbiAgdmFyIGNsb3NlQ3VybHlJbmRleCA9IC0yO1xuICB2YXIgY2xvc2VQYXJlbkluZGV4ID0gLTI7XG4gIHZhciBiYWNrU2xhc2hJbmRleCA9IC0yO1xuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgaWYgKHN0cltpbmRleF0gPT09ICcqJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleCArIDFdID09PSAnPycgJiYgL1tcXF0uKyldLy50ZXN0KHN0cltpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VTcXVhcmVJbmRleCAhPT0gLTEgJiYgc3RyW2luZGV4XSA9PT0gJ1snICYmIHN0cltpbmRleCArIDFdICE9PSAnXScpIHtcbiAgICAgIGlmIChjbG9zZVNxdWFyZUluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgY2xvc2VTcXVhcmVJbmRleCA9IHN0ci5pbmRleE9mKCddJywgaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKGNsb3NlU3F1YXJlSW5kZXggPiBpbmRleCkge1xuICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VTcXVhcmVJbmRleCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJhY2tTbGFzaEluZGV4ID0gc3RyLmluZGV4T2YoJ1xcXFwnLCBpbmRleCk7XG4gICAgICAgIGlmIChiYWNrU2xhc2hJbmRleCA9PT0gLTEgfHwgYmFja1NsYXNoSW5kZXggPiBjbG9zZVNxdWFyZUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xvc2VDdXJseUluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAneycgJiYgc3RyW2luZGV4ICsgMV0gIT09ICd9Jykge1xuICAgICAgY2xvc2VDdXJseUluZGV4ID0gc3RyLmluZGV4T2YoJ30nLCBpbmRleCk7XG4gICAgICBpZiAoY2xvc2VDdXJseUluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgYmFja1NsYXNoSW5kZXggPSBzdHIuaW5kZXhPZignXFxcXCcsIGluZGV4KTtcbiAgICAgICAgaWYgKGJhY2tTbGFzaEluZGV4ID09PSAtMSB8fCBiYWNrU2xhc2hJbmRleCA+IGNsb3NlQ3VybHlJbmRleCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlUGFyZW5JbmRleCAhPT0gLTEgJiYgc3RyW2luZGV4XSA9PT0gJygnICYmIHN0cltpbmRleCArIDFdID09PSAnPycgJiYgL1s6IT1dLy50ZXN0KHN0cltpbmRleCArIDJdKSAmJiBzdHJbaW5kZXggKyAzXSAhPT0gJyknKSB7XG4gICAgICBjbG9zZVBhcmVuSW5kZXggPSBzdHIuaW5kZXhPZignKScsIGluZGV4KTtcbiAgICAgIGlmIChjbG9zZVBhcmVuSW5kZXggPiBpbmRleCkge1xuICAgICAgICBiYWNrU2xhc2hJbmRleCA9IHN0ci5pbmRleE9mKCdcXFxcJywgaW5kZXgpO1xuICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VQYXJlbkluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGlwZUluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAnKCcgJiYgc3RyW2luZGV4ICsgMV0gIT09ICd8Jykge1xuICAgICAgaWYgKHBpcGVJbmRleCA8IGluZGV4KSB7XG4gICAgICAgIHBpcGVJbmRleCA9IHN0ci5pbmRleE9mKCd8JywgaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHBpcGVJbmRleCAhPT0gLTEgJiYgc3RyW3BpcGVJbmRleCArIDFdICE9PSAnKScpIHtcbiAgICAgICAgY2xvc2VQYXJlbkluZGV4ID0gc3RyLmluZGV4T2YoJyknLCBwaXBlSW5kZXgpO1xuICAgICAgICBpZiAoY2xvc2VQYXJlbkluZGV4ID4gcGlwZUluZGV4KSB7XG4gICAgICAgICAgYmFja1NsYXNoSW5kZXggPSBzdHIuaW5kZXhPZignXFxcXCcsIHBpcGVJbmRleCk7XG4gICAgICAgICAgaWYgKGJhY2tTbGFzaEluZGV4ID09PSAtMSB8fCBiYWNrU2xhc2hJbmRleCA+IGNsb3NlUGFyZW5JbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleF0gPT09ICdcXFxcJykge1xuICAgICAgdmFyIG9wZW4gPSBzdHJbaW5kZXggKyAxXTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgICB2YXIgY2xvc2UgPSBjaGFyc1tvcGVuXTtcblxuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoY2xvc2UsIGluZGV4KTtcbiAgICAgICAgaWYgKG4gIT09IC0xKSB7XG4gICAgICAgICAgaW5kZXggPSBuICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyW2luZGV4XSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVsYXhlZENoZWNrID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmIChzdHJbMF0gPT09ICchJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBpZiAoL1sqP3t9KClbXFxdXS8udGVzdChzdHJbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleF0gPT09ICdcXFxcJykge1xuICAgICAgdmFyIG9wZW4gPSBzdHJbaW5kZXggKyAxXTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgICB2YXIgY2xvc2UgPSBjaGFyc1tvcGVuXTtcblxuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoY2xvc2UsIGluZGV4KTtcbiAgICAgICAgaWYgKG4gIT09IC0xKSB7XG4gICAgICAgICAgaW5kZXggPSBuICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyW2luZGV4XSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR2xvYihzdHIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IHN0ciA9PT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNFeHRnbG9iKHN0cikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjaGVjayA9IHN0cmljdENoZWNrO1xuXG4gIC8vIG9wdGlvbmFsbHkgcmVsYXggY2hlY2tcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QgPT09IGZhbHNlKSB7XG4gICAgY2hlY2sgPSByZWxheGVkQ2hlY2s7XG4gIH1cblxuICByZXR1cm4gY2hlY2soc3RyKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuaXNJbnRlZ2VyID0gbnVtID0+IHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIobnVtKTtcbiAgfVxuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycgJiYgbnVtLnRyaW0oKSAhPT0gJycpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihOdW1iZXIobnVtKSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZVxuICovXG5cbmV4cG9ydHMuZmluZCA9IChub2RlLCB0eXBlKSA9PiBub2RlLm5vZGVzLmZpbmQobm9kZSA9PiBub2RlLnR5cGUgPT09IHR5cGUpO1xuXG4vKipcbiAqIEZpbmQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlXG4gKi9cblxuZXhwb3J0cy5leGNlZWRzTGltaXQgPSAobWluLCBtYXgsIHN0ZXAgPSAxLCBsaW1pdCkgPT4ge1xuICBpZiAobGltaXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gIGlmICghZXhwb3J0cy5pc0ludGVnZXIobWluKSB8fCAhZXhwb3J0cy5pc0ludGVnZXIobWF4KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKChOdW1iZXIobWF4KSAtIE51bWJlcihtaW4pKSAvIE51bWJlcihzdGVwKSkgPj0gbGltaXQ7XG59O1xuXG4vKipcbiAqIEVzY2FwZSB0aGUgZ2l2ZW4gbm9kZSB3aXRoICdcXFxcJyBiZWZvcmUgbm9kZS52YWx1ZVxuICovXG5cbmV4cG9ydHMuZXNjYXBlTm9kZSA9IChibG9jaywgbiA9IDAsIHR5cGUpID0+IHtcbiAgbGV0IG5vZGUgPSBibG9jay5ub2Rlc1tuXTtcbiAgaWYgKCFub2RlKSByZXR1cm47XG5cbiAgaWYgKCh0eXBlICYmIG5vZGUudHlwZSA9PT0gdHlwZSkgfHwgbm9kZS50eXBlID09PSAnb3BlbicgfHwgbm9kZS50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgaWYgKG5vZGUuZXNjYXBlZCAhPT0gdHJ1ZSkge1xuICAgICAgbm9kZS52YWx1ZSA9ICdcXFxcJyArIG5vZGUudmFsdWU7XG4gICAgICBub2RlLmVzY2FwZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGJyYWNlIG5vZGUgc2hvdWxkIGJlIGVuY2xvc2VkIGluIGxpdGVyYWwgYnJhY2VzXG4gKi9cblxuZXhwb3J0cy5lbmNsb3NlQnJhY2UgPSBub2RlID0+IHtcbiAgaWYgKG5vZGUudHlwZSAhPT0gJ2JyYWNlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoKG5vZGUuY29tbWFzID4+IDAgKyBub2RlLnJhbmdlcyA+PiAwKSA9PT0gMCkge1xuICAgIG5vZGUuaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBicmFjZSBub2RlIGlzIGludmFsaWQuXG4gKi9cblxuZXhwb3J0cy5pc0ludmFsaWRCcmFjZSA9IGJsb2NrID0+IHtcbiAgaWYgKGJsb2NrLnR5cGUgIT09ICdicmFjZScpIHJldHVybiBmYWxzZTtcbiAgaWYgKGJsb2NrLmludmFsaWQgPT09IHRydWUgfHwgYmxvY2suZG9sbGFyKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKChibG9jay5jb21tYXMgPj4gMCArIGJsb2NrLnJhbmdlcyA+PiAwKSA9PT0gMCkge1xuICAgIGJsb2NrLmludmFsaWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChibG9jay5vcGVuICE9PSB0cnVlIHx8IGJsb2NrLmNsb3NlICE9PSB0cnVlKSB7XG4gICAgYmxvY2suaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBub2RlIGlzIGFuIG9wZW4gb3IgY2xvc2Ugbm9kZVxuICovXG5cbmV4cG9ydHMuaXNPcGVuT3JDbG9zZSA9IG5vZGUgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAnb3BlbicgfHwgbm9kZS50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG5vZGUub3BlbiA9PT0gdHJ1ZSB8fCBub2RlLmNsb3NlID09PSB0cnVlO1xufTtcblxuLyoqXG4gKiBSZWR1Y2UgYW4gYXJyYXkgb2YgdGV4dCBub2Rlcy5cbiAqL1xuXG5leHBvcnRzLnJlZHVjZSA9IG5vZGVzID0+IG5vZGVzLnJlZHVjZSgoYWNjLCBub2RlKSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09ICd0ZXh0JykgYWNjLnB1c2gobm9kZS52YWx1ZSk7XG4gIGlmIChub2RlLnR5cGUgPT09ICdyYW5nZScpIG5vZGUudHlwZSA9ICd0ZXh0JztcbiAgcmV0dXJuIGFjYztcbn0sIFtdKTtcblxuLyoqXG4gKiBGbGF0dGVuIGFuIGFycmF5XG4gKi9cblxuZXhwb3J0cy5mbGF0dGVuID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGZsYXQgPSBhcnIgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWxlID0gYXJyW2ldO1xuICAgICAgQXJyYXkuaXNBcnJheShlbGUpID8gZmxhdChlbGUsIHJlc3VsdCkgOiBlbGUgIT09IHZvaWQgMCAmJiByZXN1bHQucHVzaChlbGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBmbGF0KGFyZ3MpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGFzdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBzdHJpbmdpZnkgPSAobm9kZSwgcGFyZW50ID0ge30pID0+IHtcbiAgICBsZXQgaW52YWxpZEJsb2NrID0gb3B0aW9ucy5lc2NhcGVJbnZhbGlkICYmIHV0aWxzLmlzSW52YWxpZEJyYWNlKHBhcmVudCk7XG4gICAgbGV0IGludmFsaWROb2RlID0gbm9kZS5pbnZhbGlkID09PSB0cnVlICYmIG9wdGlvbnMuZXNjYXBlSW52YWxpZCA9PT0gdHJ1ZTtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgaWYgKChpbnZhbGlkQmxvY2sgfHwgaW52YWxpZE5vZGUpICYmIHV0aWxzLmlzT3Blbk9yQ2xvc2Uobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICdcXFxcJyArIG5vZGUudmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkIG9mIG5vZGUubm9kZXMpIHtcbiAgICAgICAgb3V0cHV0ICs9IHN0cmluZ2lmeShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShhc3QpO1xufTtcblxuIiwiLyohXG4gKiBpcy1udW1iZXIgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLW51bWJlcj5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG51bSkge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbnVtIC0gbnVtID09PSAwO1xuICB9XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJyAmJiBudW0udHJpbSgpICE9PSAnJykge1xuICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUgPyBOdW1iZXIuaXNGaW5pdGUoK251bSkgOiBpc0Zpbml0ZSgrbnVtKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiLyohXG4gKiB0by1yZWdleC1yYW5nZSA8aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWF0Y2gvdG8tcmVnZXgtcmFuZ2U+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNOdW1iZXIgPSByZXF1aXJlKCdpcy1udW1iZXInKTtcblxuY29uc3QgdG9SZWdleFJhbmdlID0gKG1pbiwgbWF4LCBvcHRpb25zKSA9PiB7XG4gIGlmIChpc051bWJlcihtaW4pID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvUmVnZXhSYW5nZTogZXhwZWN0ZWQgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyJyk7XG4gIH1cblxuICBpZiAobWF4ID09PSB2b2lkIDAgfHwgbWluID09PSBtYXgpIHtcbiAgICByZXR1cm4gU3RyaW5nKG1pbik7XG4gIH1cblxuICBpZiAoaXNOdW1iZXIobWF4KSA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b1JlZ2V4UmFuZ2U6IGV4cGVjdGVkIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIuJyk7XG4gIH1cblxuICBsZXQgb3B0cyA9IHsgcmVsYXhaZXJvczogdHJ1ZSwgLi4ub3B0aW9ucyB9O1xuICBpZiAodHlwZW9mIG9wdHMuc3RyaWN0WmVyb3MgPT09ICdib29sZWFuJykge1xuICAgIG9wdHMucmVsYXhaZXJvcyA9IG9wdHMuc3RyaWN0WmVyb3MgPT09IGZhbHNlO1xuICB9XG5cbiAgbGV0IHJlbGF4ID0gU3RyaW5nKG9wdHMucmVsYXhaZXJvcyk7XG4gIGxldCBzaG9ydGhhbmQgPSBTdHJpbmcob3B0cy5zaG9ydGhhbmQpO1xuICBsZXQgY2FwdHVyZSA9IFN0cmluZyhvcHRzLmNhcHR1cmUpO1xuICBsZXQgd3JhcCA9IFN0cmluZyhvcHRzLndyYXApO1xuICBsZXQgY2FjaGVLZXkgPSBtaW4gKyAnOicgKyBtYXggKyAnPScgKyByZWxheCArIHNob3J0aGFuZCArIGNhcHR1cmUgKyB3cmFwO1xuXG4gIGlmICh0b1JlZ2V4UmFuZ2UuY2FjaGUuaGFzT3duUHJvcGVydHkoY2FjaGVLZXkpKSB7XG4gICAgcmV0dXJuIHRvUmVnZXhSYW5nZS5jYWNoZVtjYWNoZUtleV0ucmVzdWx0O1xuICB9XG5cbiAgbGV0IGEgPSBNYXRoLm1pbihtaW4sIG1heCk7XG4gIGxldCBiID0gTWF0aC5tYXgobWluLCBtYXgpO1xuXG4gIGlmIChNYXRoLmFicyhhIC0gYikgPT09IDEpIHtcbiAgICBsZXQgcmVzdWx0ID0gbWluICsgJ3wnICsgbWF4O1xuICAgIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBgKCR7cmVzdWx0fSlgO1xuICAgIH1cbiAgICBpZiAob3B0cy53cmFwID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGAoPzoke3Jlc3VsdH0pYDtcbiAgfVxuXG4gIGxldCBpc1BhZGRlZCA9IGhhc1BhZGRpbmcobWluKSB8fCBoYXNQYWRkaW5nKG1heCk7XG4gIGxldCBzdGF0ZSA9IHsgbWluLCBtYXgsIGEsIGIgfTtcbiAgbGV0IHBvc2l0aXZlcyA9IFtdO1xuICBsZXQgbmVnYXRpdmVzID0gW107XG5cbiAgaWYgKGlzUGFkZGVkKSB7XG4gICAgc3RhdGUuaXNQYWRkZWQgPSBpc1BhZGRlZDtcbiAgICBzdGF0ZS5tYXhMZW4gPSBTdHJpbmcoc3RhdGUubWF4KS5sZW5ndGg7XG4gIH1cblxuICBpZiAoYSA8IDApIHtcbiAgICBsZXQgbmV3TWluID0gYiA8IDAgPyBNYXRoLmFicyhiKSA6IDE7XG4gICAgbmVnYXRpdmVzID0gc3BsaXRUb1BhdHRlcm5zKG5ld01pbiwgTWF0aC5hYnMoYSksIHN0YXRlLCBvcHRzKTtcbiAgICBhID0gc3RhdGUuYSA9IDA7XG4gIH1cblxuICBpZiAoYiA+PSAwKSB7XG4gICAgcG9zaXRpdmVzID0gc3BsaXRUb1BhdHRlcm5zKGEsIGIsIHN0YXRlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRlLm5lZ2F0aXZlcyA9IG5lZ2F0aXZlcztcbiAgc3RhdGUucG9zaXRpdmVzID0gcG9zaXRpdmVzO1xuICBzdGF0ZS5yZXN1bHQgPSBjb2xsYXRlUGF0dGVybnMobmVnYXRpdmVzLCBwb3NpdGl2ZXMsIG9wdHMpO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUgPT09IHRydWUpIHtcbiAgICBzdGF0ZS5yZXN1bHQgPSBgKCR7c3RhdGUucmVzdWx0fSlgO1xuICB9IGVsc2UgaWYgKG9wdHMud3JhcCAhPT0gZmFsc2UgJiYgKHBvc2l0aXZlcy5sZW5ndGggKyBuZWdhdGl2ZXMubGVuZ3RoKSA+IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgPSBgKD86JHtzdGF0ZS5yZXN1bHR9KWA7XG4gIH1cblxuICB0b1JlZ2V4UmFuZ2UuY2FjaGVbY2FjaGVLZXldID0gc3RhdGU7XG4gIHJldHVybiBzdGF0ZS5yZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBjb2xsYXRlUGF0dGVybnMobmVnLCBwb3MsIG9wdGlvbnMpIHtcbiAgbGV0IG9ubHlOZWdhdGl2ZSA9IGZpbHRlclBhdHRlcm5zKG5lZywgcG9zLCAnLScsIGZhbHNlLCBvcHRpb25zKSB8fCBbXTtcbiAgbGV0IG9ubHlQb3NpdGl2ZSA9IGZpbHRlclBhdHRlcm5zKHBvcywgbmVnLCAnJywgZmFsc2UsIG9wdGlvbnMpIHx8IFtdO1xuICBsZXQgaW50ZXJzZWN0ZWQgPSBmaWx0ZXJQYXR0ZXJucyhuZWcsIHBvcywgJy0/JywgdHJ1ZSwgb3B0aW9ucykgfHwgW107XG4gIGxldCBzdWJwYXR0ZXJucyA9IG9ubHlOZWdhdGl2ZS5jb25jYXQoaW50ZXJzZWN0ZWQpLmNvbmNhdChvbmx5UG9zaXRpdmUpO1xuICByZXR1cm4gc3VicGF0dGVybnMuam9pbignfCcpO1xufVxuXG5mdW5jdGlvbiBzcGxpdFRvUmFuZ2VzKG1pbiwgbWF4KSB7XG4gIGxldCBuaW5lcyA9IDE7XG4gIGxldCB6ZXJvcyA9IDE7XG5cbiAgbGV0IHN0b3AgPSBjb3VudE5pbmVzKG1pbiwgbmluZXMpO1xuICBsZXQgc3RvcHMgPSBuZXcgU2V0KFttYXhdKTtcblxuICB3aGlsZSAobWluIDw9IHN0b3AgJiYgc3RvcCA8PSBtYXgpIHtcbiAgICBzdG9wcy5hZGQoc3RvcCk7XG4gICAgbmluZXMgKz0gMTtcbiAgICBzdG9wID0gY291bnROaW5lcyhtaW4sIG5pbmVzKTtcbiAgfVxuXG4gIHN0b3AgPSBjb3VudFplcm9zKG1heCArIDEsIHplcm9zKSAtIDE7XG5cbiAgd2hpbGUgKG1pbiA8IHN0b3AgJiYgc3RvcCA8PSBtYXgpIHtcbiAgICBzdG9wcy5hZGQoc3RvcCk7XG4gICAgemVyb3MgKz0gMTtcbiAgICBzdG9wID0gY291bnRaZXJvcyhtYXggKyAxLCB6ZXJvcykgLSAxO1xuICB9XG5cbiAgc3RvcHMgPSBbLi4uc3RvcHNdO1xuICBzdG9wcy5zb3J0KGNvbXBhcmUpO1xuICByZXR1cm4gc3RvcHM7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHJhbmdlIHRvIGEgcmVnZXggcGF0dGVyblxuICogQHBhcmFtIHtOdW1iZXJ9IGBzdGFydGBcbiAqIEBwYXJhbSB7TnVtYmVyfSBgc3RvcGBcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiByYW5nZVRvUGF0dGVybihzdGFydCwgc3RvcCwgb3B0aW9ucykge1xuICBpZiAoc3RhcnQgPT09IHN0b3ApIHtcbiAgICByZXR1cm4geyBwYXR0ZXJuOiBzdGFydCwgY291bnQ6IFtdLCBkaWdpdHM6IDAgfTtcbiAgfVxuXG4gIGxldCB6aXBwZWQgPSB6aXAoc3RhcnQsIHN0b3ApO1xuICBsZXQgZGlnaXRzID0gemlwcGVkLmxlbmd0aDtcbiAgbGV0IHBhdHRlcm4gPSAnJztcbiAgbGV0IGNvdW50ID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2l0czsgaSsrKSB7XG4gICAgbGV0IFtzdGFydERpZ2l0LCBzdG9wRGlnaXRdID0gemlwcGVkW2ldO1xuXG4gICAgaWYgKHN0YXJ0RGlnaXQgPT09IHN0b3BEaWdpdCkge1xuICAgICAgcGF0dGVybiArPSBzdGFydERpZ2l0O1xuXG4gICAgfSBlbHNlIGlmIChzdGFydERpZ2l0ICE9PSAnMCcgfHwgc3RvcERpZ2l0ICE9PSAnOScpIHtcbiAgICAgIHBhdHRlcm4gKz0gdG9DaGFyYWN0ZXJDbGFzcyhzdGFydERpZ2l0LCBzdG9wRGlnaXQsIG9wdGlvbnMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgcGF0dGVybiArPSBvcHRpb25zLnNob3J0aGFuZCA9PT0gdHJ1ZSA/ICdcXFxcZCcgOiAnWzAtOV0nO1xuICB9XG5cbiAgcmV0dXJuIHsgcGF0dGVybiwgY291bnQ6IFtjb3VudF0sIGRpZ2l0cyB9O1xufVxuXG5mdW5jdGlvbiBzcGxpdFRvUGF0dGVybnMobWluLCBtYXgsIHRvaywgb3B0aW9ucykge1xuICBsZXQgcmFuZ2VzID0gc3BsaXRUb1JhbmdlcyhtaW4sIG1heCk7XG4gIGxldCB0b2tlbnMgPSBbXTtcbiAgbGV0IHN0YXJ0ID0gbWluO1xuICBsZXQgcHJldjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBtYXggPSByYW5nZXNbaV07XG4gICAgbGV0IG9iaiA9IHJhbmdlVG9QYXR0ZXJuKFN0cmluZyhzdGFydCksIFN0cmluZyhtYXgpLCBvcHRpb25zKTtcbiAgICBsZXQgemVyb3MgPSAnJztcblxuICAgIGlmICghdG9rLmlzUGFkZGVkICYmIHByZXYgJiYgcHJldi5wYXR0ZXJuID09PSBvYmoucGF0dGVybikge1xuICAgICAgaWYgKHByZXYuY291bnQubGVuZ3RoID4gMSkge1xuICAgICAgICBwcmV2LmNvdW50LnBvcCgpO1xuICAgICAgfVxuXG4gICAgICBwcmV2LmNvdW50LnB1c2gob2JqLmNvdW50WzBdKTtcbiAgICAgIHByZXYuc3RyaW5nID0gcHJldi5wYXR0ZXJuICsgdG9RdWFudGlmaWVyKHByZXYuY291bnQpO1xuICAgICAgc3RhcnQgPSBtYXggKyAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRvay5pc1BhZGRlZCkge1xuICAgICAgemVyb3MgPSBwYWRaZXJvcyhtYXgsIHRvaywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgb2JqLnN0cmluZyA9IHplcm9zICsgb2JqLnBhdHRlcm4gKyB0b1F1YW50aWZpZXIob2JqLmNvdW50KTtcbiAgICB0b2tlbnMucHVzaChvYmopO1xuICAgIHN0YXJ0ID0gbWF4ICsgMTtcbiAgICBwcmV2ID0gb2JqO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gZmlsdGVyUGF0dGVybnMoYXJyLCBjb21wYXJpc29uLCBwcmVmaXgsIGludGVyc2VjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgcmVzdWx0ID0gW107XG5cbiAgZm9yIChsZXQgZWxlIG9mIGFycikge1xuICAgIGxldCB7IHN0cmluZyB9ID0gZWxlO1xuXG4gICAgLy8gb25seSBwdXNoIGlmIF9ib3RoXyBhcmUgbmVnYXRpdmUuLi5cbiAgICBpZiAoIWludGVyc2VjdGlvbiAmJiAhY29udGFpbnMoY29tcGFyaXNvbiwgJ3N0cmluZycsIHN0cmluZykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHByZWZpeCArIHN0cmluZyk7XG4gICAgfVxuXG4gICAgLy8gb3IgX2JvdGhfIGFyZSBwb3NpdGl2ZVxuICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgY29udGFpbnMoY29tcGFyaXNvbiwgJ3N0cmluZycsIHN0cmluZykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHByZWZpeCArIHN0cmluZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogWmlwIHN0cmluZ3NcbiAqL1xuXG5mdW5jdGlvbiB6aXAoYSwgYikge1xuICBsZXQgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgYXJyLnB1c2goW2FbaV0sIGJbaV1dKTtcbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhID4gYiA/IDEgOiBiID4gYSA/IC0xIDogMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoYXJyLCBrZXksIHZhbCkge1xuICByZXR1cm4gYXJyLnNvbWUoZWxlID0+IGVsZVtrZXldID09PSB2YWwpO1xufVxuXG5mdW5jdGlvbiBjb3VudE5pbmVzKG1pbiwgbGVuKSB7XG4gIHJldHVybiBOdW1iZXIoU3RyaW5nKG1pbikuc2xpY2UoMCwgLWxlbikgKyAnOScucmVwZWF0KGxlbikpO1xufVxuXG5mdW5jdGlvbiBjb3VudFplcm9zKGludGVnZXIsIHplcm9zKSB7XG4gIHJldHVybiBpbnRlZ2VyIC0gKGludGVnZXIgJSBNYXRoLnBvdygxMCwgemVyb3MpKTtcbn1cblxuZnVuY3Rpb24gdG9RdWFudGlmaWVyKGRpZ2l0cykge1xuICBsZXQgW3N0YXJ0ID0gMCwgc3RvcCA9ICcnXSA9IGRpZ2l0cztcbiAgaWYgKHN0b3AgfHwgc3RhcnQgPiAxKSB7XG4gICAgcmV0dXJuIGB7JHtzdGFydCArIChzdG9wID8gJywnICsgc3RvcCA6ICcnKX19YDtcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHRvQ2hhcmFjdGVyQ2xhc3MoYSwgYiwgb3B0aW9ucykge1xuICByZXR1cm4gYFske2F9JHsoYiAtIGEgPT09IDEpID8gJycgOiAnLSd9JHtifV1gO1xufVxuXG5mdW5jdGlvbiBoYXNQYWRkaW5nKHN0cikge1xuICByZXR1cm4gL14tPygwKylcXGQvLnRlc3Qoc3RyKTtcbn1cblxuZnVuY3Rpb24gcGFkWmVyb3ModmFsdWUsIHRvaywgb3B0aW9ucykge1xuICBpZiAoIXRvay5pc1BhZGRlZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGxldCBkaWZmID0gTWF0aC5hYnModG9rLm1heExlbiAtIFN0cmluZyh2YWx1ZSkubGVuZ3RoKTtcbiAgbGV0IHJlbGF4ID0gb3B0aW9ucy5yZWxheFplcm9zICE9PSBmYWxzZTtcblxuICBzd2l0Y2ggKGRpZmYpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gJyc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHJlbGF4ID8gJzA/JyA6ICcwJztcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gcmVsYXggPyAnMHswLDJ9JyA6ICcwMCc7XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIHJlbGF4ID8gYDB7MCwke2RpZmZ9fWAgOiBgMHske2RpZmZ9fWA7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FjaGVcbiAqL1xuXG50b1JlZ2V4UmFuZ2UuY2FjaGUgPSB7fTtcbnRvUmVnZXhSYW5nZS5jbGVhckNhY2hlID0gKCkgPT4gKHRvUmVnZXhSYW5nZS5jYWNoZSA9IHt9KTtcblxuLyoqXG4gKiBFeHBvc2UgYHRvUmVnZXhSYW5nZWBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRvUmVnZXhSYW5nZTtcbiIsIi8qIVxuICogZmlsbC1yYW5nZSA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvZmlsbC1yYW5nZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgdG9SZWdleFJhbmdlID0gcmVxdWlyZSgndG8tcmVnZXgtcmFuZ2UnKTtcblxuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG5cbmNvbnN0IHRyYW5zZm9ybSA9IHRvTnVtYmVyID0+IHtcbiAgcmV0dXJuIHZhbHVlID0+IHRvTnVtYmVyID09PSB0cnVlID8gTnVtYmVyKHZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59O1xuXG5jb25zdCBpc1ZhbGlkVmFsdWUgPSB2YWx1ZSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJyk7XG59O1xuXG5jb25zdCBpc051bWJlciA9IG51bSA9PiBOdW1iZXIuaXNJbnRlZ2VyKCtudW0pO1xuXG5jb25zdCB6ZXJvcyA9IGlucHV0ID0+IHtcbiAgbGV0IHZhbHVlID0gYCR7aW5wdXR9YDtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGlmICh2YWx1ZVswXSA9PT0gJy0nKSB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIGZhbHNlO1xuICB3aGlsZSAodmFsdWVbKytpbmRleF0gPT09ICcwJyk7XG4gIHJldHVybiBpbmRleCA+IDA7XG59O1xuXG5jb25zdCBzdHJpbmdpZnkgPSAoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvcHRpb25zLnN0cmluZ2lmeSA9PT0gdHJ1ZTtcbn07XG5cbmNvbnN0IHBhZCA9IChpbnB1dCwgbWF4TGVuZ3RoLCB0b051bWJlcikgPT4ge1xuICBpZiAobWF4TGVuZ3RoID4gMCkge1xuICAgIGxldCBkYXNoID0gaW5wdXRbMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICAgIGlmIChkYXNoKSBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIGlucHV0ID0gKGRhc2ggKyBpbnB1dC5wYWRTdGFydChkYXNoID8gbWF4TGVuZ3RoIC0gMSA6IG1heExlbmd0aCwgJzAnKSk7XG4gIH1cbiAgaWYgKHRvTnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBTdHJpbmcoaW5wdXQpO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG5cbmNvbnN0IHRvTWF4TGVuID0gKGlucHV0LCBtYXhMZW5ndGgpID0+IHtcbiAgbGV0IG5lZ2F0aXZlID0gaW5wdXRbMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICBpZiAobmVnYXRpdmUpIHtcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIG1heExlbmd0aC0tO1xuICB9XG4gIHdoaWxlIChpbnB1dC5sZW5ndGggPCBtYXhMZW5ndGgpIGlucHV0ID0gJzAnICsgaW5wdXQ7XG4gIHJldHVybiBuZWdhdGl2ZSA/ICgnLScgKyBpbnB1dCkgOiBpbnB1dDtcbn07XG5cbmNvbnN0IHRvU2VxdWVuY2UgPSAocGFydHMsIG9wdGlvbnMpID0+IHtcbiAgcGFydHMubmVnYXRpdmVzLnNvcnQoKGEsIGIpID0+IGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwKTtcbiAgcGFydHMucG9zaXRpdmVzLnNvcnQoKGEsIGIpID0+IGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwKTtcblxuICBsZXQgcHJlZml4ID0gb3B0aW9ucy5jYXB0dXJlID8gJycgOiAnPzonO1xuICBsZXQgcG9zaXRpdmVzID0gJyc7XG4gIGxldCBuZWdhdGl2ZXMgPSAnJztcbiAgbGV0IHJlc3VsdDtcblxuICBpZiAocGFydHMucG9zaXRpdmVzLmxlbmd0aCkge1xuICAgIHBvc2l0aXZlcyA9IHBhcnRzLnBvc2l0aXZlcy5qb2luKCd8Jyk7XG4gIH1cblxuICBpZiAocGFydHMubmVnYXRpdmVzLmxlbmd0aCkge1xuICAgIG5lZ2F0aXZlcyA9IGAtKCR7cHJlZml4fSR7cGFydHMubmVnYXRpdmVzLmpvaW4oJ3wnKX0pYDtcbiAgfVxuXG4gIGlmIChwb3NpdGl2ZXMgJiYgbmVnYXRpdmVzKSB7XG4gICAgcmVzdWx0ID0gYCR7cG9zaXRpdmVzfXwke25lZ2F0aXZlc31gO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHBvc2l0aXZlcyB8fCBuZWdhdGl2ZXM7XG4gIH1cblxuICBpZiAob3B0aW9ucy53cmFwKSB7XG4gICAgcmV0dXJuIGAoJHtwcmVmaXh9JHtyZXN1bHR9KWA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgdG9SYW5nZSA9IChhLCBiLCBpc051bWJlcnMsIG9wdGlvbnMpID0+IHtcbiAgaWYgKGlzTnVtYmVycykge1xuICAgIHJldHVybiB0b1JlZ2V4UmFuZ2UoYSwgYiwgeyB3cmFwOiBmYWxzZSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIGxldCBzdGFydCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYSk7XG4gIGlmIChhID09PSBiKSByZXR1cm4gc3RhcnQ7XG5cbiAgbGV0IHN0b3AgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGIpO1xuICByZXR1cm4gYFske3N0YXJ0fS0ke3N0b3B9XWA7XG59O1xuXG5jb25zdCB0b1JlZ2V4ID0gKHN0YXJ0LCBlbmQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RhcnQpKSB7XG4gICAgbGV0IHdyYXAgPSBvcHRpb25zLndyYXAgPT09IHRydWU7XG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgICByZXR1cm4gd3JhcCA/IGAoJHtwcmVmaXh9JHtzdGFydC5qb2luKCd8Jyl9KWAgOiBzdGFydC5qb2luKCd8Jyk7XG4gIH1cbiAgcmV0dXJuIHRvUmVnZXhSYW5nZShzdGFydCwgZW5kLCBvcHRpb25zKTtcbn07XG5cbmNvbnN0IHJhbmdlRXJyb3IgPSAoLi4uYXJncykgPT4ge1xuICByZXR1cm4gbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgcmFuZ2UgYXJndW1lbnRzOiAnICsgdXRpbC5pbnNwZWN0KC4uLmFyZ3MpKTtcbn07XG5cbmNvbnN0IGludmFsaWRSYW5nZSA9IChzdGFydCwgZW5kLCBvcHRpb25zKSA9PiB7XG4gIGlmIChvcHRpb25zLnN0cmljdFJhbmdlcyA9PT0gdHJ1ZSkgdGhyb3cgcmFuZ2VFcnJvcihbc3RhcnQsIGVuZF0pO1xuICByZXR1cm4gW107XG59O1xuXG5jb25zdCBpbnZhbGlkU3RlcCA9IChzdGVwLCBvcHRpb25zKSA9PiB7XG4gIGlmIChvcHRpb25zLnN0cmljdFJhbmdlcyA9PT0gdHJ1ZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHN0ZXAgXCIke3N0ZXB9XCIgdG8gYmUgYSBudW1iZXJgKTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5jb25zdCBmaWxsTnVtYmVycyA9IChzdGFydCwgZW5kLCBzdGVwID0gMSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBhID0gTnVtYmVyKHN0YXJ0KTtcbiAgbGV0IGIgPSBOdW1iZXIoZW5kKTtcblxuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYSkgfHwgIU51bWJlci5pc0ludGVnZXIoYikpIHtcbiAgICBpZiAob3B0aW9ucy5zdHJpY3RSYW5nZXMgPT09IHRydWUpIHRocm93IHJhbmdlRXJyb3IoW3N0YXJ0LCBlbmRdKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBmaXggbmVnYXRpdmUgemVyb1xuICBpZiAoYSA9PT0gMCkgYSA9IDA7XG4gIGlmIChiID09PSAwKSBiID0gMDtcblxuICBsZXQgZGVzY2VuZGluZyA9IGEgPiBiO1xuICBsZXQgc3RhcnRTdHJpbmcgPSBTdHJpbmcoc3RhcnQpO1xuICBsZXQgZW5kU3RyaW5nID0gU3RyaW5nKGVuZCk7XG4gIGxldCBzdGVwU3RyaW5nID0gU3RyaW5nKHN0ZXApO1xuICBzdGVwID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RlcCksIDEpO1xuXG4gIGxldCBwYWRkZWQgPSB6ZXJvcyhzdGFydFN0cmluZykgfHwgemVyb3MoZW5kU3RyaW5nKSB8fCB6ZXJvcyhzdGVwU3RyaW5nKTtcbiAgbGV0IG1heExlbiA9IHBhZGRlZCA/IE1hdGgubWF4KHN0YXJ0U3RyaW5nLmxlbmd0aCwgZW5kU3RyaW5nLmxlbmd0aCwgc3RlcFN0cmluZy5sZW5ndGgpIDogMDtcbiAgbGV0IHRvTnVtYmVyID0gcGFkZGVkID09PSBmYWxzZSAmJiBzdHJpbmdpZnkoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT09IGZhbHNlO1xuICBsZXQgZm9ybWF0ID0gb3B0aW9ucy50cmFuc2Zvcm0gfHwgdHJhbnNmb3JtKHRvTnVtYmVyKTtcblxuICBpZiAob3B0aW9ucy50b1JlZ2V4ICYmIHN0ZXAgPT09IDEpIHtcbiAgICByZXR1cm4gdG9SYW5nZSh0b01heExlbihzdGFydCwgbWF4TGVuKSwgdG9NYXhMZW4oZW5kLCBtYXhMZW4pLCB0cnVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCBwYXJ0cyA9IHsgbmVnYXRpdmVzOiBbXSwgcG9zaXRpdmVzOiBbXSB9O1xuICBsZXQgcHVzaCA9IG51bSA9PiBwYXJ0c1tudW0gPCAwID8gJ25lZ2F0aXZlcycgOiAncG9zaXRpdmVzJ10ucHVzaChNYXRoLmFicyhudW0pKTtcbiAgbGV0IHJhbmdlID0gW107XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGRlc2NlbmRpbmcgPyBhID49IGIgOiBhIDw9IGIpIHtcbiAgICBpZiAob3B0aW9ucy50b1JlZ2V4ID09PSB0cnVlICYmIHN0ZXAgPiAxKSB7XG4gICAgICBwdXNoKGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5wdXNoKHBhZChmb3JtYXQoYSwgaW5kZXgpLCBtYXhMZW4sIHRvTnVtYmVyKSk7XG4gICAgfVxuICAgIGEgPSBkZXNjZW5kaW5nID8gYSAtIHN0ZXAgOiBhICsgc3RlcDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBzdGVwID4gMVxuICAgICAgPyB0b1NlcXVlbmNlKHBhcnRzLCBvcHRpb25zKVxuICAgICAgOiB0b1JlZ2V4KHJhbmdlLCBudWxsLCB7IHdyYXA6IGZhbHNlLCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufTtcblxuY29uc3QgZmlsbExldHRlcnMgPSAoc3RhcnQsIGVuZCwgc3RlcCA9IDEsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoKCFpc051bWJlcihzdGFydCkgJiYgc3RhcnQubGVuZ3RoID4gMSkgfHwgKCFpc051bWJlcihlbmQpICYmIGVuZC5sZW5ndGggPiAxKSkge1xuICAgIHJldHVybiBpbnZhbGlkUmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9ucyk7XG4gIH1cblxuXG4gIGxldCBmb3JtYXQgPSBvcHRpb25zLnRyYW5zZm9ybSB8fCAodmFsID0+IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsKSk7XG4gIGxldCBhID0gYCR7c3RhcnR9YC5jaGFyQ29kZUF0KDApO1xuICBsZXQgYiA9IGAke2VuZH1gLmNoYXJDb2RlQXQoMCk7XG5cbiAgbGV0IGRlc2NlbmRpbmcgPSBhID4gYjtcbiAgbGV0IG1pbiA9IE1hdGgubWluKGEsIGIpO1xuICBsZXQgbWF4ID0gTWF0aC5tYXgoYSwgYik7XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCAmJiBzdGVwID09PSAxKSB7XG4gICAgcmV0dXJuIHRvUmFuZ2UobWluLCBtYXgsIGZhbHNlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCByYW5nZSA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChkZXNjZW5kaW5nID8gYSA+PSBiIDogYSA8PSBiKSB7XG4gICAgcmFuZ2UucHVzaChmb3JtYXQoYSwgaW5kZXgpKTtcbiAgICBhID0gZGVzY2VuZGluZyA/IGEgLSBzdGVwIDogYSArIHN0ZXA7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRvUmVnZXggPT09IHRydWUpIHtcbiAgICByZXR1cm4gdG9SZWdleChyYW5nZSwgbnVsbCwgeyB3cmFwOiBmYWxzZSwgb3B0aW9ucyB9KTtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn07XG5cbmNvbnN0IGZpbGwgPSAoc3RhcnQsIGVuZCwgc3RlcCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmIChlbmQgPT0gbnVsbCAmJiBpc1ZhbGlkVmFsdWUoc3RhcnQpKSB7XG4gICAgcmV0dXJuIFtzdGFydF07XG4gIH1cblxuICBpZiAoIWlzVmFsaWRWYWx1ZShzdGFydCkgfHwgIWlzVmFsaWRWYWx1ZShlbmQpKSB7XG4gICAgcmV0dXJuIGludmFsaWRSYW5nZShzdGFydCwgZW5kLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RlcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmaWxsKHN0YXJ0LCBlbmQsIDEsIHsgdHJhbnNmb3JtOiBzdGVwIH0pO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KHN0ZXApKSB7XG4gICAgcmV0dXJuIGZpbGwoc3RhcnQsIGVuZCwgMCwgc3RlcCk7XG4gIH1cblxuICBsZXQgb3B0cyA9IHsgLi4ub3B0aW9ucyB9O1xuICBpZiAob3B0cy5jYXB0dXJlID09PSB0cnVlKSBvcHRzLndyYXAgPSB0cnVlO1xuICBzdGVwID0gc3RlcCB8fCBvcHRzLnN0ZXAgfHwgMTtcblxuICBpZiAoIWlzTnVtYmVyKHN0ZXApKSB7XG4gICAgaWYgKHN0ZXAgIT0gbnVsbCAmJiAhaXNPYmplY3Qoc3RlcCkpIHJldHVybiBpbnZhbGlkU3RlcChzdGVwLCBvcHRzKTtcbiAgICByZXR1cm4gZmlsbChzdGFydCwgZW5kLCAxLCBzdGVwKTtcbiAgfVxuXG4gIGlmIChpc051bWJlcihzdGFydCkgJiYgaXNOdW1iZXIoZW5kKSkge1xuICAgIHJldHVybiBmaWxsTnVtYmVycyhzdGFydCwgZW5kLCBzdGVwLCBvcHRzKTtcbiAgfVxuXG4gIHJldHVybiBmaWxsTGV0dGVycyhzdGFydCwgZW5kLCBNYXRoLm1heChNYXRoLmFicyhzdGVwKSwgMSksIG9wdHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmaWxsID0gcmVxdWlyZSgnZmlsbC1yYW5nZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmNvbnN0IGNvbXBpbGUgPSAoYXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IHdhbGsgPSAobm9kZSwgcGFyZW50ID0ge30pID0+IHtcbiAgICBsZXQgaW52YWxpZEJsb2NrID0gdXRpbHMuaXNJbnZhbGlkQnJhY2UocGFyZW50KTtcbiAgICBsZXQgaW52YWxpZE5vZGUgPSBub2RlLmludmFsaWQgPT09IHRydWUgJiYgb3B0aW9ucy5lc2NhcGVJbnZhbGlkID09PSB0cnVlO1xuICAgIGxldCBpbnZhbGlkID0gaW52YWxpZEJsb2NrID09PSB0cnVlIHx8IGludmFsaWROb2RlID09PSB0cnVlO1xuICAgIGxldCBwcmVmaXggPSBvcHRpb25zLmVzY2FwZUludmFsaWQgPT09IHRydWUgPyAnXFxcXCcgOiAnJztcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICBpZiAobm9kZS5pc09wZW4gPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBub2RlLnZhbHVlO1xuICAgIH1cbiAgICBpZiAobm9kZS5pc0Nsb3NlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS50eXBlID09PSAnb3BlbicpIHtcbiAgICAgIHJldHVybiBpbnZhbGlkID8gKHByZWZpeCArIG5vZGUudmFsdWUpIDogJygnO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICAgIHJldHVybiBpbnZhbGlkID8gKHByZWZpeCArIG5vZGUudmFsdWUpIDogJyknO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdjb21tYScpIHtcbiAgICAgIHJldHVybiBub2RlLnByZXYudHlwZSA9PT0gJ2NvbW1hJyA/ICcnIDogKGludmFsaWQgPyBub2RlLnZhbHVlIDogJ3wnKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMgJiYgbm9kZS5yYW5nZXMgPiAwKSB7XG4gICAgICBsZXQgYXJncyA9IHV0aWxzLnJlZHVjZShub2RlLm5vZGVzKTtcbiAgICAgIGxldCByYW5nZSA9IGZpbGwoLi4uYXJncywgeyAuLi5vcHRpb25zLCB3cmFwOiBmYWxzZSwgdG9SZWdleDogdHJ1ZSB9KTtcblxuICAgICAgaWYgKHJhbmdlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gYXJncy5sZW5ndGggPiAxICYmIHJhbmdlLmxlbmd0aCA+IDEgPyBgKCR7cmFuZ2V9KWAgOiByYW5nZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2Rlcykge1xuICAgICAgZm9yIChsZXQgY2hpbGQgb2Ygbm9kZS5ub2Rlcykge1xuICAgICAgICBvdXRwdXQgKz0gd2FsayhjaGlsZCwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgcmV0dXJuIHdhbGsoYXN0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGlsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZmlsbCA9IHJlcXVpcmUoJ2ZpbGwtcmFuZ2UnKTtcbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuY29uc3QgYXBwZW5kID0gKHF1ZXVlID0gJycsIHN0YXNoID0gJycsIGVuY2xvc2UgPSBmYWxzZSkgPT4ge1xuICBsZXQgcmVzdWx0ID0gW107XG5cbiAgcXVldWUgPSBbXS5jb25jYXQocXVldWUpO1xuICBzdGFzaCA9IFtdLmNvbmNhdChzdGFzaCk7XG5cbiAgaWYgKCFzdGFzaC5sZW5ndGgpIHJldHVybiBxdWV1ZTtcbiAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZW5jbG9zZSA/IHV0aWxzLmZsYXR0ZW4oc3Rhc2gpLm1hcChlbGUgPT4gYHske2VsZX19YCkgOiBzdGFzaDtcbiAgfVxuXG4gIGZvciAobGV0IGl0ZW0gb2YgcXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgZm9yIChsZXQgdmFsdWUgb2YgaXRlbSkge1xuICAgICAgICByZXN1bHQucHVzaChhcHBlbmQodmFsdWUsIHN0YXNoLCBlbmNsb3NlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGVsZSBvZiBzdGFzaCkge1xuICAgICAgICBpZiAoZW5jbG9zZSA9PT0gdHJ1ZSAmJiB0eXBlb2YgZWxlID09PSAnc3RyaW5nJykgZWxlID0gYHske2VsZX19YDtcbiAgICAgICAgcmVzdWx0LnB1c2goQXJyYXkuaXNBcnJheShlbGUpID8gYXBwZW5kKGl0ZW0sIGVsZSwgZW5jbG9zZSkgOiAoaXRlbSArIGVsZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdXRpbHMuZmxhdHRlbihyZXN1bHQpO1xufTtcblxuY29uc3QgZXhwYW5kID0gKGFzdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCByYW5nZUxpbWl0ID0gb3B0aW9ucy5yYW5nZUxpbWl0ID09PSB2b2lkIDAgPyAxMDAwIDogb3B0aW9ucy5yYW5nZUxpbWl0O1xuXG4gIGxldCB3YWxrID0gKG5vZGUsIHBhcmVudCA9IHt9KSA9PiB7XG4gICAgbm9kZS5xdWV1ZSA9IFtdO1xuXG4gICAgbGV0IHAgPSBwYXJlbnQ7XG4gICAgbGV0IHEgPSBwYXJlbnQucXVldWU7XG5cbiAgICB3aGlsZSAocC50eXBlICE9PSAnYnJhY2UnICYmIHAudHlwZSAhPT0gJ3Jvb3QnICYmIHAucGFyZW50KSB7XG4gICAgICBwID0gcC5wYXJlbnQ7XG4gICAgICBxID0gcC5xdWV1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5pbnZhbGlkIHx8IG5vZGUuZG9sbGFyKSB7XG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHN0cmluZ2lmeShub2RlLCBvcHRpb25zKSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdicmFjZScgJiYgbm9kZS5pbnZhbGlkICE9PSB0cnVlICYmIG5vZGUubm9kZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIFsne30nXSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzICYmIG5vZGUucmFuZ2VzID4gMCkge1xuICAgICAgbGV0IGFyZ3MgPSB1dGlscy5yZWR1Y2Uobm9kZS5ub2Rlcyk7XG5cbiAgICAgIGlmICh1dGlscy5leGNlZWRzTGltaXQoLi4uYXJncywgb3B0aW9ucy5zdGVwLCByYW5nZUxpbWl0KSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZXhwYW5kZWQgYXJyYXkgbGVuZ3RoIGV4Y2VlZHMgcmFuZ2UgbGltaXQuIFVzZSBvcHRpb25zLnJhbmdlTGltaXQgdG8gaW5jcmVhc2Ugb3IgZGlzYWJsZSB0aGUgbGltaXQuJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCByYW5nZSA9IGZpbGwoLi4uYXJncywgb3B0aW9ucyk7XG4gICAgICBpZiAocmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJhbmdlID0gc3RyaW5naWZ5KG5vZGUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHJhbmdlKSk7XG4gICAgICBub2RlLm5vZGVzID0gW107XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVuY2xvc2UgPSB1dGlscy5lbmNsb3NlQnJhY2Uobm9kZSk7XG4gICAgbGV0IHF1ZXVlID0gbm9kZS5xdWV1ZTtcbiAgICBsZXQgYmxvY2sgPSBub2RlO1xuXG4gICAgd2hpbGUgKGJsb2NrLnR5cGUgIT09ICdicmFjZScgJiYgYmxvY2sudHlwZSAhPT0gJ3Jvb3QnICYmIGJsb2NrLnBhcmVudCkge1xuICAgICAgYmxvY2sgPSBibG9jay5wYXJlbnQ7XG4gICAgICBxdWV1ZSA9IGJsb2NrLnF1ZXVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNoaWxkID0gbm9kZS5ub2Rlc1tpXTtcblxuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdjb21tYScgJiYgbm9kZS50eXBlID09PSAnYnJhY2UnKSB7XG4gICAgICAgIGlmIChpID09PSAxKSBxdWV1ZS5wdXNoKCcnKTtcbiAgICAgICAgcXVldWUucHVzaCgnJyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2Nsb3NlJykge1xuICAgICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHF1ZXVlLCBlbmNsb3NlKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQudmFsdWUgJiYgY2hpbGQudHlwZSAhPT0gJ29wZW4nKSB7XG4gICAgICAgIHF1ZXVlLnB1c2goYXBwZW5kKHF1ZXVlLnBvcCgpLCBjaGlsZC52YWx1ZSkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkLm5vZGVzKSB7XG4gICAgICAgIHdhbGsoY2hpbGQsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBxdWV1ZTtcbiAgfTtcblxuICByZXR1cm4gdXRpbHMuZmxhdHRlbih3YWxrKGFzdCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBhbmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNQVhfTEVOR1RIOiAxMDI0ICogNjQsXG5cbiAgLy8gRGlnaXRzXG4gIENIQVJfMDogJzAnLCAvKiAwICovXG4gIENIQVJfOTogJzknLCAvKiA5ICovXG5cbiAgLy8gQWxwaGFiZXQgY2hhcnMuXG4gIENIQVJfVVBQRVJDQVNFX0E6ICdBJywgLyogQSAqL1xuICBDSEFSX0xPV0VSQ0FTRV9BOiAnYScsIC8qIGEgKi9cbiAgQ0hBUl9VUFBFUkNBU0VfWjogJ1onLCAvKiBaICovXG4gIENIQVJfTE9XRVJDQVNFX1o6ICd6JywgLyogeiAqL1xuXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUzogJygnLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVM6ICcpJywgLyogKSAqL1xuXG4gIENIQVJfQVNURVJJU0s6ICcqJywgLyogKiAqL1xuXG4gIC8vIE5vbi1hbHBoYWJldGljIGNoYXJzLlxuICBDSEFSX0FNUEVSU0FORDogJyYnLCAvKiAmICovXG4gIENIQVJfQVQ6ICdAJywgLyogQCAqL1xuICBDSEFSX0JBQ0tTTEFTSDogJ1xcXFwnLCAvKiBcXCAqL1xuICBDSEFSX0JBQ0tUSUNLOiAnYCcsIC8qIGAgKi9cbiAgQ0hBUl9DQVJSSUFHRV9SRVRVUk46ICdcXHInLCAvKiBcXHIgKi9cbiAgQ0hBUl9DSVJDVU1GTEVYX0FDQ0VOVDogJ14nLCAvKiBeICovXG4gIENIQVJfQ09MT046ICc6JywgLyogOiAqL1xuICBDSEFSX0NPTU1BOiAnLCcsIC8qICwgKi9cbiAgQ0hBUl9ET0xMQVI6ICckJywgLyogLiAqL1xuICBDSEFSX0RPVDogJy4nLCAvKiAuICovXG4gIENIQVJfRE9VQkxFX1FVT1RFOiAnXCInLCAvKiBcIiAqL1xuICBDSEFSX0VRVUFMOiAnPScsIC8qID0gKi9cbiAgQ0hBUl9FWENMQU1BVElPTl9NQVJLOiAnIScsIC8qICEgKi9cbiAgQ0hBUl9GT1JNX0ZFRUQ6ICdcXGYnLCAvKiBcXGYgKi9cbiAgQ0hBUl9GT1JXQVJEX1NMQVNIOiAnLycsIC8qIC8gKi9cbiAgQ0hBUl9IQVNIOiAnIycsIC8qICMgKi9cbiAgQ0hBUl9IWVBIRU5fTUlOVVM6ICctJywgLyogLSAqL1xuICBDSEFSX0xFRlRfQU5HTEVfQlJBQ0tFVDogJzwnLCAvKiA8ICovXG4gIENIQVJfTEVGVF9DVVJMWV9CUkFDRTogJ3snLCAvKiB7ICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVDogJ1snLCAvKiBbICovXG4gIENIQVJfTElORV9GRUVEOiAnXFxuJywgLyogXFxuICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0U6ICdcXHUwMEEwJywgLyogXFx1MDBBMCAqL1xuICBDSEFSX1BFUkNFTlQ6ICclJywgLyogJSAqL1xuICBDSEFSX1BMVVM6ICcrJywgLyogKyAqL1xuICBDSEFSX1FVRVNUSU9OX01BUks6ICc/JywgLyogPyAqL1xuICBDSEFSX1JJR0hUX0FOR0xFX0JSQUNLRVQ6ICc+JywgLyogPiAqL1xuICBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFOiAnfScsIC8qIH0gKi9cbiAgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVDogJ10nLCAvKiBdICovXG4gIENIQVJfU0VNSUNPTE9OOiAnOycsIC8qIDsgKi9cbiAgQ0hBUl9TSU5HTEVfUVVPVEU6ICdcXCcnLCAvKiAnICovXG4gIENIQVJfU1BBQ0U6ICcgJywgLyogICAqL1xuICBDSEFSX1RBQjogJ1xcdCcsIC8qIFxcdCAqL1xuICBDSEFSX1VOREVSU0NPUkU6ICdfJywgLyogXyAqL1xuICBDSEFSX1ZFUlRJQ0FMX0xJTkU6ICd8JywgLyogfCAqL1xuICBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRTogJ1xcdUZFRkYnIC8qIFxcdUZFRkYgKi9cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3Qge1xuICBNQVhfTEVOR1RILFxuICBDSEFSX0JBQ0tTTEFTSCwgLyogXFwgKi9cbiAgQ0hBUl9CQUNLVElDSywgLyogYCAqL1xuICBDSEFSX0NPTU1BLCAvKiAsICovXG4gIENIQVJfRE9ULCAvKiAuICovXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUywgLyogKCAqL1xuICBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTLCAvKiApICovXG4gIENIQVJfTEVGVF9DVVJMWV9CUkFDRSwgLyogeyAqL1xuICBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFLCAvKiB9ICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCwgLyogWyAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VULCAvKiBdICovXG4gIENIQVJfRE9VQkxFX1FVT1RFLCAvKiBcIiAqL1xuICBDSEFSX1NJTkdMRV9RVU9URSwgLyogJyAqL1xuICBDSEFSX05PX0JSRUFLX1NQQUNFLFxuICBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRVxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbi8qKlxuICogcGFyc2VcbiAqL1xuXG5jb25zdCBwYXJzZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGxldCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IG1heCA9IHR5cGVvZiBvcHRzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihNQVhfTEVOR1RILCBvcHRzLm1heExlbmd0aCkgOiBNQVhfTEVOR1RIO1xuICBpZiAoaW5wdXQubGVuZ3RoID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBJbnB1dCBsZW5ndGggKCR7aW5wdXQubGVuZ3RofSksIGV4Y2VlZHMgbWF4IGNoYXJhY3RlcnMgKCR7bWF4fSlgKTtcbiAgfVxuXG4gIGxldCBhc3QgPSB7IHR5cGU6ICdyb290JywgaW5wdXQsIG5vZGVzOiBbXSB9O1xuICBsZXQgc3RhY2sgPSBbYXN0XTtcbiAgbGV0IGJsb2NrID0gYXN0O1xuICBsZXQgcHJldiA9IGFzdDtcbiAgbGV0IGJyYWNrZXRzID0gMDtcbiAgbGV0IGxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgbGV0IGRlcHRoID0gMDtcbiAgbGV0IHZhbHVlO1xuICBsZXQgbWVtbyA9IHt9O1xuXG4gIC8qKlxuICAgKiBIZWxwZXJzXG4gICAqL1xuXG4gIGNvbnN0IGFkdmFuY2UgPSAoKSA9PiBpbnB1dFtpbmRleCsrXTtcbiAgY29uc3QgcHVzaCA9IG5vZGUgPT4ge1xuICAgIGlmIChub2RlLnR5cGUgPT09ICd0ZXh0JyAmJiBwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICBwcmV2LnR5cGUgPSAndGV4dCc7XG4gICAgfVxuXG4gICAgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSAndGV4dCcgJiYgbm9kZS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgIHByZXYudmFsdWUgKz0gbm9kZS52YWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBibG9jay5ub2Rlcy5wdXNoKG5vZGUpO1xuICAgIG5vZGUucGFyZW50ID0gYmxvY2s7XG4gICAgbm9kZS5wcmV2ID0gcHJldjtcbiAgICBwcmV2ID0gbm9kZTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBwdXNoKHsgdHlwZTogJ2JvcycgfSk7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgYmxvY2sgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICB2YWx1ZSA9IGFkdmFuY2UoKTtcblxuICAgIC8qKlxuICAgICAqIEludmFsaWQgY2hhcnNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9aRVJPX1dJRFRIX05PQlJFQUtfU1BBQ0UgfHwgdmFsdWUgPT09IENIQVJfTk9fQlJFQUtfU1BBQ0UpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZWQgY2hhcnNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9CQUNLU0xBU0gpIHtcbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAob3B0aW9ucy5rZWVwRXNjYXBpbmcgPyB2YWx1ZSA6ICcnKSArIGFkdmFuY2UoKSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJpZ2h0IHNxdWFyZSBicmFja2V0IChsaXRlcmFsKTogJ10nXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxcXCcgKyB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZnQgc3F1YXJlIGJyYWNrZXQ6ICdbJ1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgIGJyYWNrZXRzKys7XG5cbiAgICAgIGxldCBjbG9zZWQgPSB0cnVlO1xuICAgICAgbGV0IG5leHQ7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAmJiAobmV4dCA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgdmFsdWUgKz0gbmV4dDtcblxuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICAgICAgYnJhY2tldHMrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHZhbHVlICs9IGFkdmFuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICAgICAgYnJhY2tldHMtLTtcblxuICAgICAgICAgIGlmIChicmFja2V0cyA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyZW50aGVzZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9MRUZUX1BBUkVOVEhFU0VTKSB7XG4gICAgICBibG9jayA9IHB1c2goeyB0eXBlOiAncGFyZW4nLCBub2RlczogW10gfSk7XG4gICAgICBzdGFjay5wdXNoKGJsb2NrKTtcbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTKSB7XG4gICAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ3BhcmVuJykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBibG9jayA9IHN0YWNrLnBvcCgpO1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBibG9jayA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVvdGVzOiAnfFwifGBcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9ET1VCTEVfUVVPVEUgfHwgdmFsdWUgPT09IENIQVJfU0lOR0xFX1FVT1RFIHx8IHZhbHVlID09PSBDSEFSX0JBQ0tUSUNLKSB7XG4gICAgICBsZXQgb3BlbiA9IHZhbHVlO1xuICAgICAgbGV0IG5leHQ7XG5cbiAgICAgIGlmIChvcHRpb25zLmtlZXBRdW90ZXMgIT09IHRydWUpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmIChuZXh0ID0gYWR2YW5jZSgpKSkge1xuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9CQUNLU0xBU0gpIHtcbiAgICAgICAgICB2YWx1ZSArPSBuZXh0ICsgYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IG9wZW4pIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5rZWVwUXVvdGVzID09PSB0cnVlKSB2YWx1ZSArPSBuZXh0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgKz0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWZ0IGN1cmx5IGJyYWNlOiAneydcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICBkZXB0aCsrO1xuXG4gICAgICBsZXQgZG9sbGFyID0gcHJldi52YWx1ZSAmJiBwcmV2LnZhbHVlLnNsaWNlKC0xKSA9PT0gJyQnIHx8IGJsb2NrLmRvbGxhciA9PT0gdHJ1ZTtcbiAgICAgIGxldCBicmFjZSA9IHtcbiAgICAgICAgdHlwZTogJ2JyYWNlJyxcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgY2xvc2U6IGZhbHNlLFxuICAgICAgICBkb2xsYXIsXG4gICAgICAgIGRlcHRoLFxuICAgICAgICBjb21tYXM6IDAsXG4gICAgICAgIHJhbmdlczogMCxcbiAgICAgICAgbm9kZXM6IFtdXG4gICAgICB9O1xuXG4gICAgICBibG9jayA9IHB1c2goYnJhY2UpO1xuICAgICAgc3RhY2sucHVzaChibG9jayk7XG4gICAgICBwdXNoKHsgdHlwZTogJ29wZW4nLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJpZ2h0IGN1cmx5IGJyYWNlOiAnfSdcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSkge1xuICAgICAgaWYgKGJsb2NrLnR5cGUgIT09ICdicmFjZScpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgdHlwZSA9ICdjbG9zZSc7XG4gICAgICBibG9jayA9IHN0YWNrLnBvcCgpO1xuICAgICAgYmxvY2suY2xvc2UgPSB0cnVlO1xuXG4gICAgICBwdXNoKHsgdHlwZSwgdmFsdWUgfSk7XG4gICAgICBkZXB0aC0tO1xuXG4gICAgICBibG9jayA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbWE6ICcsJ1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0NPTU1BICYmIGRlcHRoID4gMCkge1xuICAgICAgaWYgKGJsb2NrLnJhbmdlcyA+IDApIHtcbiAgICAgICAgYmxvY2sucmFuZ2VzID0gMDtcbiAgICAgICAgbGV0IG9wZW4gPSBibG9jay5ub2Rlcy5zaGlmdCgpO1xuICAgICAgICBibG9jay5ub2RlcyA9IFtvcGVuLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHN0cmluZ2lmeShibG9jaykgfV07XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnY29tbWEnLCB2YWx1ZSB9KTtcbiAgICAgIGJsb2NrLmNvbW1hcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG90OiAnLidcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9ET1QgJiYgZGVwdGggPiAwICYmIGJsb2NrLmNvbW1hcyA9PT0gMCkge1xuICAgICAgbGV0IHNpYmxpbmdzID0gYmxvY2subm9kZXM7XG5cbiAgICAgIGlmIChkZXB0aCA9PT0gMCB8fCBzaWJsaW5ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgICBibG9jay5yYW5nZSA9IFtdO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBwcmV2LnR5cGUgPSAncmFuZ2UnO1xuXG4gICAgICAgIGlmIChibG9jay5ub2Rlcy5sZW5ndGggIT09IDMgJiYgYmxvY2subm9kZXMubGVuZ3RoICE9PSA1KSB7XG4gICAgICAgICAgYmxvY2suaW52YWxpZCA9IHRydWU7XG4gICAgICAgICAgYmxvY2sucmFuZ2VzID0gMDtcbiAgICAgICAgICBwcmV2LnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBibG9jay5yYW5nZXMrKztcbiAgICAgICAgYmxvY2suYXJncyA9IFtdO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ3JhbmdlJykge1xuICAgICAgICBzaWJsaW5ncy5wb3AoKTtcblxuICAgICAgICBsZXQgYmVmb3JlID0gc2libGluZ3Nbc2libGluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIGJlZm9yZS52YWx1ZSArPSBwcmV2LnZhbHVlICsgdmFsdWU7XG4gICAgICAgIHByZXYgPSBiZWZvcmU7XG4gICAgICAgIGJsb2NrLnJhbmdlcy0tO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdkb3QnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRleHRcbiAgICAgKi9cblxuICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICB9XG5cbiAgLy8gTWFyayBpbWJhbGFuY2VkIGJyYWNlcyBhbmQgYnJhY2tldHMgYXMgaW52YWxpZFxuICBkbyB7XG4gICAgYmxvY2sgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChibG9jay50eXBlICE9PSAncm9vdCcpIHtcbiAgICAgIGJsb2NrLm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmICghbm9kZS5ub2Rlcykge1xuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdvcGVuJykgbm9kZS5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdjbG9zZScpIG5vZGUuaXNDbG9zZSA9IHRydWU7XG4gICAgICAgICAgaWYgKCFub2RlLm5vZGVzKSBub2RlLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgbm9kZS5pbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGdldCB0aGUgbG9jYXRpb24gb2YgdGhlIGJsb2NrIG9uIHBhcmVudC5ub2RlcyAoYmxvY2sncyBzaWJsaW5ncylcbiAgICAgIGxldCBwYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGxldCBpbmRleCA9IHBhcmVudC5ub2Rlcy5pbmRleE9mKGJsb2NrKTtcbiAgICAgIC8vIHJlcGxhY2UgdGhlIChpbnZhbGlkKSBibG9jayB3aXRoIGl0J3Mgbm9kZXNcbiAgICAgIHBhcmVudC5ub2Rlcy5zcGxpY2UoaW5kZXgsIDEsIC4uLmJsb2NrLm5vZGVzKTtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApO1xuXG4gIHB1c2goeyB0eXBlOiAnZW9zJyB9KTtcbiAgcmV0dXJuIGFzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vbGliL3N0cmluZ2lmeScpO1xuY29uc3QgY29tcGlsZSA9IHJlcXVpcmUoJy4vbGliL2NvbXBpbGUnKTtcbmNvbnN0IGV4cGFuZCA9IHJlcXVpcmUoJy4vbGliL2V4cGFuZCcpO1xuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL2xpYi9wYXJzZScpO1xuXG4vKipcbiAqIEV4cGFuZCB0aGUgZ2l2ZW4gcGF0dGVybiBvciBjcmVhdGUgYSByZWdleC1jb21wYXRpYmxlIHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ3thLGIsY30nLCB7IGNvbXBpbGU6IHRydWUgfSkpOyAvLz0+IFsnKGF8YnxjKSddXG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ3thLGIsY30nKSk7IC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5jb25zdCBicmFjZXMgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgb3V0cHV0ID0gW107XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgZm9yIChsZXQgcGF0dGVybiBvZiBpbnB1dCkge1xuICAgICAgbGV0IHJlc3VsdCA9IGJyYWNlcy5jcmVhdGUocGF0dGVybiwgb3B0aW9ucyk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKC4uLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBbXS5jb25jYXQoYnJhY2VzLmNyZWF0ZShpbnB1dCwgb3B0aW9ucykpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5leHBhbmQgPT09IHRydWUgJiYgb3B0aW9ucy5ub2R1cGVzID09PSB0cnVlKSB7XG4gICAgb3V0cHV0ID0gWy4uLm5ldyBTZXQob3V0cHV0KV07XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cbiAqXG4gKiBgYGBqc1xuICogLy8gYnJhY2VzLnBhcnNlKHBhdHRlcm4sIFssIG9wdGlvbnNdKTtcbiAqIGNvbnN0IGFzdCA9IGJyYWNlcy5wYXJzZSgnYS97YixjfS9kJyk7XG4gKiBjb25zb2xlLmxvZyhhc3QpO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBCcmFjZSBwYXR0ZXJuIHRvIHBhcnNlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIEFTVFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMucGFyc2UgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4gcGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBicmFjZXMgc3RyaW5nIGZyb20gYW4gQVNULCBvciBhbiBBU1Qgbm9kZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBsZXQgYXN0ID0gYnJhY2VzLnBhcnNlKCdmb28ve2EsYn0vYmFyJyk7XG4gKiBjb25zb2xlLmxvZyhzdHJpbmdpZnkoYXN0Lm5vZGVzWzJdKSk7IC8vPT4gJ3thLGJ9J1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBCcmFjZSBwYXR0ZXJuIG9yIEFTVC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLnN0cmluZ2lmeSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeShicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gc3RyaW5naWZ5KGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQ29tcGlsZXMgYSBicmFjZSBwYXR0ZXJuIGludG8gYSByZWdleC1jb21wYXRpYmxlLCBvcHRpbWl6ZWQgc3RyaW5nLlxuICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBtYWluIFticmFjZXNdKCNicmFjZXMpIGZ1bmN0aW9uIGJ5IGRlZmF1bHQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmNvbXBpbGUoJ2Eve2IsY30vZCcpKTtcbiAqIC8vPT4gWydhLyhifGMpL2QnXVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBCcmFjZSBwYXR0ZXJuIG9yIEFTVC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLmNvbXBpbGUgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIGlucHV0ID0gYnJhY2VzLnBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gY29tcGlsZShpbnB1dCwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEV4cGFuZHMgYSBicmFjZSBwYXR0ZXJuIGludG8gYW4gYXJyYXkuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGVcbiAqIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24gd2hlbiBgb3B0aW9ucy5leHBhbmRgIGlzIHRydWUuIEJlZm9yZVxuICogdXNpbmcgdGhpcyBtZXRob2QgaXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSByZWFkIHRoZSBbcGVyZm9ybWFuY2Ugbm90ZXNdKCNwZXJmb3JtYW5jZSkpXG4gKiBhbmQgYWR2YW50YWdlcyBvZiB1c2luZyBbLmNvbXBpbGVdKCNjb21waWxlKSBpbnN0ZWFkLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcy5leHBhbmQoJ2Eve2IsY30vZCcpKTtcbiAqIC8vPT4gWydhL2IvZCcsICdhL2MvZCddO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gIEJyYWNlIHBhdHRlcm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLmV4cGFuZCA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXQgPSBicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgbGV0IHJlc3VsdCA9IGV4cGFuZChpbnB1dCwgb3B0aW9ucyk7XG5cbiAgLy8gZmlsdGVyIG91dCBlbXB0eSBzdHJpbmdzIGlmIHNwZWNpZmllZFxuICBpZiAob3B0aW9ucy5ub2VtcHR5ID09PSB0cnVlKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcihCb29sZWFuKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgZHVwbGljYXRlcyBpZiBzcGVjaWZpZWRcbiAgaWYgKG9wdGlvbnMubm9kdXBlcyA9PT0gdHJ1ZSkge1xuICAgIHJlc3VsdCA9IFsuLi5uZXcgU2V0KHJlc3VsdCldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUHJvY2Vzc2VzIGEgYnJhY2UgcGF0dGVybiBhbmQgcmV0dXJucyBlaXRoZXIgYW4gZXhwYW5kZWQgYXJyYXlcbiAqIChpZiBgb3B0aW9ucy5leHBhbmRgIGlzIHRydWUpLCBhIGhpZ2hseSBvcHRpbWl6ZWQgcmVnZXgtY29tcGF0aWJsZSBzdHJpbmcuXG4gKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmNyZWF0ZSgndXNlci17MjAwLi4zMDB9L3Byb2plY3Qte2EsYixjfS17MS4uMTB9JykpXG4gKiAvLz0+ICd1c2VyLSgyMFswLTldfDJbMS05XVswLTldfDMwMCkvcHJvamVjdC0oYXxifGMpLShbMS05XXwxMCknXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQnJhY2UgcGF0dGVyblxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuY3JlYXRlID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKGlucHV0ID09PSAnJyB8fCBpbnB1dC5sZW5ndGggPCAzKSB7XG4gICAgcmV0dXJuIFtpbnB1dF07XG4gIH1cblxuIHJldHVybiBvcHRpb25zLmV4cGFuZCAhPT0gdHJ1ZVxuICAgID8gYnJhY2VzLmNvbXBpbGUoaW5wdXQsIG9wdGlvbnMpXG4gICAgOiBicmFjZXMuZXhwYW5kKGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRXhwb3NlIFwiYnJhY2VzXCJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJyYWNlcztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFdJTl9TTEFTSCA9ICdcXFxcXFxcXC8nO1xuY29uc3QgV0lOX05PX1NMQVNIID0gYFteJHtXSU5fU0xBU0h9XWA7XG5cbi8qKlxuICogUG9zaXggZ2xvYiByZWdleFxuICovXG5cbmNvbnN0IERPVF9MSVRFUkFMID0gJ1xcXFwuJztcbmNvbnN0IFBMVVNfTElURVJBTCA9ICdcXFxcKyc7XG5jb25zdCBRTUFSS19MSVRFUkFMID0gJ1xcXFw/JztcbmNvbnN0IFNMQVNIX0xJVEVSQUwgPSAnXFxcXC8nO1xuY29uc3QgT05FX0NIQVIgPSAnKD89LiknO1xuY29uc3QgUU1BUksgPSAnW14vXSc7XG5jb25zdCBFTkRfQU5DSE9SID0gYCg/OiR7U0xBU0hfTElURVJBTH18JClgO1xuY29uc3QgU1RBUlRfQU5DSE9SID0gYCg/Ol58JHtTTEFTSF9MSVRFUkFMfSlgO1xuY29uc3QgRE9UU19TTEFTSCA9IGAke0RPVF9MSVRFUkFMfXsxLDJ9JHtFTkRfQU5DSE9SfWA7XG5jb25zdCBOT19ET1QgPSBgKD8hJHtET1RfTElURVJBTH0pYDtcbmNvbnN0IE5PX0RPVFMgPSBgKD8hJHtTVEFSVF9BTkNIT1J9JHtET1RTX1NMQVNIfSlgO1xuY29uc3QgTk9fRE9UX1NMQVNIID0gYCg/ISR7RE9UX0xJVEVSQUx9ezAsMX0ke0VORF9BTkNIT1J9KWA7XG5jb25zdCBOT19ET1RTX1NMQVNIID0gYCg/ISR7RE9UU19TTEFTSH0pYDtcbmNvbnN0IFFNQVJLX05PX0RPVCA9IGBbXi4ke1NMQVNIX0xJVEVSQUx9XWA7XG5jb25zdCBTVEFSID0gYCR7UU1BUkt9Kj9gO1xuXG5jb25zdCBQT1NJWF9DSEFSUyA9IHtcbiAgRE9UX0xJVEVSQUwsXG4gIFBMVVNfTElURVJBTCxcbiAgUU1BUktfTElURVJBTCxcbiAgU0xBU0hfTElURVJBTCxcbiAgT05FX0NIQVIsXG4gIFFNQVJLLFxuICBFTkRfQU5DSE9SLFxuICBET1RTX1NMQVNILFxuICBOT19ET1QsXG4gIE5PX0RPVFMsXG4gIE5PX0RPVF9TTEFTSCxcbiAgTk9fRE9UU19TTEFTSCxcbiAgUU1BUktfTk9fRE9ULFxuICBTVEFSLFxuICBTVEFSVF9BTkNIT1Jcbn07XG5cbi8qKlxuICogV2luZG93cyBnbG9iIHJlZ2V4XG4gKi9cblxuY29uc3QgV0lORE9XU19DSEFSUyA9IHtcbiAgLi4uUE9TSVhfQ0hBUlMsXG5cbiAgU0xBU0hfTElURVJBTDogYFske1dJTl9TTEFTSH1dYCxcbiAgUU1BUks6IFdJTl9OT19TTEFTSCxcbiAgU1RBUjogYCR7V0lOX05PX1NMQVNIfSo/YCxcbiAgRE9UU19TTEFTSDogYCR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKWAsXG4gIE5PX0RPVDogYCg/ISR7RE9UX0xJVEVSQUx9KWAsXG4gIE5PX0RPVFM6IGAoPyEoPzpefFske1dJTl9TTEFTSH1dKSR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKSlgLFxuICBOT19ET1RfU0xBU0g6IGAoPyEke0RPVF9MSVRFUkFMfXswLDF9KD86WyR7V0lOX1NMQVNIfV18JCkpYCxcbiAgTk9fRE9UU19TTEFTSDogYCg/ISR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKSlgLFxuICBRTUFSS19OT19ET1Q6IGBbXi4ke1dJTl9TTEFTSH1dYCxcbiAgU1RBUlRfQU5DSE9SOiBgKD86XnxbJHtXSU5fU0xBU0h9XSlgLFxuICBFTkRfQU5DSE9SOiBgKD86WyR7V0lOX1NMQVNIfV18JClgXG59O1xuXG4vKipcbiAqIFBPU0lYIEJyYWNrZXQgUmVnZXhcbiAqL1xuXG5jb25zdCBQT1NJWF9SRUdFWF9TT1VSQ0UgPSB7XG4gIGFsbnVtOiAnYS16QS1aMC05JyxcbiAgYWxwaGE6ICdhLXpBLVonLFxuICBhc2NpaTogJ1xcXFx4MDAtXFxcXHg3RicsXG4gIGJsYW5rOiAnIFxcXFx0JyxcbiAgY250cmw6ICdcXFxceDAwLVxcXFx4MUZcXFxceDdGJyxcbiAgZGlnaXQ6ICcwLTknLFxuICBncmFwaDogJ1xcXFx4MjEtXFxcXHg3RScsXG4gIGxvd2VyOiAnYS16JyxcbiAgcHJpbnQ6ICdcXFxceDIwLVxcXFx4N0UgJyxcbiAgcHVuY3Q6ICdcXFxcLSFcIiMkJSZcXCcoKVxcXFwqKywuLzo7PD0+P0BbXFxcXF1eX2B7fH1+JyxcbiAgc3BhY2U6ICcgXFxcXHRcXFxcclxcXFxuXFxcXHZcXFxcZicsXG4gIHVwcGVyOiAnQS1aJyxcbiAgd29yZDogJ0EtWmEtejAtOV8nLFxuICB4ZGlnaXQ6ICdBLUZhLWYwLTknXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTUFYX0xFTkdUSDogMTAyNCAqIDY0LFxuICBQT1NJWF9SRUdFWF9TT1VSQ0UsXG5cbiAgLy8gcmVndWxhciBleHByZXNzaW9uc1xuICBSRUdFWF9CQUNLU0xBU0g6IC9cXFxcKD8hWyorP14ke30ofClbXFxdXSkvZyxcbiAgUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlM6IC9eW15AIVtcXF0uLCQqKz9ee30oKXxcXFxcL10rLyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSUzogL1stKis/Ll4ke30ofClbXFxdXS8sXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRjogLyhcXFxcPykoKFxcVykoXFwzKikpL2csXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfR0xPQkFMOiAvKFstKis/Ll4ke30ofClbXFxdXSkvZyxcbiAgUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSDogLyg/OlxcWy4qP1teXFxcXF1cXF18XFxcXCg/PS4pKS9nLFxuXG4gIC8vIFJlcGxhY2UgZ2xvYnMgd2l0aCBlcXVpdmFsZW50IHBhdHRlcm5zIHRvIHJlZHVjZSBwYXJzaW5nIHRpbWUuXG4gIFJFUExBQ0VNRU5UUzoge1xuICAgICcqKionOiAnKicsXG4gICAgJyoqLyoqJzogJyoqJyxcbiAgICAnKiovKiovKionOiAnKionXG4gIH0sXG5cbiAgLy8gRGlnaXRzXG4gIENIQVJfMDogNDgsIC8qIDAgKi9cbiAgQ0hBUl85OiA1NywgLyogOSAqL1xuXG4gIC8vIEFscGhhYmV0IGNoYXJzLlxuICBDSEFSX1VQUEVSQ0FTRV9BOiA2NSwgLyogQSAqL1xuICBDSEFSX0xPV0VSQ0FTRV9BOiA5NywgLyogYSAqL1xuICBDSEFSX1VQUEVSQ0FTRV9aOiA5MCwgLyogWiAqL1xuICBDSEFSX0xPV0VSQ0FTRV9aOiAxMjIsIC8qIHogKi9cblxuICBDSEFSX0xFRlRfUEFSRU5USEVTRVM6IDQwLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVM6IDQxLCAvKiApICovXG5cbiAgQ0hBUl9BU1RFUklTSzogNDIsIC8qICogKi9cblxuICAvLyBOb24tYWxwaGFiZXRpYyBjaGFycy5cbiAgQ0hBUl9BTVBFUlNBTkQ6IDM4LCAvKiAmICovXG4gIENIQVJfQVQ6IDY0LCAvKiBAICovXG4gIENIQVJfQkFDS1dBUkRfU0xBU0g6IDkyLCAvKiBcXCAqL1xuICBDSEFSX0NBUlJJQUdFX1JFVFVSTjogMTMsIC8qIFxcciAqL1xuICBDSEFSX0NJUkNVTUZMRVhfQUNDRU5UOiA5NCwgLyogXiAqL1xuICBDSEFSX0NPTE9OOiA1OCwgLyogOiAqL1xuICBDSEFSX0NPTU1BOiA0NCwgLyogLCAqL1xuICBDSEFSX0RPVDogNDYsIC8qIC4gKi9cbiAgQ0hBUl9ET1VCTEVfUVVPVEU6IDM0LCAvKiBcIiAqL1xuICBDSEFSX0VRVUFMOiA2MSwgLyogPSAqL1xuICBDSEFSX0VYQ0xBTUFUSU9OX01BUks6IDMzLCAvKiAhICovXG4gIENIQVJfRk9STV9GRUVEOiAxMiwgLyogXFxmICovXG4gIENIQVJfRk9SV0FSRF9TTEFTSDogNDcsIC8qIC8gKi9cbiAgQ0hBUl9HUkFWRV9BQ0NFTlQ6IDk2LCAvKiBgICovXG4gIENIQVJfSEFTSDogMzUsIC8qICMgKi9cbiAgQ0hBUl9IWVBIRU5fTUlOVVM6IDQ1LCAvKiAtICovXG4gIENIQVJfTEVGVF9BTkdMRV9CUkFDS0VUOiA2MCwgLyogPCAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0U6IDEyMywgLyogeyAqL1xuICBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQ6IDkxLCAvKiBbICovXG4gIENIQVJfTElORV9GRUVEOiAxMCwgLyogXFxuICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0U6IDE2MCwgLyogXFx1MDBBMCAqL1xuICBDSEFSX1BFUkNFTlQ6IDM3LCAvKiAlICovXG4gIENIQVJfUExVUzogNDMsIC8qICsgKi9cbiAgQ0hBUl9RVUVTVElPTl9NQVJLOiA2MywgLyogPyAqL1xuICBDSEFSX1JJR0hUX0FOR0xFX0JSQUNLRVQ6IDYyLCAvKiA+ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0U6IDEyNSwgLyogfSAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUOiA5MywgLyogXSAqL1xuICBDSEFSX1NFTUlDT0xPTjogNTksIC8qIDsgKi9cbiAgQ0hBUl9TSU5HTEVfUVVPVEU6IDM5LCAvKiAnICovXG4gIENIQVJfU1BBQ0U6IDMyLCAvKiAgICovXG4gIENIQVJfVEFCOiA5LCAvKiBcXHQgKi9cbiAgQ0hBUl9VTkRFUlNDT1JFOiA5NSwgLyogXyAqL1xuICBDSEFSX1ZFUlRJQ0FMX0xJTkU6IDEyNCwgLyogfCAqL1xuICBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRTogNjUyNzksIC8qIFxcdUZFRkYgKi9cblxuICBTRVA6IHBhdGguc2VwLFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgRVhUR0xPQl9DSEFSU1xuICAgKi9cblxuICBleHRnbG9iQ2hhcnMoY2hhcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJyEnOiB7IHR5cGU6ICduZWdhdGUnLCBvcGVuOiAnKD86KD8hKD86JywgY2xvc2U6IGApKSR7Y2hhcnMuU1RBUn0pYCB9LFxuICAgICAgJz8nOiB7IHR5cGU6ICdxbWFyaycsIG9wZW46ICcoPzonLCBjbG9zZTogJyk/JyB9LFxuICAgICAgJysnOiB7IHR5cGU6ICdwbHVzJywgb3BlbjogJyg/OicsIGNsb3NlOiAnKSsnIH0sXG4gICAgICAnKic6IHsgdHlwZTogJ3N0YXInLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpKicgfSxcbiAgICAgICdAJzogeyB0eXBlOiAnYXQnLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpJyB9XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIEdMT0JfQ0hBUlNcbiAgICovXG5cbiAgZ2xvYkNoYXJzKHdpbjMyKSB7XG4gICAgcmV0dXJuIHdpbjMyID09PSB0cnVlID8gV0lORE9XU19DSEFSUyA6IFBPU0lYX0NIQVJTO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgd2luMzIgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuY29uc3Qge1xuICBSRUdFWF9CQUNLU0xBU0gsXG4gIFJFR0VYX1JFTU9WRV9CQUNLU0xBU0gsXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlMsXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfR0xPQkFMXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuZXhwb3J0cy5pc09iamVjdCA9IHZhbCA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcbmV4cG9ydHMuaGFzUmVnZXhDaGFycyA9IHN0ciA9PiBSRUdFWF9TUEVDSUFMX0NIQVJTLnRlc3Qoc3RyKTtcbmV4cG9ydHMuaXNSZWdleENoYXIgPSBzdHIgPT4gc3RyLmxlbmd0aCA9PT0gMSAmJiBleHBvcnRzLmhhc1JlZ2V4Q2hhcnMoc3RyKTtcbmV4cG9ydHMuZXNjYXBlUmVnZXggPSBzdHIgPT4gc3RyLnJlcGxhY2UoUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUwsICdcXFxcJDEnKTtcbmV4cG9ydHMudG9Qb3NpeFNsYXNoZXMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoUkVHRVhfQkFDS1NMQVNILCAnLycpO1xuXG5leHBvcnRzLnJlbW92ZUJhY2tzbGFzaGVzID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKFJFR0VYX1JFTU9WRV9CQUNLU0xBU0gsIG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2ggPT09ICdcXFxcJyA/ICcnIDogbWF0Y2g7XG4gIH0pO1xufTtcblxuZXhwb3J0cy5zdXBwb3J0c0xvb2tiZWhpbmRzID0gKCkgPT4ge1xuICBjb25zdCBzZWdzID0gcHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDEpLnNwbGl0KCcuJykubWFwKE51bWJlcik7XG4gIGlmIChzZWdzLmxlbmd0aCA9PT0gMyAmJiBzZWdzWzBdID49IDkgfHwgKHNlZ3NbMF0gPT09IDggJiYgc2Vnc1sxXSA+PSAxMCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnRzLmlzV2luZG93cyA9IG9wdGlvbnMgPT4ge1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy53aW5kb3dzID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy53aW5kb3dzO1xuICB9XG4gIHJldHVybiB3aW4zMiA9PT0gdHJ1ZSB8fCBwYXRoLnNlcCA9PT0gJ1xcXFwnO1xufTtcblxuZXhwb3J0cy5lc2NhcGVMYXN0ID0gKGlucHV0LCBjaGFyLCBsYXN0SWR4KSA9PiB7XG4gIGNvbnN0IGlkeCA9IGlucHV0Lmxhc3RJbmRleE9mKGNoYXIsIGxhc3RJZHgpO1xuICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIGlucHV0O1xuICBpZiAoaW5wdXRbaWR4IC0gMV0gPT09ICdcXFxcJykgcmV0dXJuIGV4cG9ydHMuZXNjYXBlTGFzdChpbnB1dCwgY2hhciwgaWR4IC0gMSk7XG4gIHJldHVybiBgJHtpbnB1dC5zbGljZSgwLCBpZHgpfVxcXFwke2lucHV0LnNsaWNlKGlkeCl9YDtcbn07XG5cbmV4cG9ydHMucmVtb3ZlUHJlZml4ID0gKGlucHV0LCBzdGF0ZSA9IHt9KSA9PiB7XG4gIGxldCBvdXRwdXQgPSBpbnB1dDtcbiAgaWYgKG91dHB1dC5zdGFydHNXaXRoKCcuLycpKSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0LnNsaWNlKDIpO1xuICAgIHN0YXRlLnByZWZpeCA9ICcuLyc7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbmV4cG9ydHMud3JhcE91dHB1dCA9IChpbnB1dCwgc3RhdGUgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHByZXBlbmQgPSBvcHRpb25zLmNvbnRhaW5zID8gJycgOiAnXic7XG4gIGNvbnN0IGFwcGVuZCA9IG9wdGlvbnMuY29udGFpbnMgPyAnJyA6ICckJztcblxuICBsZXQgb3V0cHV0ID0gYCR7cHJlcGVuZH0oPzoke2lucHV0fSkke2FwcGVuZH1gO1xuICBpZiAoc3RhdGUubmVnYXRlZCA9PT0gdHJ1ZSkge1xuICAgIG91dHB1dCA9IGAoPzpeKD8hJHtvdXRwdXR9KS4qJClgO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbmNvbnN0IHtcbiAgQ0hBUl9BU1RFUklTSywgICAgICAgICAgICAgLyogKiAqL1xuICBDSEFSX0FULCAgICAgICAgICAgICAgICAgICAvKiBAICovXG4gIENIQVJfQkFDS1dBUkRfU0xBU0gsICAgICAgIC8qIFxcICovXG4gIENIQVJfQ09NTUEsICAgICAgICAgICAgICAgIC8qICwgKi9cbiAgQ0hBUl9ET1QsICAgICAgICAgICAgICAgICAgLyogLiAqL1xuICBDSEFSX0VYQ0xBTUFUSU9OX01BUkssICAgICAvKiAhICovXG4gIENIQVJfRk9SV0FSRF9TTEFTSCwgICAgICAgIC8qIC8gKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFLCAgICAgLyogeyAqL1xuICBDSEFSX0xFRlRfUEFSRU5USEVTRVMsICAgICAvKiAoICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCwgIC8qIFsgKi9cbiAgQ0hBUl9QTFVTLCAgICAgICAgICAgICAgICAgLyogKyAqL1xuICBDSEFSX1FVRVNUSU9OX01BUkssICAgICAgICAvKiA/ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UsICAgIC8qIH0gKi9cbiAgQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUywgICAgLyogKSAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUICAvKiBdICovXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuY29uc3QgaXNQYXRoU2VwYXJhdG9yID0gY29kZSA9PiB7XG4gIHJldHVybiBjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0ggfHwgY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSDtcbn07XG5cbmNvbnN0IGRlcHRoID0gdG9rZW4gPT4ge1xuICBpZiAodG9rZW4uaXNQcmVmaXggIT09IHRydWUpIHtcbiAgICB0b2tlbi5kZXB0aCA9IHRva2VuLmlzR2xvYnN0YXIgPyBJbmZpbml0eSA6IDE7XG4gIH1cbn07XG5cbi8qKlxuICogUXVpY2tseSBzY2FucyBhIGdsb2IgcGF0dGVybiBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIGhhbmRmdWwgb2ZcbiAqIHVzZWZ1bCBwcm9wZXJ0aWVzLCBsaWtlIGBpc0dsb2JgLCBgcGF0aGAgKHRoZSBsZWFkaW5nIG5vbi1nbG9iLCBpZiBpdCBleGlzdHMpLFxuICogYGdsb2JgICh0aGUgYWN0dWFsIHBhdHRlcm4pLCBgbmVnYXRlZGAgKHRydWUgaWYgdGhlIHBhdGggc3RhcnRzIHdpdGggYCFgIGJ1dCBub3RcbiAqIHdpdGggYCEoYCkgYW5kIGBuZWdhdGVkRXh0Z2xvYmAgKHRydWUgaWYgdGhlIHBhdGggc3RhcnRzIHdpdGggYCEoYCkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBtID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiBjb25zb2xlLmxvZyhwbS5zY2FuKCdmb28vYmFyLyouanMnKSk7XG4gKiB7IGlzR2xvYjogdHJ1ZSwgaW5wdXQ6ICdmb28vYmFyLyouanMnLCBiYXNlOiAnZm9vL2JhcicsIGdsb2I6ICcqLmpzJyB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRva2VucyBhbmQgcmVnZXggc291cmNlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuY29uc3Qgc2NhbiA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGggLSAxO1xuICBjb25zdCBzY2FuVG9FbmQgPSBvcHRzLnBhcnRzID09PSB0cnVlIHx8IG9wdHMuc2NhblRvRW5kID09PSB0cnVlO1xuICBjb25zdCBzbGFzaGVzID0gW107XG4gIGNvbnN0IHRva2VucyA9IFtdO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gIGxldCBzdHIgPSBpbnB1dDtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBsYXN0SW5kZXggPSAwO1xuICBsZXQgaXNCcmFjZSA9IGZhbHNlO1xuICBsZXQgaXNCcmFja2V0ID0gZmFsc2U7XG4gIGxldCBpc0dsb2IgPSBmYWxzZTtcbiAgbGV0IGlzRXh0Z2xvYiA9IGZhbHNlO1xuICBsZXQgaXNHbG9ic3RhciA9IGZhbHNlO1xuICBsZXQgYnJhY2VFc2NhcGVkID0gZmFsc2U7XG4gIGxldCBiYWNrc2xhc2hlcyA9IGZhbHNlO1xuICBsZXQgbmVnYXRlZCA9IGZhbHNlO1xuICBsZXQgbmVnYXRlZEV4dGdsb2IgPSBmYWxzZTtcbiAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gIGxldCBicmFjZXMgPSAwO1xuICBsZXQgcHJldjtcbiAgbGV0IGNvZGU7XG4gIGxldCB0b2tlbiA9IHsgdmFsdWU6ICcnLCBkZXB0aDogMCwgaXNHbG9iOiBmYWxzZSB9O1xuXG4gIGNvbnN0IGVvcyA9ICgpID0+IGluZGV4ID49IGxlbmd0aDtcbiAgY29uc3QgcGVlayA9ICgpID0+IHN0ci5jaGFyQ29kZUF0KGluZGV4ICsgMSk7XG4gIGNvbnN0IGFkdmFuY2UgPSAoKSA9PiB7XG4gICAgcHJldiA9IGNvZGU7XG4gICAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgpO1xuICB9O1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSBhZHZhbmNlKCk7XG4gICAgbGV0IG5leHQ7XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICBjb2RlID0gYWR2YW5jZSgpO1xuXG4gICAgICBpZiAoY29kZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICAgIGJyYWNlRXNjYXBlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoYnJhY2VFc2NhcGVkID09PSB0cnVlIHx8IGNvZGUgPT09IENIQVJfTEVGVF9DVVJMWV9CUkFDRSkge1xuICAgICAgYnJhY2VzKys7XG5cbiAgICAgIHdoaWxlIChlb3MoKSAhPT0gdHJ1ZSAmJiAoY29kZSA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgICBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICAgICAgYnJhY2VzKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnJhY2VFc2NhcGVkICE9PSB0cnVlICYmIGNvZGUgPT09IENIQVJfRE9UICYmIChjb2RlID0gYWR2YW5jZSgpKSA9PT0gQ0hBUl9ET1QpIHtcbiAgICAgICAgICBpc0JyYWNlID0gdG9rZW4uaXNCcmFjZSA9IHRydWU7XG4gICAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChicmFjZUVzY2FwZWQgIT09IHRydWUgJiYgY29kZSA9PT0gQ0hBUl9DT01NQSkge1xuICAgICAgICAgIGlzQnJhY2UgPSB0b2tlbi5pc0JyYWNlID0gdHJ1ZTtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgICAgICBicmFjZXMtLTtcblxuICAgICAgICAgIGlmIChicmFjZXMgPT09IDApIHtcbiAgICAgICAgICAgIGJyYWNlRXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaXNCcmFjZSA9IHRva2VuLmlzQnJhY2UgPSB0cnVlO1xuICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgIHNsYXNoZXMucHVzaChpbmRleCk7XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICB0b2tlbiA9IHsgdmFsdWU6ICcnLCBkZXB0aDogMCwgaXNHbG9iOiBmYWxzZSB9O1xuXG4gICAgICBpZiAoZmluaXNoZWQgPT09IHRydWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKHByZXYgPT09IENIQVJfRE9UICYmIGluZGV4ID09PSAoc3RhcnQgKyAxKSkge1xuICAgICAgICBzdGFydCArPSAyO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubm9leHQgIT09IHRydWUpIHtcbiAgICAgIGNvbnN0IGlzRXh0Z2xvYkNoYXIgPSBjb2RlID09PSBDSEFSX1BMVVNcbiAgICAgICAgfHwgY29kZSA9PT0gQ0hBUl9BVFxuICAgICAgICB8fCBjb2RlID09PSBDSEFSX0FTVEVSSVNLXG4gICAgICAgIHx8IGNvZGUgPT09IENIQVJfUVVFU1RJT05fTUFSS1xuICAgICAgICB8fCBjb2RlID09PSBDSEFSX0VYQ0xBTUFUSU9OX01BUks7XG5cbiAgICAgIGlmIChpc0V4dGdsb2JDaGFyID09PSB0cnVlICYmIHBlZWsoKSA9PT0gQ0hBUl9MRUZUX1BBUkVOVEhFU0VTKSB7XG4gICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgIGlzRXh0Z2xvYiA9IHRva2VuLmlzRXh0Z2xvYiA9IHRydWU7XG4gICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRVhDTEFNQVRJT05fTUFSSyAmJiBpbmRleCA9PT0gc3RhcnQpIHtcbiAgICAgICAgICBuZWdhdGVkRXh0Z2xvYiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChjb2RlID0gYWR2YW5jZSgpKSkge1xuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNvZGUgPSBhZHZhbmNlKCk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUykge1xuICAgICAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9BU1RFUklTSykge1xuICAgICAgaWYgKHByZXYgPT09IENIQVJfQVNURVJJU0spIGlzR2xvYnN0YXIgPSB0b2tlbi5pc0dsb2JzdGFyID0gdHJ1ZTtcbiAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9RVUVTVElPTl9NQVJLKSB7XG4gICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChuZXh0ID0gYWR2YW5jZSgpKSkge1xuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgIGFkdmFuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICAgICAgaXNCcmFja2V0ID0gdG9rZW4uaXNCcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5ub25lZ2F0ZSAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0VYQ0xBTUFUSU9OX01BUksgJiYgaW5kZXggPT09IHN0YXJ0KSB7XG4gICAgICBuZWdhdGVkID0gdG9rZW4ubmVnYXRlZCA9IHRydWU7XG4gICAgICBzdGFydCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubm9wYXJlbiAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChjb2RlID0gYWR2YW5jZSgpKSkge1xuICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgY29kZSA9IGFkdmFuY2UoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTKSB7XG4gICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaXNHbG9iID09PSB0cnVlKSB7XG4gICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLm5vZXh0ID09PSB0cnVlKSB7XG4gICAgaXNFeHRnbG9iID0gZmFsc2U7XG4gICAgaXNHbG9iID0gZmFsc2U7XG4gIH1cblxuICBsZXQgYmFzZSA9IHN0cjtcbiAgbGV0IHByZWZpeCA9ICcnO1xuICBsZXQgZ2xvYiA9ICcnO1xuXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3RhcnQpO1xuICAgIHN0ciA9IHN0ci5zbGljZShzdGFydCk7XG4gICAgbGFzdEluZGV4IC09IHN0YXJ0O1xuICB9XG5cbiAgaWYgKGJhc2UgJiYgaXNHbG9iID09PSB0cnVlICYmIGxhc3RJbmRleCA+IDApIHtcbiAgICBiYXNlID0gc3RyLnNsaWNlKDAsIGxhc3RJbmRleCk7XG4gICAgZ2xvYiA9IHN0ci5zbGljZShsYXN0SW5kZXgpO1xuICB9IGVsc2UgaWYgKGlzR2xvYiA9PT0gdHJ1ZSkge1xuICAgIGJhc2UgPSAnJztcbiAgICBnbG9iID0gc3RyO1xuICB9IGVsc2Uge1xuICAgIGJhc2UgPSBzdHI7XG4gIH1cblxuICBpZiAoYmFzZSAmJiBiYXNlICE9PSAnJyAmJiBiYXNlICE9PSAnLycgJiYgYmFzZSAhPT0gc3RyKSB7XG4gICAgaWYgKGlzUGF0aFNlcGFyYXRvcihiYXNlLmNoYXJDb2RlQXQoYmFzZS5sZW5ndGggLSAxKSkpIHtcbiAgICAgIGJhc2UgPSBiYXNlLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy51bmVzY2FwZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChnbG9iKSBnbG9iID0gdXRpbHMucmVtb3ZlQmFja3NsYXNoZXMoZ2xvYik7XG5cbiAgICBpZiAoYmFzZSAmJiBiYWNrc2xhc2hlcyA9PT0gdHJ1ZSkge1xuICAgICAgYmFzZSA9IHV0aWxzLnJlbW92ZUJhY2tzbGFzaGVzKGJhc2UpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIHByZWZpeCxcbiAgICBpbnB1dCxcbiAgICBzdGFydCxcbiAgICBiYXNlLFxuICAgIGdsb2IsXG4gICAgaXNCcmFjZSxcbiAgICBpc0JyYWNrZXQsXG4gICAgaXNHbG9iLFxuICAgIGlzRXh0Z2xvYixcbiAgICBpc0dsb2JzdGFyLFxuICAgIG5lZ2F0ZWQsXG4gICAgbmVnYXRlZEV4dGdsb2JcbiAgfTtcblxuICBpZiAob3B0cy50b2tlbnMgPT09IHRydWUpIHtcbiAgICBzdGF0ZS5tYXhEZXB0aCA9IDA7XG4gICAgaWYgKCFpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICB9XG4gICAgc3RhdGUudG9rZW5zID0gdG9rZW5zO1xuICB9XG5cbiAgaWYgKG9wdHMucGFydHMgPT09IHRydWUgfHwgb3B0cy50b2tlbnMgPT09IHRydWUpIHtcbiAgICBsZXQgcHJldkluZGV4O1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2xhc2hlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICBjb25zdCBuID0gcHJldkluZGV4ID8gcHJldkluZGV4ICsgMSA6IHN0YXJ0O1xuICAgICAgY29uc3QgaSA9IHNsYXNoZXNbaWR4XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXQuc2xpY2UobiwgaSk7XG4gICAgICBpZiAob3B0cy50b2tlbnMpIHtcbiAgICAgICAgaWYgKGlkeCA9PT0gMCAmJiBzdGFydCAhPT0gMCkge1xuICAgICAgICAgIHRva2Vuc1tpZHhdLmlzUHJlZml4ID0gdHJ1ZTtcbiAgICAgICAgICB0b2tlbnNbaWR4XS52YWx1ZSA9IHByZWZpeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnNbaWR4XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoKHRva2Vuc1tpZHhdKTtcbiAgICAgICAgc3RhdGUubWF4RGVwdGggKz0gdG9rZW5zW2lkeF0uZGVwdGg7XG4gICAgICB9XG4gICAgICBpZiAoaWR4ICE9PSAwIHx8IHZhbHVlICE9PSAnJykge1xuICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHByZXZJbmRleCA9IGk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZJbmRleCAmJiBwcmV2SW5kZXggKyAxIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnNsaWNlKHByZXZJbmRleCArIDEpO1xuICAgICAgcGFydHMucHVzaCh2YWx1ZSk7XG5cbiAgICAgIGlmIChvcHRzLnRva2Vucykge1xuICAgICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlcHRoKHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0pO1xuICAgICAgICBzdGF0ZS5tYXhEZXB0aCArPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLmRlcHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRlLnNsYXNoZXMgPSBzbGFzaGVzO1xuICAgIHN0YXRlLnBhcnRzID0gcGFydHM7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjYW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCB7XG4gIE1BWF9MRU5HVEgsXG4gIFBPU0lYX1JFR0VYX1NPVVJDRSxcbiAgUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlMsXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRixcbiAgUkVQTEFDRU1FTlRTXG59ID0gY29uc3RhbnRzO1xuXG4vKipcbiAqIEhlbHBlcnNcbiAqL1xuXG5jb25zdCBleHBhbmRSYW5nZSA9IChhcmdzLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5leHBhbmRSYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLmV4cGFuZFJhbmdlKC4uLmFyZ3MsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXJncy5zb3J0KCk7XG4gIGNvbnN0IHZhbHVlID0gYFske2FyZ3Muam9pbignLScpfV1gO1xuXG4gIHRyeSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAqL1xuICAgIG5ldyBSZWdFeHAodmFsdWUpO1xuICB9IGNhdGNoIChleCkge1xuICAgIHJldHVybiBhcmdzLm1hcCh2ID0+IHV0aWxzLmVzY2FwZVJlZ2V4KHYpKS5qb2luKCcuLicpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIG1lc3NhZ2UgZm9yIGEgc3ludGF4IGVycm9yXG4gKi9cblxuY29uc3Qgc3ludGF4RXJyb3IgPSAodHlwZSwgY2hhcikgPT4ge1xuICByZXR1cm4gYE1pc3NpbmcgJHt0eXBlfTogXCIke2NoYXJ9XCIgLSB1c2UgXCJcXFxcXFxcXCR7Y2hhcn1cIiB0byBtYXRjaCBsaXRlcmFsIGNoYXJhY3RlcnNgO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gaW5wdXQgc3RyaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmNvbnN0IHBhcnNlID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGlucHV0ID0gUkVQTEFDRU1FTlRTW2lucHV0XSB8fCBpbnB1dDtcblxuICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGNvbnN0IG1heCA9IHR5cGVvZiBvcHRzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihNQVhfTEVOR1RILCBvcHRzLm1heExlbmd0aCkgOiBNQVhfTEVOR1RIO1xuXG4gIGxldCBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gIGlmIChsZW4gPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aDogJHtsZW59LCBleGNlZWRzIG1heGltdW0gYWxsb3dlZCBsZW5ndGg6ICR7bWF4fWApO1xuICB9XG5cbiAgY29uc3QgYm9zID0geyB0eXBlOiAnYm9zJywgdmFsdWU6ICcnLCBvdXRwdXQ6IG9wdHMucHJlcGVuZCB8fCAnJyB9O1xuICBjb25zdCB0b2tlbnMgPSBbYm9zXTtcblxuICBjb25zdCBjYXB0dXJlID0gb3B0cy5jYXB0dXJlID8gJycgOiAnPzonO1xuICBjb25zdCB3aW4zMiA9IHV0aWxzLmlzV2luZG93cyhvcHRpb25zKTtcblxuICAvLyBjcmVhdGUgY29uc3RhbnRzIGJhc2VkIG9uIHBsYXRmb3JtLCBmb3Igd2luZG93cyBvciBwb3NpeFxuICBjb25zdCBQTEFURk9STV9DSEFSUyA9IGNvbnN0YW50cy5nbG9iQ2hhcnMod2luMzIpO1xuICBjb25zdCBFWFRHTE9CX0NIQVJTID0gY29uc3RhbnRzLmV4dGdsb2JDaGFycyhQTEFURk9STV9DSEFSUyk7XG5cbiAgY29uc3Qge1xuICAgIERPVF9MSVRFUkFMLFxuICAgIFBMVVNfTElURVJBTCxcbiAgICBTTEFTSF9MSVRFUkFMLFxuICAgIE9ORV9DSEFSLFxuICAgIERPVFNfU0xBU0gsXG4gICAgTk9fRE9ULFxuICAgIE5PX0RPVF9TTEFTSCxcbiAgICBOT19ET1RTX1NMQVNILFxuICAgIFFNQVJLLFxuICAgIFFNQVJLX05PX0RPVCxcbiAgICBTVEFSLFxuICAgIFNUQVJUX0FOQ0hPUlxuICB9ID0gUExBVEZPUk1fQ0hBUlM7XG5cbiAgY29uc3QgZ2xvYnN0YXIgPSBvcHRzID0+IHtcbiAgICByZXR1cm4gYCgke2NhcHR1cmV9KD86KD8hJHtTVEFSVF9BTkNIT1J9JHtvcHRzLmRvdCA/IERPVFNfU0xBU0ggOiBET1RfTElURVJBTH0pLikqPylgO1xuICB9O1xuXG4gIGNvbnN0IG5vZG90ID0gb3B0cy5kb3QgPyAnJyA6IE5PX0RPVDtcbiAgY29uc3QgcW1hcmtOb0RvdCA9IG9wdHMuZG90ID8gUU1BUksgOiBRTUFSS19OT19ET1Q7XG4gIGxldCBzdGFyID0gb3B0cy5iYXNoID09PSB0cnVlID8gZ2xvYnN0YXIob3B0cykgOiBTVEFSO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICBzdGFyID0gYCgke3N0YXJ9KWA7XG4gIH1cblxuICAvLyBtaW5pbWF0Y2ggb3B0aW9ucyBzdXBwb3J0XG4gIGlmICh0eXBlb2Ygb3B0cy5ub2V4dCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0cy5ub2V4dGdsb2IgPSBvcHRzLm5vZXh0O1xuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgaW5wdXQsXG4gICAgaW5kZXg6IC0xLFxuICAgIHN0YXJ0OiAwLFxuICAgIGRvdDogb3B0cy5kb3QgPT09IHRydWUsXG4gICAgY29uc3VtZWQ6ICcnLFxuICAgIG91dHB1dDogJycsXG4gICAgcHJlZml4OiAnJyxcbiAgICBiYWNrdHJhY2s6IGZhbHNlLFxuICAgIG5lZ2F0ZWQ6IGZhbHNlLFxuICAgIGJyYWNrZXRzOiAwLFxuICAgIGJyYWNlczogMCxcbiAgICBwYXJlbnM6IDAsXG4gICAgcXVvdGVzOiAwLFxuICAgIGdsb2JzdGFyOiBmYWxzZSxcbiAgICB0b2tlbnNcbiAgfTtcblxuICBpbnB1dCA9IHV0aWxzLnJlbW92ZVByZWZpeChpbnB1dCwgc3RhdGUpO1xuICBsZW4gPSBpbnB1dC5sZW5ndGg7XG5cbiAgY29uc3QgZXh0Z2xvYnMgPSBbXTtcbiAgY29uc3QgYnJhY2VzID0gW107XG4gIGNvbnN0IHN0YWNrID0gW107XG4gIGxldCBwcmV2ID0gYm9zO1xuICBsZXQgdmFsdWU7XG5cbiAgLyoqXG4gICAqIFRva2VuaXppbmcgaGVscGVyc1xuICAgKi9cblxuICBjb25zdCBlb3MgPSAoKSA9PiBzdGF0ZS5pbmRleCA9PT0gbGVuIC0gMTtcbiAgY29uc3QgcGVlayA9IHN0YXRlLnBlZWsgPSAobiA9IDEpID0+IGlucHV0W3N0YXRlLmluZGV4ICsgbl07XG4gIGNvbnN0IGFkdmFuY2UgPSBzdGF0ZS5hZHZhbmNlID0gKCkgPT4gaW5wdXRbKytzdGF0ZS5pbmRleF0gfHwgJyc7XG4gIGNvbnN0IHJlbWFpbmluZyA9ICgpID0+IGlucHV0LnNsaWNlKHN0YXRlLmluZGV4ICsgMSk7XG4gIGNvbnN0IGNvbnN1bWUgPSAodmFsdWUgPSAnJywgbnVtID0gMCkgPT4ge1xuICAgIHN0YXRlLmNvbnN1bWVkICs9IHZhbHVlO1xuICAgIHN0YXRlLmluZGV4ICs9IG51bTtcbiAgfTtcblxuICBjb25zdCBhcHBlbmQgPSB0b2tlbiA9PiB7XG4gICAgc3RhdGUub3V0cHV0ICs9IHRva2VuLm91dHB1dCAhPSBudWxsID8gdG9rZW4ub3V0cHV0IDogdG9rZW4udmFsdWU7XG4gICAgY29uc3VtZSh0b2tlbi52YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgbmVnYXRlID0gKCkgPT4ge1xuICAgIGxldCBjb3VudCA9IDE7XG5cbiAgICB3aGlsZSAocGVlaygpID09PSAnIScgJiYgKHBlZWsoMikgIT09ICcoJyB8fCBwZWVrKDMpID09PSAnPycpKSB7XG4gICAgICBhZHZhbmNlKCk7XG4gICAgICBzdGF0ZS5zdGFydCsrO1xuICAgICAgY291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY291bnQgJSAyID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGUubmVnYXRlZCA9IHRydWU7XG4gICAgc3RhdGUuc3RhcnQrKztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBpbmNyZW1lbnQgPSB0eXBlID0+IHtcbiAgICBzdGF0ZVt0eXBlXSsrO1xuICAgIHN0YWNrLnB1c2godHlwZSk7XG4gIH07XG5cbiAgY29uc3QgZGVjcmVtZW50ID0gdHlwZSA9PiB7XG4gICAgc3RhdGVbdHlwZV0tLTtcbiAgICBzdGFjay5wb3AoKTtcbiAgfTtcblxuICAvKipcbiAgICogUHVzaCB0b2tlbnMgb250byB0aGUgdG9rZW5zIGFycmF5LiBUaGlzIGhlbHBlciBzcGVlZHMgdXBcbiAgICogdG9rZW5pemluZyBieSAxKSBoZWxwaW5nIHVzIGF2b2lkIGJhY2t0cmFja2luZyBhcyBtdWNoIGFzIHBvc3NpYmxlLFxuICAgKiBhbmQgMikgaGVscGluZyB1cyBhdm9pZCBjcmVhdGluZyBleHRyYSB0b2tlbnMgd2hlbiBjb25zZWN1dGl2ZVxuICAgKiBjaGFyYWN0ZXJzIGFyZSBwbGFpbiB0ZXh0LiBUaGlzIGltcHJvdmVzIHBlcmZvcm1hbmNlIGFuZCBzaW1wbGlmaWVzXG4gICAqIGxvb2tiZWhpbmRzLlxuICAgKi9cblxuICBjb25zdCBwdXNoID0gdG9rID0+IHtcbiAgICBpZiAocHJldi50eXBlID09PSAnZ2xvYnN0YXInKSB7XG4gICAgICBjb25zdCBpc0JyYWNlID0gc3RhdGUuYnJhY2VzID4gMCAmJiAodG9rLnR5cGUgPT09ICdjb21tYScgfHwgdG9rLnR5cGUgPT09ICdicmFjZScpO1xuICAgICAgY29uc3QgaXNFeHRnbG9iID0gdG9rLmV4dGdsb2IgPT09IHRydWUgfHwgKGV4dGdsb2JzLmxlbmd0aCAmJiAodG9rLnR5cGUgPT09ICdwaXBlJyB8fCB0b2sudHlwZSA9PT0gJ3BhcmVuJykpO1xuXG4gICAgICBpZiAodG9rLnR5cGUgIT09ICdzbGFzaCcgJiYgdG9rLnR5cGUgIT09ICdwYXJlbicgJiYgIWlzQnJhY2UgJiYgIWlzRXh0Z2xvYikge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLXByZXYub3V0cHV0Lmxlbmd0aCk7XG4gICAgICAgIHByZXYudHlwZSA9ICdzdGFyJztcbiAgICAgICAgcHJldi52YWx1ZSA9ICcqJztcbiAgICAgICAgcHJldi5vdXRwdXQgPSBzdGFyO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi5vdXRwdXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dGdsb2JzLmxlbmd0aCAmJiB0b2sudHlwZSAhPT0gJ3BhcmVuJykge1xuICAgICAgZXh0Z2xvYnNbZXh0Z2xvYnMubGVuZ3RoIC0gMV0uaW5uZXIgKz0gdG9rLnZhbHVlO1xuICAgIH1cblxuICAgIGlmICh0b2sudmFsdWUgfHwgdG9rLm91dHB1dCkgYXBwZW5kKHRvayk7XG4gICAgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSAndGV4dCcgJiYgdG9rLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgcHJldi52YWx1ZSArPSB0b2sudmFsdWU7XG4gICAgICBwcmV2Lm91dHB1dCA9IChwcmV2Lm91dHB1dCB8fCAnJykgKyB0b2sudmFsdWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rLnByZXYgPSBwcmV2O1xuICAgIHRva2Vucy5wdXNoKHRvayk7XG4gICAgcHJldiA9IHRvaztcbiAgfTtcblxuICBjb25zdCBleHRnbG9iT3BlbiA9ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0geyAuLi5FWFRHTE9CX0NIQVJTW3ZhbHVlXSwgY29uZGl0aW9uczogMSwgaW5uZXI6ICcnIH07XG5cbiAgICB0b2tlbi5wcmV2ID0gcHJldjtcbiAgICB0b2tlbi5wYXJlbnMgPSBzdGF0ZS5wYXJlbnM7XG4gICAgdG9rZW4ub3V0cHV0ID0gc3RhdGUub3V0cHV0O1xuICAgIGNvbnN0IG91dHB1dCA9IChvcHRzLmNhcHR1cmUgPyAnKCcgOiAnJykgKyB0b2tlbi5vcGVuO1xuXG4gICAgaW5jcmVtZW50KCdwYXJlbnMnKTtcbiAgICBwdXNoKHsgdHlwZSwgdmFsdWUsIG91dHB1dDogc3RhdGUub3V0cHV0ID8gJycgOiBPTkVfQ0hBUiB9KTtcbiAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWU6IGFkdmFuY2UoKSwgb3V0cHV0IH0pO1xuICAgIGV4dGdsb2JzLnB1c2godG9rZW4pO1xuICB9O1xuXG4gIGNvbnN0IGV4dGdsb2JDbG9zZSA9IHRva2VuID0+IHtcbiAgICBsZXQgb3V0cHV0ID0gdG9rZW4uY2xvc2UgKyAob3B0cy5jYXB0dXJlID8gJyknIDogJycpO1xuICAgIGxldCByZXN0O1xuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICduZWdhdGUnKSB7XG4gICAgICBsZXQgZXh0Z2xvYlN0YXIgPSBzdGFyO1xuXG4gICAgICBpZiAodG9rZW4uaW5uZXIgJiYgdG9rZW4uaW5uZXIubGVuZ3RoID4gMSAmJiB0b2tlbi5pbm5lci5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIGV4dGdsb2JTdGFyID0gZ2xvYnN0YXIob3B0cyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleHRnbG9iU3RhciAhPT0gc3RhciB8fCBlb3MoKSB8fCAvXlxcKSskLy50ZXN0KHJlbWFpbmluZygpKSkge1xuICAgICAgICBvdXRwdXQgPSB0b2tlbi5jbG9zZSA9IGApJCkpJHtleHRnbG9iU3Rhcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4uaW5uZXIuaW5jbHVkZXMoJyonKSAmJiAocmVzdCA9IHJlbWFpbmluZygpKSAmJiAvXlxcLlteXFxcXC8uXSskLy50ZXN0KHJlc3QpKSB7XG4gICAgICAgIC8vIEFueSBub24tbWFnaWNhbCBzdHJpbmcgKGAudHNgKSBvciBldmVuIG5lc3RlZCBleHByZXNzaW9uIChgLnt0cyx0c3h9YCkgY2FuIGZvbGxvdyBhZnRlciB0aGUgY2xvc2luZyBwYXJlbnRoZXNpcy5cbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBuZWVkIHRvIHBhcnNlIHRoZSBzdHJpbmcgYW5kIHVzZSBpdCBpbiB0aGUgb3V0cHV0IG9mIHRoZSBvcmlnaW5hbCBwYXR0ZXJuLlxuICAgICAgICAvLyBTdWl0YWJsZSBwYXR0ZXJuczogYC8hKCouZCkudHNgLCBgLyEoKi5kKS57dHMsdHN4fWAsIGAqKi8hKCotZGJnKS5AKGpzKWAuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIERpc2FibGluZyB0aGUgYGZhc3RwYXRoc2Agb3B0aW9uIGR1ZSB0byBhIHByb2JsZW0gd2l0aCBwYXJzaW5nIHN0cmluZ3MgYXMgYC50c2AgaW4gdGhlIHBhdHRlcm4gbGlrZSBgKiovISgqLmQpLnRzYC5cbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHBhcnNlKHJlc3QsIHsgLi4ub3B0aW9ucywgZmFzdHBhdGhzOiBmYWxzZSB9KS5vdXRwdXQ7XG5cbiAgICAgICAgb3V0cHV0ID0gdG9rZW4uY2xvc2UgPSBgKSR7ZXhwcmVzc2lvbn0pJHtleHRnbG9iU3Rhcn0pYDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLnByZXYudHlwZSA9PT0gJ2JvcycpIHtcbiAgICAgICAgc3RhdGUubmVnYXRlZEV4dGdsb2IgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1c2goeyB0eXBlOiAncGFyZW4nLCBleHRnbG9iOiB0cnVlLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgIGRlY3JlbWVudCgncGFyZW5zJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZhc3QgcGF0aHNcbiAgICovXG5cbiAgaWYgKG9wdHMuZmFzdHBhdGhzICE9PSBmYWxzZSAmJiAhLyheWyohXXxbLygpW1xcXXt9XCJdKS8udGVzdChpbnB1dCkpIHtcbiAgICBsZXQgYmFja3NsYXNoZXMgPSBmYWxzZTtcblxuICAgIGxldCBvdXRwdXQgPSBpbnB1dC5yZXBsYWNlKFJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRiwgKG0sIGVzYywgY2hhcnMsIGZpcnN0LCByZXN0LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGZpcnN0ID09PSAnXFxcXCcpIHtcbiAgICAgICAgYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0ID09PSAnPycpIHtcbiAgICAgICAgaWYgKGVzYykge1xuICAgICAgICAgIHJldHVybiBlc2MgKyBmaXJzdCArIChyZXN0ID8gUU1BUksucmVwZWF0KHJlc3QubGVuZ3RoKSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gcW1hcmtOb0RvdCArIChyZXN0ID8gUU1BUksucmVwZWF0KHJlc3QubGVuZ3RoKSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUU1BUksucmVwZWF0KGNoYXJzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCA9PT0gJy4nKSB7XG4gICAgICAgIHJldHVybiBET1RfTElURVJBTC5yZXBlYXQoY2hhcnMubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0ID09PSAnKicpIHtcbiAgICAgICAgaWYgKGVzYykge1xuICAgICAgICAgIHJldHVybiBlc2MgKyBmaXJzdCArIChyZXN0ID8gc3RhciA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlc2MgPyBtIDogYFxcXFwke219YDtcbiAgICB9KTtcblxuICAgIGlmIChiYWNrc2xhc2hlcyA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKG9wdHMudW5lc2NhcGUgPT09IHRydWUpIHtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1xcXFwrL2csIG0gPT4ge1xuICAgICAgICAgIHJldHVybiBtLmxlbmd0aCAlIDIgPT09IDAgPyAnXFxcXFxcXFwnIDogKG0gPyAnXFxcXCcgOiAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvdXRwdXQgPT09IGlucHV0ICYmIG9wdHMuY29udGFpbnMgPT09IHRydWUpIHtcbiAgICAgIHN0YXRlLm91dHB1dCA9IGlucHV0O1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHN0YXRlLm91dHB1dCA9IHV0aWxzLndyYXBPdXRwdXQob3V0cHV0LCBzdGF0ZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRva2VuaXplIGlucHV0IHVudGlsIHdlIHJlYWNoIGVuZC1vZi1zdHJpbmdcbiAgICovXG5cbiAgd2hpbGUgKCFlb3MoKSkge1xuICAgIHZhbHVlID0gYWR2YW5jZSgpO1xuXG4gICAgaWYgKHZhbHVlID09PSAnXFx1MDAwMCcpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZWQgY2hhcmFjdGVyc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnXFxcXCcpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBwZWVrKCk7XG5cbiAgICAgIGlmIChuZXh0ID09PSAnLycgJiYgb3B0cy5iYXNoICE9PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dCA9PT0gJy4nIHx8IG5leHQgPT09ICc7Jykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIHZhbHVlICs9ICdcXFxcJztcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBjb2xsYXBzZSBzbGFzaGVzIHRvIHJlZHVjZSBwb3RlbnRpYWwgZm9yIGV4cGxvaXRzXG4gICAgICBjb25zdCBtYXRjaCA9IC9eXFxcXCsvLmV4ZWMocmVtYWluaW5nKCkpO1xuICAgICAgbGV0IHNsYXNoZXMgPSAwO1xuXG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMF0ubGVuZ3RoID4gMikge1xuICAgICAgICBzbGFzaGVzID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBzdGF0ZS5pbmRleCArPSBzbGFzaGVzO1xuICAgICAgICBpZiAoc2xhc2hlcyAlIDIgIT09IDApIHtcbiAgICAgICAgICB2YWx1ZSArPSAnXFxcXCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMudW5lc2NhcGUgPT09IHRydWUpIHtcbiAgICAgICAgdmFsdWUgPSBhZHZhbmNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSArPSBhZHZhbmNlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5icmFja2V0cyA9PT0gMCkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgd2UncmUgaW5zaWRlIGEgcmVnZXggY2hhcmFjdGVyIGNsYXNzLCBjb250aW51ZVxuICAgICAqIHVudGlsIHdlIHJlYWNoIHRoZSBjbG9zaW5nIGJyYWNrZXQuXG4gICAgICovXG5cbiAgICBpZiAoc3RhdGUuYnJhY2tldHMgPiAwICYmICh2YWx1ZSAhPT0gJ10nIHx8IHByZXYudmFsdWUgPT09ICdbJyB8fCBwcmV2LnZhbHVlID09PSAnW14nKSkge1xuICAgICAgaWYgKG9wdHMucG9zaXggIT09IGZhbHNlICYmIHZhbHVlID09PSAnOicpIHtcbiAgICAgICAgY29uc3QgaW5uZXIgPSBwcmV2LnZhbHVlLnNsaWNlKDEpO1xuICAgICAgICBpZiAoaW5uZXIuaW5jbHVkZXMoJ1snKSkge1xuICAgICAgICAgIHByZXYucG9zaXggPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGlubmVyLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHByZXYudmFsdWUubGFzdEluZGV4T2YoJ1snKTtcbiAgICAgICAgICAgIGNvbnN0IHByZSA9IHByZXYudmFsdWUuc2xpY2UoMCwgaWR4KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3QgPSBwcmV2LnZhbHVlLnNsaWNlKGlkeCArIDIpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXggPSBQT1NJWF9SRUdFWF9TT1VSQ0VbcmVzdF07XG4gICAgICAgICAgICBpZiAocG9zaXgpIHtcbiAgICAgICAgICAgICAgcHJldi52YWx1ZSA9IHByZSArIHBvc2l4O1xuICAgICAgICAgICAgICBzdGF0ZS5iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICBhZHZhbmNlKCk7XG5cbiAgICAgICAgICAgICAgaWYgKCFib3Mub3V0cHV0ICYmIHRva2Vucy5pbmRleE9mKHByZXYpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYm9zLm91dHB1dCA9IE9ORV9DSEFSO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoKHZhbHVlID09PSAnWycgJiYgcGVlaygpICE9PSAnOicpIHx8ICh2YWx1ZSA9PT0gJy0nICYmIHBlZWsoKSA9PT0gJ10nKSkge1xuICAgICAgICB2YWx1ZSA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgPT09ICddJyAmJiAocHJldi52YWx1ZSA9PT0gJ1snIHx8IHByZXYudmFsdWUgPT09ICdbXicpKSB7XG4gICAgICAgIHZhbHVlID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLnBvc2l4ID09PSB0cnVlICYmIHZhbHVlID09PSAnIScgJiYgcHJldi52YWx1ZSA9PT0gJ1snKSB7XG4gICAgICAgIHZhbHVlID0gJ14nO1xuICAgICAgfVxuXG4gICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgYXBwZW5kKHsgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSBpbnNpZGUgYSBxdW90ZWQgc3RyaW5nLCBjb250aW51ZVxuICAgICAqIHVudGlsIHdlIHJlYWNoIHRoZSBjbG9zaW5nIGRvdWJsZSBxdW90ZS5cbiAgICAgKi9cblxuICAgIGlmIChzdGF0ZS5xdW90ZXMgPT09IDEgJiYgdmFsdWUgIT09ICdcIicpIHtcbiAgICAgIHZhbHVlID0gdXRpbHMuZXNjYXBlUmVnZXgodmFsdWUpO1xuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIGFwcGVuZCh7IHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG91YmxlIHF1b3Rlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnXCInKSB7XG4gICAgICBzdGF0ZS5xdW90ZXMgPSBzdGF0ZS5xdW90ZXMgPT09IDEgPyAwIDogMTtcbiAgICAgIGlmIChvcHRzLmtlZXBRdW90ZXMgPT09IHRydWUpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJlbnRoZXNlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnKCcpIHtcbiAgICAgIGluY3JlbWVudCgncGFyZW5zJyk7XG4gICAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICcpJykge1xuICAgICAgaWYgKHN0YXRlLnBhcmVucyA9PT0gMCAmJiBvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignb3BlbmluZycsICcoJykpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBleHRnbG9iID0gZXh0Z2xvYnNbZXh0Z2xvYnMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoZXh0Z2xvYiAmJiBzdGF0ZS5wYXJlbnMgPT09IGV4dGdsb2IucGFyZW5zICsgMSkge1xuICAgICAgICBleHRnbG9iQ2xvc2UoZXh0Z2xvYnMucG9wKCkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdwYXJlbicsIHZhbHVlLCBvdXRwdXQ6IHN0YXRlLnBhcmVucyA/ICcpJyA6ICdcXFxcKScgfSk7XG4gICAgICBkZWNyZW1lbnQoJ3BhcmVucycpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3F1YXJlIGJyYWNrZXRzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICdbJykge1xuICAgICAgaWYgKG9wdHMubm9icmFja2V0ID09PSB0cnVlIHx8ICFyZW1haW5pbmcoKS5pbmNsdWRlcygnXScpKSB7XG4gICAgICAgIGlmIChvcHRzLm5vYnJhY2tldCAhPT0gdHJ1ZSAmJiBvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJ10nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5jcmVtZW50KCdicmFja2V0cycpO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2JyYWNrZXQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ10nKSB7XG4gICAgICBpZiAob3B0cy5ub2JyYWNrZXQgPT09IHRydWUgfHwgKHByZXYgJiYgcHJldi50eXBlID09PSAnYnJhY2tldCcgJiYgcHJldi52YWx1ZS5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQ6IGBcXFxcJHt2YWx1ZX1gIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmJyYWNrZXRzID09PSAwKSB7XG4gICAgICAgIGlmIChvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdvcGVuaW5nJywgJ1snKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0OiBgXFxcXCR7dmFsdWV9YCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGRlY3JlbWVudCgnYnJhY2tldHMnKTtcblxuICAgICAgY29uc3QgcHJldlZhbHVlID0gcHJldi52YWx1ZS5zbGljZSgxKTtcbiAgICAgIGlmIChwcmV2LnBvc2l4ICE9PSB0cnVlICYmIHByZXZWYWx1ZVswXSA9PT0gJ14nICYmICFwcmV2VmFsdWUuaW5jbHVkZXMoJy8nKSkge1xuICAgICAgICB2YWx1ZSA9IGAvJHt2YWx1ZX1gO1xuICAgICAgfVxuXG4gICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgYXBwZW5kKHsgdmFsdWUgfSk7XG5cbiAgICAgIC8vIHdoZW4gbGl0ZXJhbCBicmFja2V0cyBhcmUgZXhwbGljaXRseSBkaXNhYmxlZFxuICAgICAgLy8gYXNzdW1lIHdlIHNob3VsZCBtYXRjaCB3aXRoIGEgcmVnZXggY2hhcmFjdGVyIGNsYXNzXG4gICAgICBpZiAob3B0cy5saXRlcmFsQnJhY2tldHMgPT09IGZhbHNlIHx8IHV0aWxzLmhhc1JlZ2V4Q2hhcnMocHJldlZhbHVlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXNjYXBlZCA9IHV0aWxzLmVzY2FwZVJlZ2V4KHByZXYudmFsdWUpO1xuICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC1wcmV2LnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgIC8vIHdoZW4gbGl0ZXJhbCBicmFja2V0cyBhcmUgZXhwbGljaXRseSBlbmFibGVkXG4gICAgICAvLyBhc3N1bWUgd2Ugc2hvdWxkIGVzY2FwZSB0aGUgYnJhY2tldHMgdG8gbWF0Y2ggbGl0ZXJhbCBjaGFyYWN0ZXJzXG4gICAgICBpZiAob3B0cy5saXRlcmFsQnJhY2tldHMgPT09IHRydWUpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IGVzY2FwZWQ7XG4gICAgICAgIHByZXYudmFsdWUgPSBlc2NhcGVkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiB0aGUgdXNlciBzcGVjaWZpZXMgbm90aGluZywgdHJ5IHRvIG1hdGNoIGJvdGhcbiAgICAgIHByZXYudmFsdWUgPSBgKCR7Y2FwdHVyZX0ke2VzY2FwZWR9fCR7cHJldi52YWx1ZX0pYDtcbiAgICAgIHN0YXRlLm91dHB1dCArPSBwcmV2LnZhbHVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnJhY2VzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICd7JyAmJiBvcHRzLm5vYnJhY2UgIT09IHRydWUpIHtcbiAgICAgIGluY3JlbWVudCgnYnJhY2VzJyk7XG5cbiAgICAgIGNvbnN0IG9wZW4gPSB7XG4gICAgICAgIHR5cGU6ICdicmFjZScsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvdXRwdXQ6ICcoJyxcbiAgICAgICAgb3V0cHV0SW5kZXg6IHN0YXRlLm91dHB1dC5sZW5ndGgsXG4gICAgICAgIHRva2Vuc0luZGV4OiBzdGF0ZS50b2tlbnMubGVuZ3RoXG4gICAgICB9O1xuXG4gICAgICBicmFjZXMucHVzaChvcGVuKTtcbiAgICAgIHB1c2gob3Blbik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICd9Jykge1xuICAgICAgY29uc3QgYnJhY2UgPSBicmFjZXNbYnJhY2VzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAob3B0cy5ub2JyYWNlID09PSB0cnVlIHx8ICFicmFjZSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0OiB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBvdXRwdXQgPSAnKSc7XG5cbiAgICAgIGlmIChicmFjZS5kb3RzID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRva2Vucy5zbGljZSgpO1xuICAgICAgICBjb25zdCByYW5nZSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0b2tlbnMucG9wKCk7XG4gICAgICAgICAgaWYgKGFycltpXS50eXBlID09PSAnYnJhY2UnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFycltpXS50eXBlICE9PSAnZG90cycpIHtcbiAgICAgICAgICAgIHJhbmdlLnVuc2hpZnQoYXJyW2ldLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgPSBleHBhbmRSYW5nZShyYW5nZSwgb3B0cyk7XG4gICAgICAgIHN0YXRlLmJhY2t0cmFjayA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChicmFjZS5jb21tYSAhPT0gdHJ1ZSAmJiBicmFjZS5kb3RzICE9PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCBicmFjZS5vdXRwdXRJbmRleCk7XG4gICAgICAgIGNvbnN0IHRva3MgPSBzdGF0ZS50b2tlbnMuc2xpY2UoYnJhY2UudG9rZW5zSW5kZXgpO1xuICAgICAgICBicmFjZS52YWx1ZSA9IGJyYWNlLm91dHB1dCA9ICdcXFxceyc7XG4gICAgICAgIHZhbHVlID0gb3V0cHV0ID0gJ1xcXFx9JztcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gb3V0O1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdG9rcykge1xuICAgICAgICAgIHN0YXRlLm91dHB1dCArPSAodC5vdXRwdXQgfHwgdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdicmFjZScsIHZhbHVlLCBvdXRwdXQgfSk7XG4gICAgICBkZWNyZW1lbnQoJ2JyYWNlcycpO1xuICAgICAgYnJhY2VzLnBvcCgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGlwZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ3wnKSB7XG4gICAgICBpZiAoZXh0Z2xvYnMubGVuZ3RoID4gMCkge1xuICAgICAgICBleHRnbG9ic1tleHRnbG9icy5sZW5ndGggLSAxXS5jb25kaXRpb25zKys7XG4gICAgICB9XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbW1hc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnLCcpIHtcbiAgICAgIGxldCBvdXRwdXQgPSB2YWx1ZTtcblxuICAgICAgY29uc3QgYnJhY2UgPSBicmFjZXNbYnJhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGJyYWNlICYmIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID09PSAnYnJhY2VzJykge1xuICAgICAgICBicmFjZS5jb21tYSA9IHRydWU7XG4gICAgICAgIG91dHB1dCA9ICd8JztcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdjb21tYScsIHZhbHVlLCBvdXRwdXQgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbGFzaGVzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcvJykge1xuICAgICAgLy8gaWYgdGhlIGJlZ2lubmluZyBvZiB0aGUgZ2xvYiBpcyBcIi4vXCIsIGFkdmFuY2UgdGhlIHN0YXJ0XG4gICAgICAvLyB0byB0aGUgY3VycmVudCBpbmRleCwgYW5kIGRvbid0IGFkZCB0aGUgXCIuL1wiIGNoYXJhY3RlcnNcbiAgICAgIC8vIHRvIHRoZSBzdGF0ZS4gVGhpcyBncmVhdGx5IHNpbXBsaWZpZXMgbG9va2JlaGluZHMgd2hlblxuICAgICAgLy8gY2hlY2tpbmcgZm9yIEJPUyBjaGFyYWN0ZXJzIGxpa2UgXCIhXCIgYW5kIFwiLlwiIChub3QgXCIuL1wiKVxuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2RvdCcgJiYgc3RhdGUuaW5kZXggPT09IHN0YXRlLnN0YXJ0ICsgMSkge1xuICAgICAgICBzdGF0ZS5zdGFydCA9IHN0YXRlLmluZGV4ICsgMTtcbiAgICAgICAgc3RhdGUuY29uc3VtZWQgPSAnJztcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gJyc7XG4gICAgICAgIHRva2Vucy5wb3AoKTtcbiAgICAgICAgcHJldiA9IGJvczsgLy8gcmVzZXQgXCJwcmV2XCIgdG8gdGhlIGZpcnN0IHRva2VuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3NsYXNoJywgdmFsdWUsIG91dHB1dDogU0xBU0hfTElURVJBTCB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvdHNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJy4nKSB7XG4gICAgICBpZiAoc3RhdGUuYnJhY2VzID4gMCAmJiBwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICAgIGlmIChwcmV2LnZhbHVlID09PSAnLicpIHByZXYub3V0cHV0ID0gRE9UX0xJVEVSQUw7XG4gICAgICAgIGNvbnN0IGJyYWNlID0gYnJhY2VzW2JyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcHJldi50eXBlID0gJ2RvdHMnO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSB2YWx1ZTtcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgYnJhY2UuZG90cyA9IHRydWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHN0YXRlLmJyYWNlcyArIHN0YXRlLnBhcmVucykgPT09IDAgJiYgcHJldi50eXBlICE9PSAnYm9zJyAmJiBwcmV2LnR5cGUgIT09ICdzbGFzaCcpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogRE9UX0xJVEVSQUwgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2RvdCcsIHZhbHVlLCBvdXRwdXQ6IERPVF9MSVRFUkFMIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlc3Rpb24gbWFya3NcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJz8nKSB7XG4gICAgICBjb25zdCBpc0dyb3VwID0gcHJldiAmJiBwcmV2LnZhbHVlID09PSAnKCc7XG4gICAgICBpZiAoIWlzR3JvdXAgJiYgb3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcgJiYgcGVlaygyKSAhPT0gJz8nKSB7XG4gICAgICAgIGV4dGdsb2JPcGVuKCdxbWFyaycsIHZhbHVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ3BhcmVuJykge1xuICAgICAgICBjb25zdCBuZXh0ID0gcGVlaygpO1xuICAgICAgICBsZXQgb3V0cHV0ID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKG5leHQgPT09ICc8JyAmJiAhdXRpbHMuc3VwcG9ydHNMb29rYmVoaW5kcygpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlLmpzIHYxMCBvciBoaWdoZXIgaXMgcmVxdWlyZWQgZm9yIHJlZ2V4IGxvb2tiZWhpbmRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHByZXYudmFsdWUgPT09ICcoJyAmJiAhL1shPTw6XS8udGVzdChuZXh0KSkgfHwgKG5leHQgPT09ICc8JyAmJiAhLzwoWyE9XXxcXHcrPikvLnRlc3QocmVtYWluaW5nKCkpKSkge1xuICAgICAgICAgIG91dHB1dCA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLmRvdCAhPT0gdHJ1ZSAmJiAocHJldi50eXBlID09PSAnc2xhc2gnIHx8IHByZXYudHlwZSA9PT0gJ2JvcycpKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAncW1hcmsnLCB2YWx1ZSwgb3V0cHV0OiBRTUFSS19OT19ET1QgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3FtYXJrJywgdmFsdWUsIG91dHB1dDogUU1BUksgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGNsYW1hdGlvblxuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnIScpIHtcbiAgICAgIGlmIChvcHRzLm5vZXh0Z2xvYiAhPT0gdHJ1ZSAmJiBwZWVrKCkgPT09ICcoJykge1xuICAgICAgICBpZiAocGVlaygyKSAhPT0gJz8nIHx8ICEvWyE9PDpdLy50ZXN0KHBlZWsoMykpKSB7XG4gICAgICAgICAgZXh0Z2xvYk9wZW4oJ25lZ2F0ZScsIHZhbHVlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5ub25lZ2F0ZSAhPT0gdHJ1ZSAmJiBzdGF0ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGx1c1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnKycpIHtcbiAgICAgIGlmIChvcHRzLm5vZXh0Z2xvYiAhPT0gdHJ1ZSAmJiBwZWVrKCkgPT09ICcoJyAmJiBwZWVrKDIpICE9PSAnPycpIHtcbiAgICAgICAgZXh0Z2xvYk9wZW4oJ3BsdXMnLCB2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHByZXYgJiYgcHJldi52YWx1ZSA9PT0gJygnKSB8fCBvcHRzLnJlZ2V4ID09PSBmYWxzZSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3BsdXMnLCB2YWx1ZSwgb3V0cHV0OiBQTFVTX0xJVEVSQUwgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHByZXYgJiYgKHByZXYudHlwZSA9PT0gJ2JyYWNrZXQnIHx8IHByZXYudHlwZSA9PT0gJ3BhcmVuJyB8fCBwcmV2LnR5cGUgPT09ICdicmFjZScpKSB8fCBzdGF0ZS5wYXJlbnMgPiAwKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAncGx1cycsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdwbHVzJywgdmFsdWU6IFBMVVNfTElURVJBTCB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHRcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ0AnKSB7XG4gICAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcgJiYgcGVlaygyKSAhPT0gJz8nKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnYXQnLCBleHRnbG9iOiB0cnVlLCB2YWx1ZSwgb3V0cHV0OiAnJyB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxhaW4gdGV4dFxuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlICE9PSAnKicpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJyQnIHx8IHZhbHVlID09PSAnXicpIHtcbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWF0Y2ggPSBSRUdFWF9OT05fU1BFQ0lBTF9DSEFSUy5leGVjKHJlbWFpbmluZygpKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICB2YWx1ZSArPSBtYXRjaFswXTtcbiAgICAgICAgc3RhdGUuaW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJzXG4gICAgICovXG5cbiAgICBpZiAocHJldiAmJiAocHJldi50eXBlID09PSAnZ2xvYnN0YXInIHx8IHByZXYuc3RhciA9PT0gdHJ1ZSkpIHtcbiAgICAgIHByZXYudHlwZSA9ICdzdGFyJztcbiAgICAgIHByZXYuc3RhciA9IHRydWU7XG4gICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgcHJldi5vdXRwdXQgPSBzdGFyO1xuICAgICAgc3RhdGUuYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgIGNvbnN1bWUodmFsdWUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3QgPSByZW1haW5pbmcoKTtcbiAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgL15cXChbXj9dLy50ZXN0KHJlc3QpKSB7XG4gICAgICBleHRnbG9iT3Blbignc3RhcicsIHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChwcmV2LnR5cGUgPT09ICdzdGFyJykge1xuICAgICAgaWYgKG9wdHMubm9nbG9ic3RhciA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByaW9yID0gcHJldi5wcmV2O1xuICAgICAgY29uc3QgYmVmb3JlID0gcHJpb3IucHJldjtcbiAgICAgIGNvbnN0IGlzU3RhcnQgPSBwcmlvci50eXBlID09PSAnc2xhc2gnIHx8IHByaW9yLnR5cGUgPT09ICdib3MnO1xuICAgICAgY29uc3QgYWZ0ZXJTdGFyID0gYmVmb3JlICYmIChiZWZvcmUudHlwZSA9PT0gJ3N0YXInIHx8IGJlZm9yZS50eXBlID09PSAnZ2xvYnN0YXInKTtcblxuICAgICAgaWYgKG9wdHMuYmFzaCA9PT0gdHJ1ZSAmJiAoIWlzU3RhcnQgfHwgKHJlc3RbMF0gJiYgcmVzdFswXSAhPT0gJy8nKSkpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzdGFyJywgdmFsdWUsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0JyYWNlID0gc3RhdGUuYnJhY2VzID4gMCAmJiAocHJpb3IudHlwZSA9PT0gJ2NvbW1hJyB8fCBwcmlvci50eXBlID09PSAnYnJhY2UnKTtcbiAgICAgIGNvbnN0IGlzRXh0Z2xvYiA9IGV4dGdsb2JzLmxlbmd0aCAmJiAocHJpb3IudHlwZSA9PT0gJ3BpcGUnIHx8IHByaW9yLnR5cGUgPT09ICdwYXJlbicpO1xuICAgICAgaWYgKCFpc1N0YXJ0ICYmIHByaW9yLnR5cGUgIT09ICdwYXJlbicgJiYgIWlzQnJhY2UgJiYgIWlzRXh0Z2xvYikge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3N0YXInLCB2YWx1ZSwgb3V0cHV0OiAnJyB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHN0cmlwIGNvbnNlY3V0aXZlIGAvKiovYFxuICAgICAgd2hpbGUgKHJlc3Quc2xpY2UoMCwgMykgPT09ICcvKionKSB7XG4gICAgICAgIGNvbnN0IGFmdGVyID0gaW5wdXRbc3RhdGUuaW5kZXggKyA0XTtcbiAgICAgICAgaWYgKGFmdGVyICYmIGFmdGVyICE9PSAnLycpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXN0ID0gcmVzdC5zbGljZSgzKTtcbiAgICAgICAgY29uc3VtZSgnLyoqJywgMyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmlvci50eXBlID09PSAnYm9zJyAmJiBlb3MoKSkge1xuICAgICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBwcmV2Lm91dHB1dCA9IGdsb2JzdGFyKG9wdHMpO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBwcmV2Lm91dHB1dDtcbiAgICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuICAgICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmlvci50eXBlID09PSAnc2xhc2gnICYmIHByaW9yLnByZXYudHlwZSAhPT0gJ2JvcycgJiYgIWFmdGVyU3RhciAmJiBlb3MoKSkge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLShwcmlvci5vdXRwdXQgKyBwcmV2Lm91dHB1dCkubGVuZ3RoKTtcbiAgICAgICAgcHJpb3Iub3V0cHV0ID0gYCg/OiR7cHJpb3Iub3V0cHV0fWA7XG5cbiAgICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgICAgcHJldi5vdXRwdXQgPSBnbG9ic3RhcihvcHRzKSArIChvcHRzLnN0cmljdFNsYXNoZXMgPyAnKScgOiAnfCQpJyk7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IHByaW9yLm91dHB1dCArIHByZXYub3V0cHV0O1xuICAgICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmlvci50eXBlID09PSAnc2xhc2gnICYmIHByaW9yLnByZXYudHlwZSAhPT0gJ2JvcycgJiYgcmVzdFswXSA9PT0gJy8nKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IHJlc3RbMV0gIT09IHZvaWQgMCA/ICd8JCcgOiAnJztcblxuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLShwcmlvci5vdXRwdXQgKyBwcmV2Lm91dHB1dCkubGVuZ3RoKTtcbiAgICAgICAgcHJpb3Iub3V0cHV0ID0gYCg/OiR7cHJpb3Iub3V0cHV0fWA7XG5cbiAgICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgICAgcHJldi5vdXRwdXQgPSBgJHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9fCR7U0xBU0hfTElURVJBTH0ke2VuZH0pYDtcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcblxuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQ7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcblxuICAgICAgICBjb25zdW1lKHZhbHVlICsgYWR2YW5jZSgpKTtcblxuICAgICAgICBwdXNoKHsgdHlwZTogJ3NsYXNoJywgdmFsdWU6ICcvJywgb3V0cHV0OiAnJyB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmlvci50eXBlID09PSAnYm9zJyAmJiByZXN0WzBdID09PSAnLycpIHtcbiAgICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgcHJldi5vdXRwdXQgPSBgKD86Xnwke1NMQVNIX0xJVEVSQUx9fCR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfSlgO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBwcmV2Lm91dHB1dDtcbiAgICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuICAgICAgICBjb25zdW1lKHZhbHVlICsgYWR2YW5jZSgpKTtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzbGFzaCcsIHZhbHVlOiAnLycsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyByZW1vdmUgc2luZ2xlIHN0YXIgZnJvbSBvdXRwdXRcbiAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtcHJldi5vdXRwdXQubGVuZ3RoKTtcblxuICAgICAgLy8gcmVzZXQgcHJldmlvdXMgdG9rZW4gdG8gZ2xvYnN0YXJcbiAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICBwcmV2Lm91dHB1dCA9IGdsb2JzdGFyKG9wdHMpO1xuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcblxuICAgICAgLy8gcmVzZXQgb3V0cHV0IHdpdGggZ2xvYnN0YXJcbiAgICAgIHN0YXRlLm91dHB1dCArPSBwcmV2Lm91dHB1dDtcbiAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgIGNvbnN1bWUodmFsdWUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW4gPSB7IHR5cGU6ICdzdGFyJywgdmFsdWUsIG91dHB1dDogc3RhciB9O1xuXG4gICAgaWYgKG9wdHMuYmFzaCA9PT0gdHJ1ZSkge1xuICAgICAgdG9rZW4ub3V0cHV0ID0gJy4qPyc7XG4gICAgICBpZiAocHJldi50eXBlID09PSAnYm9zJyB8fCBwcmV2LnR5cGUgPT09ICdzbGFzaCcpIHtcbiAgICAgICAgdG9rZW4ub3V0cHV0ID0gbm9kb3QgKyB0b2tlbi5vdXRwdXQ7XG4gICAgICB9XG4gICAgICBwdXNoKHRva2VuKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChwcmV2ICYmIChwcmV2LnR5cGUgPT09ICdicmFja2V0JyB8fCBwcmV2LnR5cGUgPT09ICdwYXJlbicpICYmIG9wdHMucmVnZXggPT09IHRydWUpIHtcbiAgICAgIHRva2VuLm91dHB1dCA9IHZhbHVlO1xuICAgICAgcHVzaCh0b2tlbik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuaW5kZXggPT09IHN0YXRlLnN0YXJ0IHx8IHByZXYudHlwZSA9PT0gJ3NsYXNoJyB8fCBwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICBpZiAocHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gTk9fRE9UX1NMQVNIO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBOT19ET1RfU0xBU0g7XG5cbiAgICAgIH0gZWxzZSBpZiAob3B0cy5kb3QgPT09IHRydWUpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IE5PX0RPVFNfU0xBU0g7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IE5PX0RPVFNfU0xBU0g7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBub2RvdDtcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gbm9kb3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChwZWVrKCkgIT09ICcqJykge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gT05FX0NIQVI7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IE9ORV9DSEFSO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1c2godG9rZW4pO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLmJyYWNrZXRzID4gMCkge1xuICAgIGlmIChvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ2Nsb3NpbmcnLCAnXScpKTtcbiAgICBzdGF0ZS5vdXRwdXQgPSB1dGlscy5lc2NhcGVMYXN0KHN0YXRlLm91dHB1dCwgJ1snKTtcbiAgICBkZWNyZW1lbnQoJ2JyYWNrZXRzJyk7XG4gIH1cblxuICB3aGlsZSAoc3RhdGUucGFyZW5zID4gMCkge1xuICAgIGlmIChvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ2Nsb3NpbmcnLCAnKScpKTtcbiAgICBzdGF0ZS5vdXRwdXQgPSB1dGlscy5lc2NhcGVMYXN0KHN0YXRlLm91dHB1dCwgJygnKTtcbiAgICBkZWNyZW1lbnQoJ3BhcmVucycpO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLmJyYWNlcyA+IDApIHtcbiAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJ30nKSk7XG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMuZXNjYXBlTGFzdChzdGF0ZS5vdXRwdXQsICd7Jyk7XG4gICAgZGVjcmVtZW50KCdicmFjZXMnKTtcbiAgfVxuXG4gIGlmIChvcHRzLnN0cmljdFNsYXNoZXMgIT09IHRydWUgJiYgKHByZXYudHlwZSA9PT0gJ3N0YXInIHx8IHByZXYudHlwZSA9PT0gJ2JyYWNrZXQnKSkge1xuICAgIHB1c2goeyB0eXBlOiAnbWF5YmVfc2xhc2gnLCB2YWx1ZTogJycsIG91dHB1dDogYCR7U0xBU0hfTElURVJBTH0/YCB9KTtcbiAgfVxuXG4gIC8vIHJlYnVpbGQgdGhlIG91dHB1dCBpZiB3ZSBoYWQgdG8gYmFja3RyYWNrIGF0IGFueSBwb2ludFxuICBpZiAoc3RhdGUuYmFja3RyYWNrID09PSB0cnVlKSB7XG4gICAgc3RhdGUub3V0cHV0ID0gJyc7XG5cbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHN0YXRlLnRva2Vucykge1xuICAgICAgc3RhdGUub3V0cHV0ICs9IHRva2VuLm91dHB1dCAhPSBudWxsID8gdG9rZW4ub3V0cHV0IDogdG9rZW4udmFsdWU7XG5cbiAgICAgIGlmICh0b2tlbi5zdWZmaXgpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IHRva2VuLnN1ZmZpeDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG4vKipcbiAqIEZhc3QgcGF0aHMgZm9yIGNyZWF0aW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIGNvbW1vbiBnbG9iIHBhdHRlcm5zLlxuICogVGhpcyBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCBwcm9jZXNzaW5nIGFuZCBoYXMgdmVyeSBsaXR0bGUgZG93bnNpZGVcbiAqIGltcGFjdCB3aGVuIG5vbmUgb2YgdGhlIGZhc3QgcGF0aHMgbWF0Y2guXG4gKi9cblxucGFyc2UuZmFzdHBhdGhzID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IG9wdHMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgY29uc3QgbWF4ID0gdHlwZW9mIG9wdHMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKE1BWF9MRU5HVEgsIG9wdHMubWF4TGVuZ3RoKSA6IE1BWF9MRU5HVEg7XG4gIGNvbnN0IGxlbiA9IGlucHV0Lmxlbmd0aDtcbiAgaWYgKGxlbiA+IG1heCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgSW5wdXQgbGVuZ3RoOiAke2xlbn0sIGV4Y2VlZHMgbWF4aW11bSBhbGxvd2VkIGxlbmd0aDogJHttYXh9YCk7XG4gIH1cblxuICBpbnB1dCA9IFJFUExBQ0VNRU5UU1tpbnB1dF0gfHwgaW5wdXQ7XG4gIGNvbnN0IHdpbjMyID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuXG4gIC8vIGNyZWF0ZSBjb25zdGFudHMgYmFzZWQgb24gcGxhdGZvcm0sIGZvciB3aW5kb3dzIG9yIHBvc2l4XG4gIGNvbnN0IHtcbiAgICBET1RfTElURVJBTCxcbiAgICBTTEFTSF9MSVRFUkFMLFxuICAgIE9ORV9DSEFSLFxuICAgIERPVFNfU0xBU0gsXG4gICAgTk9fRE9ULFxuICAgIE5PX0RPVFMsXG4gICAgTk9fRE9UU19TTEFTSCxcbiAgICBTVEFSLFxuICAgIFNUQVJUX0FOQ0hPUlxuICB9ID0gY29uc3RhbnRzLmdsb2JDaGFycyh3aW4zMik7XG5cbiAgY29uc3Qgbm9kb3QgPSBvcHRzLmRvdCA/IE5PX0RPVFMgOiBOT19ET1Q7XG4gIGNvbnN0IHNsYXNoRG90ID0gb3B0cy5kb3QgPyBOT19ET1RTX1NMQVNIIDogTk9fRE9UO1xuICBjb25zdCBjYXB0dXJlID0gb3B0cy5jYXB0dXJlID8gJycgOiAnPzonO1xuICBjb25zdCBzdGF0ZSA9IHsgbmVnYXRlZDogZmFsc2UsIHByZWZpeDogJycgfTtcbiAgbGV0IHN0YXIgPSBvcHRzLmJhc2ggPT09IHRydWUgPyAnLio/JyA6IFNUQVI7XG5cbiAgaWYgKG9wdHMuY2FwdHVyZSkge1xuICAgIHN0YXIgPSBgKCR7c3Rhcn0pYDtcbiAgfVxuXG4gIGNvbnN0IGdsb2JzdGFyID0gb3B0cyA9PiB7XG4gICAgaWYgKG9wdHMubm9nbG9ic3RhciA9PT0gdHJ1ZSkgcmV0dXJuIHN0YXI7XG4gICAgcmV0dXJuIGAoJHtjYXB0dXJlfSg/Oig/ISR7U1RBUlRfQU5DSE9SfSR7b3B0cy5kb3QgPyBET1RTX1NMQVNIIDogRE9UX0xJVEVSQUx9KS4pKj8pYDtcbiAgfTtcblxuICBjb25zdCBjcmVhdGUgPSBzdHIgPT4ge1xuICAgIHN3aXRjaCAoc3RyKSB7XG4gICAgICBjYXNlICcqJzpcbiAgICAgICAgcmV0dXJuIGAke25vZG90fSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJy4qJzpcbiAgICAgICAgcmV0dXJuIGAke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyouKic6XG4gICAgICAgIHJldHVybiBgJHtub2RvdH0ke3N0YXJ9JHtET1RfTElURVJBTH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqLyonOlxuICAgICAgICByZXR1cm4gYCR7bm9kb3R9JHtzdGFyfSR7U0xBU0hfTElURVJBTH0ke09ORV9DSEFSfSR7c2xhc2hEb3R9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyoqJzpcbiAgICAgICAgcmV0dXJuIG5vZG90ICsgZ2xvYnN0YXIob3B0cyk7XG5cbiAgICAgIGNhc2UgJyoqLyonOlxuICAgICAgICByZXR1cm4gYCg/OiR7bm9kb3R9JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KT8ke3NsYXNoRG90fSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyoqLyouKic6XG4gICAgICAgIHJldHVybiBgKD86JHtub2RvdH0ke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pPyR7c2xhc2hEb3R9JHtzdGFyfSR7RE9UX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKiovLionOlxuICAgICAgICByZXR1cm4gYCg/OiR7bm9kb3R9JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KT8ke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSAvXiguKj8pXFwuKFxcdyspJC8uZXhlYyhzdHIpO1xuICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc291cmNlID0gY3JlYXRlKG1hdGNoWzFdKTtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHJldHVybjtcblxuICAgICAgICByZXR1cm4gc291cmNlICsgRE9UX0xJVEVSQUwgKyBtYXRjaFsyXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb3V0cHV0ID0gdXRpbHMucmVtb3ZlUHJlZml4KGlucHV0LCBzdGF0ZSk7XG4gIGxldCBzb3VyY2UgPSBjcmVhdGUob3V0cHV0KTtcblxuICBpZiAoc291cmNlICYmIG9wdHMuc3RyaWN0U2xhc2hlcyAhPT0gdHJ1ZSkge1xuICAgIHNvdXJjZSArPSBgJHtTTEFTSF9MSVRFUkFMfT9gO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBzY2FuID0gcmVxdWlyZSgnLi9zY2FuJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IGlzT2JqZWN0ID0gdmFsID0+IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRjaGVyIGZ1bmN0aW9uIGZyb20gb25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucy4gVGhlXG4gKiByZXR1cm5lZCBmdW5jdGlvbiB0YWtlcyBhIHN0cmluZyB0byBtYXRjaCBhcyBpdHMgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYSBtYXRjaC4gVGhlIHJldHVybmVkIG1hdGNoZXJcbiAqIGZ1bmN0aW9uIGFsc28gdGFrZXMgYSBib29sZWFuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdGhhdCwgd2hlbiB0cnVlLFxuICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaChnbG9iWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goJyouISgqYSknKTtcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYScpKTsgLy89PiBmYWxzZVxuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5iJykpOyAvLz0+IHRydWVcbiAqIGBgYFxuICogQG5hbWUgcGljb21hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGdsb2JzYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLlxuICogQHBhcmFtIHtPYmplY3Q9fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0Z1bmN0aW9uPX0gUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IHBpY29tYXRjaCA9IChnbG9iLCBvcHRpb25zLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGdsb2IpKSB7XG4gICAgY29uc3QgZm5zID0gZ2xvYi5tYXAoaW5wdXQgPT4gcGljb21hdGNoKGlucHV0LCBvcHRpb25zLCByZXR1cm5TdGF0ZSkpO1xuICAgIGNvbnN0IGFycmF5TWF0Y2hlciA9IHN0ciA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGlzTWF0Y2ggb2YgZm5zKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gaXNNYXRjaChzdHIpO1xuICAgICAgICBpZiAoc3RhdGUpIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheU1hdGNoZXI7XG4gIH1cblxuICBjb25zdCBpc1N0YXRlID0gaXNPYmplY3QoZ2xvYikgJiYgZ2xvYi50b2tlbnMgJiYgZ2xvYi5pbnB1dDtcblxuICBpZiAoZ2xvYiA9PT0gJycgfHwgKHR5cGVvZiBnbG9iICE9PSAnc3RyaW5nJyAmJiAhaXNTdGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXR0ZXJuIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuICBjb25zdCByZWdleCA9IGlzU3RhdGVcbiAgICA/IHBpY29tYXRjaC5jb21waWxlUmUoZ2xvYiwgb3B0aW9ucylcbiAgICA6IHBpY29tYXRjaC5tYWtlUmUoZ2xvYiwgb3B0aW9ucywgZmFsc2UsIHRydWUpO1xuXG4gIGNvbnN0IHN0YXRlID0gcmVnZXguc3RhdGU7XG4gIGRlbGV0ZSByZWdleC5zdGF0ZTtcblxuICBsZXQgaXNJZ25vcmVkID0gKCkgPT4gZmFsc2U7XG4gIGlmIChvcHRzLmlnbm9yZSkge1xuICAgIGNvbnN0IGlnbm9yZU9wdHMgPSB7IC4uLm9wdGlvbnMsIGlnbm9yZTogbnVsbCwgb25NYXRjaDogbnVsbCwgb25SZXN1bHQ6IG51bGwgfTtcbiAgICBpc0lnbm9yZWQgPSBwaWNvbWF0Y2gob3B0cy5pZ25vcmUsIGlnbm9yZU9wdHMsIHJldHVyblN0YXRlKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXIgPSAoaW5wdXQsIHJldHVybk9iamVjdCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgeyBpc01hdGNoLCBtYXRjaCwgb3V0cHV0IH0gPSBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXgsIG9wdGlvbnMsIHsgZ2xvYiwgcG9zaXggfSk7XG4gICAgY29uc3QgcmVzdWx0ID0geyBnbG9iLCBzdGF0ZSwgcmVnZXgsIHBvc2l4LCBpbnB1dCwgb3V0cHV0LCBtYXRjaCwgaXNNYXRjaCB9O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRzLm9uUmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRzLm9uUmVzdWx0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTWF0Y2ggPT09IGZhbHNlKSB7XG4gICAgICByZXN1bHQuaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldHVybk9iamVjdCA/IHJlc3VsdCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0lnbm9yZWQoaW5wdXQpKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdHMub25JZ25vcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3B0cy5vbklnbm9yZShyZXN1bHQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMub25NYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0cy5vbk1hdGNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiB0cnVlO1xuICB9O1xuXG4gIGlmIChyZXR1cm5TdGF0ZSkge1xuICAgIG1hdGNoZXIuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVyO1xufTtcblxuLyoqXG4gKiBUZXN0IGBpbnB1dGAgd2l0aCB0aGUgZ2l2ZW4gYHJlZ2V4YC4gVGhpcyBpcyB1c2VkIGJ5IHRoZSBtYWluXG4gKiBgcGljb21hdGNoKClgIGZ1bmN0aW9uIHRvIHRlc3QgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXhbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLnRlc3QoJ2Zvby9iYXInLCAvXig/OihbXi9dKj8pXFwvKFteL10qPykpJC8pKTtcbiAqIC8vIHsgaXNNYXRjaDogdHJ1ZSwgbWF0Y2g6IFsgJ2Zvby8nLCAnZm9vJywgJ2JhcicgXSwgb3V0cHV0OiAnZm9vL2JhcicgfVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfSBgcmVnZXhgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcgaW5mby5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLnRlc3QgPSAoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCB7IGdsb2IsIHBvc2l4IH0gPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGlucHV0IHRvIGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpZiAoaW5wdXQgPT09ICcnKSB7XG4gICAgcmV0dXJuIHsgaXNNYXRjaDogZmFsc2UsIG91dHB1dDogJycgfTtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBmb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCAocG9zaXggPyB1dGlscy50b1Bvc2l4U2xhc2hlcyA6IG51bGwpO1xuICBsZXQgbWF0Y2ggPSBpbnB1dCA9PT0gZ2xvYjtcbiAgbGV0IG91dHB1dCA9IChtYXRjaCAmJiBmb3JtYXQpID8gZm9ybWF0KGlucHV0KSA6IGlucHV0O1xuXG4gIGlmIChtYXRjaCA9PT0gZmFsc2UpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXQgPyBmb3JtYXQoaW5wdXQpIDogaW5wdXQ7XG4gICAgbWF0Y2ggPSBvdXRwdXQgPT09IGdsb2I7XG4gIH1cblxuICBpZiAobWF0Y2ggPT09IGZhbHNlIHx8IG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChvcHRzLm1hdGNoQmFzZSA9PT0gdHJ1ZSB8fCBvcHRzLmJhc2VuYW1lID09PSB0cnVlKSB7XG4gICAgICBtYXRjaCA9IHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCBwb3NpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhvdXRwdXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGlzTWF0Y2g6IEJvb2xlYW4obWF0Y2gpLCBtYXRjaCwgb3V0cHV0IH07XG59O1xuXG4vKipcbiAqIE1hdGNoIHRoZSBiYXNlbmFtZSBvZiBhIGZpbGVwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIGdsb2JbLCBvcHRpb25zXSk7XG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gubWF0Y2hCYXNlKCdmb28vYmFyLmpzJywgJyouanMnKTsgLy8gdHJ1ZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gYGdsb2JgIEdsb2IgcGF0dGVybiBvciByZWdleCBjcmVhdGVkIGJ5IFsubWFrZVJlXSgjbWFrZVJlKS5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5tYXRjaEJhc2UgPSAoaW5wdXQsIGdsb2IsIG9wdGlvbnMsIHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gZ2xvYiBpbnN0YW5jZW9mIFJlZ0V4cCA/IGdsb2IgOiBwaWNvbWF0Y2gubWFrZVJlKGdsb2IsIG9wdGlvbnMpO1xuICByZXR1cm4gcmVnZXgudGVzdChwYXRoLmJhc2VuYW1lKGlucHV0KSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiAqKmFueSoqIG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AgbWF0Y2ggdGhlIHNwZWNpZmllZCBgc3RyaW5nYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2guaXNNYXRjaChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCBbJ2IuKicsICcqLmEnXSkpOyAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCAnYi4qJykpOyAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBzdHIgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBhdHRlcm5zIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2guaXNNYXRjaCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybnMsIG9wdGlvbnMpKHN0cik7XG5cbi8qKlxuICogUGFyc2UgYSBnbG9iIHBhdHRlcm4gdG8gY3JlYXRlIHRoZSBzb3VyY2Ugc3RyaW5nIGZvciBhIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogY29uc3QgcmVzdWx0ID0gcGljb21hdGNoLnBhcnNlKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB1c2VmdWwgcHJvcGVydGllcyBhbmQgb3V0cHV0IHRvIGJlIHVzZWQgYXMgYSByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gucGFyc2UgPSAocGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkgcmV0dXJuIHBhdHRlcm4ubWFwKHAgPT4gcGljb21hdGNoLnBhcnNlKHAsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIHBhcnNlKHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgZmFzdHBhdGhzOiBmYWxzZSB9KTtcbn07XG5cbi8qKlxuICogU2NhbiBhIGdsb2IgcGF0dGVybiB0byBzZXBhcmF0ZSB0aGUgcGF0dGVybiBpbnRvIHNlZ21lbnRzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5zY2FuKGlucHV0Wywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IHBpY29tYXRjaC5zY2FuKCchLi9mb28vKi5qcycpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIHsgcHJlZml4OiAnIS4vJyxcbiAqICAgaW5wdXQ6ICchLi9mb28vKi5qcycsXG4gKiAgIHN0YXJ0OiAzLFxuICogICBiYXNlOiAnZm9vJyxcbiAqICAgZ2xvYjogJyouanMnLFxuICogICBpc0JyYWNlOiBmYWxzZSxcbiAqICAgaXNCcmFja2V0OiBmYWxzZSxcbiAqICAgaXNHbG9iOiB0cnVlLFxuICogICBpc0V4dGdsb2I6IGZhbHNlLFxuICogICBpc0dsb2JzdGFyOiBmYWxzZSxcbiAqICAgbmVnYXRlZDogdHJ1ZSB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEdsb2IgcGF0dGVybiB0byBzY2FuLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5zY2FuID0gKGlucHV0LCBvcHRpb25zKSA9PiBzY2FuKGlucHV0LCBvcHRpb25zKTtcblxuLyoqXG4gKiBDb21waWxlIGEgcmVndWxhciBleHByZXNzaW9uIGZyb20gdGhlIGBzdGF0ZWAgb2JqZWN0IHJldHVybmVkIGJ5IHRoZVxuICogW3BhcnNlKCldKCNwYXJzZSkgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBgc3RhdGVgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGByZXR1cm5PdXRwdXRgIEludGVuZGVkIGZvciBpbXBsZW1lbnRvcnMsIHRoaXMgYXJndW1lbnQgYWxsb3dzIHlvdSB0byByZXR1cm4gdGhlIHJhdyBvdXRwdXQgZnJvbSB0aGUgcGFyc2VyLlxuICogQHBhcmFtIHtCb29sZWFufSBgcmV0dXJuU3RhdGVgIEFkZHMgdGhlIHN0YXRlIHRvIGEgYHN0YXRlYCBwcm9wZXJ0eSBvbiB0aGUgcmV0dXJuZWQgcmVnZXguIFVzZWZ1bCBmb3IgaW1wbGVtZW50b3JzIGFuZCBkZWJ1Z2dpbmcuXG4gKiBAcmV0dXJuIHtSZWdFeHB9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5jb21waWxlUmUgPSAoc3RhdGUsIG9wdGlvbnMsIHJldHVybk91dHB1dCA9IGZhbHNlLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChyZXR1cm5PdXRwdXQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3RhdGUub3V0cHV0O1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHByZXBlbmQgPSBvcHRzLmNvbnRhaW5zID8gJycgOiAnXic7XG4gIGNvbnN0IGFwcGVuZCA9IG9wdHMuY29udGFpbnMgPyAnJyA6ICckJztcblxuICBsZXQgc291cmNlID0gYCR7cHJlcGVuZH0oPzoke3N0YXRlLm91dHB1dH0pJHthcHBlbmR9YDtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLm5lZ2F0ZWQgPT09IHRydWUpIHtcbiAgICBzb3VyY2UgPSBgXig/ISR7c291cmNlfSkuKiRgO1xuICB9XG5cbiAgY29uc3QgcmVnZXggPSBwaWNvbWF0Y2gudG9SZWdleChzb3VyY2UsIG9wdGlvbnMpO1xuICBpZiAocmV0dXJuU3RhdGUgPT09IHRydWUpIHtcbiAgICByZWdleC5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSBhIHBhcnNlZCBnbG9iIHBhdHRlcm4uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogY29uc3Qgc3RhdGUgPSBwaWNvbWF0Y2gucGFyc2UoJyouanMnKTtcbiAqIC8vIHBpY29tYXRjaC5jb21waWxlUmUoc3RhdGVbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLmNvbXBpbGVSZShzdGF0ZSkpO1xuICogLy89PiAvXig/Oig/IVxcLikoPz0uKVteL10qP1xcLmpzKSQvXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RhdGVgIFRoZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgYC5wYXJzZWAgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHBhcmFtIHtCb29sZWFufSBgcmV0dXJuT3V0cHV0YCBJbXBsZW1lbnRvcnMgbWF5IHVzZSB0aGlzIGFyZ3VtZW50IHRvIHJldHVybiB0aGUgY29tcGlsZWQgb3V0cHV0LCBpbnN0ZWFkIG9mIGEgcmVndWxhciBleHByZXNzaW9uLiBUaGlzIGlzIG5vdCBleHBvc2VkIG9uIHRoZSBvcHRpb25zIHRvIHByZXZlbnQgZW5kLXVzZXJzIGZyb20gbXV0YXRpbmcgdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYHJldHVyblN0YXRlYCBJbXBsZW1lbnRvcnMgbWF5IHVzZSB0aGlzIGFyZ3VtZW50IHRvIHJldHVybiB0aGUgc3RhdGUgZnJvbSB0aGUgcGFyc2VkIGdsb2Igd2l0aCB0aGUgcmV0dXJuZWQgcmVndWxhciBleHByZXNzaW9uLlxuICogQHJldHVybiB7UmVnRXhwfSBSZXR1cm5zIGEgcmVnZXggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiBwYXR0ZXJuLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gubWFrZVJlID0gKGlucHV0LCBvcHRpb25zID0ge30sIHJldHVybk91dHB1dCA9IGZhbHNlLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmICghaW5wdXQgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgbGV0IHBhcnNlZCA9IHsgbmVnYXRlZDogZmFsc2UsIGZhc3RwYXRoczogdHJ1ZSB9O1xuXG4gIGlmIChvcHRpb25zLmZhc3RwYXRocyAhPT0gZmFsc2UgJiYgKGlucHV0WzBdID09PSAnLicgfHwgaW5wdXRbMF0gPT09ICcqJykpIHtcbiAgICBwYXJzZWQub3V0cHV0ID0gcGFyc2UuZmFzdHBhdGhzKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICghcGFyc2VkLm91dHB1dCkge1xuICAgIHBhcnNlZCA9IHBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBwaWNvbWF0Y2guY29tcGlsZVJlKHBhcnNlZCwgb3B0aW9ucywgcmV0dXJuT3V0cHV0LCByZXR1cm5TdGF0ZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIHRoZSBnaXZlbiByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC50b1JlZ2V4KHNvdXJjZVssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zdCB7IG91dHB1dCB9ID0gcGljb21hdGNoLnBhcnNlKCcqLmpzJyk7XG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gudG9SZWdleChvdXRwdXQpKTtcbiAqIC8vPT4gL14oPzooPyFcXC4pKD89LilbXi9dKj9cXC5qcykkL1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHNvdXJjZWAgUmVndWxhciBleHByZXNzaW9uIHNvdXJjZSBzdHJpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtSZWdFeHB9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC50b1JlZ2V4ID0gKHNvdXJjZSwgb3B0aW9ucykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHNvdXJjZSwgb3B0cy5mbGFncyB8fCAob3B0cy5ub2Nhc2UgPyAnaScgOiAnJykpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnID09PSB0cnVlKSB0aHJvdyBlcnI7XG4gICAgcmV0dXJuIC8kXi87XG4gIH1cbn07XG5cbi8qKlxuICogUGljb21hdGNoIGNvbnN0YW50cy5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5waWNvbWF0Y2guY29uc3RhbnRzID0gY29uc3RhbnRzO1xuXG4vKipcbiAqIEV4cG9zZSBcInBpY29tYXRjaFwiXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwaWNvbWF0Y2g7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvcGljb21hdGNoJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbmNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCdwaWNvbWF0Y2gvbGliL3V0aWxzJyk7XG5jb25zdCBpc0VtcHR5U3RyaW5nID0gdmFsID0+IHZhbCA9PT0gJycgfHwgdmFsID09PSAnLi8nO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc3RyaW5ncyB0aGF0IG1hdGNoIG9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0obGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0oWydhLmpzJywgJ2EudHh0J10sIFsnKi5qcyddKSk7XG4gKiAvLz0+IFsgJ2EuanMnIF1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXk8c3RyaW5nPn0gYGxpc3RgIExpc3Qgb2Ygc3RyaW5ncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5PHN0cmluZz59IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucylcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIG1hdGNoZXNcbiAqIEBzdW1tYXJ5IGZhbHNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IG1pY3JvbWF0Y2ggPSAobGlzdCwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgcGF0dGVybnMgPSBbXS5jb25jYXQocGF0dGVybnMpO1xuICBsaXN0ID0gW10uY29uY2F0KGxpc3QpO1xuXG4gIGxldCBvbWl0ID0gbmV3IFNldCgpO1xuICBsZXQga2VlcCA9IG5ldyBTZXQoKTtcbiAgbGV0IGl0ZW1zID0gbmV3IFNldCgpO1xuICBsZXQgbmVnYXRpdmVzID0gMDtcblxuICBsZXQgb25SZXN1bHQgPSBzdGF0ZSA9PiB7XG4gICAgaXRlbXMuYWRkKHN0YXRlLm91dHB1dCk7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vblJlc3VsdCkge1xuICAgICAgb3B0aW9ucy5vblJlc3VsdChzdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybnMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybnNbaV0pLCB7IC4uLm9wdGlvbnMsIG9uUmVzdWx0IH0sIHRydWUpO1xuICAgIGxldCBuZWdhdGVkID0gaXNNYXRjaC5zdGF0ZS5uZWdhdGVkIHx8IGlzTWF0Y2guc3RhdGUubmVnYXRlZEV4dGdsb2I7XG4gICAgaWYgKG5lZ2F0ZWQpIG5lZ2F0aXZlcysrO1xuXG4gICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBsZXQgbWF0Y2hlZCA9IGlzTWF0Y2goaXRlbSwgdHJ1ZSk7XG5cbiAgICAgIGxldCBtYXRjaCA9IG5lZ2F0ZWQgPyAhbWF0Y2hlZC5pc01hdGNoIDogbWF0Y2hlZC5pc01hdGNoO1xuICAgICAgaWYgKCFtYXRjaCkgY29udGludWU7XG5cbiAgICAgIGlmIChuZWdhdGVkKSB7XG4gICAgICAgIG9taXQuYWRkKG1hdGNoZWQub3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9taXQuZGVsZXRlKG1hdGNoZWQub3V0cHV0KTtcbiAgICAgICAga2VlcC5hZGQobWF0Y2hlZC5vdXRwdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSBuZWdhdGl2ZXMgPT09IHBhdHRlcm5zLmxlbmd0aCA/IFsuLi5pdGVtc10gOiBbLi4ua2VlcF07XG4gIGxldCBtYXRjaGVzID0gcmVzdWx0LmZpbHRlcihpdGVtID0+ICFvbWl0LmhhcyhpdGVtKSk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgbWF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAob3B0aW9ucy5mYWlsZ2xvYiA9PT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBtYXRjaGVzIGZvdW5kIGZvciBcIiR7cGF0dGVybnMuam9pbignLCAnKX1cImApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm5vbnVsbCA9PT0gdHJ1ZSB8fCBvcHRpb25zLm51bGxnbG9iID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy51bmVzY2FwZSA/IHBhdHRlcm5zLm1hcChwID0+IHAucmVwbGFjZSgvXFxcXC9nLCAnJykpIDogcGF0dGVybnM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59O1xuXG4vKipcbiAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gKi9cblxubWljcm9tYXRjaC5tYXRjaCA9IG1pY3JvbWF0Y2g7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybmAgYW5kIGBvcHRpb25zYC5cbiAqIFRoZSByZXR1cm5lZCBmdW5jdGlvbiB0YWtlcyBhIHN0cmluZyB0byBtYXRjaCBhcyBpdHMgb25seSBhcmd1bWVudCBhbmQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgc3RyaW5nIGlzIGEgbWF0Y2guXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0ubWF0Y2hlcihwYXR0ZXJuWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IGlzTWF0Y2ggPSBtbS5tYXRjaGVyKCcqLiEoKmEpJyk7XG4gKiBjb25zb2xlLmxvZyhpc01hdGNoKCdhLmEnKSk7IC8vPT4gZmFsc2VcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYicpKTsgLy89PiB0cnVlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgR2xvYiBwYXR0ZXJuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubWF0Y2hlciA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybiwgb3B0aW9ucyk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmICoqYW55Kiogb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYCBtYXRjaCB0aGUgc3BlY2lmaWVkIGBzdHJpbmdgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmlzTWF0Y2goc3RyaW5nLCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5pc01hdGNoKCdhLmEnLCBbJ2IuKicsICcqLmEnXSkpOyAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLmlzTWF0Y2goJ2EuYScsICdiLionKSk7IC8vPT4gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgIFRoZSBzdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgW29wdGlvbnNdYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IHBhdHRlcm5zIG1hdGNoIGBzdHJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guaXNNYXRjaCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybnMsIG9wdGlvbnMpKHN0cik7XG5cbi8qKlxuICogQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuXG5taWNyb21hdGNoLmFueSA9IG1pY3JvbWF0Y2guaXNNYXRjaDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBzdHJpbmdzIHRoYXQgXyoqZG8gbm90IG1hdGNoIGFueSoqXyBvZiB0aGUgZ2l2ZW4gYHBhdHRlcm5zYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5ub3QobGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0ubm90KFsnYS5hJywgJ2IuYicsICdjLmMnXSwgJyouYScpKTtcbiAqIC8vPT4gWydiLmInLCAnYy5jJ11cbiAqIGBgYFxuICogQHBhcmFtIHtBcnJheX0gYGxpc3RgIEFycmF5IG9mIHN0cmluZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm4gdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgKipkbyBub3QgbWF0Y2gqKiB0aGUgZ2l2ZW4gcGF0dGVybnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubm90ID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zID0ge30pID0+IHtcbiAgcGF0dGVybnMgPSBbXS5jb25jYXQocGF0dGVybnMpLm1hcChTdHJpbmcpO1xuICBsZXQgcmVzdWx0ID0gbmV3IFNldCgpO1xuICBsZXQgaXRlbXMgPSBbXTtcblxuICBsZXQgb25SZXN1bHQgPSBzdGF0ZSA9PiB7XG4gICAgaWYgKG9wdGlvbnMub25SZXN1bHQpIG9wdGlvbnMub25SZXN1bHQoc3RhdGUpO1xuICAgIGl0ZW1zLnB1c2goc3RhdGUub3V0cHV0KTtcbiAgfTtcblxuICBsZXQgbWF0Y2hlcyA9IG5ldyBTZXQobWljcm9tYXRjaChsaXN0LCBwYXR0ZXJucywgeyAuLi5vcHRpb25zLCBvblJlc3VsdCB9KSk7XG5cbiAgZm9yIChsZXQgaXRlbSBvZiBpdGVtcykge1xuICAgIGlmICghbWF0Y2hlcy5oYXMoaXRlbSkpIHtcbiAgICAgIHJlc3VsdC5hZGQoaXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbLi4ucmVzdWx0XTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBgc3RyaW5nYCBjb250YWlucyB0aGUgZ2l2ZW4gcGF0dGVybi4gU2ltaWxhclxuICogdG8gWy5pc01hdGNoXSgjaXNNYXRjaCkgYnV0IHRoZSBwYXR0ZXJuIGNhbiBtYXRjaCBhbnkgcGFydCBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5jb250YWlucyhzdHJpbmcsIHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uY29udGFpbnMoJ2FhL2JiL2NjJywgJypiJykpO1xuICogLy89PiB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5jb250YWlucygnYWEvYmIvY2MnLCAnKmQnKSk7XG4gKiAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYCBUaGUgc3RyaW5nIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgR2xvYiBwYXR0ZXJuIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBvZiB0aGUgcGF0dGVybnMgbWF0Y2hlcyBhbnkgcGFydCBvZiBgc3RyYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5jb250YWlucyA9IChzdHIsIHBhdHRlcm4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBzdHJpbmc6IFwiJHt1dGlsLmluc3BlY3Qoc3RyKX1cImApO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zb21lKHAgPT4gbWljcm9tYXRjaC5jb250YWlucyhzdHIsIHAsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoaXNFbXB0eVN0cmluZyhzdHIpIHx8IGlzRW1wdHlTdHJpbmcocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RyLmluY2x1ZGVzKHBhdHRlcm4pIHx8IChzdHIuc3RhcnRzV2l0aCgnLi8nKSAmJiBzdHIuc2xpY2UoMikuaW5jbHVkZXMocGF0dGVybikpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWljcm9tYXRjaC5pc01hdGNoKHN0ciwgcGF0dGVybiwgeyAuLi5vcHRpb25zLCBjb250YWluczogdHJ1ZSB9KTtcbn07XG5cbi8qKlxuICogRmlsdGVyIHRoZSBrZXlzIG9mIHRoZSBnaXZlbiBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gYGdsb2JgIHBhdHRlcm5cbiAqIGFuZCBgb3B0aW9uc2AuIERvZXMgbm90IGF0dGVtcHQgdG8gbWF0Y2ggbmVzdGVkIGtleXMuIElmIHlvdSBuZWVkIHRoaXMgZmVhdHVyZSxcbiAqIHVzZSBbZ2xvYi1vYmplY3RdW10gaW5zdGVhZC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5tYXRjaEtleXMob2JqZWN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zdCBvYmogPSB7IGFhOiAnYScsIGFiOiAnYicsIGFjOiAnYycgfTtcbiAqIGNvbnNvbGUubG9nKG1tLm1hdGNoS2V5cyhvYmosICcqYicpKTtcbiAqIC8vPT4geyBhYjogJ2InIH1cbiAqIGBgYFxuICogQHBhcmFtIHtPYmplY3R9IGBvYmplY3RgIFRoZSBvYmplY3Qgd2l0aCBrZXlzIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggb25seSBrZXlzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHBhdHRlcm5zLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLm1hdGNoS2V5cyA9IChvYmosIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICBsZXQga2V5cyA9IG1pY3JvbWF0Y2goT2JqZWN0LmtleXMob2JqKSwgcGF0dGVybnMsIG9wdGlvbnMpO1xuICBsZXQgcmVzID0ge307XG4gIGZvciAobGV0IGtleSBvZiBrZXlzKSByZXNba2V5XSA9IG9ialtrZXldO1xuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgc29tZSBvZiB0aGUgc3RyaW5ncyBpbiB0aGUgZ2l2ZW4gYGxpc3RgIG1hdGNoIGFueSBvZiB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybnNgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLnNvbWUobGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uc29tZShbJ2Zvby5qcycsICdiYXIuanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uc29tZShbJ2Zvby5qcyddLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyBmYWxzZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGxpc3RgIFRoZSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyB0byB0ZXN0LiBSZXR1cm5zIGFzIHNvb24gYXMgdGhlIGZpcnN0IG1hdGNoIGlzIGZvdW5kLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgYHBhdHRlcm5zYCBtYXRjaGVzIGFueSBvZiB0aGUgc3RyaW5ncyBpbiBgbGlzdGBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5zb21lID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCBpdGVtcyA9IFtdLmNvbmNhdChsaXN0KTtcblxuICBmb3IgKGxldCBwYXR0ZXJuIG9mIFtdLmNvbmNhdChwYXR0ZXJucykpIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpO1xuICAgIGlmIChpdGVtcy5zb21lKGl0ZW0gPT4gaXNNYXRjaChpdGVtKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBldmVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIGBsaXN0YCBtYXRjaGVzXG4gKiBhbnkgb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5ldmVyeShsaXN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeSgnZm9vLmpzJywgWydmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uZXZlcnkoWydmb28uanMnLCAnYmFyLmpzJ10sIFsnKi5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeShbJ2Zvby5qcycsICdiYXIuanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqIGNvbnNvbGUubG9nKG1tLmV2ZXJ5KFsnZm9vLmpzJ10sIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgbGlzdGAgVGhlIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFsbCBgcGF0dGVybnNgIG1hdGNoZXMgYWxsIG9mIHRoZSBzdHJpbmdzIGluIGBsaXN0YFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmV2ZXJ5ID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCBpdGVtcyA9IFtdLmNvbmNhdChsaXN0KTtcblxuICBmb3IgKGxldCBwYXR0ZXJuIG9mIFtdLmNvbmNhdChwYXR0ZXJucykpIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpO1xuICAgIGlmICghaXRlbXMuZXZlcnkoaXRlbSA9PiBpc01hdGNoKGl0ZW0pKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmICoqYWxsKiogb2YgdGhlIGdpdmVuIGBwYXR0ZXJuc2AgbWF0Y2hcbiAqIHRoZSBzcGVjaWZpZWQgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmFsbChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWydmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5hbGwoJ2Zvby5qcycsIFsnKi5qcycsICdmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWycqLmpzJywgJ2YqJywgJypvKicsICcqby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgc3RyYCBUaGUgc3RyaW5nIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmFsbCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgc3RyaW5nOiBcIiR7dXRpbC5pbnNwZWN0KHN0cil9XCJgKTtcbiAgfVxuXG4gIHJldHVybiBbXS5jb25jYXQocGF0dGVybnMpLmV2ZXJ5KHAgPT4gcGljb21hdGNoKHAsIG9wdGlvbnMpKHN0cikpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG1hdGNoZXMgY2FwdHVyZWQgYnkgYHBhdHRlcm5gIGluIGBzdHJpbmcsIG9yIGBudWxsYCBpZiB0aGUgcGF0dGVybiBkaWQgbm90IG1hdGNoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmNhcHR1cmUocGF0dGVybiwgc3RyaW5nWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmNhcHR1cmUoJ3Rlc3QvKi5qcycsICd0ZXN0L2Zvby5qcycpKTtcbiAqIC8vPT4gWydmb28nXVxuICogY29uc29sZS5sb2cobW0uY2FwdHVyZSgndGVzdC8qLmpzJywgJ2Zvby9iYXIuY3NzJykpO1xuICogLy89PiBudWxsXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgZ2xvYmAgR2xvYiBwYXR0ZXJuIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gbWF0Y2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtBcnJheXxudWxsfSBSZXR1cm5zIGFuIGFycmF5IG9mIGNhcHR1cmVzIGlmIHRoZSBpbnB1dCBtYXRjaGVzIHRoZSBnbG9iIHBhdHRlcm4sIG90aGVyd2lzZSBgbnVsbGAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guY2FwdHVyZSA9IChnbG9iLCBpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBsZXQgcG9zaXggPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucyk7XG4gIGxldCByZWdleCA9IHBpY29tYXRjaC5tYWtlUmUoU3RyaW5nKGdsb2IpLCB7IC4uLm9wdGlvbnMsIGNhcHR1cmU6IHRydWUgfSk7XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMocG9zaXggPyB1dGlscy50b1Bvc2l4U2xhc2hlcyhpbnB1dCkgOiBpbnB1dCk7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hdGNoLnNsaWNlKDEpLm1hcCh2ID0+IHYgPT09IHZvaWQgMCA/ICcnIDogdik7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGZyb20gdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5gLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLm1ha2VSZShwYXR0ZXJuWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLm1ha2VSZSgnKi5qcycpKTtcbiAqIC8vPT4gL14oPzooXFwuW1xcXFxcXC9dKT8oPyFcXC4pKD89LilbXlxcL10qP1xcLmpzKSQvXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQSBnbG9iIHBhdHRlcm4gdG8gY29udmVydCB0byByZWdleC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge1JlZ0V4cH0gUmV0dXJucyBhIHJlZ2V4IGNyZWF0ZWQgZnJvbSB0aGUgZ2l2ZW4gcGF0dGVybi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5tYWtlUmUgPSAoLi4uYXJncykgPT4gcGljb21hdGNoLm1ha2VSZSguLi5hcmdzKTtcblxuLyoqXG4gKiBTY2FuIGEgZ2xvYiBwYXR0ZXJuIHRvIHNlcGFyYXRlIHRoZSBwYXR0ZXJuIGludG8gc2VnbWVudHMuIFVzZWRcbiAqIGJ5IHRoZSBbc3BsaXRdKCNzcGxpdCkgbWV0aG9kLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnN0IHN0YXRlID0gbW0uc2NhbihwYXR0ZXJuWywgb3B0aW9uc10pO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGhcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5zY2FuID0gKC4uLmFyZ3MpID0+IHBpY29tYXRjaC5zY2FuKC4uLmFyZ3MpO1xuXG4vKipcbiAqIFBhcnNlIGEgZ2xvYiBwYXR0ZXJuIHRvIGNyZWF0ZSB0aGUgc291cmNlIHN0cmluZyBmb3IgYSByZWd1bGFyXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnN0IHN0YXRlID0gbW0ucGFyc2UocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBnbG9iYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHVzZWZ1bCBwcm9wZXJ0aWVzIGFuZCBvdXRwdXQgdG8gYmUgdXNlZCBhcyByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLnBhcnNlID0gKHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXMgPSBbXTtcbiAgZm9yIChsZXQgcGF0dGVybiBvZiBbXS5jb25jYXQocGF0dGVybnMgfHwgW10pKSB7XG4gICAgZm9yIChsZXQgc3RyIG9mIGJyYWNlcyhTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpKSB7XG4gICAgICByZXMucHVzaChwaWNvbWF0Y2gucGFyc2Uoc3RyLCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgdGhlIGdpdmVuIGJyYWNlIGBwYXR0ZXJuYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgeyBicmFjZXMgfSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcygnZm9vL3thLGIsY30vYmFyJykpO1xuICogLy89PiBbICdmb28vKGF8YnxjKS9iYXInIF1cbiAqXG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ2Zvby97YSxiLGN9L2JhcicsIHsgZXhwYW5kOiB0cnVlIH0pKTtcbiAqIC8vPT4gWyAnZm9vL2EvYmFyJywgJ2Zvby9iL2JhcicsICdmb28vYy9iYXInIF1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBTdHJpbmcgd2l0aCBicmFjZSBwYXR0ZXJuIHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIEFueSBbb3B0aW9uc10oI29wdGlvbnMpIHRvIGNoYW5nZSBob3cgZXhwYW5zaW9uIGlzIHBlcmZvcm1lZC4gU2VlIHRoZSBbYnJhY2VzXVtdIGxpYnJhcnkgZm9yIGFsbCBhdmFpbGFibGUgb3B0aW9ucy5cbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmJyYWNlcyA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIGlmICgob3B0aW9ucyAmJiBvcHRpb25zLm5vYnJhY2UgPT09IHRydWUpIHx8ICEvXFx7LipcXH0vLnRlc3QocGF0dGVybikpIHtcbiAgICByZXR1cm4gW3BhdHRlcm5dO1xuICB9XG4gIHJldHVybiBicmFjZXMocGF0dGVybiwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEV4cGFuZCBicmFjZXNcbiAqL1xuXG5taWNyb21hdGNoLmJyYWNlRXhwYW5kID0gKHBhdHRlcm4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgcmV0dXJuIG1pY3JvbWF0Y2guYnJhY2VzKHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgZXhwYW5kOiB0cnVlIH0pO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgbWljcm9tYXRjaFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gbWljcm9tYXRjaDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXRjaCA9IHZvaWQgMDtcbmNvbnN0IGlzR2xvYiA9IHJlcXVpcmUoXCJpcy1nbG9iXCIpO1xuY29uc3QgbWljcm9tYXRjaCA9IHJlcXVpcmUoXCJtaWNyb21hdGNoXCIpO1xuY29uc3QgdXJsID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuZnVuY3Rpb24gbWF0Y2goY29udGV4dCwgdXJpLCByZXEpIHtcbiAgICAvLyBzaW5nbGUgcGF0aFxuICAgIGlmIChpc1N0cmluZ1BhdGgoY29udGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoU2luZ2xlU3RyaW5nUGF0aChjb250ZXh0LCB1cmkpO1xuICAgIH1cbiAgICAvLyBzaW5nbGUgZ2xvYiBwYXRoXG4gICAgaWYgKGlzR2xvYlBhdGgoY29udGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoU2luZ2xlR2xvYlBhdGgoY29udGV4dCwgdXJpKTtcbiAgICB9XG4gICAgLy8gbXVsdGkgcGF0aFxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGlmIChjb250ZXh0LmV2ZXJ5KGlzU3RyaW5nUGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaE11bHRpUGF0aChjb250ZXh0LCB1cmkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmV2ZXJ5KGlzR2xvYlBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hNdWx0aUdsb2JQYXRoKGNvbnRleHQsIHVyaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yc18xLkVSUk9SUy5FUlJfQ09OVEVYVF9NQVRDSEVSX0lOVkFMSURfQVJSQVkpO1xuICAgIH1cbiAgICAvLyBjdXN0b20gbWF0Y2hpbmdcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgcGF0aG5hbWUgPSBnZXRVcmxQYXRoTmFtZSh1cmkpO1xuICAgICAgICByZXR1cm4gY29udGV4dChwYXRobmFtZSwgcmVxKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yc18xLkVSUk9SUy5FUlJfQ09OVEVYVF9NQVRDSEVSX0dFTkVSSUMpO1xufVxuZXhwb3J0cy5tYXRjaCA9IG1hdGNoO1xuLyoqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgJy9hcGknXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVyaSAgICAgJ2h0dHA6Ly9leGFtcGxlLm9yZy9hcGkvYi9jL2QuaHRtbCdcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG1hdGNoU2luZ2xlU3RyaW5nUGF0aChjb250ZXh0LCB1cmkpIHtcbiAgICBjb25zdCBwYXRobmFtZSA9IGdldFVybFBhdGhOYW1lKHVyaSk7XG4gICAgcmV0dXJuIHBhdGhuYW1lLmluZGV4T2YoY29udGV4dCkgPT09IDA7XG59XG5mdW5jdGlvbiBtYXRjaFNpbmdsZUdsb2JQYXRoKHBhdHRlcm4sIHVyaSkge1xuICAgIGNvbnN0IHBhdGhuYW1lID0gZ2V0VXJsUGF0aE5hbWUodXJpKTtcbiAgICBjb25zdCBtYXRjaGVzID0gbWljcm9tYXRjaChbcGF0aG5hbWVdLCBwYXR0ZXJuKTtcbiAgICByZXR1cm4gbWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDA7XG59XG5mdW5jdGlvbiBtYXRjaE11bHRpR2xvYlBhdGgocGF0dGVybkxpc3QsIHVyaSkge1xuICAgIHJldHVybiBtYXRjaFNpbmdsZUdsb2JQYXRoKHBhdHRlcm5MaXN0LCB1cmkpO1xufVxuLyoqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHRMaXN0IFsnL2FwaScsICcvYWpheCddXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVyaSAgICAgJ2h0dHA6Ly9leGFtcGxlLm9yZy9hcGkvYi9jL2QuaHRtbCdcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG1hdGNoTXVsdGlQYXRoKGNvbnRleHRMaXN0LCB1cmkpIHtcbiAgICBsZXQgaXNNdWx0aVBhdGggPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGNvbnRleHQgb2YgY29udGV4dExpc3QpIHtcbiAgICAgICAgaWYgKG1hdGNoU2luZ2xlU3RyaW5nUGF0aChjb250ZXh0LCB1cmkpKSB7XG4gICAgICAgICAgICBpc011bHRpUGF0aCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNNdWx0aVBhdGg7XG59XG4vKipcbiAqIFBhcnNlcyBVUkkgYW5kIHJldHVybnMgUkZDIDM5ODYgcGF0aFxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gdXJpIGZyb20gcmVxLnVybFxuICogQHJldHVybiB7U3RyaW5nfSAgICAgUkZDIDM5ODYgcGF0aFxuICovXG5mdW5jdGlvbiBnZXRVcmxQYXRoTmFtZSh1cmkpIHtcbiAgICByZXR1cm4gdXJpICYmIHVybC5wYXJzZSh1cmkpLnBhdGhuYW1lO1xufVxuZnVuY3Rpb24gaXNTdHJpbmdQYXRoKGNvbnRleHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbnRleHQgPT09ICdzdHJpbmcnICYmICFpc0dsb2IoY29udGV4dCk7XG59XG5mdW5jdGlvbiBpc0dsb2JQYXRoKGNvbnRleHQpIHtcbiAgICByZXR1cm4gaXNHbG9iKGNvbnRleHQpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEhhbmRsZXJzID0gZXhwb3J0cy5pbml0ID0gdm9pZCAwO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG5jb25zdCBsb2dnZXIgPSAoMCwgbG9nZ2VyXzEuZ2V0SW5zdGFuY2UpKCk7XG5mdW5jdGlvbiBpbml0KHByb3h5LCBvcHRpb24pIHtcbiAgICBjb25zdCBoYW5kbGVycyA9IGdldEhhbmRsZXJzKG9wdGlvbik7XG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgT2JqZWN0LmtleXMoaGFuZGxlcnMpKSB7XG4gICAgICAgIHByb3h5Lm9uKGV2ZW50TmFtZSwgaGFuZGxlcnNbZXZlbnROYW1lXSk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9pc3N1ZXMvMTY0MlxuICAgIHByb3h5Lm9uKCdlY29ubnJlc2V0JywgKGVycm9yLCByZXEsIHJlcywgdGFyZ2V0KSA9PiB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihgW0hQTV0gRUNPTk5SRVNFVDogJU9gLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL2lzc3Vlcy8xNjQyI2lzc3VlY29tbWVudC0xMTA0MzI1MTIwXG4gICAgcHJveHkub24oJ3Byb3h5UmVxV3MnLCAocHJveHlSZXEsIHJlcSwgc29ja2V0LCBvcHRpb25zLCBoZWFkKSA9PiB7XG4gICAgICAgIHNvY2tldC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgW0hQTV0gV2ViU29ja2V0IGVycm9yOiAlT2AsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgbG9nZ2VyLmRlYnVnKCdbSFBNXSBTdWJzY3JpYmVkIHRvIGh0dHAtcHJveHkgZXZlbnRzOicsIE9iamVjdC5rZXlzKGhhbmRsZXJzKSk7XG59XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZnVuY3Rpb24gZ2V0SGFuZGxlcnMob3B0aW9ucykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2Rlaml0c3Uvbm9kZS1odHRwLXByb3h5I2xpc3RlbmluZy1mb3ItcHJveHktZXZlbnRzXG4gICAgY29uc3QgcHJveHlFdmVudHNNYXAgPSB7XG4gICAgICAgIGVycm9yOiAnb25FcnJvcicsXG4gICAgICAgIHByb3h5UmVxOiAnb25Qcm94eVJlcScsXG4gICAgICAgIHByb3h5UmVxV3M6ICdvblByb3h5UmVxV3MnLFxuICAgICAgICBwcm94eVJlczogJ29uUHJveHlSZXMnLFxuICAgICAgICBvcGVuOiAnb25PcGVuJyxcbiAgICAgICAgY2xvc2U6ICdvbkNsb3NlJyxcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXJzID0ge307XG4gICAgZm9yIChjb25zdCBbZXZlbnROYW1lLCBvbkV2ZW50TmFtZV0gb2YgT2JqZWN0LmVudHJpZXMocHJveHlFdmVudHNNYXApKSB7XG4gICAgICAgIC8vIGFsbCBoYW5kbGVycyBmb3IgdGhlIGh0dHAtcHJveHkgZXZlbnRzIGFyZSBwcmVmaXhlZCB3aXRoICdvbicuXG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCBvcHRpb25zIGFuZCB0cnkgdG8gZmluZCB0aGVzZSBoYW5kbGVyc1xuICAgICAgICAvLyBhbmQgYWRkIHRoZW0gdG8gdGhlIGhhbmRsZXJzIG9iamVjdCBmb3Igc3Vic2NyaXB0aW9uIGluIGluaXQoKS5cbiAgICAgICAgY29uc3QgZm5IYW5kbGVyID0gb3B0aW9ucyA/IG9wdGlvbnNbb25FdmVudE5hbWVdIDogbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBmbkhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50TmFtZV0gPSBmbkhhbmRsZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIGRlZmF1bHQgZXJyb3IgaGFuZGxlciBpbiBhYnNlbmNlIG9mIGVycm9yIGhhbmRsZXJcbiAgICBpZiAodHlwZW9mIGhhbmRsZXJzLmVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGhhbmRsZXJzLmVycm9yID0gZGVmYXVsdEVycm9ySGFuZGxlcjtcbiAgICB9XG4gICAgLy8gYWRkIGRlZmF1bHQgY2xvc2UgaGFuZGxlciBpbiBhYnNlbmNlIG9mIGNsb3NlIGhhbmRsZXJcbiAgICBpZiAodHlwZW9mIGhhbmRsZXJzLmNsb3NlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGhhbmRsZXJzLmNsb3NlID0gbG9nQ2xvc2U7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVycztcbn1cbmV4cG9ydHMuZ2V0SGFuZGxlcnMgPSBnZXRIYW5kbGVycztcbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyLCByZXEsIHJlcykge1xuICAgIC8vIFJlLXRocm93IGVycm9yLiBOb3QgcmVjb3ZlcmFibGUgc2luY2UgcmVxICYgcmVzIGFyZSBlbXB0eS5cbiAgICBpZiAoIXJlcSAmJiAhcmVzKSB7XG4gICAgICAgIHRocm93IGVycjsgLy8gXCJFcnJvcjogTXVzdCBwcm92aWRlIGEgcHJvcGVyIFVSTCBhcyB0YXJnZXRcIlxuICAgIH1cbiAgICBjb25zdCBob3N0ID0gcmVxLmhlYWRlcnMgJiYgcmVxLmhlYWRlcnMuaG9zdDtcbiAgICBjb25zdCBjb2RlID0gZXJyLmNvZGU7XG4gICAgaWYgKHJlcy53cml0ZUhlYWQgJiYgIXJlcy5oZWFkZXJzU2VudCkge1xuICAgICAgICBpZiAoL0hQRV9JTlZBTElELy50ZXN0KGNvZGUpKSB7XG4gICAgICAgICAgICByZXMud3JpdGVIZWFkKDUwMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFQ09OTlJFU0VUJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFTk9URk9VTkQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0VDT05OUkVGVVNFRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRVRJTUVET1VUJzpcbiAgICAgICAgICAgICAgICAgICAgcmVzLndyaXRlSGVhZCg1MDQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXMud3JpdGVIZWFkKDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzLmVuZChgRXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHByb3h5OiAke2hvc3R9JHtyZXEudXJsfWApO1xufVxuZnVuY3Rpb24gbG9nQ2xvc2UocmVxLCBzb2NrZXQsIGhlYWQpIHtcbiAgICAvLyB2aWV3IGRpc2Nvbm5lY3RlZCB3ZWJzb2NrZXQgY29ubmVjdGlvbnNcbiAgICBsb2dnZXIuaW5mbygnW0hQTV0gQ2xpZW50IGRpc2Nvbm5lY3RlZCcpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVBhdGhSZXdyaXRlciA9IHZvaWQgMDtcbmNvbnN0IGlzUGxhaW5PYmogPSByZXF1aXJlKFwiaXMtcGxhaW4tb2JqXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuL2xvZ2dlclwiKTtcbmNvbnN0IGxvZ2dlciA9ICgwLCBsb2dnZXJfMS5nZXRJbnN0YW5jZSkoKTtcbi8qKlxuICogQ3JlYXRlIHJld3JpdGUgZnVuY3Rpb24sIHRvIGNhY2hlIHBhcnNlZCByZXdyaXRlIHJ1bGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXdyaXRlQ29uZmlnXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gRnVuY3Rpb24gdG8gcmV3cml0ZSBwYXRoczsgVGhpcyBmdW5jdGlvbiBzaG91bGQgYWNjZXB0IGBwYXRoYCAocmVxdWVzdC51cmwpIGFzIHBhcmFtZXRlclxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXRoUmV3cml0ZXIocmV3cml0ZUNvbmZpZykge1xuICAgIGxldCBydWxlc0NhY2hlO1xuICAgIGlmICghaXNWYWxpZFJld3JpdGVDb25maWcocmV3cml0ZUNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJld3JpdGVDb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgY3VzdG9tUmV3cml0ZUZuID0gcmV3cml0ZUNvbmZpZztcbiAgICAgICAgcmV0dXJuIGN1c3RvbVJld3JpdGVGbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJ1bGVzQ2FjaGUgPSBwYXJzZVBhdGhSZXdyaXRlUnVsZXMocmV3cml0ZUNvbmZpZyk7XG4gICAgICAgIHJldHVybiByZXdyaXRlUGF0aDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmV3cml0ZVBhdGgocGF0aCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gcGF0aDtcbiAgICAgICAgZm9yIChjb25zdCBydWxlIG9mIHJ1bGVzQ2FjaGUpIHtcbiAgICAgICAgICAgIGlmIChydWxlLnJlZ2V4LnRlc3QocGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShydWxlLnJlZ2V4LCBydWxlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1tIUE1dIFJld3JpdGluZyBwYXRoIGZyb20gXCIlc1wiIHRvIFwiJXNcIicsIHBhdGgsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLmNyZWF0ZVBhdGhSZXdyaXRlciA9IGNyZWF0ZVBhdGhSZXdyaXRlcjtcbmZ1bmN0aW9uIGlzVmFsaWRSZXdyaXRlQ29uZmlnKHJld3JpdGVDb25maWcpIHtcbiAgICBpZiAodHlwZW9mIHJld3JpdGVDb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmoocmV3cml0ZUNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJld3JpdGVDb25maWcpLmxlbmd0aCAhPT0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAocmV3cml0ZUNvbmZpZyA9PT0gdW5kZWZpbmVkIHx8IHJld3JpdGVDb25maWcgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yc18xLkVSUk9SUy5FUlJfUEFUSF9SRVdSSVRFUl9DT05GSUcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aFJld3JpdGVSdWxlcyhyZXdyaXRlQ29uZmlnKSB7XG4gICAgY29uc3QgcnVsZXMgPSBbXTtcbiAgICBpZiAoaXNQbGFpbk9iaihyZXdyaXRlQ29uZmlnKSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXldIG9mIE9iamVjdC5lbnRyaWVzKHJld3JpdGVDb25maWcpKSB7XG4gICAgICAgICAgICBydWxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICByZWdleDogbmV3IFJlZ0V4cChrZXkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXdyaXRlQ29uZmlnW2tleV0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdbSFBNXSBQcm94eSByZXdyaXRlIHJ1bGUgY3JlYXRlZDogXCIlc1wiIH4+IFwiJXNcIicsIGtleSwgcmV3cml0ZUNvbmZpZ1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZXM7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VGFyZ2V0ID0gdm9pZCAwO1xuY29uc3QgaXNQbGFpbk9iaiA9IHJlcXVpcmUoXCJpcy1wbGFpbi1vYmpcIik7XG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuL2xvZ2dlclwiKTtcbmNvbnN0IGxvZ2dlciA9ICgwLCBsb2dnZXJfMS5nZXRJbnN0YW5jZSkoKTtcbmFzeW5jIGZ1bmN0aW9uIGdldFRhcmdldChyZXEsIGNvbmZpZykge1xuICAgIGxldCBuZXdUYXJnZXQ7XG4gICAgY29uc3Qgcm91dGVyID0gY29uZmlnLnJvdXRlcjtcbiAgICBpZiAoaXNQbGFpbk9iaihyb3V0ZXIpKSB7XG4gICAgICAgIG5ld1RhcmdldCA9IGdldFRhcmdldEZyb21Qcm94eVRhYmxlKHJlcSwgcm91dGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJvdXRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBuZXdUYXJnZXQgPSBhd2FpdCByb3V0ZXIocmVxKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1RhcmdldDtcbn1cbmV4cG9ydHMuZ2V0VGFyZ2V0ID0gZ2V0VGFyZ2V0O1xuZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVByb3h5VGFibGUocmVxLCB0YWJsZSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgY29uc3QgaG9zdCA9IHJlcS5oZWFkZXJzLmhvc3Q7XG4gICAgY29uc3QgcGF0aCA9IHJlcS51cmw7XG4gICAgY29uc3QgaG9zdEFuZFBhdGggPSBob3N0ICsgcGF0aDtcbiAgICBmb3IgKGNvbnN0IFtrZXldIG9mIE9iamVjdC5lbnRyaWVzKHRhYmxlKSkge1xuICAgICAgICBpZiAoY29udGFpbnNQYXRoKGtleSkpIHtcbiAgICAgICAgICAgIGlmIChob3N0QW5kUGF0aC5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIC8vIG1hdGNoICdsb2NhbGhvc3Q6MzAwMC9hcGknXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGFibGVba2V5XTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1tIUE1dIFJvdXRlciB0YWJsZSBtYXRjaDogXCIlc1wiJywga2V5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IGhvc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXRjaCAnbG9jYWxob3N0OjMwMDAnXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGFibGVba2V5XTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1tIUE1dIFJvdXRlciB0YWJsZSBtYXRjaDogXCIlc1wiJywgaG9zdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zUGF0aCh2KSB7XG4gICAgcmV0dXJuIHYuaW5kZXhPZignLycpID4gLTE7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSHR0cFByb3h5TWlkZGxld2FyZSA9IHZvaWQgMDtcbmNvbnN0IGh0dHBQcm94eSA9IHJlcXVpcmUoXCJodHRwLXByb3h5XCIpO1xuY29uc3QgY29uZmlnX2ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZy1mYWN0b3J5XCIpO1xuY29uc3QgY29udGV4dE1hdGNoZXIgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1hdGNoZXJcIik7XG5jb25zdCBoYW5kbGVycyA9IHJlcXVpcmUoXCIuL19oYW5kbGVyc1wiKTtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vbG9nZ2VyXCIpO1xuY29uc3QgUGF0aFJld3JpdGVyID0gcmVxdWlyZShcIi4vcGF0aC1yZXdyaXRlclwiKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoXCIuL3JvdXRlclwiKTtcbmNsYXNzIEh0dHBQcm94eU1pZGRsZXdhcmUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIG9wdHMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSAoMCwgbG9nZ2VyXzEuZ2V0SW5zdGFuY2UpKCk7XG4gICAgICAgIHRoaXMud3NJbnRlcm5hbFN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJPbkNsb3NlU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvd2lraS8ndGhpcyctaW4tVHlwZVNjcmlwdCNyZWQtZmxhZ3MtZm9yLXRoaXNcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkUHJveHkodGhpcy5jb25maWcuY29udGV4dCwgcmVxKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVByb3h5T3B0aW9ucyA9IGF3YWl0IHRoaXMucHJlcGFyZVByb3h5UmVxdWVzdChyZXEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3h5LndlYihyZXEsIHJlcywgYWN0aXZlUHJveHlPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIHNlcnZlciBvYmplY3QgdG8gc3Vic2NyaWJlIHRvIHNlcnZlciBldmVudHM7XG4gICAgICAgICAgICAgKiAndXBncmFkZScgZm9yIHdlYnNvY2tldCBhbmQgJ2Nsb3NlJyBmb3IgZ3JhY2VmdWwgc2h1dGRvd25cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBOT1RFOlxuICAgICAgICAgICAgICogcmVxLnNvY2tldDogbm9kZSA+PSAxM1xuICAgICAgICAgICAgICogcmVxLmNvbm5lY3Rpb246IG5vZGUgPCAxMyAoUmVtb3ZlIHRoaXMgd2hlbiBub2RlIDEyLzEzIHN1cHBvcnQgaXMgZHJvcHBlZClcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyID0gKF9iID0gKChfYSA9IHJlcS5zb2NrZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlcS5jb25uZWN0aW9uKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNlcnZlcjtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgJiYgIXRoaXMuc2VydmVyT25DbG9zZVN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdbSFBNXSBzZXJ2ZXIgY2xvc2Ugc2lnbmFsIHJlY2VpdmVkOiBjbG9zaW5nIHByb3h5IHNlcnZlcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3h5LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJPbkNsb3NlU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eU9wdGlvbnMud3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgaW5pdGlhbCByZXF1ZXN0IHRvIGFjY2VzcyB0aGUgc2VydmVyIG9iamVjdCB0byBzdWJzY3JpYmUgdG8gaHR0cCB1cGdyYWRlIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy5jYXRjaFVwZ3JhZGVSZXF1ZXN0KHNlcnZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2F0Y2hVcGdyYWRlUmVxdWVzdCA9IChzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53c0ludGVybmFsU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIHNlcnZlci5vbigndXBncmFkZScsIHRoaXMuaGFuZGxlVXBncmFkZSk7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBkdXBsaWNhdGUgdXBncmFkZSBoYW5kbGluZztcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIGV4dGVybmFsIHVwZ3JhZGUgaXMgYWxzbyBjb25maWd1cmVkXG4gICAgICAgICAgICAgICAgdGhpcy53c0ludGVybmFsU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVXBncmFkZSA9IGFzeW5jIChyZXEsIHNvY2tldCwgaGVhZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkUHJveHkodGhpcy5jb25maWcuY29udGV4dCwgcmVxKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVByb3h5T3B0aW9ucyA9IGF3YWl0IHRoaXMucHJlcGFyZVByb3h5UmVxdWVzdChyZXEpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkud3MocmVxLCBzb2NrZXQsIGhlYWQsIGFjdGl2ZVByb3h5T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnW0hQTV0gVXBncmFkaW5nIHRvIFdlYlNvY2tldCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgcmVxdWVzdCBzaG91bGQgYmUgcHJveGllZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSByZXEgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvdWxkUHJveHkgPSAoY29udGV4dCwgcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmw7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dE1hdGNoZXIubWF0Y2goY29udGV4dCwgcGF0aCwgcmVxKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5IG9wdGlvbi5yb3V0ZXIgYW5kIG9wdGlvbi5wYXRoUmV3cml0ZVxuICAgICAgICAgKiBPcmRlciBtYXR0ZXJzOlxuICAgICAgICAgKiAgICBSb3V0ZXIgdXNlcyBvcmlnaW5hbCBwYXRoIGZvciByb3V0aW5nO1xuICAgICAgICAgKiAgICBOT1QgdGhlIG1vZGlmaWVkIHBhdGgsIGFmdGVyIGl0IGhhcyBiZWVuIHJld3JpdHRlbiBieSBwYXRoUmV3cml0ZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVxXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gcHJveHkgb3B0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmVwYXJlUHJveHlSZXF1ZXN0ID0gYXN5bmMgKHJlcSkgPT4ge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoaW11cmFpL2h0dHAtcHJveHktbWlkZGxld2FyZS9pc3N1ZXMvMTdcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGltdXJhaS9odHRwLXByb3h5LW1pZGRsZXdhcmUvaXNzdWVzLzk0XG4gICAgICAgICAgICByZXEudXJsID0gcmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmw7XG4gICAgICAgICAgICAvLyBzdG9yZSB1cmkgYmVmb3JlIGl0IGdldHMgcmV3cml0dGVuIGZvciBsb2dnaW5nXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFBhdGggPSByZXEudXJsO1xuICAgICAgICAgICAgY29uc3QgbmV3UHJveHlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm94eU9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gQXBwbHkgaW4gb3JkZXI6XG4gICAgICAgICAgICAvLyAxLiBvcHRpb24ucm91dGVyXG4gICAgICAgICAgICAvLyAyLiBvcHRpb24ucGF0aFJld3JpdGVcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwbHlSb3V0ZXIocmVxLCBuZXdQcm94eU9wdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHBseVBhdGhSZXdyaXRlKHJlcSwgdGhpcy5wYXRoUmV3cml0ZXIpO1xuICAgICAgICAgICAgLy8gZGVidWcgbG9nZ2luZyBmb3IgYm90aCBodHRwKHMpIGFuZCB3ZWJzb2NrZXRzXG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eU9wdGlvbnMubG9nTGV2ZWwgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJvdyA9ICgwLCBsb2dnZXJfMS5nZXRBcnJvdykob3JpZ2luYWxQYXRoLCByZXEudXJsLCB0aGlzLnByb3h5T3B0aW9ucy50YXJnZXQsIG5ld1Byb3h5T3B0aW9ucy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdbSFBNXSAlcyAlcyAlcyAlcycsIHJlcS5tZXRob2QsIG9yaWdpbmFsUGF0aCwgYXJyb3csIG5ld1Byb3h5T3B0aW9ucy50YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld1Byb3h5T3B0aW9ucztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTW9kaWZ5IG9wdGlvbi50YXJnZXQgd2hlbiByb3V0ZXIgcHJlc2VudC5cbiAgICAgICAgdGhpcy5hcHBseVJvdXRlciA9IGFzeW5jIChyZXEsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdUYXJnZXQ7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yb3V0ZXIpIHtcbiAgICAgICAgICAgICAgICBuZXdUYXJnZXQgPSBhd2FpdCBSb3V0ZXIuZ2V0VGFyZ2V0KHJlcSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnW0hQTV0gUm91dGVyIG5ldyB0YXJnZXQ6ICVzIC0+IFwiJXNcIicsIG9wdGlvbnMudGFyZ2V0LCBuZXdUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnRhcmdldCA9IG5ld1RhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIHJld3JpdGUgcGF0aFxuICAgICAgICB0aGlzLmFwcGx5UGF0aFJld3JpdGUgPSBhc3luYyAocmVxLCBwYXRoUmV3cml0ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXRoUmV3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gYXdhaXQgcGF0aFJld3JpdGVyKHJlcS51cmwsIHJlcSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICByZXEudXJsID0gcGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oJ1tIUE1dIHBhdGhSZXdyaXRlOiBObyByZXdyaXR0ZW4gcGF0aCBmb3VuZC4gKCVzKScsIHJlcS51cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sb2dFcnJvciA9IChlcnIsIHJlcSwgcmVzLCB0YXJnZXQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGhvc3RuYW1lID0gKChfYSA9IHJlcS5oZWFkZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCkgfHwgcmVxLmhvc3RuYW1lIHx8IHJlcS5ob3N0OyAvLyAod2Vic29ja2V0KSB8fCAobm9kZTAuMTAgfHwgbm9kZSA0LzUpXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0SHJlZiA9IGAke2hvc3RuYW1lfSR7cmVxLnVybH1gO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0SHJlZiA9IGAke3RhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhcmdldC5ocmVmfWA7IC8vIHRhcmdldCBpcyB1bmRlZmluZWQgd2hlbiB3ZWJzb2NrZXQgZXJyb3JzXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnW0hQTV0gRXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJveHlpbmcgcmVxdWVzdCAlcyB0byAlcyBbJXNdICglcyknO1xuICAgICAgICAgICAgY29uc3QgZXJyUmVmZXJlbmNlID0gJ2h0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXJyb3JzLmh0bWwjZXJyb3JzX2NvbW1vbl9zeXN0ZW1fZXJyb3JzJzsgLy8gbGluayB0byBOb2RlIENvbW1vbiBTeXN0ZW1zIEVycm9ycyBwYWdlXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvck1lc3NhZ2UsIHJlcXVlc3RIcmVmLCB0YXJnZXRIcmVmLCBlcnIuY29kZSB8fCBlcnIsIGVyclJlZmVyZW5jZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29uZmlnID0gKDAsIGNvbmZpZ19mYWN0b3J5XzEuY3JlYXRlQ29uZmlnKShjb250ZXh0LCBvcHRzKTtcbiAgICAgICAgdGhpcy5wcm94eU9wdGlvbnMgPSB0aGlzLmNvbmZpZy5vcHRpb25zO1xuICAgICAgICAvLyBjcmVhdGUgcHJveHlcbiAgICAgICAgdGhpcy5wcm94eSA9IGh0dHBQcm94eS5jcmVhdGVQcm94eVNlcnZlcih7fSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYFtIUE1dIFByb3h5IGNyZWF0ZWQ6ICR7dGhpcy5jb25maWcuY29udGV4dH0gIC0+ICR7dGhpcy5wcm94eU9wdGlvbnMudGFyZ2V0fWApO1xuICAgICAgICB0aGlzLnBhdGhSZXdyaXRlciA9IFBhdGhSZXdyaXRlci5jcmVhdGVQYXRoUmV3cml0ZXIodGhpcy5wcm94eU9wdGlvbnMucGF0aFJld3JpdGUpOyAvLyByZXR1cm5zIHVuZGVmaW5lZCB3aGVuIFwicGF0aFJld3JpdGVcIiBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgLy8gYXR0YWNoIGhhbmRsZXIgdG8gaHR0cC1wcm94eSBldmVudHNcbiAgICAgICAgaGFuZGxlcnMuaW5pdCh0aGlzLnByb3h5LCB0aGlzLnByb3h5T3B0aW9ucyk7XG4gICAgICAgIC8vIGxvZyBlcnJvcnMgZm9yIGRlYnVnIHB1cnBvc2VcbiAgICAgICAgdGhpcy5wcm94eS5vbignZXJyb3InLCB0aGlzLmxvZ0Vycm9yKTtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoaW11cmFpL2h0dHAtcHJveHktbWlkZGxld2FyZS9pc3N1ZXMvMTlcbiAgICAgICAgLy8gZXhwb3NlIGZ1bmN0aW9uIHRvIHVwZ3JhZGUgZXh0ZXJuYWxseVxuICAgICAgICB0aGlzLm1pZGRsZXdhcmUudXBncmFkZSA9IChyZXEsIHNvY2tldCwgaGVhZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndzSW50ZXJuYWxTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVVcGdyYWRlKHJlcSwgc29ja2V0LCBoZWFkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkh0dHBQcm94eU1pZGRsZXdhcmUgPSBIdHRwUHJveHlNaWRkbGV3YXJlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc3BvbnNlSW50ZXJjZXB0b3IgPSB2b2lkIDA7XG5jb25zdCB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG4vKipcbiAqIEludGVyY2VwdCByZXNwb25zZXMgZnJvbSB1cHN0cmVhbS5cbiAqIEF1dG9tYXRpY2FsbHkgZGVjb21wcmVzcyAoZGVmbGF0ZSwgZ3ppcCwgYnJvdGxpKS5cbiAqIEdpdmUgZGV2ZWxvcGVyIHRoZSBvcHBvcnR1bml0eSB0byBtb2RpZnkgaW50ZXJjZXB0ZWQgQnVmZmVyIGFuZCBodHRwLlNlcnZlclJlc3BvbnNlXG4gKlxuICogTk9URTogbXVzdCBzZXQgb3B0aW9ucy5zZWxmSGFuZGxlUmVzcG9uc2U9dHJ1ZSAocHJldmVudCBhdXRvbWF0aWMgY2FsbCBvZiByZXMuZW5kKCkpXG4gKi9cbmZ1bmN0aW9uIHJlc3BvbnNlSW50ZXJjZXB0b3IoaW50ZXJjZXB0b3IpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcHJveHlSZXMocHJveHlSZXMsIHJlcSwgcmVzKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsUHJveHlSZXMgPSBwcm94eVJlcztcbiAgICAgICAgbGV0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKCcnLCAndXRmOCcpO1xuICAgICAgICAvLyBkZWNvbXByZXNzIHByb3h5IHJlc3BvbnNlXG4gICAgICAgIGNvbnN0IF9wcm94eVJlcyA9IGRlY29tcHJlc3MocHJveHlSZXMsIHByb3h5UmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSk7XG4gICAgICAgIC8vIGNvbmNhdCBkYXRhIHN0cmVhbVxuICAgICAgICBfcHJveHlSZXMub24oJ2RhdGEnLCAoY2h1bmspID0+IChidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIGNodW5rXSkpKTtcbiAgICAgICAgX3Byb3h5UmVzLm9uKCdlbmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBjb3B5IG9yaWdpbmFsIGhlYWRlcnNcbiAgICAgICAgICAgIGNvcHlIZWFkZXJzKHByb3h5UmVzLCByZXMpO1xuICAgICAgICAgICAgLy8gY2FsbCBpbnRlcmNlcHRvciB3aXRoIGludGVyY2VwdGVkIHJlc3BvbnNlIChidWZmZXIpXG4gICAgICAgICAgICBjb25zdCBpbnRlcmNlcHRlZEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGF3YWl0IGludGVyY2VwdG9yKGJ1ZmZlciwgb3JpZ2luYWxQcm94eVJlcywgcmVxLCByZXMpKTtcbiAgICAgICAgICAgIC8vIHNldCBjb3JyZWN0IGNvbnRlbnQtbGVuZ3RoICh3aXRoIGRvdWJsZSBieXRlIGNoYXJhY3RlciBzdXBwb3J0KVxuICAgICAgICAgICAgcmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBCdWZmZXIuYnl0ZUxlbmd0aChpbnRlcmNlcHRlZEJ1ZmZlciwgJ3V0ZjgnKSk7XG4gICAgICAgICAgICByZXMud3JpdGUoaW50ZXJjZXB0ZWRCdWZmZXIpO1xuICAgICAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3Byb3h5UmVzLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVzLmVuZChgRXJyb3IgZmV0Y2hpbmcgcHJveGllZCByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5leHBvcnRzLnJlc3BvbnNlSW50ZXJjZXB0b3IgPSByZXNwb25zZUludGVyY2VwdG9yO1xuLyoqXG4gKiBTdHJlYW1pbmcgZGVjb21wcmVzc2lvbiBvZiBwcm94eSByZXNwb25zZVxuICogc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL3N1cGVyc2V0L2Jsb2IvOTc3M2FiYTUyMmU5NTdlZDk0MjMwNDVjYTE1MzIxOTYzOGE4NWQyZi9zdXBlcnNldC1mcm9udGVuZC93ZWJwYWNrLnByb3h5LWNvbmZpZy5qcyNMMTE2XG4gKi9cbmZ1bmN0aW9uIGRlY29tcHJlc3MocHJveHlSZXMsIGNvbnRlbnRFbmNvZGluZykge1xuICAgIGxldCBfcHJveHlSZXMgPSBwcm94eVJlcztcbiAgICBsZXQgZGVjb21wcmVzcztcbiAgICBzd2l0Y2ggKGNvbnRlbnRFbmNvZGluZykge1xuICAgICAgICBjYXNlICdnemlwJzpcbiAgICAgICAgICAgIGRlY29tcHJlc3MgPSB6bGliLmNyZWF0ZUd1bnppcCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JyJzpcbiAgICAgICAgICAgIGRlY29tcHJlc3MgPSB6bGliLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWZsYXRlJzpcbiAgICAgICAgICAgIGRlY29tcHJlc3MgPSB6bGliLmNyZWF0ZUluZmxhdGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChkZWNvbXByZXNzKSB7XG4gICAgICAgIF9wcm94eVJlcy5waXBlKGRlY29tcHJlc3MpO1xuICAgICAgICBfcHJveHlSZXMgPSBkZWNvbXByZXNzO1xuICAgIH1cbiAgICByZXR1cm4gX3Byb3h5UmVzO1xufVxuLyoqXG4gKiBDb3B5IG9yaWdpbmFsIGhlYWRlcnNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvc3VwZXJzZXQvYmxvYi85NzczYWJhNTIyZTk1N2VkOTQyMzA0NWNhMTUzMjE5NjM4YTg1ZDJmL3N1cGVyc2V0LWZyb250ZW5kL3dlYnBhY2sucHJveHktY29uZmlnLmpzI0w3OFxuICovXG5mdW5jdGlvbiBjb3B5SGVhZGVycyhvcmlnaW5hbFJlc3BvbnNlLCByZXNwb25zZSkge1xuICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBvcmlnaW5hbFJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgcmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSA9IG9yaWdpbmFsUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZTtcbiAgICBpZiAocmVzcG9uc2Uuc2V0SGVhZGVyKSB7XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMob3JpZ2luYWxSZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgICAgLy8gaWdub3JlIGNodW5rZWQsIGJyb3RsaSwgZ3ppcCwgZGVmbGF0ZSBoZWFkZXJzXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcigoa2V5KSA9PiAhWydjb250ZW50LWVuY29kaW5nJywgJ3RyYW5zZmVyLWVuY29kaW5nJ10uaW5jbHVkZXMoa2V5KSk7XG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBvcmlnaW5hbFJlc3BvbnNlLmhlYWRlcnNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBjb29raWUgZG9tYWluXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLm1hcCgoeCkgPT4geC5yZXBsYWNlKC9Eb21haW49W147XSs/L2ksICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZS5zZXRIZWFkZXIoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycyA9IG9yaWdpbmFsUmVzcG9uc2UuaGVhZGVycztcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZml4UmVxdWVzdEJvZHkgPSB2b2lkIDA7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTtcbi8qKlxuICogRml4IHByb3hpZWQgYm9keSBpZiBib2R5UGFyc2VyIGlzIGludm9sdmVkLlxuICovXG5mdW5jdGlvbiBmaXhSZXF1ZXN0Qm9keShwcm94eVJlcSwgcmVxKSB7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSByZXEuYm9keTtcbiAgICBpZiAoIXJlcXVlc3RCb2R5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBwcm94eVJlcS5nZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIGNvbnN0IHdyaXRlQm9keSA9IChib2R5RGF0YSkgPT4ge1xuICAgICAgICAvLyBkZWVwY29kZSBpZ25vcmUgQ29udGVudExlbmd0aEluQ29kZTogYm9keVBhcnNlciBmaXhcbiAgICAgICAgcHJveHlSZXEuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHlEYXRhKSk7XG4gICAgICAgIHByb3h5UmVxLndyaXRlKGJvZHlEYXRhKTtcbiAgICB9O1xuICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICAgIHdyaXRlQm9keShKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSkpO1xuICAgIH1cbiAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpKSB7XG4gICAgICAgIHdyaXRlQm9keShxdWVyeXN0cmluZy5zdHJpbmdpZnkocmVxdWVzdEJvZHkpKTtcbiAgICB9XG59XG5leHBvcnRzLmZpeFJlcXVlc3RCb2R5ID0gZml4UmVxdWVzdEJvZHk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZml4UmVxdWVzdEJvZHkgPSBleHBvcnRzLnJlc3BvbnNlSW50ZXJjZXB0b3IgPSB2b2lkIDA7XG52YXIgcmVzcG9uc2VfaW50ZXJjZXB0b3JfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlLWludGVyY2VwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVzcG9uc2VJbnRlcmNlcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzcG9uc2VfaW50ZXJjZXB0b3JfMS5yZXNwb25zZUludGVyY2VwdG9yOyB9IH0pO1xudmFyIGZpeF9yZXF1ZXN0X2JvZHlfMSA9IHJlcXVpcmUoXCIuL2ZpeC1yZXF1ZXN0LWJvZHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaXhSZXF1ZXN0Qm9keVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZml4X3JlcXVlc3RfYm9keV8xLmZpeFJlcXVlc3RCb2R5OyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wdWJsaWNcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlUHJveHlNaWRkbGV3YXJlID0gdm9pZCAwO1xuY29uc3QgaHR0cF9wcm94eV9taWRkbGV3YXJlXzEgPSByZXF1aXJlKFwiLi9odHRwLXByb3h5LW1pZGRsZXdhcmVcIik7XG5mdW5jdGlvbiBjcmVhdGVQcm94eU1pZGRsZXdhcmUoY29udGV4dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWlkZGxld2FyZSB9ID0gbmV3IGh0dHBfcHJveHlfbWlkZGxld2FyZV8xLkh0dHBQcm94eU1pZGRsZXdhcmUoY29udGV4dCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5leHBvcnRzLmNyZWF0ZVByb3h5TWlkZGxld2FyZSA9IGNyZWF0ZVByb3h5TWlkZGxld2FyZTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oYW5kbGVyc1wiKSwgZXhwb3J0cyk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyohXG4gKiB2YXJ5XG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZhcnlcbm1vZHVsZS5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZFxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBmaWVsZC1uYW1lIGluIFJGQyA3MjMwIHNlYyAzLjJcbiAqXG4gKiBmaWVsZC1uYW1lICAgID0gdG9rZW5cbiAqIHRva2VuICAgICAgICAgPSAxKnRjaGFyXG4gKiB0Y2hhciAgICAgICAgID0gXCIhXCIgLyBcIiNcIiAvIFwiJFwiIC8gXCIlXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIqXCJcbiAqICAgICAgICAgICAgICAgLyBcIitcIiAvIFwiLVwiIC8gXCIuXCIgLyBcIl5cIiAvIFwiX1wiIC8gXCJgXCIgLyBcInxcIiAvIFwiflwiXG4gKiAgICAgICAgICAgICAgIC8gRElHSVQgLyBBTFBIQVxuICogICAgICAgICAgICAgICA7IGFueSBWQ0hBUiwgZXhjZXB0IGRlbGltaXRlcnNcbiAqL1xuXG52YXIgRklFTERfTkFNRV9SRUdFWFAgPSAvXlshIyQlJicqK1xcLS5eX2B8fjAtOUEtWmEtel0rJC9cblxuLyoqXG4gKiBBcHBlbmQgYSBmaWVsZCB0byBhIHZhcnkgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGFwcGVuZCAoaGVhZGVyLCBmaWVsZCkge1xuICBpZiAodHlwZW9mIGhlYWRlciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZWFkZXIgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFmaWVsZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpZWxkIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBmaWVsZHMgYXJyYXlcbiAgdmFyIGZpZWxkcyA9ICFBcnJheS5pc0FycmF5KGZpZWxkKVxuICAgID8gcGFyc2UoU3RyaW5nKGZpZWxkKSlcbiAgICA6IGZpZWxkXG5cbiAgLy8gYXNzZXJ0IG9uIGludmFsaWQgZmllbGQgbmFtZXNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICBpZiAoIUZJRUxEX05BTUVfUkVHRVhQLnRlc3QoZmllbGRzW2pdKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmllbGQgYXJndW1lbnQgY29udGFpbnMgYW4gaW52YWxpZCBoZWFkZXIgbmFtZScpXG4gICAgfVxuICB9XG5cbiAgLy8gZXhpc3RpbmcsIHVuc3BlY2lmaWVkIHZhcnlcbiAgaWYgKGhlYWRlciA9PT0gJyonKSB7XG4gICAgcmV0dXJuIGhlYWRlclxuICB9XG5cbiAgLy8gZW51bWVyYXRlIGN1cnJlbnQgdmFsdWVzXG4gIHZhciB2YWwgPSBoZWFkZXJcbiAgdmFyIHZhbHMgPSBwYXJzZShoZWFkZXIudG9Mb3dlckNhc2UoKSlcblxuICAvLyB1bnNwZWNpZmllZCB2YXJ5XG4gIGlmIChmaWVsZHMuaW5kZXhPZignKicpICE9PSAtMSB8fCB2YWxzLmluZGV4T2YoJyonKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJyonXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmbGQgPSBmaWVsZHNbaV0udG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gYXBwZW5kIHZhbHVlIChjYXNlLXByZXNlcnZpbmcpXG4gICAgaWYgKHZhbHMuaW5kZXhPZihmbGQpID09PSAtMSkge1xuICAgICAgdmFscy5wdXNoKGZsZClcbiAgICAgIHZhbCA9IHZhbFxuICAgICAgICA/IHZhbCArICcsICcgKyBmaWVsZHNbaV1cbiAgICAgICAgOiBmaWVsZHNbaV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogUGFyc2UgYSB2YXJ5IGhlYWRlciBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoaGVhZGVyKSB7XG4gIHZhciBlbmQgPSAwXG4gIHZhciBsaXN0ID0gW11cbiAgdmFyIHN0YXJ0ID0gMFxuXG4gIC8vIGdhdGhlciB0b2tlbnNcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhlYWRlci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN3aXRjaCAoaGVhZGVyLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMHgyMDogLyogICAqL1xuICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAweDJjOiAvKiAsICovXG4gICAgICAgIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpbmFsIHRva2VuXG4gIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuXG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICogTWFyayB0aGF0IGEgcmVxdWVzdCBpcyB2YXJpZWQgb24gYSBoZWFkZXIgZmllbGQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlc1xuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGZpZWxkXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdmFyeSAocmVzLCBmaWVsZCkge1xuICBpZiAoIXJlcyB8fCAhcmVzLmdldEhlYWRlciB8fCAhcmVzLnNldEhlYWRlcikge1xuICAgIC8vIHF1YWNrIHF1YWNrXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVzIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBleGlzdGluZyBoZWFkZXJcbiAgdmFyIHZhbCA9IHJlcy5nZXRIZWFkZXIoJ1ZhcnknKSB8fCAnJ1xuICB2YXIgaGVhZGVyID0gQXJyYXkuaXNBcnJheSh2YWwpXG4gICAgPyB2YWwuam9pbignLCAnKVxuICAgIDogU3RyaW5nKHZhbClcblxuICAvLyBzZXQgbmV3IGhlYWRlclxuICBpZiAoKHZhbCA9IGFwcGVuZChoZWFkZXIsIGZpZWxkKSkpIHtcbiAgICByZXMuc2V0SGVhZGVyKCdWYXJ5JywgdmFsKVxuICB9XG59XG4iLCIoZnVuY3Rpb24gKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgdmFyeSA9IHJlcXVpcmUoJ3ZhcnknKTtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgb3JpZ2luOiAnKicsXG4gICAgbWV0aG9kczogJ0dFVCxIRUFELFBVVCxQQVRDSCxQT1NULERFTEVURScsXG4gICAgcHJlZmxpZ2h0Q29udGludWU6IGZhbHNlLFxuICAgIG9wdGlvbnNTdWNjZXNzU3RhdHVzOiAyMDRcbiAgfTtcblxuICBmdW5jdGlvbiBpc1N0cmluZyhzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyB8fCBzIGluc3RhbmNlb2YgU3RyaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmlnaW5BbGxvd2VkKG9yaWdpbiwgYWxsb3dlZE9yaWdpbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFsbG93ZWRPcmlnaW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRPcmlnaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGlzT3JpZ2luQWxsb3dlZChvcmlnaW4sIGFsbG93ZWRPcmlnaW5baV0pKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKGFsbG93ZWRPcmlnaW4pKSB7XG4gICAgICByZXR1cm4gb3JpZ2luID09PSBhbGxvd2VkT3JpZ2luO1xuICAgIH0gZWxzZSBpZiAoYWxsb3dlZE9yaWdpbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIGFsbG93ZWRPcmlnaW4udGVzdChvcmlnaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gISFhbGxvd2VkT3JpZ2luO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZU9yaWdpbihvcHRpb25zLCByZXEpIHtcbiAgICB2YXIgcmVxdWVzdE9yaWdpbiA9IHJlcS5oZWFkZXJzLm9yaWdpbixcbiAgICAgIGhlYWRlcnMgPSBbXSxcbiAgICAgIGlzQWxsb3dlZDtcblxuICAgIGlmICghb3B0aW9ucy5vcmlnaW4gfHwgb3B0aW9ucy5vcmlnaW4gPT09ICcqJykge1xuICAgICAgLy8gYWxsb3cgYW55IG9yaWdpblxuICAgICAgaGVhZGVycy5wdXNoKFt7XG4gICAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsXG4gICAgICAgIHZhbHVlOiAnKidcbiAgICAgIH1dKTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKG9wdGlvbnMub3JpZ2luKSkge1xuICAgICAgLy8gZml4ZWQgb3JpZ2luXG4gICAgICBoZWFkZXJzLnB1c2goW3tcbiAgICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJyxcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMub3JpZ2luXG4gICAgICB9XSk7XG4gICAgICBoZWFkZXJzLnB1c2goW3tcbiAgICAgICAga2V5OiAnVmFyeScsXG4gICAgICAgIHZhbHVlOiAnT3JpZ2luJ1xuICAgICAgfV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0FsbG93ZWQgPSBpc09yaWdpbkFsbG93ZWQocmVxdWVzdE9yaWdpbiwgb3B0aW9ucy5vcmlnaW4pO1xuICAgICAgLy8gcmVmbGVjdCBvcmlnaW5cbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLFxuICAgICAgICB2YWx1ZTogaXNBbGxvd2VkID8gcmVxdWVzdE9yaWdpbiA6IGZhbHNlXG4gICAgICB9XSk7XG4gICAgICBoZWFkZXJzLnB1c2goW3tcbiAgICAgICAga2V5OiAnVmFyeScsXG4gICAgICAgIHZhbHVlOiAnT3JpZ2luJ1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlTWV0aG9kcyhvcHRpb25zKSB7XG4gICAgdmFyIG1ldGhvZHMgPSBvcHRpb25zLm1ldGhvZHM7XG4gICAgaWYgKG1ldGhvZHMuam9pbikge1xuICAgICAgbWV0aG9kcyA9IG9wdGlvbnMubWV0aG9kcy5qb2luKCcsJyk7IC8vIC5tZXRob2RzIGlzIGFuIGFycmF5LCBzbyB0dXJuIGl0IGludG8gYSBzdHJpbmdcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLFxuICAgICAgdmFsdWU6IG1ldGhvZHNcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlQ3JlZGVudGlhbHMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmNyZWRlbnRpYWxzID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscycsXG4gICAgICAgIHZhbHVlOiAndHJ1ZSdcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlQWxsb3dlZEhlYWRlcnMob3B0aW9ucywgcmVxKSB7XG4gICAgdmFyIGFsbG93ZWRIZWFkZXJzID0gb3B0aW9ucy5hbGxvd2VkSGVhZGVycyB8fCBvcHRpb25zLmhlYWRlcnM7XG4gICAgdmFyIGhlYWRlcnMgPSBbXTtcblxuICAgIGlmICghYWxsb3dlZEhlYWRlcnMpIHtcbiAgICAgIGFsbG93ZWRIZWFkZXJzID0gcmVxLmhlYWRlcnNbJ2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycyddOyAvLyAuaGVhZGVycyB3YXNuJ3Qgc3BlY2lmaWVkLCBzbyByZWZsZWN0IHRoZSByZXF1ZXN0IGhlYWRlcnNcbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdWYXJ5JyxcbiAgICAgICAgdmFsdWU6ICdBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LUhlYWRlcnMnXG4gICAgICB9XSk7XG4gICAgfSBlbHNlIGlmIChhbGxvd2VkSGVhZGVycy5qb2luKSB7XG4gICAgICBhbGxvd2VkSGVhZGVycyA9IGFsbG93ZWRIZWFkZXJzLmpvaW4oJywnKTsgLy8gLmhlYWRlcnMgaXMgYW4gYXJyYXksIHNvIHR1cm4gaXQgaW50byBhIHN0cmluZ1xuICAgIH1cbiAgICBpZiAoYWxsb3dlZEhlYWRlcnMgJiYgYWxsb3dlZEhlYWRlcnMubGVuZ3RoKSB7XG4gICAgICBoZWFkZXJzLnB1c2goW3tcbiAgICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsXG4gICAgICAgIHZhbHVlOiBhbGxvd2VkSGVhZGVyc1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlRXhwb3NlZEhlYWRlcnMob3B0aW9ucykge1xuICAgIHZhciBoZWFkZXJzID0gb3B0aW9ucy5leHBvc2VkSGVhZGVycztcbiAgICBpZiAoIWhlYWRlcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoaGVhZGVycy5qb2luKSB7XG4gICAgICBoZWFkZXJzID0gaGVhZGVycy5qb2luKCcsJyk7IC8vIC5oZWFkZXJzIGlzIGFuIGFycmF5LCBzbyB0dXJuIGl0IGludG8gYSBzdHJpbmdcbiAgICB9XG4gICAgaWYgKGhlYWRlcnMgJiYgaGVhZGVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzJyxcbiAgICAgICAgdmFsdWU6IGhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlTWF4QWdlKG9wdGlvbnMpIHtcbiAgICB2YXIgbWF4QWdlID0gKHR5cGVvZiBvcHRpb25zLm1heEFnZSA9PT0gJ251bWJlcicgfHwgb3B0aW9ucy5tYXhBZ2UpICYmIG9wdGlvbnMubWF4QWdlLnRvU3RyaW5nKClcbiAgICBpZiAobWF4QWdlICYmIG1heEFnZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLU1heC1BZ2UnLFxuICAgICAgICB2YWx1ZTogbWF4QWdlXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5SGVhZGVycyhoZWFkZXJzLCByZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGhlYWRlcnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICB2YXIgaGVhZGVyID0gaGVhZGVyc1tpXTtcbiAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgICAgIGFwcGx5SGVhZGVycyhoZWFkZXIsIHJlcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyLmtleSA9PT0gJ1ZhcnknICYmIGhlYWRlci52YWx1ZSkge1xuICAgICAgICAgIHZhcnkocmVzLCBoZWFkZXIudmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhlYWRlci52YWx1ZSkge1xuICAgICAgICAgIHJlcy5zZXRIZWFkZXIoaGVhZGVyLmtleSwgaGVhZGVyLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnMob3B0aW9ucywgcmVxLCByZXMsIG5leHQpIHtcbiAgICB2YXIgaGVhZGVycyA9IFtdLFxuICAgICAgbWV0aG9kID0gcmVxLm1ldGhvZCAmJiByZXEubWV0aG9kLnRvVXBwZXJDYXNlICYmIHJlcS5tZXRob2QudG9VcHBlckNhc2UoKTtcblxuICAgIGlmIChtZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgICAgLy8gcHJlZmxpZ2h0XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlT3JpZ2luKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgaGVhZGVycy5wdXNoKGNvbmZpZ3VyZUNyZWRlbnRpYWxzKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgaGVhZGVycy5wdXNoKGNvbmZpZ3VyZU1ldGhvZHMob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlQWxsb3dlZEhlYWRlcnMob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlTWF4QWdlKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgaGVhZGVycy5wdXNoKGNvbmZpZ3VyZUV4cG9zZWRIZWFkZXJzKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgYXBwbHlIZWFkZXJzKGhlYWRlcnMsIHJlcyk7XG5cbiAgICAgIGlmIChvcHRpb25zLnByZWZsaWdodENvbnRpbnVlKSB7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNhZmFyaSAoYW5kIHBvdGVudGlhbGx5IG90aGVyIGJyb3dzZXJzKSBuZWVkIGNvbnRlbnQtbGVuZ3RoIDAsXG4gICAgICAgIC8vICAgZm9yIDIwNCBvciB0aGV5IGp1c3QgaGFuZyB3YWl0aW5nIGZvciBhIGJvZHlcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSBvcHRpb25zLm9wdGlvbnNTdWNjZXNzU3RhdHVzO1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsICcwJyk7XG4gICAgICAgIHJlcy5lbmQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYWN0dWFsIHJlc3BvbnNlXG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlT3JpZ2luKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgaGVhZGVycy5wdXNoKGNvbmZpZ3VyZUNyZWRlbnRpYWxzKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgaGVhZGVycy5wdXNoKGNvbmZpZ3VyZUV4cG9zZWRIZWFkZXJzKG9wdGlvbnMsIHJlcSkpO1xuICAgICAgYXBwbHlIZWFkZXJzKGhlYWRlcnMsIHJlcyk7XG4gICAgICBuZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWlkZGxld2FyZVdyYXBwZXIobykge1xuICAgIC8vIGlmIG9wdGlvbnMgYXJlIHN0YXRpYyAoZWl0aGVyIHZpYSBkZWZhdWx0cyBvciBjdXN0b20gb3B0aW9ucyBwYXNzZWQgaW4pLCB3cmFwIGluIGEgZnVuY3Rpb25cbiAgICB2YXIgb3B0aW9uc0NhbGxiYWNrID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnNDYWxsYmFjayA9IG87XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnNDYWxsYmFjayA9IGZ1bmN0aW9uIChyZXEsIGNiKSB7XG4gICAgICAgIGNiKG51bGwsIG8pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY29yc01pZGRsZXdhcmUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgIG9wdGlvbnNDYWxsYmFjayhyZXEsIGZ1bmN0aW9uIChlcnIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIG5leHQoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29yc09wdGlvbnMgPSBhc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICB2YXIgb3JpZ2luQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgIGlmIChjb3JzT3B0aW9ucy5vcmlnaW4gJiYgdHlwZW9mIGNvcnNPcHRpb25zLm9yaWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb3JpZ2luQ2FsbGJhY2sgPSBjb3JzT3B0aW9ucy5vcmlnaW47XG4gICAgICAgICAgfSBlbHNlIGlmIChjb3JzT3B0aW9ucy5vcmlnaW4pIHtcbiAgICAgICAgICAgIG9yaWdpbkNhbGxiYWNrID0gZnVuY3Rpb24gKG9yaWdpbiwgY2IpIHtcbiAgICAgICAgICAgICAgY2IobnVsbCwgY29yc09wdGlvbnMub3JpZ2luKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9yaWdpbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICBvcmlnaW5DYWxsYmFjayhyZXEuaGVhZGVycy5vcmlnaW4sIGZ1bmN0aW9uIChlcnIyLCBvcmlnaW4pIHtcbiAgICAgICAgICAgICAgaWYgKGVycjIgfHwgIW9yaWdpbikge1xuICAgICAgICAgICAgICAgIG5leHQoZXJyMik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29yc09wdGlvbnMub3JpZ2luID0gb3JpZ2luO1xuICAgICAgICAgICAgICAgIGNvcnMoY29yc09wdGlvbnMsIHJlcSwgcmVzLCBuZXh0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICAvLyBjYW4gcGFzcyBlaXRoZXIgYW4gb3B0aW9ucyBoYXNoLCBhbiBvcHRpb25zIGRlbGVnYXRlLCBvciBub3RoaW5nXG4gIG1vZHVsZS5leHBvcnRzID0gbWlkZGxld2FyZVdyYXBwZXI7XG5cbn0oKSk7XG4iLCJpbXBvcnQgZXhwcmVzcywgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgY3JlYXRlUHJveHlNaWRkbGV3YXJlIH0gZnJvbSAnaHR0cC1wcm94eS1taWRkbGV3YXJlJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRBcHBTZXJ2ZXIoKSB7XG4gIGNvbnNvbGUubG9nKFwic3RhcnQgc2VydmVyIHNkXCIpO1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGNvbnN0IHBvcnQgPSAzMzMzO1xuXG4gIGFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuXG4gIGFwcC51c2UoY29ycyh7XG4gICAgb3JpZ2luOiAnKicsICBcbiAgICBtZXRob2RzOiAnR0VULEhFQUQsUFVULFBBVENILFBPU1QsREVMRVRFJyxcbiAgICBjcmVkZW50aWFsczogdHJ1ZSwgIFxuICB9KSk7XG5cbiAgY29uc3QgcHJveHlNaWRkbGV3YXJlID0gY3JlYXRlUHJveHlNaWRkbGV3YXJlKCcvY29tZnl1aScsIHtcbiAgICB0YXJnZXQ6ICdodHRwOi8vMTI3LjAuMC4xOjgxODgnLFxuICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcbiAgICB3czogdHJ1ZSwgIFxuICAgIHBhdGhSZXdyaXRlOiB7XG4gICAgICAnXi9jb21meXVpJzogJycsICBcbiAgICB9LFxuICB9KTtcbiAgXG4gIGFwcC51c2UoJy9jb21meXVpJywgcHJveHlNaWRkbGV3YXJlKTtcblxuICBhcHAuZ2V0KCcvJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICAgIHJlcy5zZW5kKCdIZWxsbywgRXhwcmVzcyArIFR5cGVTY3JpcHQhIGFzZGYnKTtcbiAgfSk7XG5cbiAgYXBwLnBvc3QoJy9hcGkvZGF0YScsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHJlcS5ib2R5O1xuICAgIHJlcy5qc29uKHsgbWVzc2FnZTogYFJlY2VpdmVkIGRhdGE6ICR7ZGF0YX1gIH0pO1xuICB9KTtcblxuICBhcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IGFwcCB9IGZyb20gJ2VsZWN0cm9uJ1xuLy8gaW1wb3J0IHByZXBhcmVOZXh0IGZyb20gJ2VsZWN0cm9uLW5leHQnXG5pbXBvcnQgeyBjcmVhdGVNYWluV2luZG93LCByZXN0b3JlT3JDcmVhdGVXaW5kb3cgfSBmcm9tIFwiLi93aW5kb3dzLW1hbmFnZXJcIjtcbmltcG9ydCBcIi4vcHJlbGF1bmNoXCI7XG5pbXBvcnQgeyBzdGFydEF1dG9VcGRhdGVyIH0gZnJvbSAnLi9hdXRvLXVwZGF0ZSc7XG5pbXBvcnQgeyBzdGFydElQQyB9IGZyb20gJy4vaXBjJztcblxuLy8gUHJlcGFyZSB0aGUgcmVuZGVyZXIgb25jZSB0aGUgYXBwIGlzIHJlYWR5XG5jb25zdCByZW5kZXJlclBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uL3JlbmRlcmVyXCIpO1xuY29uc29sZS5sb2coXCJzdGFydGVkOlwiLCByZW5kZXJlclBhdGgpO1xuXG5pbXBvcnQgeyBzdGFydEFwcFNlcnZlciB9IGZyb20gJ0Bjb21mbG93eS9ub2RlL3NyYy9hcHAnO1xuXG4vKipcbiAqIERpc2FibGUgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGZvciBtb3JlIHBvd2VyLXNhdmVcbiAqL1xuYXBwLmRpc2FibGVIYXJkd2FyZUFjY2VsZXJhdGlvbigpO1xuXG5hcHAub24oJ3JlYWR5JywgYXN5bmMgKCkgPT4ge1xuICAvLyBydW4gbmV4dCBmcm9udGVuZCBzZXJ2aWNlXG4gIC8vIGF3YWl0IHByZXBhcmVOZXh0KHJlbmRlcmVyUGF0aClcbiAgYXdhaXQgc3RhcnRBcHBTZXJ2ZXIoKTtcblxuICAvLyBzdGFydCBkZXNrdG9wIHdpbmRvd1xuICBhd2FpdCBjcmVhdGVNYWluV2luZG93KCk7XG5cbiAgLy8gbWVzc2FnZSBodWJcbiAgc3RhcnRJUEMoKTtcblxuICAvLyBhdXRvIHVwZGF0ZSBsaXN0ZW5lclxuICBzdGFydEF1dG9VcGRhdGVyKClcbn0pXG5cbi8vIFF1aXQgdGhlIGFwcCBvbmNlIGFsbCB3aW5kb3dzIGFyZSBjbG9zZWRcbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCBhcHAucXVpdClcblxuYXBwLm9uKFwiYWN0aXZhdGVcIiwgcmVzdG9yZU9yQ3JlYXRlV2luZG93KTtcblxuIl0sIm5hbWVzIjpbImVsZWN0cm9uIiwicmVxdWlyZSQkMCIsImFwcCIsImlzRW52U2V0IiwiZ2V0RnJvbUVudiIsImVsZWN0cm9uSXNEZXYiLCJjcnlwdG8iLCJpc0Z1bGx3aWR0aENvZGVQb2ludCIsImlzRnVsbHdpZHRoQ29kZVBvaW50TW9kdWxlIiwiaXNGdWxsd2lkdGhDb2RlUG9pbnRfMSIsImFzdHJhbFJlZ2V4IiwiY29udmVydCIsImNvbnZlcnNpb25zIiwicm91dGUiLCJyZXF1aXJlJCQxIiwiY29sb3JDb252ZXJ0IiwicmVxdWlyZSQkMiIsInNsaWNlQW5zaSIsImFuc2lSZWdleCIsInN0cmlwQW5zaSIsImVtb2ppUmVnZXgiLCJzdHJpbmdXaWR0aCIsInN0cmluZ1dpZHRoTW9kdWxlIiwic3RyaW5nV2lkdGhfMSIsImNsaVRydW5jYXRlIiwicGF0aEV4aXN0c01vZHVsZSIsInBhdGhFeGlzdHMiLCJwYXRoIiwibW9kaWZ5RmlsZW5hbWUiLCJ1bnVzZWRGaWxlbmFtZSIsInVudXNlZEZpbGVuYW1lTW9kdWxlIiwidW51c2VkRmlsZW5hbWVfMSIsInB1cGEiLCJtaW1lRGIiLCJleHRMaXN0IiwiaXNQbGFpbk9iaiIsInNvcnRLZXlzIiwic29ydEtleXNMZW5ndGgiLCJleHROYW1lTW9kdWxlIiwiZXh0TmFtZSIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwiZWxlY3Ryb25EbE1vZHVsZSIsImVsZWN0cm9uRGwiLCJpc0RldiIsImZvcm1hdCIsIkJyb3dzZXJXaW5kb3ciLCJCcm93c2VyVmlldyIsImNvbnRleHRNZW51Iiwic2NvcGVGYWN0b3J5IiwiTG9nZ2VyIiwiYXV0b1VwZGF0ZXIiLCJkaWFsb2ciLCJpcGNNYWluIiwidXJsIiwiY29tbW9uIiwiZGVidWciLCJVUkwiLCJodHRwIiwiaHR0cHMiLCJyZXF1aXJlJCQ1IiwiZm9sbG93UmVkaXJlY3RzTW9kdWxlIiwiZm9sbG93UmVkaXJlY3RzIiwicmVxdWlyZSQkNiIsImh0dHBQcm94eSIsImxvZ2dlciIsInV0aWwiLCJlcnJvcnNfMSIsImxvZ2dlcl8xIiwiaXNFeHRnbG9iIiwiaXNHbG9iIiwidXRpbHMiLCJzdHJpbmdpZnkiLCJpc051bWJlciIsInRvUmVnZXhSYW5nZSIsImlzT2JqZWN0IiwiZmlsbCIsImNvbXBpbGUiLCJhcHBlbmQiLCJleHBhbmQiLCJjb25zdGFudHMiLCJNQVhfTEVOR1RIIiwiQ0hBUl9DT01NQSIsIkNIQVJfRE9UIiwiQ0hBUl9MRUZUX1BBUkVOVEhFU0VTIiwiQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUyIsIkNIQVJfTEVGVF9DVVJMWV9CUkFDRSIsIkNIQVJfUklHSFRfQ1VSTFlfQlJBQ0UiLCJDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQiLCJDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUIiwicGFyc2UiLCJwYXJzZV8xIiwiYnJhY2VzIiwiUE9TSVhfUkVHRVhfU09VUkNFIiwic2NhbiIsInBpY29tYXRjaCIsIm1pY3JvbWF0Y2giLCJjb250ZXh0TWF0Y2hlciIsImhhbmRsZXJzIiwicmVzcG9uc2VJbnRlcmNlcHRvcl8xIiwiZml4UmVxdWVzdEJvZHlfMSIsInRoaXMiLCJ2YXJ5TW9kdWxlIiwidmFyeV8xIiwibGliTW9kdWxlIiwiZXhwcmVzcyIsImNyZWF0ZVByb3h5TWlkZGxld2FyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUFNQSxhQUFXQyxvQkFBQUE7QUFFakIsSUFBSSxPQUFPRCxlQUFhLFVBQVU7QUFDakMsUUFBTSxJQUFJLFVBQVU7QUFBQTtBQUdyQixNQUFNRSxRQUFNRixXQUFTLE9BQU9BLFdBQVMsT0FBTztBQUU1QyxNQUFNRyxhQUFXLHFCQUFxQixRQUFRO0FBQzlDLE1BQU1DLGVBQWEsWUFBcUIsaUJBQWlCLFFBQVE7SUFFakVDLGtCQUFpQkYsYUFBV0MsZUFBYSxDQUFDRixNQUFJO0FDWjlDLE1BQU0sVUFBVSxRQUFRLGFBQWE7QUFPZCxnQkFBQTtBQUNuQixTQUFPSSxnQkFBQUEsV0FBTztBQUFBOztBQ0xsQixNQUFNQyx5QkFBdUIsZUFBYTtBQUN6QyxNQUFJLE9BQU8sTUFBTSxZQUFZO0FBQzVCLFdBQU87QUFBQTtBQUtSLE1BQ0MsYUFBYSxRQUNaLGNBQWEsUUFDYixjQUFjLFFBQ2QsY0FBYyxRQUViLFNBQVUsYUFBYSxhQUFhLFNBQVUsY0FBYyxTQUU1RCxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxTQUFVLGFBQWEsYUFBYSxTQUNwQyxTQUFVLGFBQWEsYUFBYSxTQUVwQyxVQUFXLGFBQWEs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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
