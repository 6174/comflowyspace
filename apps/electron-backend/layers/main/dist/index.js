"use strict";
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp2.call(b, prop))
      __defNormalProp2(a, prop, b[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b)) {
      if (__propIsEnum2.call(b, prop))
        __defNormalProp2(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum2.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var path$5 = require("path");
var require$$0$1 = require("electron");
var crypto = require("crypto");
var require$$0$3 = require("url");
var fs$4 = require("fs");
var require$$0$2 = require("util");
var express = require("express");
var require$$0$4 = require("http");
var require$$1 = require("https");
var require$$3 = require("stream");
var require$$4 = require("assert");
var require$$0$5 = require("zlib");
var require$$0$6 = require("querystring");
var os = require("os");
var require$$0$7 = require("constants");
var require$$2 = require("events");
var child_process = require("child_process");
function _interopDefaultLegacy(e) {
  return e && typeof e === "object" && "default" in e ? e : { "default": e };
}
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  var n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    Object.keys(e).forEach(function(k) {
      if (k !== "default") {
        var d2 = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d2.get ? d2 : {
          enumerable: true,
          get: function() {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
var path__default = /* @__PURE__ */ _interopDefaultLegacy(path$5);
var path__namespace = /* @__PURE__ */ _interopNamespace(path$5);
var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0$1);
var crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto);
var require$$0__default$2 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$3);
var fs__default = /* @__PURE__ */ _interopDefaultLegacy(fs$4);
var fs__namespace = /* @__PURE__ */ _interopNamespace(fs$4);
var require$$0__default$1 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$2);
var express__default = /* @__PURE__ */ _interopDefaultLegacy(express);
var require$$0__default$3 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$4);
var require$$1__default = /* @__PURE__ */ _interopDefaultLegacy(require$$1);
var require$$3__default = /* @__PURE__ */ _interopDefaultLegacy(require$$3);
var require$$4__default = /* @__PURE__ */ _interopDefaultLegacy(require$$4);
var require$$0__default$4 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$5);
var require$$0__default$5 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$6);
var os__default = /* @__PURE__ */ _interopDefaultLegacy(os);
var os__namespace = /* @__PURE__ */ _interopNamespace(os);
var require$$0__default$6 = /* @__PURE__ */ _interopDefaultLegacy(require$$0$7);
var require$$2__default = /* @__PURE__ */ _interopDefaultLegacy(require$$2);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const electron$2 = require$$0__default["default"];
if (typeof electron$2 === "string") {
  throw new TypeError("Not running in an Electron environment!");
}
const app$1 = electron$2.app || electron$2.remote.app;
const isEnvSet$1 = "ELECTRON_IS_DEV" in process.env;
const getFromEnv$1 = parseInt({}.ELECTRON_IS_DEV, 10) === 1;
var electronIsDev$1 = isEnvSet$1 ? getFromEnv$1 : !app$1.isPackaged;
const isMacOS = process.platform === "darwin";
var isFullwidthCodePoint$3 = { exports: {} };
const isFullwidthCodePoint$2 = (codePoint) => {
  if (Number.isNaN(codePoint)) {
    return false;
  }
  if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
    return true;
  }
  return false;
};
isFullwidthCodePoint$3.exports = isFullwidthCodePoint$2;
isFullwidthCodePoint$3.exports.default = isFullwidthCodePoint$2;
const regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
const astralRegex$1 = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
var astralRegex_1 = astralRegex$1;
var ansiStyles$1 = { exports: {} };
var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
const cssKeywords = colorName;
const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
  reverseKeywords[cssKeywords[key]] = key;
}
const convert$1 = {
  rgb: { channels: 3, labels: "rgb" },
  hsl: { channels: 3, labels: "hsl" },
  hsv: { channels: 3, labels: "hsv" },
  hwb: { channels: 3, labels: "hwb" },
  cmyk: { channels: 4, labels: "cmyk" },
  xyz: { channels: 3, labels: "xyz" },
  lab: { channels: 3, labels: "lab" },
  lch: { channels: 3, labels: "lch" },
  hex: { channels: 1, labels: ["hex"] },
  keyword: { channels: 1, labels: ["keyword"] },
  ansi16: { channels: 1, labels: ["ansi16"] },
  ansi256: { channels: 1, labels: ["ansi256"] },
  hcg: { channels: 3, labels: ["h", "c", "g"] },
  apple: { channels: 3, labels: ["r16", "g16", "b16"] },
  gray: { channels: 1, labels: ["gray"] }
};
var conversions$2 = convert$1;
for (const model of Object.keys(convert$1)) {
  if (!("channels" in convert$1[model])) {
    throw new Error("missing channels property: " + model);
  }
  if (!("labels" in convert$1[model])) {
    throw new Error("missing channel labels property: " + model);
  }
  if (convert$1[model].labels.length !== convert$1[model].channels) {
    throw new Error("channel and label counts mismatch: " + model);
  }
  const { channels, labels } = convert$1[model];
  delete convert$1[model].channels;
  delete convert$1[model].labels;
  Object.defineProperty(convert$1[model], "channels", { value: channels });
  Object.defineProperty(convert$1[model], "labels", { value: labels });
}
convert$1.rgb.hsl = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const min = Math.min(r, g, b);
  const max = Math.max(r, g, b);
  const delta = max - min;
  let h2;
  let s2;
  if (max === min) {
    h2 = 0;
  } else if (r === max) {
    h2 = (g - b) / delta;
  } else if (g === max) {
    h2 = 2 + (b - r) / delta;
  } else if (b === max) {
    h2 = 4 + (r - g) / delta;
  }
  h2 = Math.min(h2 * 60, 360);
  if (h2 < 0) {
    h2 += 360;
  }
  const l = (min + max) / 2;
  if (max === min) {
    s2 = 0;
  } else if (l <= 0.5) {
    s2 = delta / (max + min);
  } else {
    s2 = delta / (2 - max - min);
  }
  return [h2, s2 * 100, l * 100];
};
convert$1.rgb.hsv = function(rgb) {
  let rdif;
  let gdif;
  let bdif;
  let h2;
  let s2;
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const v = Math.max(r, g, b);
  const diff = v - Math.min(r, g, b);
  const diffc = function(c) {
    return (v - c) / 6 / diff + 1 / 2;
  };
  if (diff === 0) {
    h2 = 0;
    s2 = 0;
  } else {
    s2 = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);
    if (r === v) {
      h2 = bdif - gdif;
    } else if (g === v) {
      h2 = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h2 = 2 / 3 + gdif - rdif;
    }
    if (h2 < 0) {
      h2 += 1;
    } else if (h2 > 1) {
      h2 -= 1;
    }
  }
  return [
    h2 * 360,
    s2 * 100,
    v * 100
  ];
};
convert$1.rgb.hwb = function(rgb) {
  const r = rgb[0];
  const g = rgb[1];
  let b = rgb[2];
  const h2 = convert$1.rgb.hsl(rgb)[0];
  const w2 = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h2, w2 * 100, b * 100];
};
convert$1.rgb.cmyk = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const k = Math.min(1 - r, 1 - g, 1 - b);
  const c = (1 - r - k) / (1 - k) || 0;
  const m2 = (1 - g - k) / (1 - k) || 0;
  const y2 = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m2 * 100, y2 * 100, k * 100];
};
function comparativeDistance(x, y2) {
  return (x[0] - y2[0]) ** 2 + (x[1] - y2[1]) ** 2 + (x[2] - y2[2]) ** 2;
}
convert$1.rgb.keyword = function(rgb) {
  const reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }
  let currentClosestDistance = Infinity;
  let currentClosestKeyword;
  for (const keyword of Object.keys(cssKeywords)) {
    const value = cssKeywords[keyword];
    const distance = comparativeDistance(rgb, value);
    if (distance < currentClosestDistance) {
      currentClosestDistance = distance;
      currentClosestKeyword = keyword;
    }
  }
  return currentClosestKeyword;
};
convert$1.keyword.rgb = function(keyword) {
  return cssKeywords[keyword];
};
convert$1.rgb.xyz = function(rgb) {
  let r = rgb[0] / 255;
  let g = rgb[1] / 255;
  let b = rgb[2] / 255;
  r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
  g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
  b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
  const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  const y2 = r * 0.2126 + g * 0.7152 + b * 0.0722;
  const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y2 * 100, z * 100];
};
convert$1.rgb.lab = function(rgb) {
  const xyz = convert$1.rgb.xyz(rgb);
  let x = xyz[0];
  let y2 = xyz[1];
  let z = xyz[2];
  x /= 95.047;
  y2 /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
  y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l = 116 * y2 - 16;
  const a = 500 * (x - y2);
  const b = 200 * (y2 - z);
  return [l, a, b];
};
convert$1.hsl.rgb = function(hsl) {
  const h2 = hsl[0] / 360;
  const s2 = hsl[1] / 100;
  const l = hsl[2] / 100;
  let t2;
  let t3;
  let val;
  if (s2 === 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5) {
    t2 = l * (1 + s2);
  } else {
    t2 = l + s2 - l * s2;
  }
  const t1 = 2 * l - t2;
  const rgb = [0, 0, 0];
  for (let i = 0; i < 3; i++) {
    t3 = h2 + 1 / 3 * -(i - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }
    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }
    rgb[i] = val * 255;
  }
  return rgb;
};
convert$1.hsl.hsv = function(hsl) {
  const h2 = hsl[0];
  let s2 = hsl[1] / 100;
  let l = hsl[2] / 100;
  let smin = s2;
  const lmin = Math.max(l, 0.01);
  l *= 2;
  s2 *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  const v = (l + s2) / 2;
  const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l + s2);
  return [h2, sv * 100, v * 100];
};
convert$1.hsv.rgb = function(hsv) {
  const h2 = hsv[0] / 60;
  const s2 = hsv[1] / 100;
  let v = hsv[2] / 100;
  const hi = Math.floor(h2) % 6;
  const f = h2 - Math.floor(h2);
  const p = 255 * v * (1 - s2);
  const q = 255 * v * (1 - s2 * f);
  const t = 255 * v * (1 - s2 * (1 - f));
  v *= 255;
  switch (hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
};
convert$1.hsv.hsl = function(hsv) {
  const h2 = hsv[0];
  const s2 = hsv[1] / 100;
  const v = hsv[2] / 100;
  const vmin = Math.max(v, 0.01);
  let sl;
  let l;
  l = (2 - s2) * v;
  const lmin = (2 - s2) * vmin;
  sl = s2 * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h2, sl * 100, l * 100];
};
convert$1.hwb.rgb = function(hwb) {
  const h2 = hwb[0] / 360;
  let wh = hwb[1] / 100;
  let bl = hwb[2] / 100;
  const ratio = wh + bl;
  let f;
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }
  const i = Math.floor(6 * h2);
  const v = 1 - bl;
  f = 6 * h2 - i;
  if ((i & 1) !== 0) {
    f = 1 - f;
  }
  const n = wh + f * (v - wh);
  let r;
  let g;
  let b;
  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;
    case 1:
      r = n;
      g = v;
      b = wh;
      break;
    case 2:
      r = wh;
      g = v;
      b = n;
      break;
    case 3:
      r = wh;
      g = n;
      b = v;
      break;
    case 4:
      r = n;
      g = wh;
      b = v;
      break;
    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }
  return [r * 255, g * 255, b * 255];
};
convert$1.cmyk.rgb = function(cmyk) {
  const c = cmyk[0] / 100;
  const m2 = cmyk[1] / 100;
  const y2 = cmyk[2] / 100;
  const k = cmyk[3] / 100;
  const r = 1 - Math.min(1, c * (1 - k) + k);
  const g = 1 - Math.min(1, m2 * (1 - k) + k);
  const b = 1 - Math.min(1, y2 * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};
convert$1.xyz.rgb = function(xyz) {
  const x = xyz[0] / 100;
  const y2 = xyz[1] / 100;
  const z = xyz[2] / 100;
  let r;
  let g;
  let b;
  r = x * 3.2406 + y2 * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y2 * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y2 * -0.204 + z * 1.057;
  r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
  g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
  b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};
convert$1.xyz.lab = function(xyz) {
  let x = xyz[0];
  let y2 = xyz[1];
  let z = xyz[2];
  x /= 95.047;
  y2 /= 100;
  z /= 108.883;
  x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
  y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l = 116 * y2 - 16;
  const a = 500 * (x - y2);
  const b = 200 * (y2 - z);
  return [l, a, b];
};
convert$1.lab.xyz = function(lab) {
  const l = lab[0];
  const a = lab[1];
  const b = lab[2];
  let x;
  let y2;
  let z;
  y2 = (l + 16) / 116;
  x = a / 500 + y2;
  z = y2 - b / 200;
  const y22 = y2 ** 3;
  const x2 = x ** 3;
  const z2 = z ** 3;
  y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
  x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y2 *= 100;
  z *= 108.883;
  return [x, y2, z];
};
convert$1.lab.lch = function(lab) {
  const l = lab[0];
  const a = lab[1];
  const b = lab[2];
  let h2;
  const hr = Math.atan2(b, a);
  h2 = hr * 360 / 2 / Math.PI;
  if (h2 < 0) {
    h2 += 360;
  }
  const c = Math.sqrt(a * a + b * b);
  return [l, c, h2];
};
convert$1.lch.lab = function(lch) {
  const l = lch[0];
  const c = lch[1];
  const h2 = lch[2];
  const hr = h2 / 360 * 2 * Math.PI;
  const a = c * Math.cos(hr);
  const b = c * Math.sin(hr);
  return [l, a, b];
};
convert$1.rgb.ansi16 = function(args, saturation = null) {
  const [r, g, b] = args;
  let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
  value = Math.round(value / 50);
  if (value === 0) {
    return 30;
  }
  let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
  if (value === 2) {
    ansi += 60;
  }
  return ansi;
};
convert$1.hsv.ansi16 = function(args) {
  return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
};
convert$1.rgb.ansi256 = function(args) {
  const r = args[0];
  const g = args[1];
  const b = args[2];
  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }
    if (r > 248) {
      return 231;
    }
    return Math.round((r - 8) / 247 * 24) + 232;
  }
  const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};
convert$1.ansi16.rgb = function(args) {
  let color = args % 10;
  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }
    color = color / 10.5 * 255;
    return [color, color, color];
  }
  const mult = (~~(args > 50) + 1) * 0.5;
  const r = (color & 1) * mult * 255;
  const g = (color >> 1 & 1) * mult * 255;
  const b = (color >> 2 & 1) * mult * 255;
  return [r, g, b];
};
convert$1.ansi256.rgb = function(args) {
  if (args >= 232) {
    const c = (args - 232) * 10 + 8;
    return [c, c, c];
  }
  args -= 16;
  let rem;
  const r = Math.floor(args / 36) / 5 * 255;
  const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  const b = rem % 6 / 5 * 255;
  return [r, g, b];
};
convert$1.rgb.hex = function(args) {
  const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$1.hex.rgb = function(args) {
  const match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match2) {
    return [0, 0, 0];
  }
  let colorString = match2[0];
  if (match2[0].length === 3) {
    colorString = colorString.split("").map((char) => {
      return char + char;
    }).join("");
  }
  const integer = parseInt(colorString, 16);
  const r = integer >> 16 & 255;
  const g = integer >> 8 & 255;
  const b = integer & 255;
  return [r, g, b];
};
convert$1.rgb.hcg = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const max = Math.max(Math.max(r, g), b);
  const min = Math.min(Math.min(r, g), b);
  const chroma = max - min;
  let grayscale;
  let hue;
  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }
  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma;
  }
  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};
convert$1.hsl.hcg = function(hsl) {
  const s2 = hsl[1] / 100;
  const l = hsl[2] / 100;
  const c = l < 0.5 ? 2 * s2 * l : 2 * s2 * (1 - l);
  let f = 0;
  if (c < 1) {
    f = (l - 0.5 * c) / (1 - c);
  }
  return [hsl[0], c * 100, f * 100];
};
convert$1.hsv.hcg = function(hsv) {
  const s2 = hsv[1] / 100;
  const v = hsv[2] / 100;
  const c = s2 * v;
  let f = 0;
  if (c < 1) {
    f = (v - c) / (1 - c);
  }
  return [hsv[0], c * 100, f * 100];
};
convert$1.hcg.rgb = function(hcg) {
  const h2 = hcg[0] / 360;
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  if (c === 0) {
    return [g * 255, g * 255, g * 255];
  }
  const pure = [0, 0, 0];
  const hi = h2 % 1 * 6;
  const v = hi % 1;
  const w2 = 1 - v;
  let mg = 0;
  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;
    case 1:
      pure[0] = w2;
      pure[1] = 1;
      pure[2] = 0;
      break;
    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;
    case 3:
      pure[0] = 0;
      pure[1] = w2;
      pure[2] = 1;
      break;
    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;
    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w2;
  }
  mg = (1 - c) * g;
  return [
    (c * pure[0] + mg) * 255,
    (c * pure[1] + mg) * 255,
    (c * pure[2] + mg) * 255
  ];
};
convert$1.hcg.hsv = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const v = c + g * (1 - c);
  let f = 0;
  if (v > 0) {
    f = c / v;
  }
  return [hcg[0], f * 100, v * 100];
};
convert$1.hcg.hsl = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const l = g * (1 - c) + 0.5 * c;
  let s2 = 0;
  if (l > 0 && l < 0.5) {
    s2 = c / (2 * l);
  } else if (l >= 0.5 && l < 1) {
    s2 = c / (2 * (1 - l));
  }
  return [hcg[0], s2 * 100, l * 100];
};
convert$1.hcg.hwb = function(hcg) {
  const c = hcg[1] / 100;
  const g = hcg[2] / 100;
  const v = c + g * (1 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};
convert$1.hwb.hcg = function(hwb) {
  const w2 = hwb[1] / 100;
  const b = hwb[2] / 100;
  const v = 1 - b;
  const c = v - w2;
  let g = 0;
  if (c < 1) {
    g = (v - c) / (1 - c);
  }
  return [hwb[0], c * 100, g * 100];
};
convert$1.apple.rgb = function(apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};
convert$1.rgb.apple = function(rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};
convert$1.gray.rgb = function(args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};
convert$1.gray.hsl = function(args) {
  return [0, 0, args[0]];
};
convert$1.gray.hsv = convert$1.gray.hsl;
convert$1.gray.hwb = function(gray) {
  return [0, 100, gray[0]];
};
convert$1.gray.cmyk = function(gray) {
  return [0, 0, 0, gray[0]];
};
convert$1.gray.lab = function(gray) {
  return [gray[0], 0, 0];
};
convert$1.gray.hex = function(gray) {
  const val = Math.round(gray[0] / 100 * 255) & 255;
  const integer = (val << 16) + (val << 8) + val;
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$1.rgb.gray = function(rgb) {
  const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
const conversions$1 = conversions$2;
function buildGraph() {
  const graph = {};
  const models2 = Object.keys(conversions$1);
  for (let len = models2.length, i = 0; i < len; i++) {
    graph[models2[i]] = {
      distance: -1,
      parent: null
    };
  }
  return graph;
}
function deriveBFS(fromModel) {
  const graph = buildGraph();
  const queue2 = [fromModel];
  graph[fromModel].distance = 0;
  while (queue2.length) {
    const current = queue2.pop();
    const adjacents = Object.keys(conversions$1[current]);
    for (let len = adjacents.length, i = 0; i < len; i++) {
      const adjacent = adjacents[i];
      const node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue2.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function(args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  const path2 = [graph[toModel].parent, toModel];
  let fn = conversions$1[graph[toModel].parent][toModel];
  let cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path2.unshift(graph[cur].parent);
    fn = link(conversions$1[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }
  fn.conversion = path2;
  return fn;
}
var route$1 = function(fromModel) {
  const graph = deriveBFS(fromModel);
  const conversion = {};
  const models2 = Object.keys(graph);
  for (let len = models2.length, i = 0; i < len; i++) {
    const toModel = models2[i];
    const node = graph[toModel];
    if (node.parent === null) {
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};
const conversions = conversions$2;
const route = route$1;
const convert = {};
const models = Object.keys(conversions);
function wrapRaw(fn) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    return fn(args);
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    const result = fn(args);
    if (typeof result === "object") {
      for (let len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }
    return result;
  };
  if ("conversion" in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
models.forEach((fromModel) => {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
  Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
  const routes = route(fromModel);
  const routeModels = Object.keys(routes);
  routeModels.forEach((toModel) => {
    const fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
var colorConvert = convert;
(function(module) {
  const wrapAnsi16 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => (...args) => {
    const code = fn(...args);
    return `[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => (...args) => {
    const rgb = fn(...args);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n) => n;
  const rgb2rgb = (r, g, b) => [r, g, b];
  const setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert$1;
  const makeDynamicStyles = (wrap2, targetSpace, identity, isBackground) => {
    if (colorConvert$1 === void 0) {
      colorConvert$1 = colorConvert;
    }
    const offset = isBackground ? 10 : 0;
    const styles = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert$1)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles[name] = wrap2(identity, offset);
      } else if (typeof suite === "object") {
        styles[name] = wrap2(suite[targetSpace], offset);
      }
    }
    return styles;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles;
  }
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles$1);
const isFullwidthCodePoint$1 = isFullwidthCodePoint$3.exports;
const astralRegex = astralRegex_1;
const ansiStyles = ansiStyles$1.exports;
const ESCAPES = [
  "",
  "\x9B"
];
const wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
const checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
  let output = [];
  ansiCodes = [...ansiCodes];
  for (let ansiCode of ansiCodes) {
    const ansiCodeOrigin = ansiCode;
    if (ansiCode.match(";")) {
      ansiCode = ansiCode.split(";")[0][0] + "0";
    }
    const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
    if (item) {
      const indexEscape = ansiCodes.indexOf(item.toString());
      if (indexEscape >= 0) {
        ansiCodes.splice(indexEscape, 1);
      } else {
        output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
      }
    } else if (isEscapes) {
      output.push(wrapAnsi(0));
      break;
    } else {
      output.push(wrapAnsi(ansiCodeOrigin));
    }
  }
  if (isEscapes) {
    output = output.filter((element, index) => output.indexOf(element) === index);
    if (endAnsiCode !== void 0) {
      const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
      output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
    }
  }
  return output.join("");
};
var sliceAnsi$1 = (string, begin, end) => {
  const characters = [...string.normalize()];
  const ansiCodes = [];
  end = typeof end === "number" ? end : characters.length;
  let isInsideEscape = false;
  let ansiCode;
  let visible = 0;
  let output = "";
  for (const [index, character] of characters.entries()) {
    let leftEscape = false;
    if (ESCAPES.includes(character)) {
      const code = /\d[^m]*/.exec(string.slice(index, index + 18));
      ansiCode = code && code.length > 0 ? code[0] : void 0;
      if (visible < end) {
        isInsideEscape = true;
        if (ansiCode !== void 0) {
          ansiCodes.push(ansiCode);
        }
      }
    } else if (isInsideEscape && character === "m") {
      isInsideEscape = false;
      leftEscape = true;
    }
    if (!isInsideEscape && !leftEscape) {
      ++visible;
    }
    if (!astralRegex({ exact: true }).test(character) && isFullwidthCodePoint$1(character.codePointAt())) {
      ++visible;
    }
    if (visible > begin && visible <= end) {
      output += character;
    } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
      output = checkAnsi(ansiCodes);
    } else if (visible >= end) {
      output += checkAnsi(ansiCodes, true, ansiCode);
      break;
    }
  }
  return output;
};
var stringWidth$2 = { exports: {} };
var ansiRegex$1 = ({ onlyFirst = false } = {}) => {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
};
const ansiRegex = ansiRegex$1;
var stripAnsi$1 = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
var emojiRegex$1 = function() {
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};
const stripAnsi = stripAnsi$1;
const isFullwidthCodePoint = isFullwidthCodePoint$3.exports;
const emojiRegex = emojiRegex$1;
const stringWidth$1 = (string) => {
  if (typeof string !== "string" || string.length === 0) {
    return 0;
  }
  string = stripAnsi(string);
  if (string.length === 0) {
    return 0;
  }
  string = string.replace(emojiRegex(), "  ");
  let width = 0;
  for (let i = 0; i < string.length; i++) {
    const code = string.codePointAt(i);
    if (code <= 31 || code >= 127 && code <= 159) {
      continue;
    }
    if (code >= 768 && code <= 879) {
      continue;
    }
    if (code > 65535) {
      i++;
    }
    width += isFullwidthCodePoint(code) ? 2 : 1;
  }
  return width;
};
stringWidth$2.exports = stringWidth$1;
stringWidth$2.exports.default = stringWidth$1;
const sliceAnsi = sliceAnsi$1;
const stringWidth = stringWidth$2.exports;
function getIndexOfNearestSpace(string, index, shouldSearchRight) {
  if (string.charAt(index) === " ") {
    return index;
  }
  for (let i = 1; i <= 3; i++) {
    if (shouldSearchRight) {
      if (string.charAt(index + i) === " ") {
        return index + i;
      }
    } else if (string.charAt(index - i) === " ") {
      return index - i;
    }
  }
  return index;
}
var cliTruncate$1 = (text, columns, options) => {
  options = __spreadValues2({
    position: "end",
    preferTruncationOnSpace: false
  }, options);
  const { position, space, preferTruncationOnSpace } = options;
  let ellipsis = "\u2026";
  let ellipsisWidth = 1;
  if (typeof text !== "string") {
    throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
  }
  if (typeof columns !== "number") {
    throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
  }
  if (columns < 1) {
    return "";
  }
  if (columns === 1) {
    return ellipsis;
  }
  const length = stringWidth(text);
  if (length <= columns) {
    return text;
  }
  if (position === "start") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
      return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
    }
    if (space === true) {
      ellipsis += " ";
      ellipsisWidth = 2;
    }
    return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
  }
  if (position === "middle") {
    if (space === true) {
      ellipsis = " " + ellipsis + " ";
      ellipsisWidth = 3;
    }
    const half = Math.floor(columns / 2);
    if (preferTruncationOnSpace) {
      const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
      const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
      return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
    }
    return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
  }
  if (position === "end") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
      return sliceAnsi(text, 0, nearestSpace) + ellipsis;
    }
    if (space === true) {
      ellipsis = " " + ellipsis;
      ellipsisWidth = 2;
    }
    return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
  }
  throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
};
var electronDl = { exports: {} };
var unusedFilename$2 = { exports: {} };
var pathExists$1 = { exports: {} };
const fs$3 = fs__default["default"];
const { promisify: promisify$1 } = require$$0__default$1["default"];
const pAccess = promisify$1(fs$3.access);
pathExists$1.exports = async (path2) => {
  try {
    await pAccess(path2);
    return true;
  } catch (_) {
    return false;
  }
};
pathExists$1.exports.sync = (path2) => {
  try {
    fs$3.accessSync(path2);
    return true;
  } catch (_) {
    return false;
  }
};
var path$4 = path__default["default"];
var modifyFilename$1 = function modifyFilename2(pth, modifier) {
  if (arguments.length !== 2) {
    throw new Error("`path` and `modifier` required");
  }
  if (Array.isArray(pth)) {
    return pth.map(function(el) {
      return modifyFilename2(el, modifier);
    });
  }
  var ext = path$4.extname(pth);
  return path$4.join(path$4.dirname(pth), modifier(path$4.basename(pth, ext), ext));
};
const pathExists = pathExists$1.exports;
const modifyFilename = modifyFilename$1;
const incrementer = (filePath) => {
  let counter = 0;
  return () => modifyFilename(filePath, (filename, extension) => `${filename} (${++counter})${extension}`);
};
const unusedFilename$1 = (filePath) => {
  const getFilePath = incrementer(filePath);
  const find = async (newFilePath) => await pathExists(newFilePath) ? find(getFilePath()) : newFilePath;
  return find(filePath);
};
unusedFilename$2.exports = unusedFilename$1;
unusedFilename$2.exports.default = unusedFilename$1;
unusedFilename$2.exports.sync = (filePath) => {
  const getFilePath = incrementer(filePath);
  const find = (newFilePath) => pathExists.sync(newFilePath) ? find(getFilePath()) : newFilePath;
  return find(filePath);
};
var escapeGoat = {};
(function(exports) {
  exports.htmlEscape = (string) => string.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  exports.htmlUnescape = (htmlString) => htmlString.replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&#0?39;/g, "'").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
  exports.htmlEscapeTag = (strings, ...values) => {
    let output = strings[0];
    for (let i = 0; i < values.length; i++) {
      output = output + exports.htmlEscape(String(values[i])) + strings[i + 1];
    }
    return output;
  };
  exports.htmlUnescapeTag = (strings, ...values) => {
    let output = strings[0];
    for (let i = 0; i < values.length; i++) {
      output = output + exports.htmlUnescape(String(values[i])) + strings[i + 1];
    }
    return output;
  };
})(escapeGoat);
const { htmlEscape } = escapeGoat;
var pupa$1 = (template, data) => {
  if (typeof template !== "string") {
    throw new TypeError(`Expected a \`string\` in the first argument, got \`${typeof template}\``);
  }
  if (typeof data !== "object") {
    throw new TypeError(`Expected an \`object\` or \`Array\` in the second argument, got \`${typeof data}\``);
  }
  const doubleBraceRegex = /{{(\d+|[a-z$_][a-z\d$_]*?(?:\.[a-z\d$_]*?)*?)}}/gi;
  if (doubleBraceRegex.test(template)) {
    template = template.replace(doubleBraceRegex, (_, key) => {
      let result = data;
      for (const property of key.split(".")) {
        result = result ? result[property] : "";
      }
      return htmlEscape(String(result));
    });
  }
  const braceRegex = /{(\d+|[a-z$_][a-z\d$_]*?(?:\.[a-z\d$_]*?)*?)}/gi;
  return template.replace(braceRegex, (_, key) => {
    let result = data;
    for (const property of key.split(".")) {
      result = result ? result[property] : "";
    }
    return String(result);
  });
};
var extName$1 = { exports: {} };
var require$$0 = {
  "application/1d-interleaved-parityfec": {
    source: "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/3gpp-ims+xml": {
    source: "iana",
    compressible: true
  },
  "application/3gpphal+json": {
    source: "iana",
    compressible: true
  },
  "application/3gpphalforms+json": {
    source: "iana",
    compressible: true
  },
  "application/a2l": {
    source: "iana"
  },
  "application/ace+cbor": {
    source: "iana"
  },
  "application/activemessage": {
    source: "iana"
  },
  "application/activity+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-costmap+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-costmapfilter+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-directory+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointcost+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointcostparams+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointprop+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-endpointpropparams+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-error+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-networkmap+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-networkmapfilter+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-updatestreamcontrol+json": {
    source: "iana",
    compressible: true
  },
  "application/alto-updatestreamparams+json": {
    source: "iana",
    compressible: true
  },
  "application/aml": {
    source: "iana"
  },
  "application/andrew-inset": {
    source: "iana",
    extensions: [
      "ez"
    ]
  },
  "application/applefile": {
    source: "iana"
  },
  "application/applixware": {
    source: "apache",
    extensions: [
      "aw"
    ]
  },
  "application/at+jwt": {
    source: "iana"
  },
  "application/atf": {
    source: "iana"
  },
  "application/atfx": {
    source: "iana"
  },
  "application/atom+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atom"
    ]
  },
  "application/atomcat+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomcat"
    ]
  },
  "application/atomdeleted+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomdeleted"
    ]
  },
  "application/atomicmail": {
    source: "iana"
  },
  "application/atomsvc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "atomsvc"
    ]
  },
  "application/atsc-dwd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dwd"
    ]
  },
  "application/atsc-dynamic-event-message": {
    source: "iana"
  },
  "application/atsc-held+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "held"
    ]
  },
  "application/atsc-rdt+json": {
    source: "iana",
    compressible: true
  },
  "application/atsc-rsat+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rsat"
    ]
  },
  "application/atxml": {
    source: "iana"
  },
  "application/auth-policy+xml": {
    source: "iana",
    compressible: true
  },
  "application/bacnet-xdd+zip": {
    source: "iana",
    compressible: false
  },
  "application/batch-smtp": {
    source: "iana"
  },
  "application/bdoc": {
    compressible: false,
    extensions: [
      "bdoc"
    ]
  },
  "application/beep+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/calendar+json": {
    source: "iana",
    compressible: true
  },
  "application/calendar+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xcs"
    ]
  },
  "application/call-completion": {
    source: "iana"
  },
  "application/cals-1840": {
    source: "iana"
  },
  "application/captive+json": {
    source: "iana",
    compressible: true
  },
  "application/cbor": {
    source: "iana"
  },
  "application/cbor-seq": {
    source: "iana"
  },
  "application/cccex": {
    source: "iana"
  },
  "application/ccmp+xml": {
    source: "iana",
    compressible: true
  },
  "application/ccxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ccxml"
    ]
  },
  "application/cdfx+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cdfx"
    ]
  },
  "application/cdmi-capability": {
    source: "iana",
    extensions: [
      "cdmia"
    ]
  },
  "application/cdmi-container": {
    source: "iana",
    extensions: [
      "cdmic"
    ]
  },
  "application/cdmi-domain": {
    source: "iana",
    extensions: [
      "cdmid"
    ]
  },
  "application/cdmi-object": {
    source: "iana",
    extensions: [
      "cdmio"
    ]
  },
  "application/cdmi-queue": {
    source: "iana",
    extensions: [
      "cdmiq"
    ]
  },
  "application/cdni": {
    source: "iana"
  },
  "application/cea": {
    source: "iana"
  },
  "application/cea-2018+xml": {
    source: "iana",
    compressible: true
  },
  "application/cellml+xml": {
    source: "iana",
    compressible: true
  },
  "application/cfw": {
    source: "iana"
  },
  "application/city+json": {
    source: "iana",
    compressible: true
  },
  "application/clr": {
    source: "iana"
  },
  "application/clue+xml": {
    source: "iana",
    compressible: true
  },
  "application/clue_info+xml": {
    source: "iana",
    compressible: true
  },
  "application/cms": {
    source: "iana"
  },
  "application/cnrp+xml": {
    source: "iana",
    compressible: true
  },
  "application/coap-group+json": {
    source: "iana",
    compressible: true
  },
  "application/coap-payload": {
    source: "iana"
  },
  "application/commonground": {
    source: "iana"
  },
  "application/conference-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/cose": {
    source: "iana"
  },
  "application/cose-key": {
    source: "iana"
  },
  "application/cose-key-set": {
    source: "iana"
  },
  "application/cpl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cpl"
    ]
  },
  "application/csrattrs": {
    source: "iana"
  },
  "application/csta+xml": {
    source: "iana",
    compressible: true
  },
  "application/cstadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/csvm+json": {
    source: "iana",
    compressible: true
  },
  "application/cu-seeme": {
    source: "apache",
    extensions: [
      "cu"
    ]
  },
  "application/cwt": {
    source: "iana"
  },
  "application/cybercash": {
    source: "iana"
  },
  "application/dart": {
    compressible: true
  },
  "application/dash+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpd"
    ]
  },
  "application/dash-patch+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpp"
    ]
  },
  "application/dashdelta": {
    source: "iana"
  },
  "application/davmount+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "davmount"
    ]
  },
  "application/dca-rft": {
    source: "iana"
  },
  "application/dcd": {
    source: "iana"
  },
  "application/dec-dx": {
    source: "iana"
  },
  "application/dialog-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/dicom": {
    source: "iana"
  },
  "application/dicom+json": {
    source: "iana",
    compressible: true
  },
  "application/dicom+xml": {
    source: "iana",
    compressible: true
  },
  "application/dii": {
    source: "iana"
  },
  "application/dit": {
    source: "iana"
  },
  "application/dns": {
    source: "iana"
  },
  "application/dns+json": {
    source: "iana",
    compressible: true
  },
  "application/dns-message": {
    source: "iana"
  },
  "application/docbook+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "dbk"
    ]
  },
  "application/dots+cbor": {
    source: "iana"
  },
  "application/dskpp+xml": {
    source: "iana",
    compressible: true
  },
  "application/dssc+der": {
    source: "iana",
    extensions: [
      "dssc"
    ]
  },
  "application/dssc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdssc"
    ]
  },
  "application/dvcs": {
    source: "iana"
  },
  "application/ecmascript": {
    source: "iana",
    compressible: true,
    extensions: [
      "es",
      "ecma"
    ]
  },
  "application/edi-consent": {
    source: "iana"
  },
  "application/edi-x12": {
    source: "iana",
    compressible: false
  },
  "application/edifact": {
    source: "iana",
    compressible: false
  },
  "application/efi": {
    source: "iana"
  },
  "application/elm+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/elm+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.cap+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/emergencycalldata.comment+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.control+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.ecall.msd": {
    source: "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/emergencycalldata.veds+xml": {
    source: "iana",
    compressible: true
  },
  "application/emma+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "emma"
    ]
  },
  "application/emotionml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "emotionml"
    ]
  },
  "application/encaprtp": {
    source: "iana"
  },
  "application/epp+xml": {
    source: "iana",
    compressible: true
  },
  "application/epub+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "epub"
    ]
  },
  "application/eshop": {
    source: "iana"
  },
  "application/exi": {
    source: "iana",
    extensions: [
      "exi"
    ]
  },
  "application/expect-ct-report+json": {
    source: "iana",
    compressible: true
  },
  "application/express": {
    source: "iana",
    extensions: [
      "exp"
    ]
  },
  "application/fastinfoset": {
    source: "iana"
  },
  "application/fastsoap": {
    source: "iana"
  },
  "application/fdt+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "fdt"
    ]
  },
  "application/fhir+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/fhir+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/fido.trusted-apps+json": {
    compressible: true
  },
  "application/fits": {
    source: "iana"
  },
  "application/flexfec": {
    source: "iana"
  },
  "application/font-sfnt": {
    source: "iana"
  },
  "application/font-tdpfr": {
    source: "iana",
    extensions: [
      "pfr"
    ]
  },
  "application/font-woff": {
    source: "iana",
    compressible: false
  },
  "application/framework-attributes+xml": {
    source: "iana",
    compressible: true
  },
  "application/geo+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "geojson"
    ]
  },
  "application/geo+json-seq": {
    source: "iana"
  },
  "application/geopackage+sqlite3": {
    source: "iana"
  },
  "application/geoxacml+xml": {
    source: "iana",
    compressible: true
  },
  "application/gltf-buffer": {
    source: "iana"
  },
  "application/gml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "gml"
    ]
  },
  "application/gpx+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "gpx"
    ]
  },
  "application/gxf": {
    source: "apache",
    extensions: [
      "gxf"
    ]
  },
  "application/gzip": {
    source: "iana",
    compressible: false,
    extensions: [
      "gz"
    ]
  },
  "application/h224": {
    source: "iana"
  },
  "application/held+xml": {
    source: "iana",
    compressible: true
  },
  "application/hjson": {
    extensions: [
      "hjson"
    ]
  },
  "application/http": {
    source: "iana"
  },
  "application/hyperstudio": {
    source: "iana",
    extensions: [
      "stk"
    ]
  },
  "application/ibe-key-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/ibe-pkg-reply+xml": {
    source: "iana",
    compressible: true
  },
  "application/ibe-pp-data": {
    source: "iana"
  },
  "application/iges": {
    source: "iana"
  },
  "application/im-iscomposing+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/index": {
    source: "iana"
  },
  "application/index.cmd": {
    source: "iana"
  },
  "application/index.obj": {
    source: "iana"
  },
  "application/index.response": {
    source: "iana"
  },
  "application/index.vnd": {
    source: "iana"
  },
  "application/inkml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ink",
      "inkml"
    ]
  },
  "application/iotp": {
    source: "iana"
  },
  "application/ipfix": {
    source: "iana",
    extensions: [
      "ipfix"
    ]
  },
  "application/ipp": {
    source: "iana"
  },
  "application/isup": {
    source: "iana"
  },
  "application/its+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "its"
    ]
  },
  "application/java-archive": {
    source: "apache",
    compressible: false,
    extensions: [
      "jar",
      "war",
      "ear"
    ]
  },
  "application/java-serialized-object": {
    source: "apache",
    compressible: false,
    extensions: [
      "ser"
    ]
  },
  "application/java-vm": {
    source: "apache",
    compressible: false,
    extensions: [
      "class"
    ]
  },
  "application/javascript": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "js",
      "mjs"
    ]
  },
  "application/jf2feed+json": {
    source: "iana",
    compressible: true
  },
  "application/jose": {
    source: "iana"
  },
  "application/jose+json": {
    source: "iana",
    compressible: true
  },
  "application/jrd+json": {
    source: "iana",
    compressible: true
  },
  "application/jscalendar+json": {
    source: "iana",
    compressible: true
  },
  "application/json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "json",
      "map"
    ]
  },
  "application/json-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/json-seq": {
    source: "iana"
  },
  "application/json5": {
    extensions: [
      "json5"
    ]
  },
  "application/jsonml+json": {
    source: "apache",
    compressible: true,
    extensions: [
      "jsonml"
    ]
  },
  "application/jwk+json": {
    source: "iana",
    compressible: true
  },
  "application/jwk-set+json": {
    source: "iana",
    compressible: true
  },
  "application/jwt": {
    source: "iana"
  },
  "application/kpml-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/kpml-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/ld+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "jsonld"
    ]
  },
  "application/lgr+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lgr"
    ]
  },
  "application/link-format": {
    source: "iana"
  },
  "application/load-control+xml": {
    source: "iana",
    compressible: true
  },
  "application/lost+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lostxml"
    ]
  },
  "application/lostsync+xml": {
    source: "iana",
    compressible: true
  },
  "application/lpf+zip": {
    source: "iana",
    compressible: false
  },
  "application/lxf": {
    source: "iana"
  },
  "application/mac-binhex40": {
    source: "iana",
    extensions: [
      "hqx"
    ]
  },
  "application/mac-compactpro": {
    source: "apache",
    extensions: [
      "cpt"
    ]
  },
  "application/macwriteii": {
    source: "iana"
  },
  "application/mads+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mads"
    ]
  },
  "application/manifest+json": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "webmanifest"
    ]
  },
  "application/marc": {
    source: "iana",
    extensions: [
      "mrc"
    ]
  },
  "application/marcxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mrcx"
    ]
  },
  "application/mathematica": {
    source: "iana",
    extensions: [
      "ma",
      "nb",
      "mb"
    ]
  },
  "application/mathml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mathml"
    ]
  },
  "application/mathml-content+xml": {
    source: "iana",
    compressible: true
  },
  "application/mathml-presentation+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-associated-procedure-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-deregister+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-envelope+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-msk+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-msk-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-protection-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-reception-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-register+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-register-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-schedule+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbms-user-service-description+xml": {
    source: "iana",
    compressible: true
  },
  "application/mbox": {
    source: "iana",
    extensions: [
      "mbox"
    ]
  },
  "application/media-policy-dataset+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpf"
    ]
  },
  "application/media_control+xml": {
    source: "iana",
    compressible: true
  },
  "application/mediaservercontrol+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mscml"
    ]
  },
  "application/merge-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/metalink+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "metalink"
    ]
  },
  "application/metalink4+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "meta4"
    ]
  },
  "application/mets+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mets"
    ]
  },
  "application/mf4": {
    source: "iana"
  },
  "application/mikey": {
    source: "iana"
  },
  "application/mipc": {
    source: "iana"
  },
  "application/missing-blocks+cbor-seq": {
    source: "iana"
  },
  "application/mmt-aei+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "maei"
    ]
  },
  "application/mmt-usd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "musd"
    ]
  },
  "application/mods+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mods"
    ]
  },
  "application/moss-keys": {
    source: "iana"
  },
  "application/moss-signature": {
    source: "iana"
  },
  "application/mosskey-data": {
    source: "iana"
  },
  "application/mosskey-request": {
    source: "iana"
  },
  "application/mp21": {
    source: "iana",
    extensions: [
      "m21",
      "mp21"
    ]
  },
  "application/mp4": {
    source: "iana",
    extensions: [
      "mp4s",
      "m4p"
    ]
  },
  "application/mpeg4-generic": {
    source: "iana"
  },
  "application/mpeg4-iod": {
    source: "iana"
  },
  "application/mpeg4-iod-xmt": {
    source: "iana"
  },
  "application/mrb-consumer+xml": {
    source: "iana",
    compressible: true
  },
  "application/mrb-publish+xml": {
    source: "iana",
    compressible: true
  },
  "application/msc-ivr+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/msc-mixer+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/msword": {
    source: "iana",
    compressible: false,
    extensions: [
      "doc",
      "dot"
    ]
  },
  "application/mud+json": {
    source: "iana",
    compressible: true
  },
  "application/multipart-core": {
    source: "iana"
  },
  "application/mxf": {
    source: "iana",
    extensions: [
      "mxf"
    ]
  },
  "application/n-quads": {
    source: "iana",
    extensions: [
      "nq"
    ]
  },
  "application/n-triples": {
    source: "iana",
    extensions: [
      "nt"
    ]
  },
  "application/nasdata": {
    source: "iana"
  },
  "application/news-checkgroups": {
    source: "iana",
    charset: "US-ASCII"
  },
  "application/news-groupinfo": {
    source: "iana",
    charset: "US-ASCII"
  },
  "application/news-transmission": {
    source: "iana"
  },
  "application/nlsml+xml": {
    source: "iana",
    compressible: true
  },
  "application/node": {
    source: "iana",
    extensions: [
      "cjs"
    ]
  },
  "application/nss": {
    source: "iana"
  },
  "application/oauth-authz-req+jwt": {
    source: "iana"
  },
  "application/oblivious-dns-message": {
    source: "iana"
  },
  "application/ocsp-request": {
    source: "iana"
  },
  "application/ocsp-response": {
    source: "iana"
  },
  "application/octet-stream": {
    source: "iana",
    compressible: false,
    extensions: [
      "bin",
      "dms",
      "lrf",
      "mar",
      "so",
      "dist",
      "distz",
      "pkg",
      "bpk",
      "dump",
      "elc",
      "deploy",
      "exe",
      "dll",
      "deb",
      "dmg",
      "iso",
      "img",
      "msi",
      "msp",
      "msm",
      "buffer"
    ]
  },
  "application/oda": {
    source: "iana",
    extensions: [
      "oda"
    ]
  },
  "application/odm+xml": {
    source: "iana",
    compressible: true
  },
  "application/odx": {
    source: "iana"
  },
  "application/oebps-package+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "opf"
    ]
  },
  "application/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "ogx"
    ]
  },
  "application/omdoc+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "omdoc"
    ]
  },
  "application/onenote": {
    source: "apache",
    extensions: [
      "onetoc",
      "onetoc2",
      "onetmp",
      "onepkg"
    ]
  },
  "application/opc-nodeset+xml": {
    source: "iana",
    compressible: true
  },
  "application/oscore": {
    source: "iana"
  },
  "application/oxps": {
    source: "iana",
    extensions: [
      "oxps"
    ]
  },
  "application/p21": {
    source: "iana"
  },
  "application/p21+zip": {
    source: "iana",
    compressible: false
  },
  "application/p2p-overlay+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "relo"
    ]
  },
  "application/parityfec": {
    source: "iana"
  },
  "application/passport": {
    source: "iana"
  },
  "application/patch-ops-error+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xer"
    ]
  },
  "application/pdf": {
    source: "iana",
    compressible: false,
    extensions: [
      "pdf"
    ]
  },
  "application/pdx": {
    source: "iana"
  },
  "application/pem-certificate-chain": {
    source: "iana"
  },
  "application/pgp-encrypted": {
    source: "iana",
    compressible: false,
    extensions: [
      "pgp"
    ]
  },
  "application/pgp-keys": {
    source: "iana",
    extensions: [
      "asc"
    ]
  },
  "application/pgp-signature": {
    source: "iana",
    extensions: [
      "asc",
      "sig"
    ]
  },
  "application/pics-rules": {
    source: "apache",
    extensions: [
      "prf"
    ]
  },
  "application/pidf+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/pidf-diff+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/pkcs10": {
    source: "iana",
    extensions: [
      "p10"
    ]
  },
  "application/pkcs12": {
    source: "iana"
  },
  "application/pkcs7-mime": {
    source: "iana",
    extensions: [
      "p7m",
      "p7c"
    ]
  },
  "application/pkcs7-signature": {
    source: "iana",
    extensions: [
      "p7s"
    ]
  },
  "application/pkcs8": {
    source: "iana",
    extensions: [
      "p8"
    ]
  },
  "application/pkcs8-encrypted": {
    source: "iana"
  },
  "application/pkix-attr-cert": {
    source: "iana",
    extensions: [
      "ac"
    ]
  },
  "application/pkix-cert": {
    source: "iana",
    extensions: [
      "cer"
    ]
  },
  "application/pkix-crl": {
    source: "iana",
    extensions: [
      "crl"
    ]
  },
  "application/pkix-pkipath": {
    source: "iana",
    extensions: [
      "pkipath"
    ]
  },
  "application/pkixcmp": {
    source: "iana",
    extensions: [
      "pki"
    ]
  },
  "application/pls+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "pls"
    ]
  },
  "application/poc-settings+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/postscript": {
    source: "iana",
    compressible: true,
    extensions: [
      "ai",
      "eps",
      "ps"
    ]
  },
  "application/ppsp-tracker+json": {
    source: "iana",
    compressible: true
  },
  "application/problem+json": {
    source: "iana",
    compressible: true
  },
  "application/problem+xml": {
    source: "iana",
    compressible: true
  },
  "application/provenance+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "provx"
    ]
  },
  "application/prs.alvestrand.titrax-sheet": {
    source: "iana"
  },
  "application/prs.cww": {
    source: "iana",
    extensions: [
      "cww"
    ]
  },
  "application/prs.cyn": {
    source: "iana",
    charset: "7-BIT"
  },
  "application/prs.hpub+zip": {
    source: "iana",
    compressible: false
  },
  "application/prs.nprend": {
    source: "iana"
  },
  "application/prs.plucker": {
    source: "iana"
  },
  "application/prs.rdf-xml-crypt": {
    source: "iana"
  },
  "application/prs.xsf+xml": {
    source: "iana",
    compressible: true
  },
  "application/pskc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "pskcxml"
    ]
  },
  "application/pvd+json": {
    source: "iana",
    compressible: true
  },
  "application/qsig": {
    source: "iana"
  },
  "application/raml+yaml": {
    compressible: true,
    extensions: [
      "raml"
    ]
  },
  "application/raptorfec": {
    source: "iana"
  },
  "application/rdap+json": {
    source: "iana",
    compressible: true
  },
  "application/rdf+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rdf",
      "owl"
    ]
  },
  "application/reginfo+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rif"
    ]
  },
  "application/relax-ng-compact-syntax": {
    source: "iana",
    extensions: [
      "rnc"
    ]
  },
  "application/remote-printing": {
    source: "iana"
  },
  "application/reputon+json": {
    source: "iana",
    compressible: true
  },
  "application/resource-lists+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rl"
    ]
  },
  "application/resource-lists-diff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rld"
    ]
  },
  "application/rfc+xml": {
    source: "iana",
    compressible: true
  },
  "application/riscos": {
    source: "iana"
  },
  "application/rlmi+xml": {
    source: "iana",
    compressible: true
  },
  "application/rls-services+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rs"
    ]
  },
  "application/route-apd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rapd"
    ]
  },
  "application/route-s-tsid+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sls"
    ]
  },
  "application/route-usd+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rusd"
    ]
  },
  "application/rpki-ghostbusters": {
    source: "iana",
    extensions: [
      "gbr"
    ]
  },
  "application/rpki-manifest": {
    source: "iana",
    extensions: [
      "mft"
    ]
  },
  "application/rpki-publication": {
    source: "iana"
  },
  "application/rpki-roa": {
    source: "iana",
    extensions: [
      "roa"
    ]
  },
  "application/rpki-updown": {
    source: "iana"
  },
  "application/rsd+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "rsd"
    ]
  },
  "application/rss+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "rss"
    ]
  },
  "application/rtf": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtf"
    ]
  },
  "application/rtploopback": {
    source: "iana"
  },
  "application/rtx": {
    source: "iana"
  },
  "application/samlassertion+xml": {
    source: "iana",
    compressible: true
  },
  "application/samlmetadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/sarif+json": {
    source: "iana",
    compressible: true
  },
  "application/sarif-external-properties+json": {
    source: "iana",
    compressible: true
  },
  "application/sbe": {
    source: "iana"
  },
  "application/sbml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sbml"
    ]
  },
  "application/scaip+xml": {
    source: "iana",
    compressible: true
  },
  "application/scim+json": {
    source: "iana",
    compressible: true
  },
  "application/scvp-cv-request": {
    source: "iana",
    extensions: [
      "scq"
    ]
  },
  "application/scvp-cv-response": {
    source: "iana",
    extensions: [
      "scs"
    ]
  },
  "application/scvp-vp-request": {
    source: "iana",
    extensions: [
      "spq"
    ]
  },
  "application/scvp-vp-response": {
    source: "iana",
    extensions: [
      "spp"
    ]
  },
  "application/sdp": {
    source: "iana",
    extensions: [
      "sdp"
    ]
  },
  "application/secevent+jwt": {
    source: "iana"
  },
  "application/senml+cbor": {
    source: "iana"
  },
  "application/senml+json": {
    source: "iana",
    compressible: true
  },
  "application/senml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "senmlx"
    ]
  },
  "application/senml-etch+cbor": {
    source: "iana"
  },
  "application/senml-etch+json": {
    source: "iana",
    compressible: true
  },
  "application/senml-exi": {
    source: "iana"
  },
  "application/sensml+cbor": {
    source: "iana"
  },
  "application/sensml+json": {
    source: "iana",
    compressible: true
  },
  "application/sensml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sensmlx"
    ]
  },
  "application/sensml-exi": {
    source: "iana"
  },
  "application/sep+xml": {
    source: "iana",
    compressible: true
  },
  "application/sep-exi": {
    source: "iana"
  },
  "application/session-info": {
    source: "iana"
  },
  "application/set-payment": {
    source: "iana"
  },
  "application/set-payment-initiation": {
    source: "iana",
    extensions: [
      "setpay"
    ]
  },
  "application/set-registration": {
    source: "iana"
  },
  "application/set-registration-initiation": {
    source: "iana",
    extensions: [
      "setreg"
    ]
  },
  "application/sgml": {
    source: "iana"
  },
  "application/sgml-open-catalog": {
    source: "iana"
  },
  "application/shf+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "shf"
    ]
  },
  "application/sieve": {
    source: "iana",
    extensions: [
      "siv",
      "sieve"
    ]
  },
  "application/simple-filter+xml": {
    source: "iana",
    compressible: true
  },
  "application/simple-message-summary": {
    source: "iana"
  },
  "application/simplesymbolcontainer": {
    source: "iana"
  },
  "application/sipc": {
    source: "iana"
  },
  "application/slate": {
    source: "iana"
  },
  "application/smil": {
    source: "iana"
  },
  "application/smil+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "smi",
      "smil"
    ]
  },
  "application/smpte336m": {
    source: "iana"
  },
  "application/soap+fastinfoset": {
    source: "iana"
  },
  "application/soap+xml": {
    source: "iana",
    compressible: true
  },
  "application/sparql-query": {
    source: "iana",
    extensions: [
      "rq"
    ]
  },
  "application/sparql-results+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "srx"
    ]
  },
  "application/spdx+json": {
    source: "iana",
    compressible: true
  },
  "application/spirits-event+xml": {
    source: "iana",
    compressible: true
  },
  "application/sql": {
    source: "iana"
  },
  "application/srgs": {
    source: "iana",
    extensions: [
      "gram"
    ]
  },
  "application/srgs+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "grxml"
    ]
  },
  "application/sru+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sru"
    ]
  },
  "application/ssdl+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "ssdl"
    ]
  },
  "application/ssml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ssml"
    ]
  },
  "application/stix+json": {
    source: "iana",
    compressible: true
  },
  "application/swid+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "swidtag"
    ]
  },
  "application/tamp-apex-update": {
    source: "iana"
  },
  "application/tamp-apex-update-confirm": {
    source: "iana"
  },
  "application/tamp-community-update": {
    source: "iana"
  },
  "application/tamp-community-update-confirm": {
    source: "iana"
  },
  "application/tamp-error": {
    source: "iana"
  },
  "application/tamp-sequence-adjust": {
    source: "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    source: "iana"
  },
  "application/tamp-status-query": {
    source: "iana"
  },
  "application/tamp-status-response": {
    source: "iana"
  },
  "application/tamp-update": {
    source: "iana"
  },
  "application/tamp-update-confirm": {
    source: "iana"
  },
  "application/tar": {
    compressible: true
  },
  "application/taxii+json": {
    source: "iana",
    compressible: true
  },
  "application/td+json": {
    source: "iana",
    compressible: true
  },
  "application/tei+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "tei",
      "teicorpus"
    ]
  },
  "application/tetra_isi": {
    source: "iana"
  },
  "application/thraud+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "tfi"
    ]
  },
  "application/timestamp-query": {
    source: "iana"
  },
  "application/timestamp-reply": {
    source: "iana"
  },
  "application/timestamped-data": {
    source: "iana",
    extensions: [
      "tsd"
    ]
  },
  "application/tlsrpt+gzip": {
    source: "iana"
  },
  "application/tlsrpt+json": {
    source: "iana",
    compressible: true
  },
  "application/tnauthlist": {
    source: "iana"
  },
  "application/token-introspection+jwt": {
    source: "iana"
  },
  "application/toml": {
    compressible: true,
    extensions: [
      "toml"
    ]
  },
  "application/trickle-ice-sdpfrag": {
    source: "iana"
  },
  "application/trig": {
    source: "iana",
    extensions: [
      "trig"
    ]
  },
  "application/ttml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ttml"
    ]
  },
  "application/tve-trigger": {
    source: "iana"
  },
  "application/tzif": {
    source: "iana"
  },
  "application/tzif-leap": {
    source: "iana"
  },
  "application/ubjson": {
    compressible: false,
    extensions: [
      "ubj"
    ]
  },
  "application/ulpfec": {
    source: "iana"
  },
  "application/urc-grpsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/urc-ressheet+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "rsheet"
    ]
  },
  "application/urc-targetdesc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "td"
    ]
  },
  "application/urc-uisocketdesc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vcard+json": {
    source: "iana",
    compressible: true
  },
  "application/vcard+xml": {
    source: "iana",
    compressible: true
  },
  "application/vemmi": {
    source: "iana"
  },
  "application/vividence.scriptfile": {
    source: "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "1km"
    ]
  },
  "application/vnd.3gpp-prose+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    source: "iana"
  },
  "application/vnd.3gpp.5gnas": {
    source: "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.bsf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.gmop+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.gtpc": {
    source: "iana"
  },
  "application/vnd.3gpp.interworking-data": {
    source: "iana"
  },
  "application/vnd.3gpp.lpp": {
    source: "iana"
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-payload": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    source: "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.mid-call+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.ngap": {
    source: "iana"
  },
  "application/vnd.3gpp.pfcp": {
    source: "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    source: "iana",
    extensions: [
      "plb"
    ]
  },
  "application/vnd.3gpp.pic-bw-small": {
    source: "iana",
    extensions: [
      "psb"
    ]
  },
  "application/vnd.3gpp.pic-bw-var": {
    source: "iana",
    extensions: [
      "pvb"
    ]
  },
  "application/vnd.3gpp.s1ap": {
    source: "iana"
  },
  "application/vnd.3gpp.sms": {
    source: "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp.ussd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.3gpp2.sms": {
    source: "iana"
  },
  "application/vnd.3gpp2.tcap": {
    source: "iana",
    extensions: [
      "tcap"
    ]
  },
  "application/vnd.3lightssoftware.imagescal": {
    source: "iana"
  },
  "application/vnd.3m.post-it-notes": {
    source: "iana",
    extensions: [
      "pwn"
    ]
  },
  "application/vnd.accpac.simply.aso": {
    source: "iana",
    extensions: [
      "aso"
    ]
  },
  "application/vnd.accpac.simply.imp": {
    source: "iana",
    extensions: [
      "imp"
    ]
  },
  "application/vnd.acucobol": {
    source: "iana",
    extensions: [
      "acu"
    ]
  },
  "application/vnd.acucorp": {
    source: "iana",
    extensions: [
      "atc",
      "acutc"
    ]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    source: "apache",
    compressible: false,
    extensions: [
      "air"
    ]
  },
  "application/vnd.adobe.flash.movie": {
    source: "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    source: "iana",
    extensions: [
      "fcdt"
    ]
  },
  "application/vnd.adobe.fxp": {
    source: "iana",
    extensions: [
      "fxp",
      "fxpl"
    ]
  },
  "application/vnd.adobe.partial-upload": {
    source: "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdp"
    ]
  },
  "application/vnd.adobe.xfdf": {
    source: "iana",
    extensions: [
      "xfdf"
    ]
  },
  "application/vnd.aether.imp": {
    source: "iana"
  },
  "application/vnd.afpc.afplinedata": {
    source: "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    source: "iana"
  },
  "application/vnd.afpc.cmoca-cmresource": {
    source: "iana"
  },
  "application/vnd.afpc.foca-charset": {
    source: "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    source: "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    source: "iana"
  },
  "application/vnd.afpc.modca": {
    source: "iana"
  },
  "application/vnd.afpc.modca-cmtable": {
    source: "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    source: "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    source: "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    source: "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    source: "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    source: "iana"
  },
  "application/vnd.age": {
    source: "iana",
    extensions: [
      "age"
    ]
  },
  "application/vnd.ah-barcode": {
    source: "iana"
  },
  "application/vnd.ahead.space": {
    source: "iana",
    extensions: [
      "ahead"
    ]
  },
  "application/vnd.airzip.filesecure.azf": {
    source: "iana",
    extensions: [
      "azf"
    ]
  },
  "application/vnd.airzip.filesecure.azs": {
    source: "iana",
    extensions: [
      "azs"
    ]
  },
  "application/vnd.amadeus+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.amazon.ebook": {
    source: "apache",
    extensions: [
      "azw"
    ]
  },
  "application/vnd.amazon.mobi8-ebook": {
    source: "iana"
  },
  "application/vnd.americandynamics.acc": {
    source: "iana",
    extensions: [
      "acc"
    ]
  },
  "application/vnd.amiga.ami": {
    source: "iana",
    extensions: [
      "ami"
    ]
  },
  "application/vnd.amundsen.maze+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.android.ota": {
    source: "iana"
  },
  "application/vnd.android.package-archive": {
    source: "apache",
    compressible: false,
    extensions: [
      "apk"
    ]
  },
  "application/vnd.anki": {
    source: "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    source: "iana",
    extensions: [
      "cii"
    ]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    source: "apache",
    extensions: [
      "fti"
    ]
  },
  "application/vnd.antix.game-component": {
    source: "iana",
    extensions: [
      "atx"
    ]
  },
  "application/vnd.apache.arrow.file": {
    source: "iana"
  },
  "application/vnd.apache.arrow.stream": {
    source: "iana"
  },
  "application/vnd.apache.thrift.binary": {
    source: "iana"
  },
  "application/vnd.apache.thrift.compact": {
    source: "iana"
  },
  "application/vnd.apache.thrift.json": {
    source: "iana"
  },
  "application/vnd.api+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.aplextor.warrp+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.apothekende.reservation+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.apple.installer+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mpkg"
    ]
  },
  "application/vnd.apple.keynote": {
    source: "iana",
    extensions: [
      "key"
    ]
  },
  "application/vnd.apple.mpegurl": {
    source: "iana",
    extensions: [
      "m3u8"
    ]
  },
  "application/vnd.apple.numbers": {
    source: "iana",
    extensions: [
      "numbers"
    ]
  },
  "application/vnd.apple.pages": {
    source: "iana",
    extensions: [
      "pages"
    ]
  },
  "application/vnd.apple.pkpass": {
    compressible: false,
    extensions: [
      "pkpass"
    ]
  },
  "application/vnd.arastra.swi": {
    source: "iana"
  },
  "application/vnd.aristanetworks.swi": {
    source: "iana",
    extensions: [
      "swi"
    ]
  },
  "application/vnd.artisan+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.artsquare": {
    source: "iana"
  },
  "application/vnd.astraea-software.iota": {
    source: "iana",
    extensions: [
      "iota"
    ]
  },
  "application/vnd.audiograph": {
    source: "iana",
    extensions: [
      "aep"
    ]
  },
  "application/vnd.autopackage": {
    source: "iana"
  },
  "application/vnd.avalon+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.avistar+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.balsamiq.bmml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "bmml"
    ]
  },
  "application/vnd.balsamiq.bmpr": {
    source: "iana"
  },
  "application/vnd.banana-accounting": {
    source: "iana"
  },
  "application/vnd.bbf.usp.error": {
    source: "iana"
  },
  "application/vnd.bbf.usp.msg": {
    source: "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.bekitzur-stech+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.bint.med-content": {
    source: "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.blink-idb-value-wrapper": {
    source: "iana"
  },
  "application/vnd.blueice.multipass": {
    source: "iana",
    extensions: [
      "mpm"
    ]
  },
  "application/vnd.bluetooth.ep.oob": {
    source: "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    source: "iana"
  },
  "application/vnd.bmi": {
    source: "iana",
    extensions: [
      "bmi"
    ]
  },
  "application/vnd.bpf": {
    source: "iana"
  },
  "application/vnd.bpf3": {
    source: "iana"
  },
  "application/vnd.businessobjects": {
    source: "iana",
    extensions: [
      "rep"
    ]
  },
  "application/vnd.byu.uapi+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cab-jscript": {
    source: "iana"
  },
  "application/vnd.canon-cpdl": {
    source: "iana"
  },
  "application/vnd.canon-lips": {
    source: "iana"
  },
  "application/vnd.capasystems-pg+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    source: "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    source: "iana"
  },
  "application/vnd.chemdraw+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "cdxml"
    ]
  },
  "application/vnd.chess-pgn": {
    source: "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    source: "iana",
    extensions: [
      "mmd"
    ]
  },
  "application/vnd.ciedi": {
    source: "iana"
  },
  "application/vnd.cinderella": {
    source: "iana",
    extensions: [
      "cdy"
    ]
  },
  "application/vnd.cirpack.isdn-ext": {
    source: "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "csl"
    ]
  },
  "application/vnd.claymore": {
    source: "iana",
    extensions: [
      "cla"
    ]
  },
  "application/vnd.cloanto.rp9": {
    source: "iana",
    extensions: [
      "rp9"
    ]
  },
  "application/vnd.clonk.c4group": {
    source: "iana",
    extensions: [
      "c4g",
      "c4d",
      "c4f",
      "c4p",
      "c4u"
    ]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    source: "iana",
    extensions: [
      "c11amc"
    ]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    source: "iana",
    extensions: [
      "c11amz"
    ]
  },
  "application/vnd.coffeescript": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    source: "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    source: "iana"
  },
  "application/vnd.collection+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.collection.doc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.collection.next+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.comicbook+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.comicbook-rar": {
    source: "iana"
  },
  "application/vnd.commerce-battelle": {
    source: "iana"
  },
  "application/vnd.commonspace": {
    source: "iana",
    extensions: [
      "csp"
    ]
  },
  "application/vnd.contact.cmsg": {
    source: "iana",
    extensions: [
      "cdbcmsg"
    ]
  },
  "application/vnd.coreos.ignition+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cosmocaller": {
    source: "iana",
    extensions: [
      "cmc"
    ]
  },
  "application/vnd.crick.clicker": {
    source: "iana",
    extensions: [
      "clkx"
    ]
  },
  "application/vnd.crick.clicker.keyboard": {
    source: "iana",
    extensions: [
      "clkk"
    ]
  },
  "application/vnd.crick.clicker.palette": {
    source: "iana",
    extensions: [
      "clkp"
    ]
  },
  "application/vnd.crick.clicker.template": {
    source: "iana",
    extensions: [
      "clkt"
    ]
  },
  "application/vnd.crick.clicker.wordbank": {
    source: "iana",
    extensions: [
      "clkw"
    ]
  },
  "application/vnd.criticaltools.wbs+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wbs"
    ]
  },
  "application/vnd.cryptii.pipe+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.crypto-shade-file": {
    source: "iana"
  },
  "application/vnd.cryptomator.encrypted": {
    source: "iana"
  },
  "application/vnd.cryptomator.vault": {
    source: "iana"
  },
  "application/vnd.ctc-posml": {
    source: "iana",
    extensions: [
      "pml"
    ]
  },
  "application/vnd.ctct.ws+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cups-pdf": {
    source: "iana"
  },
  "application/vnd.cups-postscript": {
    source: "iana"
  },
  "application/vnd.cups-ppd": {
    source: "iana",
    extensions: [
      "ppd"
    ]
  },
  "application/vnd.cups-raster": {
    source: "iana"
  },
  "application/vnd.cups-raw": {
    source: "iana"
  },
  "application/vnd.curl": {
    source: "iana"
  },
  "application/vnd.curl.car": {
    source: "apache",
    extensions: [
      "car"
    ]
  },
  "application/vnd.curl.pcurl": {
    source: "apache",
    extensions: [
      "pcurl"
    ]
  },
  "application/vnd.cyan.dean.root+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cybank": {
    source: "iana"
  },
  "application/vnd.cyclonedx+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.cyclonedx+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.d3m-dataset": {
    source: "iana"
  },
  "application/vnd.d3m-problem": {
    source: "iana"
  },
  "application/vnd.dart": {
    source: "iana",
    compressible: true,
    extensions: [
      "dart"
    ]
  },
  "application/vnd.data-vision.rdz": {
    source: "iana",
    extensions: [
      "rdz"
    ]
  },
  "application/vnd.datapackage+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dataresource+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dbf": {
    source: "iana",
    extensions: [
      "dbf"
    ]
  },
  "application/vnd.debian.binary-package": {
    source: "iana"
  },
  "application/vnd.dece.data": {
    source: "iana",
    extensions: [
      "uvf",
      "uvvf",
      "uvd",
      "uvvd"
    ]
  },
  "application/vnd.dece.ttml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "uvt",
      "uvvt"
    ]
  },
  "application/vnd.dece.unspecified": {
    source: "iana",
    extensions: [
      "uvx",
      "uvvx"
    ]
  },
  "application/vnd.dece.zip": {
    source: "iana",
    extensions: [
      "uvz",
      "uvvz"
    ]
  },
  "application/vnd.denovo.fcselayout-link": {
    source: "iana",
    extensions: [
      "fe_launch"
    ]
  },
  "application/vnd.desmume.movie": {
    source: "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    source: "iana"
  },
  "application/vnd.dm.delegation+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dna": {
    source: "iana",
    extensions: [
      "dna"
    ]
  },
  "application/vnd.document+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dolby.mlp": {
    source: "apache",
    extensions: [
      "mlp"
    ]
  },
  "application/vnd.dolby.mobile.1": {
    source: "iana"
  },
  "application/vnd.dolby.mobile.2": {
    source: "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    source: "iana"
  },
  "application/vnd.dpgraph": {
    source: "iana",
    extensions: [
      "dpg"
    ]
  },
  "application/vnd.dreamfactory": {
    source: "iana",
    extensions: [
      "dfac"
    ]
  },
  "application/vnd.drive+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ds-keypoint": {
    source: "apache",
    extensions: [
      "kpxx"
    ]
  },
  "application/vnd.dtg.local": {
    source: "iana"
  },
  "application/vnd.dtg.local.flash": {
    source: "iana"
  },
  "application/vnd.dtg.local.html": {
    source: "iana"
  },
  "application/vnd.dvb.ait": {
    source: "iana",
    extensions: [
      "ait"
    ]
  },
  "application/vnd.dvb.dvbisl+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.dvbj": {
    source: "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    source: "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    source: "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    source: "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    source: "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-container+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-generic+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.notif-init+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.dvb.pfr": {
    source: "iana"
  },
  "application/vnd.dvb.service": {
    source: "iana",
    extensions: [
      "svc"
    ]
  },
  "application/vnd.dxr": {
    source: "iana"
  },
  "application/vnd.dynageo": {
    source: "iana",
    extensions: [
      "geo"
    ]
  },
  "application/vnd.dzr": {
    source: "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    source: "iana"
  },
  "application/vnd.ecdis-update": {
    source: "iana"
  },
  "application/vnd.ecip.rlp": {
    source: "iana"
  },
  "application/vnd.eclipse.ditto+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ecowin.chart": {
    source: "iana",
    extensions: [
      "mag"
    ]
  },
  "application/vnd.ecowin.filerequest": {
    source: "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    source: "iana"
  },
  "application/vnd.ecowin.series": {
    source: "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    source: "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    source: "iana"
  },
  "application/vnd.efi.img": {
    source: "iana"
  },
  "application/vnd.efi.iso": {
    source: "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.enliven": {
    source: "iana",
    extensions: [
      "nml"
    ]
  },
  "application/vnd.enphase.envoy": {
    source: "iana"
  },
  "application/vnd.eprints.data+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.epson.esf": {
    source: "iana",
    extensions: [
      "esf"
    ]
  },
  "application/vnd.epson.msf": {
    source: "iana",
    extensions: [
      "msf"
    ]
  },
  "application/vnd.epson.quickanime": {
    source: "iana",
    extensions: [
      "qam"
    ]
  },
  "application/vnd.epson.salt": {
    source: "iana",
    extensions: [
      "slt"
    ]
  },
  "application/vnd.epson.ssf": {
    source: "iana",
    extensions: [
      "ssf"
    ]
  },
  "application/vnd.ericsson.quickcall": {
    source: "iana"
  },
  "application/vnd.espass-espass+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.eszigno3+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "es3",
      "et3"
    ]
  },
  "application/vnd.etsi.aoc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.asic-e+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.etsi.asic-s+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.etsi.cug+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvservice+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvsync+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.mcid+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.mheg5": {
    source: "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.pstn+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.sci+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.simservs+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.timestamp-token": {
    source: "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.etsi.tsl.der": {
    source: "iana"
  },
  "application/vnd.eu.kasparian.car+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.eudora.data": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    source: "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    source: "iana"
  },
  "application/vnd.exstream-empower+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.exstream-package": {
    source: "iana"
  },
  "application/vnd.ezpix-album": {
    source: "iana",
    extensions: [
      "ez2"
    ]
  },
  "application/vnd.ezpix-package": {
    source: "iana",
    extensions: [
      "ez3"
    ]
  },
  "application/vnd.f-secure.mobile": {
    source: "iana"
  },
  "application/vnd.familysearch.gedcom+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.fastcopy-disk-image": {
    source: "iana"
  },
  "application/vnd.fdf": {
    source: "iana",
    extensions: [
      "fdf"
    ]
  },
  "application/vnd.fdsn.mseed": {
    source: "iana",
    extensions: [
      "mseed"
    ]
  },
  "application/vnd.fdsn.seed": {
    source: "iana",
    extensions: [
      "seed",
      "dataless"
    ]
  },
  "application/vnd.ffsns": {
    source: "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.filmit.zfc": {
    source: "iana"
  },
  "application/vnd.fints": {
    source: "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    source: "iana"
  },
  "application/vnd.flographit": {
    source: "iana",
    extensions: [
      "gph"
    ]
  },
  "application/vnd.fluxtime.clip": {
    source: "iana",
    extensions: [
      "ftc"
    ]
  },
  "application/vnd.font-fontforge-sfd": {
    source: "iana"
  },
  "application/vnd.framemaker": {
    source: "iana",
    extensions: [
      "fm",
      "frame",
      "maker",
      "book"
    ]
  },
  "application/vnd.frogans.fnc": {
    source: "iana",
    extensions: [
      "fnc"
    ]
  },
  "application/vnd.frogans.ltf": {
    source: "iana",
    extensions: [
      "ltf"
    ]
  },
  "application/vnd.fsc.weblaunch": {
    source: "iana",
    extensions: [
      "fsc"
    ]
  },
  "application/vnd.fujifilm.fb.docuworks": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.binder": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.container": {
    source: "iana"
  },
  "application/vnd.fujifilm.fb.jfi+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.fujitsu.oasys": {
    source: "iana",
    extensions: [
      "oas"
    ]
  },
  "application/vnd.fujitsu.oasys2": {
    source: "iana",
    extensions: [
      "oa2"
    ]
  },
  "application/vnd.fujitsu.oasys3": {
    source: "iana",
    extensions: [
      "oa3"
    ]
  },
  "application/vnd.fujitsu.oasysgp": {
    source: "iana",
    extensions: [
      "fg5"
    ]
  },
  "application/vnd.fujitsu.oasysprs": {
    source: "iana",
    extensions: [
      "bh2"
    ]
  },
  "application/vnd.fujixerox.art-ex": {
    source: "iana"
  },
  "application/vnd.fujixerox.art4": {
    source: "iana"
  },
  "application/vnd.fujixerox.ddd": {
    source: "iana",
    extensions: [
      "ddd"
    ]
  },
  "application/vnd.fujixerox.docuworks": {
    source: "iana",
    extensions: [
      "xdw"
    ]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    source: "iana",
    extensions: [
      "xbd"
    ]
  },
  "application/vnd.fujixerox.docuworks.container": {
    source: "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    source: "iana"
  },
  "application/vnd.fut-misnet": {
    source: "iana"
  },
  "application/vnd.futoin+cbor": {
    source: "iana"
  },
  "application/vnd.futoin+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.fuzzysheet": {
    source: "iana",
    extensions: [
      "fzs"
    ]
  },
  "application/vnd.genomatix.tuxedo": {
    source: "iana",
    extensions: [
      "txd"
    ]
  },
  "application/vnd.gentics.grd+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geo+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geocube+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.geogebra.file": {
    source: "iana",
    extensions: [
      "ggb"
    ]
  },
  "application/vnd.geogebra.slides": {
    source: "iana"
  },
  "application/vnd.geogebra.tool": {
    source: "iana",
    extensions: [
      "ggt"
    ]
  },
  "application/vnd.geometry-explorer": {
    source: "iana",
    extensions: [
      "gex",
      "gre"
    ]
  },
  "application/vnd.geonext": {
    source: "iana",
    extensions: [
      "gxt"
    ]
  },
  "application/vnd.geoplan": {
    source: "iana",
    extensions: [
      "g2w"
    ]
  },
  "application/vnd.geospace": {
    source: "iana",
    extensions: [
      "g3w"
    ]
  },
  "application/vnd.gerber": {
    source: "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    source: "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    source: "iana"
  },
  "application/vnd.gmx": {
    source: "iana",
    extensions: [
      "gmx"
    ]
  },
  "application/vnd.google-apps.document": {
    compressible: false,
    extensions: [
      "gdoc"
    ]
  },
  "application/vnd.google-apps.presentation": {
    compressible: false,
    extensions: [
      "gslides"
    ]
  },
  "application/vnd.google-apps.spreadsheet": {
    compressible: false,
    extensions: [
      "gsheet"
    ]
  },
  "application/vnd.google-earth.kml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "kml"
    ]
  },
  "application/vnd.google-earth.kmz": {
    source: "iana",
    compressible: false,
    extensions: [
      "kmz"
    ]
  },
  "application/vnd.gov.sk.e-form+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.gov.sk.e-form+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.grafeq": {
    source: "iana",
    extensions: [
      "gqf",
      "gqs"
    ]
  },
  "application/vnd.gridmp": {
    source: "iana"
  },
  "application/vnd.groove-account": {
    source: "iana",
    extensions: [
      "gac"
    ]
  },
  "application/vnd.groove-help": {
    source: "iana",
    extensions: [
      "ghf"
    ]
  },
  "application/vnd.groove-identity-message": {
    source: "iana",
    extensions: [
      "gim"
    ]
  },
  "application/vnd.groove-injector": {
    source: "iana",
    extensions: [
      "grv"
    ]
  },
  "application/vnd.groove-tool-message": {
    source: "iana",
    extensions: [
      "gtm"
    ]
  },
  "application/vnd.groove-tool-template": {
    source: "iana",
    extensions: [
      "tpl"
    ]
  },
  "application/vnd.groove-vcard": {
    source: "iana",
    extensions: [
      "vcg"
    ]
  },
  "application/vnd.hal+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hal+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "hal"
    ]
  },
  "application/vnd.handheld-entertainment+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "zmm"
    ]
  },
  "application/vnd.hbci": {
    source: "iana",
    extensions: [
      "hbci"
    ]
  },
  "application/vnd.hc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hcl-bireports": {
    source: "iana"
  },
  "application/vnd.hdt": {
    source: "iana"
  },
  "application/vnd.heroku+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hhe.lesson-player": {
    source: "iana",
    extensions: [
      "les"
    ]
  },
  "application/vnd.hl7cda+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.hl7v2+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.hp-hpgl": {
    source: "iana",
    extensions: [
      "hpgl"
    ]
  },
  "application/vnd.hp-hpid": {
    source: "iana",
    extensions: [
      "hpid"
    ]
  },
  "application/vnd.hp-hps": {
    source: "iana",
    extensions: [
      "hps"
    ]
  },
  "application/vnd.hp-jlyt": {
    source: "iana",
    extensions: [
      "jlt"
    ]
  },
  "application/vnd.hp-pcl": {
    source: "iana",
    extensions: [
      "pcl"
    ]
  },
  "application/vnd.hp-pclxl": {
    source: "iana",
    extensions: [
      "pclxl"
    ]
  },
  "application/vnd.httphone": {
    source: "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    source: "iana",
    extensions: [
      "sfd-hdstx"
    ]
  },
  "application/vnd.hyper+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hyper-item+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hyperdrive+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.hzn-3d-crossword": {
    source: "iana"
  },
  "application/vnd.ibm.afplinedata": {
    source: "iana"
  },
  "application/vnd.ibm.electronic-media": {
    source: "iana"
  },
  "application/vnd.ibm.minipay": {
    source: "iana",
    extensions: [
      "mpy"
    ]
  },
  "application/vnd.ibm.modcap": {
    source: "iana",
    extensions: [
      "afp",
      "listafp",
      "list3820"
    ]
  },
  "application/vnd.ibm.rights-management": {
    source: "iana",
    extensions: [
      "irm"
    ]
  },
  "application/vnd.ibm.secure-container": {
    source: "iana",
    extensions: [
      "sc"
    ]
  },
  "application/vnd.iccprofile": {
    source: "iana",
    extensions: [
      "icc",
      "icm"
    ]
  },
  "application/vnd.ieee.1905": {
    source: "iana"
  },
  "application/vnd.igloader": {
    source: "iana",
    extensions: [
      "igl"
    ]
  },
  "application/vnd.imagemeter.folder+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.imagemeter.image+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.immervision-ivp": {
    source: "iana",
    extensions: [
      "ivp"
    ]
  },
  "application/vnd.immervision-ivu": {
    source: "iana",
    extensions: [
      "ivu"
    ]
  },
  "application/vnd.ims.imsccv1p1": {
    source: "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    source: "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    source: "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.informedcontrol.rms+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.informix-visionary": {
    source: "iana"
  },
  "application/vnd.infotech.project": {
    source: "iana"
  },
  "application/vnd.infotech.project+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.innopath.wamp.notification": {
    source: "iana"
  },
  "application/vnd.insors.igm": {
    source: "iana",
    extensions: [
      "igm"
    ]
  },
  "application/vnd.intercon.formnet": {
    source: "iana",
    extensions: [
      "xpw",
      "xpx"
    ]
  },
  "application/vnd.intergeo": {
    source: "iana",
    extensions: [
      "i2g"
    ]
  },
  "application/vnd.intertrust.digibox": {
    source: "iana"
  },
  "application/vnd.intertrust.nncp": {
    source: "iana"
  },
  "application/vnd.intu.qbo": {
    source: "iana",
    extensions: [
      "qbo"
    ]
  },
  "application/vnd.intu.qfx": {
    source: "iana",
    extensions: [
      "qfx"
    ]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ipunplugged.rcprofile": {
    source: "iana",
    extensions: [
      "rcprofile"
    ]
  },
  "application/vnd.irepository.package+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "irp"
    ]
  },
  "application/vnd.is-xpr": {
    source: "iana",
    extensions: [
      "xpr"
    ]
  },
  "application/vnd.isac.fcs": {
    source: "iana",
    extensions: [
      "fcs"
    ]
  },
  "application/vnd.iso11783-10+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.jam": {
    source: "iana",
    extensions: [
      "jam"
    ]
  },
  "application/vnd.japannet-directory-service": {
    source: "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-registration": {
    source: "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    source: "iana"
  },
  "application/vnd.japannet-verification": {
    source: "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    source: "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    source: "iana",
    extensions: [
      "rms"
    ]
  },
  "application/vnd.jisp": {
    source: "iana",
    extensions: [
      "jisp"
    ]
  },
  "application/vnd.joost.joda-archive": {
    source: "iana",
    extensions: [
      "joda"
    ]
  },
  "application/vnd.jsk.isdn-ngn": {
    source: "iana"
  },
  "application/vnd.kahootz": {
    source: "iana",
    extensions: [
      "ktz",
      "ktr"
    ]
  },
  "application/vnd.kde.karbon": {
    source: "iana",
    extensions: [
      "karbon"
    ]
  },
  "application/vnd.kde.kchart": {
    source: "iana",
    extensions: [
      "chrt"
    ]
  },
  "application/vnd.kde.kformula": {
    source: "iana",
    extensions: [
      "kfo"
    ]
  },
  "application/vnd.kde.kivio": {
    source: "iana",
    extensions: [
      "flw"
    ]
  },
  "application/vnd.kde.kontour": {
    source: "iana",
    extensions: [
      "kon"
    ]
  },
  "application/vnd.kde.kpresenter": {
    source: "iana",
    extensions: [
      "kpr",
      "kpt"
    ]
  },
  "application/vnd.kde.kspread": {
    source: "iana",
    extensions: [
      "ksp"
    ]
  },
  "application/vnd.kde.kword": {
    source: "iana",
    extensions: [
      "kwd",
      "kwt"
    ]
  },
  "application/vnd.kenameaapp": {
    source: "iana",
    extensions: [
      "htke"
    ]
  },
  "application/vnd.kidspiration": {
    source: "iana",
    extensions: [
      "kia"
    ]
  },
  "application/vnd.kinar": {
    source: "iana",
    extensions: [
      "kne",
      "knp"
    ]
  },
  "application/vnd.koan": {
    source: "iana",
    extensions: [
      "skp",
      "skd",
      "skt",
      "skm"
    ]
  },
  "application/vnd.kodak-descriptor": {
    source: "iana",
    extensions: [
      "sse"
    ]
  },
  "application/vnd.las": {
    source: "iana"
  },
  "application/vnd.las.las+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.las.las+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lasxml"
    ]
  },
  "application/vnd.laszip": {
    source: "iana"
  },
  "application/vnd.leap+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.liberty-request+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    source: "iana",
    extensions: [
      "lbd"
    ]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "lbe"
    ]
  },
  "application/vnd.logipipe.circuit+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.loom": {
    source: "iana"
  },
  "application/vnd.lotus-1-2-3": {
    source: "iana",
    extensions: [
      "123"
    ]
  },
  "application/vnd.lotus-approach": {
    source: "iana",
    extensions: [
      "apr"
    ]
  },
  "application/vnd.lotus-freelance": {
    source: "iana",
    extensions: [
      "pre"
    ]
  },
  "application/vnd.lotus-notes": {
    source: "iana",
    extensions: [
      "nsf"
    ]
  },
  "application/vnd.lotus-organizer": {
    source: "iana",
    extensions: [
      "org"
    ]
  },
  "application/vnd.lotus-screencam": {
    source: "iana",
    extensions: [
      "scm"
    ]
  },
  "application/vnd.lotus-wordpro": {
    source: "iana",
    extensions: [
      "lwp"
    ]
  },
  "application/vnd.macports.portpkg": {
    source: "iana",
    extensions: [
      "portpkg"
    ]
  },
  "application/vnd.mapbox-vector-tile": {
    source: "iana",
    extensions: [
      "mvt"
    ]
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.license+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.marlin.drm.mdcf": {
    source: "iana"
  },
  "application/vnd.mason+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.maxar.archive.3tz+zip": {
    source: "iana",
    compressible: false
  },
  "application/vnd.maxmind.maxmind-db": {
    source: "iana"
  },
  "application/vnd.mcd": {
    source: "iana",
    extensions: [
      "mcd"
    ]
  },
  "application/vnd.medcalcdata": {
    source: "iana",
    extensions: [
      "mc1"
    ]
  },
  "application/vnd.mediastation.cdkey": {
    source: "iana",
    extensions: [
      "cdkey"
    ]
  },
  "application/vnd.meridian-slingshot": {
    source: "iana"
  },
  "application/vnd.mfer": {
    source: "iana",
    extensions: [
      "mwf"
    ]
  },
  "application/vnd.mfmp": {
    source: "iana",
    extensions: [
      "mfm"
    ]
  },
  "application/vnd.micro+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.micrografx.flo": {
    source: "iana",
    extensions: [
      "flo"
    ]
  },
  "application/vnd.micrografx.igx": {
    source: "iana",
    extensions: [
      "igx"
    ]
  },
  "application/vnd.microsoft.portable-executable": {
    source: "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    source: "iana"
  },
  "application/vnd.miele+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.mif": {
    source: "iana",
    extensions: [
      "mif"
    ]
  },
  "application/vnd.minisoft-hp3000-save": {
    source: "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    source: "iana"
  },
  "application/vnd.mobius.daf": {
    source: "iana",
    extensions: [
      "daf"
    ]
  },
  "application/vnd.mobius.dis": {
    source: "iana",
    extensions: [
      "dis"
    ]
  },
  "application/vnd.mobius.mbk": {
    source: "iana",
    extensions: [
      "mbk"
    ]
  },
  "application/vnd.mobius.mqy": {
    source: "iana",
    extensions: [
      "mqy"
    ]
  },
  "application/vnd.mobius.msl": {
    source: "iana",
    extensions: [
      "msl"
    ]
  },
  "application/vnd.mobius.plc": {
    source: "iana",
    extensions: [
      "plc"
    ]
  },
  "application/vnd.mobius.txf": {
    source: "iana",
    extensions: [
      "txf"
    ]
  },
  "application/vnd.mophun.application": {
    source: "iana",
    extensions: [
      "mpn"
    ]
  },
  "application/vnd.mophun.certificate": {
    source: "iana",
    extensions: [
      "mpc"
    ]
  },
  "application/vnd.motorola.flexsuite": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    source: "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    source: "iana"
  },
  "application/vnd.motorola.iprm": {
    source: "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xul"
    ]
  },
  "application/vnd.ms-3mfdocument": {
    source: "iana"
  },
  "application/vnd.ms-artgalry": {
    source: "iana",
    extensions: [
      "cil"
    ]
  },
  "application/vnd.ms-asf": {
    source: "iana"
  },
  "application/vnd.ms-cab-compressed": {
    source: "iana",
    extensions: [
      "cab"
    ]
  },
  "application/vnd.ms-color.iccprofile": {
    source: "apache"
  },
  "application/vnd.ms-excel": {
    source: "iana",
    compressible: false,
    extensions: [
      "xls",
      "xlm",
      "xla",
      "xlc",
      "xlt",
      "xlw"
    ]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlam"
    ]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlsb"
    ]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    source: "iana",
    extensions: [
      "xlsm"
    ]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "xltm"
    ]
  },
  "application/vnd.ms-fontobject": {
    source: "iana",
    compressible: true,
    extensions: [
      "eot"
    ]
  },
  "application/vnd.ms-htmlhelp": {
    source: "iana",
    extensions: [
      "chm"
    ]
  },
  "application/vnd.ms-ims": {
    source: "iana",
    extensions: [
      "ims"
    ]
  },
  "application/vnd.ms-lrm": {
    source: "iana",
    extensions: [
      "lrm"
    ]
  },
  "application/vnd.ms-office.activex+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-officetheme": {
    source: "iana",
    extensions: [
      "thmx"
    ]
  },
  "application/vnd.ms-opentype": {
    source: "apache",
    compressible: true
  },
  "application/vnd.ms-outlook": {
    compressible: false,
    extensions: [
      "msg"
    ]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    source: "apache"
  },
  "application/vnd.ms-pki.seccat": {
    source: "apache",
    extensions: [
      "cat"
    ]
  },
  "application/vnd.ms-pki.stl": {
    source: "apache",
    extensions: [
      "stl"
    ]
  },
  "application/vnd.ms-playready.initiator+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-powerpoint": {
    source: "iana",
    compressible: false,
    extensions: [
      "ppt",
      "pps",
      "pot"
    ]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    source: "iana",
    extensions: [
      "ppam"
    ]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    source: "iana",
    extensions: [
      "pptm"
    ]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    source: "iana",
    extensions: [
      "sldm"
    ]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    source: "iana",
    extensions: [
      "ppsm"
    ]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "potm"
    ]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-printing.printticket+xml": {
    source: "apache",
    compressible: true
  },
  "application/vnd.ms-printschematicket+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ms-project": {
    source: "iana",
    extensions: [
      "mpp",
      "mpt"
    ]
  },
  "application/vnd.ms-tnef": {
    source: "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    source: "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    source: "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    source: "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    source: "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    source: "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    source: "iana",
    extensions: [
      "docm"
    ]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    source: "iana",
    extensions: [
      "dotm"
    ]
  },
  "application/vnd.ms-works": {
    source: "iana",
    extensions: [
      "wps",
      "wks",
      "wcm",
      "wdb"
    ]
  },
  "application/vnd.ms-wpl": {
    source: "iana",
    extensions: [
      "wpl"
    ]
  },
  "application/vnd.ms-xpsdocument": {
    source: "iana",
    compressible: false,
    extensions: [
      "xps"
    ]
  },
  "application/vnd.msa-disk-image": {
    source: "iana"
  },
  "application/vnd.mseq": {
    source: "iana",
    extensions: [
      "mseq"
    ]
  },
  "application/vnd.msign": {
    source: "iana"
  },
  "application/vnd.multiad.creator": {
    source: "iana"
  },
  "application/vnd.multiad.creator.cif": {
    source: "iana"
  },
  "application/vnd.music-niff": {
    source: "iana"
  },
  "application/vnd.musician": {
    source: "iana",
    extensions: [
      "mus"
    ]
  },
  "application/vnd.muvee.style": {
    source: "iana",
    extensions: [
      "msty"
    ]
  },
  "application/vnd.mynfc": {
    source: "iana",
    extensions: [
      "taglet"
    ]
  },
  "application/vnd.nacamar.ybrid+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.ncd.control": {
    source: "iana"
  },
  "application/vnd.ncd.reference": {
    source: "iana"
  },
  "application/vnd.nearst.inv+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nebumind.line": {
    source: "iana"
  },
  "application/vnd.nervana": {
    source: "iana"
  },
  "application/vnd.netfpx": {
    source: "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    source: "iana",
    extensions: [
      "nlu"
    ]
  },
  "application/vnd.nimn": {
    source: "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    source: "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    source: "iana"
  },
  "application/vnd.nitf": {
    source: "iana",
    extensions: [
      "ntf",
      "nitf"
    ]
  },
  "application/vnd.noblenet-directory": {
    source: "iana",
    extensions: [
      "nnd"
    ]
  },
  "application/vnd.noblenet-sealer": {
    source: "iana",
    extensions: [
      "nns"
    ]
  },
  "application/vnd.noblenet-web": {
    source: "iana",
    extensions: [
      "nnw"
    ]
  },
  "application/vnd.nokia.catalogs": {
    source: "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.conml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.iptv.config+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.isds-radio-presets": {
    source: "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "ac"
    ]
  },
  "application/vnd.nokia.n-gage.data": {
    source: "iana",
    extensions: [
      "ngdat"
    ]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    source: "iana",
    extensions: [
      "n-gage"
    ]
  },
  "application/vnd.nokia.ncd": {
    source: "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    source: "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.nokia.radio-preset": {
    source: "iana",
    extensions: [
      "rpst"
    ]
  },
  "application/vnd.nokia.radio-presets": {
    source: "iana",
    extensions: [
      "rpss"
    ]
  },
  "application/vnd.novadigm.edm": {
    source: "iana",
    extensions: [
      "edm"
    ]
  },
  "application/vnd.novadigm.edx": {
    source: "iana",
    extensions: [
      "edx"
    ]
  },
  "application/vnd.novadigm.ext": {
    source: "iana",
    extensions: [
      "ext"
    ]
  },
  "application/vnd.ntt-local.content-share": {
    source: "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    source: "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    source: "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    source: "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    source: "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    source: "iana",
    extensions: [
      "odc"
    ]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    source: "iana",
    extensions: [
      "otc"
    ]
  },
  "application/vnd.oasis.opendocument.database": {
    source: "iana",
    extensions: [
      "odb"
    ]
  },
  "application/vnd.oasis.opendocument.formula": {
    source: "iana",
    extensions: [
      "odf"
    ]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    source: "iana",
    extensions: [
      "odft"
    ]
  },
  "application/vnd.oasis.opendocument.graphics": {
    source: "iana",
    compressible: false,
    extensions: [
      "odg"
    ]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    source: "iana",
    extensions: [
      "otg"
    ]
  },
  "application/vnd.oasis.opendocument.image": {
    source: "iana",
    extensions: [
      "odi"
    ]
  },
  "application/vnd.oasis.opendocument.image-template": {
    source: "iana",
    extensions: [
      "oti"
    ]
  },
  "application/vnd.oasis.opendocument.presentation": {
    source: "iana",
    compressible: false,
    extensions: [
      "odp"
    ]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    source: "iana",
    extensions: [
      "otp"
    ]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    source: "iana",
    compressible: false,
    extensions: [
      "ods"
    ]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    source: "iana",
    extensions: [
      "ots"
    ]
  },
  "application/vnd.oasis.opendocument.text": {
    source: "iana",
    compressible: false,
    extensions: [
      "odt"
    ]
  },
  "application/vnd.oasis.opendocument.text-master": {
    source: "iana",
    extensions: [
      "odm"
    ]
  },
  "application/vnd.oasis.opendocument.text-template": {
    source: "iana",
    extensions: [
      "ott"
    ]
  },
  "application/vnd.oasis.opendocument.text-web": {
    source: "iana",
    extensions: [
      "oth"
    ]
  },
  "application/vnd.obn": {
    source: "iana"
  },
  "application/vnd.ocf+cbor": {
    source: "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oftn.l10n+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    source: "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.pae.gem": {
    source: "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.spdlist+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.ueprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oipf.userprofile+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.olpc-sugar": {
    source: "iana",
    extensions: [
      "xo"
    ]
  },
  "application/vnd.oma-scws-config": {
    source: "iana"
  },
  "application/vnd.oma-scws-http-request": {
    source: "iana"
  },
  "application/vnd.oma-scws-http-response": {
    source: "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.imd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.ltkm": {
    source: "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    source: "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    source: "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.sgdu": {
    source: "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    source: "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.bcast.stkm": {
    source: "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-pcc+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.dcd": {
    source: "iana"
  },
  "application/vnd.oma.dcdc": {
    source: "iana"
  },
  "application/vnd.oma.dd2+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dd2"
    ]
  },
  "application/vnd.oma.drm.risd+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.group-usage-list+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.lwm2m+cbor": {
    source: "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.lwm2m+tlv": {
    source: "iana"
  },
  "application/vnd.oma.pal+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.final-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.groups+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.push": {
    source: "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oma.xcap-directory+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.omads-email+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omads-file+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omads-folder+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.omaloc-supl-init": {
    source: "iana"
  },
  "application/vnd.onepager": {
    source: "iana"
  },
  "application/vnd.onepagertamp": {
    source: "iana"
  },
  "application/vnd.onepagertamx": {
    source: "iana"
  },
  "application/vnd.onepagertat": {
    source: "iana"
  },
  "application/vnd.onepagertatp": {
    source: "iana"
  },
  "application/vnd.onepagertatx": {
    source: "iana"
  },
  "application/vnd.openblox.game+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "obgx"
    ]
  },
  "application/vnd.openblox.game-binary": {
    source: "iana"
  },
  "application/vnd.openeye.oeb": {
    source: "iana"
  },
  "application/vnd.openofficeorg.extension": {
    source: "apache",
    extensions: [
      "oxt"
    ]
  },
  "application/vnd.openstreetmap.data+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "osm"
    ]
  },
  "application/vnd.opentimestamps.ots": {
    source: "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    source: "iana",
    compressible: false,
    extensions: [
      "pptx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    source: "iana",
    extensions: [
      "sldx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    source: "iana",
    extensions: [
      "ppsx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    source: "iana",
    extensions: [
      "potx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    source: "iana",
    compressible: false,
    extensions: [
      "xlsx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    source: "iana",
    extensions: [
      "xltx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    source: "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    source: "iana",
    compressible: false,
    extensions: [
      "docx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    source: "iana",
    extensions: [
      "dotx"
    ]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oracle.resource+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.orange.indata": {
    source: "iana"
  },
  "application/vnd.osa.netdeploy": {
    source: "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    source: "iana",
    extensions: [
      "mgp"
    ]
  },
  "application/vnd.osgi.bundle": {
    source: "iana"
  },
  "application/vnd.osgi.dp": {
    source: "iana",
    extensions: [
      "dp"
    ]
  },
  "application/vnd.osgi.subsystem": {
    source: "iana",
    extensions: [
      "esa"
    ]
  },
  "application/vnd.otps.ct-kip+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.oxli.countgraph": {
    source: "iana"
  },
  "application/vnd.pagerduty+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.palm": {
    source: "iana",
    extensions: [
      "pdb",
      "pqa",
      "oprc"
    ]
  },
  "application/vnd.panoply": {
    source: "iana"
  },
  "application/vnd.paos.xml": {
    source: "iana"
  },
  "application/vnd.patentdive": {
    source: "iana"
  },
  "application/vnd.patientecommsdoc": {
    source: "iana"
  },
  "application/vnd.pawaafile": {
    source: "iana",
    extensions: [
      "paw"
    ]
  },
  "application/vnd.pcos": {
    source: "iana"
  },
  "application/vnd.pg.format": {
    source: "iana",
    extensions: [
      "str"
    ]
  },
  "application/vnd.pg.osasli": {
    source: "iana",
    extensions: [
      "ei6"
    ]
  },
  "application/vnd.piaccess.application-licence": {
    source: "iana"
  },
  "application/vnd.picsel": {
    source: "iana",
    extensions: [
      "efif"
    ]
  },
  "application/vnd.pmi.widget": {
    source: "iana",
    extensions: [
      "wg"
    ]
  },
  "application/vnd.poc.group-advertisement+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.pocketlearn": {
    source: "iana",
    extensions: [
      "plf"
    ]
  },
  "application/vnd.powerbuilder6": {
    source: "iana",
    extensions: [
      "pbd"
    ]
  },
  "application/vnd.powerbuilder6-s": {
    source: "iana"
  },
  "application/vnd.powerbuilder7": {
    source: "iana"
  },
  "application/vnd.powerbuilder7-s": {
    source: "iana"
  },
  "application/vnd.powerbuilder75": {
    source: "iana"
  },
  "application/vnd.powerbuilder75-s": {
    source: "iana"
  },
  "application/vnd.preminet": {
    source: "iana"
  },
  "application/vnd.previewsystems.box": {
    source: "iana",
    extensions: [
      "box"
    ]
  },
  "application/vnd.proteus.magazine": {
    source: "iana",
    extensions: [
      "mgz"
    ]
  },
  "application/vnd.psfs": {
    source: "iana"
  },
  "application/vnd.publishare-delta-tree": {
    source: "iana",
    extensions: [
      "qps"
    ]
  },
  "application/vnd.pvi.ptid1": {
    source: "iana",
    extensions: [
      "ptid"
    ]
  },
  "application/vnd.pwg-multiplexed": {
    source: "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.qualcomm.brew-app-res": {
    source: "iana"
  },
  "application/vnd.quarantainenet": {
    source: "iana"
  },
  "application/vnd.quark.quarkxpress": {
    source: "iana",
    extensions: [
      "qxd",
      "qxt",
      "qwd",
      "qwt",
      "qxl",
      "qxb"
    ]
  },
  "application/vnd.quobject-quoxdocument": {
    source: "iana"
  },
  "application/vnd.radisys.moml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-conf+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.rainstor.data": {
    source: "iana"
  },
  "application/vnd.rapid": {
    source: "iana"
  },
  "application/vnd.rar": {
    source: "iana",
    extensions: [
      "rar"
    ]
  },
  "application/vnd.realvnc.bed": {
    source: "iana",
    extensions: [
      "bed"
    ]
  },
  "application/vnd.recordare.musicxml": {
    source: "iana",
    extensions: [
      "mxl"
    ]
  },
  "application/vnd.recordare.musicxml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "musicxml"
    ]
  },
  "application/vnd.renlearn.rlprint": {
    source: "iana"
  },
  "application/vnd.resilient.logic": {
    source: "iana"
  },
  "application/vnd.restful+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.rig.cryptonote": {
    source: "iana",
    extensions: [
      "cryptonote"
    ]
  },
  "application/vnd.rim.cod": {
    source: "apache",
    extensions: [
      "cod"
    ]
  },
  "application/vnd.rn-realmedia": {
    source: "apache",
    extensions: [
      "rm"
    ]
  },
  "application/vnd.rn-realmedia-vbr": {
    source: "apache",
    extensions: [
      "rmvb"
    ]
  },
  "application/vnd.route66.link66+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "link66"
    ]
  },
  "application/vnd.rs-274x": {
    source: "iana"
  },
  "application/vnd.ruckus.download": {
    source: "iana"
  },
  "application/vnd.s3sms": {
    source: "iana"
  },
  "application/vnd.sailingtracker.track": {
    source: "iana",
    extensions: [
      "st"
    ]
  },
  "application/vnd.sar": {
    source: "iana"
  },
  "application/vnd.sbm.cid": {
    source: "iana"
  },
  "application/vnd.sbm.mid2": {
    source: "iana"
  },
  "application/vnd.scribus": {
    source: "iana"
  },
  "application/vnd.sealed.3df": {
    source: "iana"
  },
  "application/vnd.sealed.csf": {
    source: "iana"
  },
  "application/vnd.sealed.doc": {
    source: "iana"
  },
  "application/vnd.sealed.eml": {
    source: "iana"
  },
  "application/vnd.sealed.mht": {
    source: "iana"
  },
  "application/vnd.sealed.net": {
    source: "iana"
  },
  "application/vnd.sealed.ppt": {
    source: "iana"
  },
  "application/vnd.sealed.tiff": {
    source: "iana"
  },
  "application/vnd.sealed.xls": {
    source: "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    source: "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    source: "iana"
  },
  "application/vnd.seemail": {
    source: "iana",
    extensions: [
      "see"
    ]
  },
  "application/vnd.seis+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.sema": {
    source: "iana",
    extensions: [
      "sema"
    ]
  },
  "application/vnd.semd": {
    source: "iana",
    extensions: [
      "semd"
    ]
  },
  "application/vnd.semf": {
    source: "iana",
    extensions: [
      "semf"
    ]
  },
  "application/vnd.shade-save-file": {
    source: "iana"
  },
  "application/vnd.shana.informed.formdata": {
    source: "iana",
    extensions: [
      "ifm"
    ]
  },
  "application/vnd.shana.informed.formtemplate": {
    source: "iana",
    extensions: [
      "itp"
    ]
  },
  "application/vnd.shana.informed.interchange": {
    source: "iana",
    extensions: [
      "iif"
    ]
  },
  "application/vnd.shana.informed.package": {
    source: "iana",
    extensions: [
      "ipk"
    ]
  },
  "application/vnd.shootproof+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.shopkick+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.shp": {
    source: "iana"
  },
  "application/vnd.shx": {
    source: "iana"
  },
  "application/vnd.sigrok.session": {
    source: "iana"
  },
  "application/vnd.simtech-mindmapper": {
    source: "iana",
    extensions: [
      "twd",
      "twds"
    ]
  },
  "application/vnd.siren+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.smaf": {
    source: "iana",
    extensions: [
      "mmf"
    ]
  },
  "application/vnd.smart.notebook": {
    source: "iana"
  },
  "application/vnd.smart.teacher": {
    source: "iana",
    extensions: [
      "teacher"
    ]
  },
  "application/vnd.snesdev-page-table": {
    source: "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "fo"
    ]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    source: "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "sdkm",
      "sdkd"
    ]
  },
  "application/vnd.spotfire.dxp": {
    source: "iana",
    extensions: [
      "dxp"
    ]
  },
  "application/vnd.spotfire.sfs": {
    source: "iana",
    extensions: [
      "sfs"
    ]
  },
  "application/vnd.sqlite3": {
    source: "iana"
  },
  "application/vnd.sss-cod": {
    source: "iana"
  },
  "application/vnd.sss-dtf": {
    source: "iana"
  },
  "application/vnd.sss-ntf": {
    source: "iana"
  },
  "application/vnd.stardivision.calc": {
    source: "apache",
    extensions: [
      "sdc"
    ]
  },
  "application/vnd.stardivision.draw": {
    source: "apache",
    extensions: [
      "sda"
    ]
  },
  "application/vnd.stardivision.impress": {
    source: "apache",
    extensions: [
      "sdd"
    ]
  },
  "application/vnd.stardivision.math": {
    source: "apache",
    extensions: [
      "smf"
    ]
  },
  "application/vnd.stardivision.writer": {
    source: "apache",
    extensions: [
      "sdw",
      "vor"
    ]
  },
  "application/vnd.stardivision.writer-global": {
    source: "apache",
    extensions: [
      "sgl"
    ]
  },
  "application/vnd.stepmania.package": {
    source: "iana",
    extensions: [
      "smzip"
    ]
  },
  "application/vnd.stepmania.stepchart": {
    source: "iana",
    extensions: [
      "sm"
    ]
  },
  "application/vnd.street-stream": {
    source: "iana"
  },
  "application/vnd.sun.wadl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wadl"
    ]
  },
  "application/vnd.sun.xml.calc": {
    source: "apache",
    extensions: [
      "sxc"
    ]
  },
  "application/vnd.sun.xml.calc.template": {
    source: "apache",
    extensions: [
      "stc"
    ]
  },
  "application/vnd.sun.xml.draw": {
    source: "apache",
    extensions: [
      "sxd"
    ]
  },
  "application/vnd.sun.xml.draw.template": {
    source: "apache",
    extensions: [
      "std"
    ]
  },
  "application/vnd.sun.xml.impress": {
    source: "apache",
    extensions: [
      "sxi"
    ]
  },
  "application/vnd.sun.xml.impress.template": {
    source: "apache",
    extensions: [
      "sti"
    ]
  },
  "application/vnd.sun.xml.math": {
    source: "apache",
    extensions: [
      "sxm"
    ]
  },
  "application/vnd.sun.xml.writer": {
    source: "apache",
    extensions: [
      "sxw"
    ]
  },
  "application/vnd.sun.xml.writer.global": {
    source: "apache",
    extensions: [
      "sxg"
    ]
  },
  "application/vnd.sun.xml.writer.template": {
    source: "apache",
    extensions: [
      "stw"
    ]
  },
  "application/vnd.sus-calendar": {
    source: "iana",
    extensions: [
      "sus",
      "susp"
    ]
  },
  "application/vnd.svd": {
    source: "iana",
    extensions: [
      "svd"
    ]
  },
  "application/vnd.swiftview-ics": {
    source: "iana"
  },
  "application/vnd.sycle+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.syft+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.symbian.install": {
    source: "apache",
    extensions: [
      "sis",
      "sisx"
    ]
  },
  "application/vnd.syncml+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "xsm"
    ]
  },
  "application/vnd.syncml.dm+wbxml": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "bdm"
    ]
  },
  "application/vnd.syncml.dm+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "xdm"
    ]
  },
  "application/vnd.syncml.dm.notification": {
    source: "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    source: "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "ddf"
    ]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    source: "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    source: "iana",
    charset: "UTF-8",
    compressible: true
  },
  "application/vnd.syncml.ds.notification": {
    source: "iana"
  },
  "application/vnd.tableschema+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tao.intent-module-archive": {
    source: "iana",
    extensions: [
      "tao"
    ]
  },
  "application/vnd.tcpdump.pcap": {
    source: "iana",
    extensions: [
      "pcap",
      "cap",
      "dmp"
    ]
  },
  "application/vnd.think-cell.ppttc+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.tml": {
    source: "iana"
  },
  "application/vnd.tmobile-livetv": {
    source: "iana",
    extensions: [
      "tmo"
    ]
  },
  "application/vnd.tri.onesource": {
    source: "iana"
  },
  "application/vnd.trid.tpt": {
    source: "iana",
    extensions: [
      "tpt"
    ]
  },
  "application/vnd.triscape.mxs": {
    source: "iana",
    extensions: [
      "mxs"
    ]
  },
  "application/vnd.trueapp": {
    source: "iana",
    extensions: [
      "tra"
    ]
  },
  "application/vnd.truedoc": {
    source: "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    source: "iana"
  },
  "application/vnd.ufdl": {
    source: "iana",
    extensions: [
      "ufd",
      "ufdl"
    ]
  },
  "application/vnd.uiq.theme": {
    source: "iana",
    extensions: [
      "utz"
    ]
  },
  "application/vnd.umajin": {
    source: "iana",
    extensions: [
      "umj"
    ]
  },
  "application/vnd.unity": {
    source: "iana",
    extensions: [
      "unityweb"
    ]
  },
  "application/vnd.uoml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "uoml"
    ]
  },
  "application/vnd.uplanet.alert": {
    source: "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    source: "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.cacheop": {
    source: "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.channel": {
    source: "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.list": {
    source: "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.listcmd": {
    source: "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    source: "iana"
  },
  "application/vnd.uplanet.signal": {
    source: "iana"
  },
  "application/vnd.uri-map": {
    source: "iana"
  },
  "application/vnd.valve.source.material": {
    source: "iana"
  },
  "application/vnd.vcx": {
    source: "iana",
    extensions: [
      "vcx"
    ]
  },
  "application/vnd.vd-study": {
    source: "iana"
  },
  "application/vnd.vectorworks": {
    source: "iana"
  },
  "application/vnd.vel+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.verimatrix.vcas": {
    source: "iana"
  },
  "application/vnd.veritone.aion+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.veryant.thin": {
    source: "iana"
  },
  "application/vnd.ves.encrypted": {
    source: "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    source: "iana"
  },
  "application/vnd.visio": {
    source: "iana",
    extensions: [
      "vsd",
      "vst",
      "vss",
      "vsw"
    ]
  },
  "application/vnd.visionary": {
    source: "iana",
    extensions: [
      "vis"
    ]
  },
  "application/vnd.vividence.scriptfile": {
    source: "iana"
  },
  "application/vnd.vsf": {
    source: "iana",
    extensions: [
      "vsf"
    ]
  },
  "application/vnd.wap.sic": {
    source: "iana"
  },
  "application/vnd.wap.slc": {
    source: "iana"
  },
  "application/vnd.wap.wbxml": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "wbxml"
    ]
  },
  "application/vnd.wap.wmlc": {
    source: "iana",
    extensions: [
      "wmlc"
    ]
  },
  "application/vnd.wap.wmlscriptc": {
    source: "iana",
    extensions: [
      "wmlsc"
    ]
  },
  "application/vnd.webturbo": {
    source: "iana",
    extensions: [
      "wtb"
    ]
  },
  "application/vnd.wfa.dpp": {
    source: "iana"
  },
  "application/vnd.wfa.p2p": {
    source: "iana"
  },
  "application/vnd.wfa.wsc": {
    source: "iana"
  },
  "application/vnd.windows.devicepairing": {
    source: "iana"
  },
  "application/vnd.wmc": {
    source: "iana"
  },
  "application/vnd.wmf.bootstrap": {
    source: "iana"
  },
  "application/vnd.wolfram.mathematica": {
    source: "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    source: "iana"
  },
  "application/vnd.wolfram.player": {
    source: "iana",
    extensions: [
      "nbp"
    ]
  },
  "application/vnd.wordperfect": {
    source: "iana",
    extensions: [
      "wpd"
    ]
  },
  "application/vnd.wqd": {
    source: "iana",
    extensions: [
      "wqd"
    ]
  },
  "application/vnd.wrq-hp3000-labelled": {
    source: "iana"
  },
  "application/vnd.wt.stf": {
    source: "iana",
    extensions: [
      "stf"
    ]
  },
  "application/vnd.wv.csp+wbxml": {
    source: "iana"
  },
  "application/vnd.wv.csp+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.wv.ssp+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xacml+json": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xara": {
    source: "iana",
    extensions: [
      "xar"
    ]
  },
  "application/vnd.xfdl": {
    source: "iana",
    extensions: [
      "xfdl"
    ]
  },
  "application/vnd.xfdl.webform": {
    source: "iana"
  },
  "application/vnd.xmi+xml": {
    source: "iana",
    compressible: true
  },
  "application/vnd.xmpie.cpkg": {
    source: "iana"
  },
  "application/vnd.xmpie.dpkg": {
    source: "iana"
  },
  "application/vnd.xmpie.plan": {
    source: "iana"
  },
  "application/vnd.xmpie.ppkg": {
    source: "iana"
  },
  "application/vnd.xmpie.xlim": {
    source: "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    source: "iana",
    extensions: [
      "hvd"
    ]
  },
  "application/vnd.yamaha.hv-script": {
    source: "iana",
    extensions: [
      "hvs"
    ]
  },
  "application/vnd.yamaha.hv-voice": {
    source: "iana",
    extensions: [
      "hvp"
    ]
  },
  "application/vnd.yamaha.openscoreformat": {
    source: "iana",
    extensions: [
      "osf"
    ]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "osfpvg"
    ]
  },
  "application/vnd.yamaha.remote-setup": {
    source: "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    source: "iana",
    extensions: [
      "saf"
    ]
  },
  "application/vnd.yamaha.smaf-phrase": {
    source: "iana",
    extensions: [
      "spf"
    ]
  },
  "application/vnd.yamaha.through-ngn": {
    source: "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    source: "iana"
  },
  "application/vnd.yaoweme": {
    source: "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    source: "iana",
    extensions: [
      "cmp"
    ]
  },
  "application/vnd.youtube.yt": {
    source: "iana"
  },
  "application/vnd.zul": {
    source: "iana",
    extensions: [
      "zir",
      "zirz"
    ]
  },
  "application/vnd.zzazz.deck+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "zaz"
    ]
  },
  "application/voicexml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "vxml"
    ]
  },
  "application/voucher-cms+json": {
    source: "iana",
    compressible: true
  },
  "application/vq-rtcpxr": {
    source: "iana"
  },
  "application/wasm": {
    source: "iana",
    compressible: true,
    extensions: [
      "wasm"
    ]
  },
  "application/watcherinfo+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wif"
    ]
  },
  "application/webpush-options+json": {
    source: "iana",
    compressible: true
  },
  "application/whoispp-query": {
    source: "iana"
  },
  "application/whoispp-response": {
    source: "iana"
  },
  "application/widget": {
    source: "iana",
    extensions: [
      "wgt"
    ]
  },
  "application/winhlp": {
    source: "apache",
    extensions: [
      "hlp"
    ]
  },
  "application/wita": {
    source: "iana"
  },
  "application/wordperfect5.1": {
    source: "iana"
  },
  "application/wsdl+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wsdl"
    ]
  },
  "application/wspolicy+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "wspolicy"
    ]
  },
  "application/x-7z-compressed": {
    source: "apache",
    compressible: false,
    extensions: [
      "7z"
    ]
  },
  "application/x-abiword": {
    source: "apache",
    extensions: [
      "abw"
    ]
  },
  "application/x-ace-compressed": {
    source: "apache",
    extensions: [
      "ace"
    ]
  },
  "application/x-amf": {
    source: "apache"
  },
  "application/x-apple-diskimage": {
    source: "apache",
    extensions: [
      "dmg"
    ]
  },
  "application/x-arj": {
    compressible: false,
    extensions: [
      "arj"
    ]
  },
  "application/x-authorware-bin": {
    source: "apache",
    extensions: [
      "aab",
      "x32",
      "u32",
      "vox"
    ]
  },
  "application/x-authorware-map": {
    source: "apache",
    extensions: [
      "aam"
    ]
  },
  "application/x-authorware-seg": {
    source: "apache",
    extensions: [
      "aas"
    ]
  },
  "application/x-bcpio": {
    source: "apache",
    extensions: [
      "bcpio"
    ]
  },
  "application/x-bdoc": {
    compressible: false,
    extensions: [
      "bdoc"
    ]
  },
  "application/x-bittorrent": {
    source: "apache",
    extensions: [
      "torrent"
    ]
  },
  "application/x-blorb": {
    source: "apache",
    extensions: [
      "blb",
      "blorb"
    ]
  },
  "application/x-bzip": {
    source: "apache",
    compressible: false,
    extensions: [
      "bz"
    ]
  },
  "application/x-bzip2": {
    source: "apache",
    compressible: false,
    extensions: [
      "bz2",
      "boz"
    ]
  },
  "application/x-cbr": {
    source: "apache",
    extensions: [
      "cbr",
      "cba",
      "cbt",
      "cbz",
      "cb7"
    ]
  },
  "application/x-cdlink": {
    source: "apache",
    extensions: [
      "vcd"
    ]
  },
  "application/x-cfs-compressed": {
    source: "apache",
    extensions: [
      "cfs"
    ]
  },
  "application/x-chat": {
    source: "apache",
    extensions: [
      "chat"
    ]
  },
  "application/x-chess-pgn": {
    source: "apache",
    extensions: [
      "pgn"
    ]
  },
  "application/x-chrome-extension": {
    extensions: [
      "crx"
    ]
  },
  "application/x-cocoa": {
    source: "nginx",
    extensions: [
      "cco"
    ]
  },
  "application/x-compress": {
    source: "apache"
  },
  "application/x-conference": {
    source: "apache",
    extensions: [
      "nsc"
    ]
  },
  "application/x-cpio": {
    source: "apache",
    extensions: [
      "cpio"
    ]
  },
  "application/x-csh": {
    source: "apache",
    extensions: [
      "csh"
    ]
  },
  "application/x-deb": {
    compressible: false
  },
  "application/x-debian-package": {
    source: "apache",
    extensions: [
      "deb",
      "udeb"
    ]
  },
  "application/x-dgc-compressed": {
    source: "apache",
    extensions: [
      "dgc"
    ]
  },
  "application/x-director": {
    source: "apache",
    extensions: [
      "dir",
      "dcr",
      "dxr",
      "cst",
      "cct",
      "cxt",
      "w3d",
      "fgd",
      "swa"
    ]
  },
  "application/x-doom": {
    source: "apache",
    extensions: [
      "wad"
    ]
  },
  "application/x-dtbncx+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "ncx"
    ]
  },
  "application/x-dtbook+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "dtb"
    ]
  },
  "application/x-dtbresource+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "res"
    ]
  },
  "application/x-dvi": {
    source: "apache",
    compressible: false,
    extensions: [
      "dvi"
    ]
  },
  "application/x-envoy": {
    source: "apache",
    extensions: [
      "evy"
    ]
  },
  "application/x-eva": {
    source: "apache",
    extensions: [
      "eva"
    ]
  },
  "application/x-font-bdf": {
    source: "apache",
    extensions: [
      "bdf"
    ]
  },
  "application/x-font-dos": {
    source: "apache"
  },
  "application/x-font-framemaker": {
    source: "apache"
  },
  "application/x-font-ghostscript": {
    source: "apache",
    extensions: [
      "gsf"
    ]
  },
  "application/x-font-libgrx": {
    source: "apache"
  },
  "application/x-font-linux-psf": {
    source: "apache",
    extensions: [
      "psf"
    ]
  },
  "application/x-font-pcf": {
    source: "apache",
    extensions: [
      "pcf"
    ]
  },
  "application/x-font-snf": {
    source: "apache",
    extensions: [
      "snf"
    ]
  },
  "application/x-font-speedo": {
    source: "apache"
  },
  "application/x-font-sunos-news": {
    source: "apache"
  },
  "application/x-font-type1": {
    source: "apache",
    extensions: [
      "pfa",
      "pfb",
      "pfm",
      "afm"
    ]
  },
  "application/x-font-vfont": {
    source: "apache"
  },
  "application/x-freearc": {
    source: "apache",
    extensions: [
      "arc"
    ]
  },
  "application/x-futuresplash": {
    source: "apache",
    extensions: [
      "spl"
    ]
  },
  "application/x-gca-compressed": {
    source: "apache",
    extensions: [
      "gca"
    ]
  },
  "application/x-glulx": {
    source: "apache",
    extensions: [
      "ulx"
    ]
  },
  "application/x-gnumeric": {
    source: "apache",
    extensions: [
      "gnumeric"
    ]
  },
  "application/x-gramps-xml": {
    source: "apache",
    extensions: [
      "gramps"
    ]
  },
  "application/x-gtar": {
    source: "apache",
    extensions: [
      "gtar"
    ]
  },
  "application/x-gzip": {
    source: "apache"
  },
  "application/x-hdf": {
    source: "apache",
    extensions: [
      "hdf"
    ]
  },
  "application/x-httpd-php": {
    compressible: true,
    extensions: [
      "php"
    ]
  },
  "application/x-install-instructions": {
    source: "apache",
    extensions: [
      "install"
    ]
  },
  "application/x-iso9660-image": {
    source: "apache",
    extensions: [
      "iso"
    ]
  },
  "application/x-iwork-keynote-sffkey": {
    extensions: [
      "key"
    ]
  },
  "application/x-iwork-numbers-sffnumbers": {
    extensions: [
      "numbers"
    ]
  },
  "application/x-iwork-pages-sffpages": {
    extensions: [
      "pages"
    ]
  },
  "application/x-java-archive-diff": {
    source: "nginx",
    extensions: [
      "jardiff"
    ]
  },
  "application/x-java-jnlp-file": {
    source: "apache",
    compressible: false,
    extensions: [
      "jnlp"
    ]
  },
  "application/x-javascript": {
    compressible: true
  },
  "application/x-keepass2": {
    extensions: [
      "kdbx"
    ]
  },
  "application/x-latex": {
    source: "apache",
    compressible: false,
    extensions: [
      "latex"
    ]
  },
  "application/x-lua-bytecode": {
    extensions: [
      "luac"
    ]
  },
  "application/x-lzh-compressed": {
    source: "apache",
    extensions: [
      "lzh",
      "lha"
    ]
  },
  "application/x-makeself": {
    source: "nginx",
    extensions: [
      "run"
    ]
  },
  "application/x-mie": {
    source: "apache",
    extensions: [
      "mie"
    ]
  },
  "application/x-mobipocket-ebook": {
    source: "apache",
    extensions: [
      "prc",
      "mobi"
    ]
  },
  "application/x-mpegurl": {
    compressible: false
  },
  "application/x-ms-application": {
    source: "apache",
    extensions: [
      "application"
    ]
  },
  "application/x-ms-shortcut": {
    source: "apache",
    extensions: [
      "lnk"
    ]
  },
  "application/x-ms-wmd": {
    source: "apache",
    extensions: [
      "wmd"
    ]
  },
  "application/x-ms-wmz": {
    source: "apache",
    extensions: [
      "wmz"
    ]
  },
  "application/x-ms-xbap": {
    source: "apache",
    extensions: [
      "xbap"
    ]
  },
  "application/x-msaccess": {
    source: "apache",
    extensions: [
      "mdb"
    ]
  },
  "application/x-msbinder": {
    source: "apache",
    extensions: [
      "obd"
    ]
  },
  "application/x-mscardfile": {
    source: "apache",
    extensions: [
      "crd"
    ]
  },
  "application/x-msclip": {
    source: "apache",
    extensions: [
      "clp"
    ]
  },
  "application/x-msdos-program": {
    extensions: [
      "exe"
    ]
  },
  "application/x-msdownload": {
    source: "apache",
    extensions: [
      "exe",
      "dll",
      "com",
      "bat",
      "msi"
    ]
  },
  "application/x-msmediaview": {
    source: "apache",
    extensions: [
      "mvb",
      "m13",
      "m14"
    ]
  },
  "application/x-msmetafile": {
    source: "apache",
    extensions: [
      "wmf",
      "wmz",
      "emf",
      "emz"
    ]
  },
  "application/x-msmoney": {
    source: "apache",
    extensions: [
      "mny"
    ]
  },
  "application/x-mspublisher": {
    source: "apache",
    extensions: [
      "pub"
    ]
  },
  "application/x-msschedule": {
    source: "apache",
    extensions: [
      "scd"
    ]
  },
  "application/x-msterminal": {
    source: "apache",
    extensions: [
      "trm"
    ]
  },
  "application/x-mswrite": {
    source: "apache",
    extensions: [
      "wri"
    ]
  },
  "application/x-netcdf": {
    source: "apache",
    extensions: [
      "nc",
      "cdf"
    ]
  },
  "application/x-ns-proxy-autoconfig": {
    compressible: true,
    extensions: [
      "pac"
    ]
  },
  "application/x-nzb": {
    source: "apache",
    extensions: [
      "nzb"
    ]
  },
  "application/x-perl": {
    source: "nginx",
    extensions: [
      "pl",
      "pm"
    ]
  },
  "application/x-pilot": {
    source: "nginx",
    extensions: [
      "prc",
      "pdb"
    ]
  },
  "application/x-pkcs12": {
    source: "apache",
    compressible: false,
    extensions: [
      "p12",
      "pfx"
    ]
  },
  "application/x-pkcs7-certificates": {
    source: "apache",
    extensions: [
      "p7b",
      "spc"
    ]
  },
  "application/x-pkcs7-certreqresp": {
    source: "apache",
    extensions: [
      "p7r"
    ]
  },
  "application/x-pki-message": {
    source: "iana"
  },
  "application/x-rar-compressed": {
    source: "apache",
    compressible: false,
    extensions: [
      "rar"
    ]
  },
  "application/x-redhat-package-manager": {
    source: "nginx",
    extensions: [
      "rpm"
    ]
  },
  "application/x-research-info-systems": {
    source: "apache",
    extensions: [
      "ris"
    ]
  },
  "application/x-sea": {
    source: "nginx",
    extensions: [
      "sea"
    ]
  },
  "application/x-sh": {
    source: "apache",
    compressible: true,
    extensions: [
      "sh"
    ]
  },
  "application/x-shar": {
    source: "apache",
    extensions: [
      "shar"
    ]
  },
  "application/x-shockwave-flash": {
    source: "apache",
    compressible: false,
    extensions: [
      "swf"
    ]
  },
  "application/x-silverlight-app": {
    source: "apache",
    extensions: [
      "xap"
    ]
  },
  "application/x-sql": {
    source: "apache",
    extensions: [
      "sql"
    ]
  },
  "application/x-stuffit": {
    source: "apache",
    compressible: false,
    extensions: [
      "sit"
    ]
  },
  "application/x-stuffitx": {
    source: "apache",
    extensions: [
      "sitx"
    ]
  },
  "application/x-subrip": {
    source: "apache",
    extensions: [
      "srt"
    ]
  },
  "application/x-sv4cpio": {
    source: "apache",
    extensions: [
      "sv4cpio"
    ]
  },
  "application/x-sv4crc": {
    source: "apache",
    extensions: [
      "sv4crc"
    ]
  },
  "application/x-t3vm-image": {
    source: "apache",
    extensions: [
      "t3"
    ]
  },
  "application/x-tads": {
    source: "apache",
    extensions: [
      "gam"
    ]
  },
  "application/x-tar": {
    source: "apache",
    compressible: true,
    extensions: [
      "tar"
    ]
  },
  "application/x-tcl": {
    source: "apache",
    extensions: [
      "tcl",
      "tk"
    ]
  },
  "application/x-tex": {
    source: "apache",
    extensions: [
      "tex"
    ]
  },
  "application/x-tex-tfm": {
    source: "apache",
    extensions: [
      "tfm"
    ]
  },
  "application/x-texinfo": {
    source: "apache",
    extensions: [
      "texinfo",
      "texi"
    ]
  },
  "application/x-tgif": {
    source: "apache",
    extensions: [
      "obj"
    ]
  },
  "application/x-ustar": {
    source: "apache",
    extensions: [
      "ustar"
    ]
  },
  "application/x-virtualbox-hdd": {
    compressible: true,
    extensions: [
      "hdd"
    ]
  },
  "application/x-virtualbox-ova": {
    compressible: true,
    extensions: [
      "ova"
    ]
  },
  "application/x-virtualbox-ovf": {
    compressible: true,
    extensions: [
      "ovf"
    ]
  },
  "application/x-virtualbox-vbox": {
    compressible: true,
    extensions: [
      "vbox"
    ]
  },
  "application/x-virtualbox-vbox-extpack": {
    compressible: false,
    extensions: [
      "vbox-extpack"
    ]
  },
  "application/x-virtualbox-vdi": {
    compressible: true,
    extensions: [
      "vdi"
    ]
  },
  "application/x-virtualbox-vhd": {
    compressible: true,
    extensions: [
      "vhd"
    ]
  },
  "application/x-virtualbox-vmdk": {
    compressible: true,
    extensions: [
      "vmdk"
    ]
  },
  "application/x-wais-source": {
    source: "apache",
    extensions: [
      "src"
    ]
  },
  "application/x-web-app-manifest+json": {
    compressible: true,
    extensions: [
      "webapp"
    ]
  },
  "application/x-www-form-urlencoded": {
    source: "iana",
    compressible: true
  },
  "application/x-x509-ca-cert": {
    source: "iana",
    extensions: [
      "der",
      "crt",
      "pem"
    ]
  },
  "application/x-x509-ca-ra-cert": {
    source: "iana"
  },
  "application/x-x509-next-ca-cert": {
    source: "iana"
  },
  "application/x-xfig": {
    source: "apache",
    extensions: [
      "fig"
    ]
  },
  "application/x-xliff+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xlf"
    ]
  },
  "application/x-xpinstall": {
    source: "apache",
    compressible: false,
    extensions: [
      "xpi"
    ]
  },
  "application/x-xz": {
    source: "apache",
    extensions: [
      "xz"
    ]
  },
  "application/x-zmachine": {
    source: "apache",
    extensions: [
      "z1",
      "z2",
      "z3",
      "z4",
      "z5",
      "z6",
      "z7",
      "z8"
    ]
  },
  "application/x400-bp": {
    source: "iana"
  },
  "application/xacml+xml": {
    source: "iana",
    compressible: true
  },
  "application/xaml+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xaml"
    ]
  },
  "application/xcap-att+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xav"
    ]
  },
  "application/xcap-caps+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xca"
    ]
  },
  "application/xcap-diff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xdf"
    ]
  },
  "application/xcap-el+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xel"
    ]
  },
  "application/xcap-error+xml": {
    source: "iana",
    compressible: true
  },
  "application/xcap-ns+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xns"
    ]
  },
  "application/xcon-conference-info+xml": {
    source: "iana",
    compressible: true
  },
  "application/xcon-conference-info-diff+xml": {
    source: "iana",
    compressible: true
  },
  "application/xenc+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xenc"
    ]
  },
  "application/xhtml+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xhtml",
      "xht"
    ]
  },
  "application/xhtml-voice+xml": {
    source: "apache",
    compressible: true
  },
  "application/xliff+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xlf"
    ]
  },
  "application/xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xml",
      "xsl",
      "xsd",
      "rng"
    ]
  },
  "application/xml-dtd": {
    source: "iana",
    compressible: true,
    extensions: [
      "dtd"
    ]
  },
  "application/xml-external-parsed-entity": {
    source: "iana"
  },
  "application/xml-patch+xml": {
    source: "iana",
    compressible: true
  },
  "application/xmpp+xml": {
    source: "iana",
    compressible: true
  },
  "application/xop+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xop"
    ]
  },
  "application/xproc+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xpl"
    ]
  },
  "application/xslt+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xsl",
      "xslt"
    ]
  },
  "application/xspf+xml": {
    source: "apache",
    compressible: true,
    extensions: [
      "xspf"
    ]
  },
  "application/xv+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "mxml",
      "xhvml",
      "xvml",
      "xvm"
    ]
  },
  "application/yang": {
    source: "iana",
    extensions: [
      "yang"
    ]
  },
  "application/yang-data+json": {
    source: "iana",
    compressible: true
  },
  "application/yang-data+xml": {
    source: "iana",
    compressible: true
  },
  "application/yang-patch+json": {
    source: "iana",
    compressible: true
  },
  "application/yang-patch+xml": {
    source: "iana",
    compressible: true
  },
  "application/yin+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "yin"
    ]
  },
  "application/zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "zip"
    ]
  },
  "application/zlib": {
    source: "iana"
  },
  "application/zstd": {
    source: "iana"
  },
  "audio/1d-interleaved-parityfec": {
    source: "iana"
  },
  "audio/32kadpcm": {
    source: "iana"
  },
  "audio/3gpp": {
    source: "iana",
    compressible: false,
    extensions: [
      "3gpp"
    ]
  },
  "audio/3gpp2": {
    source: "iana"
  },
  "audio/aac": {
    source: "iana"
  },
  "audio/ac3": {
    source: "iana"
  },
  "audio/adpcm": {
    source: "apache",
    extensions: [
      "adp"
    ]
  },
  "audio/amr": {
    source: "iana",
    extensions: [
      "amr"
    ]
  },
  "audio/amr-wb": {
    source: "iana"
  },
  "audio/amr-wb+": {
    source: "iana"
  },
  "audio/aptx": {
    source: "iana"
  },
  "audio/asc": {
    source: "iana"
  },
  "audio/atrac-advanced-lossless": {
    source: "iana"
  },
  "audio/atrac-x": {
    source: "iana"
  },
  "audio/atrac3": {
    source: "iana"
  },
  "audio/basic": {
    source: "iana",
    compressible: false,
    extensions: [
      "au",
      "snd"
    ]
  },
  "audio/bv16": {
    source: "iana"
  },
  "audio/bv32": {
    source: "iana"
  },
  "audio/clearmode": {
    source: "iana"
  },
  "audio/cn": {
    source: "iana"
  },
  "audio/dat12": {
    source: "iana"
  },
  "audio/dls": {
    source: "iana"
  },
  "audio/dsr-es201108": {
    source: "iana"
  },
  "audio/dsr-es202050": {
    source: "iana"
  },
  "audio/dsr-es202211": {
    source: "iana"
  },
  "audio/dsr-es202212": {
    source: "iana"
  },
  "audio/dv": {
    source: "iana"
  },
  "audio/dvi4": {
    source: "iana"
  },
  "audio/eac3": {
    source: "iana"
  },
  "audio/encaprtp": {
    source: "iana"
  },
  "audio/evrc": {
    source: "iana"
  },
  "audio/evrc-qcp": {
    source: "iana"
  },
  "audio/evrc0": {
    source: "iana"
  },
  "audio/evrc1": {
    source: "iana"
  },
  "audio/evrcb": {
    source: "iana"
  },
  "audio/evrcb0": {
    source: "iana"
  },
  "audio/evrcb1": {
    source: "iana"
  },
  "audio/evrcnw": {
    source: "iana"
  },
  "audio/evrcnw0": {
    source: "iana"
  },
  "audio/evrcnw1": {
    source: "iana"
  },
  "audio/evrcwb": {
    source: "iana"
  },
  "audio/evrcwb0": {
    source: "iana"
  },
  "audio/evrcwb1": {
    source: "iana"
  },
  "audio/evs": {
    source: "iana"
  },
  "audio/flexfec": {
    source: "iana"
  },
  "audio/fwdred": {
    source: "iana"
  },
  "audio/g711-0": {
    source: "iana"
  },
  "audio/g719": {
    source: "iana"
  },
  "audio/g722": {
    source: "iana"
  },
  "audio/g7221": {
    source: "iana"
  },
  "audio/g723": {
    source: "iana"
  },
  "audio/g726-16": {
    source: "iana"
  },
  "audio/g726-24": {
    source: "iana"
  },
  "audio/g726-32": {
    source: "iana"
  },
  "audio/g726-40": {
    source: "iana"
  },
  "audio/g728": {
    source: "iana"
  },
  "audio/g729": {
    source: "iana"
  },
  "audio/g7291": {
    source: "iana"
  },
  "audio/g729d": {
    source: "iana"
  },
  "audio/g729e": {
    source: "iana"
  },
  "audio/gsm": {
    source: "iana"
  },
  "audio/gsm-efr": {
    source: "iana"
  },
  "audio/gsm-hr-08": {
    source: "iana"
  },
  "audio/ilbc": {
    source: "iana"
  },
  "audio/ip-mr_v2.5": {
    source: "iana"
  },
  "audio/isac": {
    source: "apache"
  },
  "audio/l16": {
    source: "iana"
  },
  "audio/l20": {
    source: "iana"
  },
  "audio/l24": {
    source: "iana",
    compressible: false
  },
  "audio/l8": {
    source: "iana"
  },
  "audio/lpc": {
    source: "iana"
  },
  "audio/melp": {
    source: "iana"
  },
  "audio/melp1200": {
    source: "iana"
  },
  "audio/melp2400": {
    source: "iana"
  },
  "audio/melp600": {
    source: "iana"
  },
  "audio/mhas": {
    source: "iana"
  },
  "audio/midi": {
    source: "apache",
    extensions: [
      "mid",
      "midi",
      "kar",
      "rmi"
    ]
  },
  "audio/mobile-xmf": {
    source: "iana",
    extensions: [
      "mxmf"
    ]
  },
  "audio/mp3": {
    compressible: false,
    extensions: [
      "mp3"
    ]
  },
  "audio/mp4": {
    source: "iana",
    compressible: false,
    extensions: [
      "m4a",
      "mp4a"
    ]
  },
  "audio/mp4a-latm": {
    source: "iana"
  },
  "audio/mpa": {
    source: "iana"
  },
  "audio/mpa-robust": {
    source: "iana"
  },
  "audio/mpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "mpga",
      "mp2",
      "mp2a",
      "mp3",
      "m2a",
      "m3a"
    ]
  },
  "audio/mpeg4-generic": {
    source: "iana"
  },
  "audio/musepack": {
    source: "apache"
  },
  "audio/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "oga",
      "ogg",
      "spx",
      "opus"
    ]
  },
  "audio/opus": {
    source: "iana"
  },
  "audio/parityfec": {
    source: "iana"
  },
  "audio/pcma": {
    source: "iana"
  },
  "audio/pcma-wb": {
    source: "iana"
  },
  "audio/pcmu": {
    source: "iana"
  },
  "audio/pcmu-wb": {
    source: "iana"
  },
  "audio/prs.sid": {
    source: "iana"
  },
  "audio/qcelp": {
    source: "iana"
  },
  "audio/raptorfec": {
    source: "iana"
  },
  "audio/red": {
    source: "iana"
  },
  "audio/rtp-enc-aescm128": {
    source: "iana"
  },
  "audio/rtp-midi": {
    source: "iana"
  },
  "audio/rtploopback": {
    source: "iana"
  },
  "audio/rtx": {
    source: "iana"
  },
  "audio/s3m": {
    source: "apache",
    extensions: [
      "s3m"
    ]
  },
  "audio/scip": {
    source: "iana"
  },
  "audio/silk": {
    source: "apache",
    extensions: [
      "sil"
    ]
  },
  "audio/smv": {
    source: "iana"
  },
  "audio/smv-qcp": {
    source: "iana"
  },
  "audio/smv0": {
    source: "iana"
  },
  "audio/sofa": {
    source: "iana"
  },
  "audio/sp-midi": {
    source: "iana"
  },
  "audio/speex": {
    source: "iana"
  },
  "audio/t140c": {
    source: "iana"
  },
  "audio/t38": {
    source: "iana"
  },
  "audio/telephone-event": {
    source: "iana"
  },
  "audio/tetra_acelp": {
    source: "iana"
  },
  "audio/tetra_acelp_bb": {
    source: "iana"
  },
  "audio/tone": {
    source: "iana"
  },
  "audio/tsvcis": {
    source: "iana"
  },
  "audio/uemclip": {
    source: "iana"
  },
  "audio/ulpfec": {
    source: "iana"
  },
  "audio/usac": {
    source: "iana"
  },
  "audio/vdvi": {
    source: "iana"
  },
  "audio/vmr-wb": {
    source: "iana"
  },
  "audio/vnd.3gpp.iufp": {
    source: "iana"
  },
  "audio/vnd.4sb": {
    source: "iana"
  },
  "audio/vnd.audiokoz": {
    source: "iana"
  },
  "audio/vnd.celp": {
    source: "iana"
  },
  "audio/vnd.cisco.nse": {
    source: "iana"
  },
  "audio/vnd.cmles.radio-events": {
    source: "iana"
  },
  "audio/vnd.cns.anp1": {
    source: "iana"
  },
  "audio/vnd.cns.inf1": {
    source: "iana"
  },
  "audio/vnd.dece.audio": {
    source: "iana",
    extensions: [
      "uva",
      "uvva"
    ]
  },
  "audio/vnd.digital-winds": {
    source: "iana",
    extensions: [
      "eol"
    ]
  },
  "audio/vnd.dlna.adts": {
    source: "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    source: "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    source: "iana"
  },
  "audio/vnd.dolby.mlp": {
    source: "iana"
  },
  "audio/vnd.dolby.mps": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2x": {
    source: "iana"
  },
  "audio/vnd.dolby.pl2z": {
    source: "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    source: "iana"
  },
  "audio/vnd.dra": {
    source: "iana",
    extensions: [
      "dra"
    ]
  },
  "audio/vnd.dts": {
    source: "iana",
    extensions: [
      "dts"
    ]
  },
  "audio/vnd.dts.hd": {
    source: "iana",
    extensions: [
      "dtshd"
    ]
  },
  "audio/vnd.dts.uhd": {
    source: "iana"
  },
  "audio/vnd.dvb.file": {
    source: "iana"
  },
  "audio/vnd.everad.plj": {
    source: "iana"
  },
  "audio/vnd.hns.audio": {
    source: "iana"
  },
  "audio/vnd.lucent.voice": {
    source: "iana",
    extensions: [
      "lvp"
    ]
  },
  "audio/vnd.ms-playready.media.pya": {
    source: "iana",
    extensions: [
      "pya"
    ]
  },
  "audio/vnd.nokia.mobile-xmf": {
    source: "iana"
  },
  "audio/vnd.nortel.vbk": {
    source: "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    source: "iana",
    extensions: [
      "ecelp4800"
    ]
  },
  "audio/vnd.nuera.ecelp7470": {
    source: "iana",
    extensions: [
      "ecelp7470"
    ]
  },
  "audio/vnd.nuera.ecelp9600": {
    source: "iana",
    extensions: [
      "ecelp9600"
    ]
  },
  "audio/vnd.octel.sbc": {
    source: "iana"
  },
  "audio/vnd.presonus.multitrack": {
    source: "iana"
  },
  "audio/vnd.qcelp": {
    source: "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    source: "iana"
  },
  "audio/vnd.rip": {
    source: "iana",
    extensions: [
      "rip"
    ]
  },
  "audio/vnd.rn-realaudio": {
    compressible: false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    source: "iana"
  },
  "audio/vnd.vmx.cvsd": {
    source: "iana"
  },
  "audio/vnd.wave": {
    compressible: false
  },
  "audio/vorbis": {
    source: "iana",
    compressible: false
  },
  "audio/vorbis-config": {
    source: "iana"
  },
  "audio/wav": {
    compressible: false,
    extensions: [
      "wav"
    ]
  },
  "audio/wave": {
    compressible: false,
    extensions: [
      "wav"
    ]
  },
  "audio/webm": {
    source: "apache",
    compressible: false,
    extensions: [
      "weba"
    ]
  },
  "audio/x-aac": {
    source: "apache",
    compressible: false,
    extensions: [
      "aac"
    ]
  },
  "audio/x-aiff": {
    source: "apache",
    extensions: [
      "aif",
      "aiff",
      "aifc"
    ]
  },
  "audio/x-caf": {
    source: "apache",
    compressible: false,
    extensions: [
      "caf"
    ]
  },
  "audio/x-flac": {
    source: "apache",
    extensions: [
      "flac"
    ]
  },
  "audio/x-m4a": {
    source: "nginx",
    extensions: [
      "m4a"
    ]
  },
  "audio/x-matroska": {
    source: "apache",
    extensions: [
      "mka"
    ]
  },
  "audio/x-mpegurl": {
    source: "apache",
    extensions: [
      "m3u"
    ]
  },
  "audio/x-ms-wax": {
    source: "apache",
    extensions: [
      "wax"
    ]
  },
  "audio/x-ms-wma": {
    source: "apache",
    extensions: [
      "wma"
    ]
  },
  "audio/x-pn-realaudio": {
    source: "apache",
    extensions: [
      "ram",
      "ra"
    ]
  },
  "audio/x-pn-realaudio-plugin": {
    source: "apache",
    extensions: [
      "rmp"
    ]
  },
  "audio/x-realaudio": {
    source: "nginx",
    extensions: [
      "ra"
    ]
  },
  "audio/x-tta": {
    source: "apache"
  },
  "audio/x-wav": {
    source: "apache",
    extensions: [
      "wav"
    ]
  },
  "audio/xm": {
    source: "apache",
    extensions: [
      "xm"
    ]
  },
  "chemical/x-cdx": {
    source: "apache",
    extensions: [
      "cdx"
    ]
  },
  "chemical/x-cif": {
    source: "apache",
    extensions: [
      "cif"
    ]
  },
  "chemical/x-cmdf": {
    source: "apache",
    extensions: [
      "cmdf"
    ]
  },
  "chemical/x-cml": {
    source: "apache",
    extensions: [
      "cml"
    ]
  },
  "chemical/x-csml": {
    source: "apache",
    extensions: [
      "csml"
    ]
  },
  "chemical/x-pdb": {
    source: "apache"
  },
  "chemical/x-xyz": {
    source: "apache",
    extensions: [
      "xyz"
    ]
  },
  "font/collection": {
    source: "iana",
    extensions: [
      "ttc"
    ]
  },
  "font/otf": {
    source: "iana",
    compressible: true,
    extensions: [
      "otf"
    ]
  },
  "font/sfnt": {
    source: "iana"
  },
  "font/ttf": {
    source: "iana",
    compressible: true,
    extensions: [
      "ttf"
    ]
  },
  "font/woff": {
    source: "iana",
    extensions: [
      "woff"
    ]
  },
  "font/woff2": {
    source: "iana",
    extensions: [
      "woff2"
    ]
  },
  "image/aces": {
    source: "iana",
    extensions: [
      "exr"
    ]
  },
  "image/apng": {
    compressible: false,
    extensions: [
      "apng"
    ]
  },
  "image/avci": {
    source: "iana",
    extensions: [
      "avci"
    ]
  },
  "image/avcs": {
    source: "iana",
    extensions: [
      "avcs"
    ]
  },
  "image/avif": {
    source: "iana",
    compressible: false,
    extensions: [
      "avif"
    ]
  },
  "image/bmp": {
    source: "iana",
    compressible: true,
    extensions: [
      "bmp"
    ]
  },
  "image/cgm": {
    source: "iana",
    extensions: [
      "cgm"
    ]
  },
  "image/dicom-rle": {
    source: "iana",
    extensions: [
      "drle"
    ]
  },
  "image/emf": {
    source: "iana",
    extensions: [
      "emf"
    ]
  },
  "image/fits": {
    source: "iana",
    extensions: [
      "fits"
    ]
  },
  "image/g3fax": {
    source: "iana",
    extensions: [
      "g3"
    ]
  },
  "image/gif": {
    source: "iana",
    compressible: false,
    extensions: [
      "gif"
    ]
  },
  "image/heic": {
    source: "iana",
    extensions: [
      "heic"
    ]
  },
  "image/heic-sequence": {
    source: "iana",
    extensions: [
      "heics"
    ]
  },
  "image/heif": {
    source: "iana",
    extensions: [
      "heif"
    ]
  },
  "image/heif-sequence": {
    source: "iana",
    extensions: [
      "heifs"
    ]
  },
  "image/hej2k": {
    source: "iana",
    extensions: [
      "hej2"
    ]
  },
  "image/hsj2": {
    source: "iana",
    extensions: [
      "hsj2"
    ]
  },
  "image/ief": {
    source: "iana",
    extensions: [
      "ief"
    ]
  },
  "image/jls": {
    source: "iana",
    extensions: [
      "jls"
    ]
  },
  "image/jp2": {
    source: "iana",
    compressible: false,
    extensions: [
      "jp2",
      "jpg2"
    ]
  },
  "image/jpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpeg",
      "jpg",
      "jpe"
    ]
  },
  "image/jph": {
    source: "iana",
    extensions: [
      "jph"
    ]
  },
  "image/jphc": {
    source: "iana",
    extensions: [
      "jhc"
    ]
  },
  "image/jpm": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpm"
    ]
  },
  "image/jpx": {
    source: "iana",
    compressible: false,
    extensions: [
      "jpx",
      "jpf"
    ]
  },
  "image/jxr": {
    source: "iana",
    extensions: [
      "jxr"
    ]
  },
  "image/jxra": {
    source: "iana",
    extensions: [
      "jxra"
    ]
  },
  "image/jxrs": {
    source: "iana",
    extensions: [
      "jxrs"
    ]
  },
  "image/jxs": {
    source: "iana",
    extensions: [
      "jxs"
    ]
  },
  "image/jxsc": {
    source: "iana",
    extensions: [
      "jxsc"
    ]
  },
  "image/jxsi": {
    source: "iana",
    extensions: [
      "jxsi"
    ]
  },
  "image/jxss": {
    source: "iana",
    extensions: [
      "jxss"
    ]
  },
  "image/ktx": {
    source: "iana",
    extensions: [
      "ktx"
    ]
  },
  "image/ktx2": {
    source: "iana",
    extensions: [
      "ktx2"
    ]
  },
  "image/naplps": {
    source: "iana"
  },
  "image/pjpeg": {
    compressible: false
  },
  "image/png": {
    source: "iana",
    compressible: false,
    extensions: [
      "png"
    ]
  },
  "image/prs.btif": {
    source: "iana",
    extensions: [
      "btif"
    ]
  },
  "image/prs.pti": {
    source: "iana",
    extensions: [
      "pti"
    ]
  },
  "image/pwg-raster": {
    source: "iana"
  },
  "image/sgi": {
    source: "apache",
    extensions: [
      "sgi"
    ]
  },
  "image/svg+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "svg",
      "svgz"
    ]
  },
  "image/t38": {
    source: "iana",
    extensions: [
      "t38"
    ]
  },
  "image/tiff": {
    source: "iana",
    compressible: false,
    extensions: [
      "tif",
      "tiff"
    ]
  },
  "image/tiff-fx": {
    source: "iana",
    extensions: [
      "tfx"
    ]
  },
  "image/vnd.adobe.photoshop": {
    source: "iana",
    compressible: true,
    extensions: [
      "psd"
    ]
  },
  "image/vnd.airzip.accelerator.azv": {
    source: "iana",
    extensions: [
      "azv"
    ]
  },
  "image/vnd.cns.inf2": {
    source: "iana"
  },
  "image/vnd.dece.graphic": {
    source: "iana",
    extensions: [
      "uvi",
      "uvvi",
      "uvg",
      "uvvg"
    ]
  },
  "image/vnd.djvu": {
    source: "iana",
    extensions: [
      "djvu",
      "djv"
    ]
  },
  "image/vnd.dvb.subtitle": {
    source: "iana",
    extensions: [
      "sub"
    ]
  },
  "image/vnd.dwg": {
    source: "iana",
    extensions: [
      "dwg"
    ]
  },
  "image/vnd.dxf": {
    source: "iana",
    extensions: [
      "dxf"
    ]
  },
  "image/vnd.fastbidsheet": {
    source: "iana",
    extensions: [
      "fbs"
    ]
  },
  "image/vnd.fpx": {
    source: "iana",
    extensions: [
      "fpx"
    ]
  },
  "image/vnd.fst": {
    source: "iana",
    extensions: [
      "fst"
    ]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    source: "iana",
    extensions: [
      "mmr"
    ]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    source: "iana",
    extensions: [
      "rlc"
    ]
  },
  "image/vnd.globalgraphics.pgb": {
    source: "iana"
  },
  "image/vnd.microsoft.icon": {
    source: "iana",
    compressible: true,
    extensions: [
      "ico"
    ]
  },
  "image/vnd.mix": {
    source: "iana"
  },
  "image/vnd.mozilla.apng": {
    source: "iana"
  },
  "image/vnd.ms-dds": {
    compressible: true,
    extensions: [
      "dds"
    ]
  },
  "image/vnd.ms-modi": {
    source: "iana",
    extensions: [
      "mdi"
    ]
  },
  "image/vnd.ms-photo": {
    source: "apache",
    extensions: [
      "wdp"
    ]
  },
  "image/vnd.net-fpx": {
    source: "iana",
    extensions: [
      "npx"
    ]
  },
  "image/vnd.pco.b16": {
    source: "iana",
    extensions: [
      "b16"
    ]
  },
  "image/vnd.radiance": {
    source: "iana"
  },
  "image/vnd.sealed.png": {
    source: "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    source: "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    source: "iana"
  },
  "image/vnd.svf": {
    source: "iana"
  },
  "image/vnd.tencent.tap": {
    source: "iana",
    extensions: [
      "tap"
    ]
  },
  "image/vnd.valve.source.texture": {
    source: "iana",
    extensions: [
      "vtf"
    ]
  },
  "image/vnd.wap.wbmp": {
    source: "iana",
    extensions: [
      "wbmp"
    ]
  },
  "image/vnd.xiff": {
    source: "iana",
    extensions: [
      "xif"
    ]
  },
  "image/vnd.zbrush.pcx": {
    source: "iana",
    extensions: [
      "pcx"
    ]
  },
  "image/webp": {
    source: "apache",
    extensions: [
      "webp"
    ]
  },
  "image/wmf": {
    source: "iana",
    extensions: [
      "wmf"
    ]
  },
  "image/x-3ds": {
    source: "apache",
    extensions: [
      "3ds"
    ]
  },
  "image/x-cmu-raster": {
    source: "apache",
    extensions: [
      "ras"
    ]
  },
  "image/x-cmx": {
    source: "apache",
    extensions: [
      "cmx"
    ]
  },
  "image/x-freehand": {
    source: "apache",
    extensions: [
      "fh",
      "fhc",
      "fh4",
      "fh5",
      "fh7"
    ]
  },
  "image/x-icon": {
    source: "apache",
    compressible: true,
    extensions: [
      "ico"
    ]
  },
  "image/x-jng": {
    source: "nginx",
    extensions: [
      "jng"
    ]
  },
  "image/x-mrsid-image": {
    source: "apache",
    extensions: [
      "sid"
    ]
  },
  "image/x-ms-bmp": {
    source: "nginx",
    compressible: true,
    extensions: [
      "bmp"
    ]
  },
  "image/x-pcx": {
    source: "apache",
    extensions: [
      "pcx"
    ]
  },
  "image/x-pict": {
    source: "apache",
    extensions: [
      "pic",
      "pct"
    ]
  },
  "image/x-portable-anymap": {
    source: "apache",
    extensions: [
      "pnm"
    ]
  },
  "image/x-portable-bitmap": {
    source: "apache",
    extensions: [
      "pbm"
    ]
  },
  "image/x-portable-graymap": {
    source: "apache",
    extensions: [
      "pgm"
    ]
  },
  "image/x-portable-pixmap": {
    source: "apache",
    extensions: [
      "ppm"
    ]
  },
  "image/x-rgb": {
    source: "apache",
    extensions: [
      "rgb"
    ]
  },
  "image/x-tga": {
    source: "apache",
    extensions: [
      "tga"
    ]
  },
  "image/x-xbitmap": {
    source: "apache",
    extensions: [
      "xbm"
    ]
  },
  "image/x-xcf": {
    compressible: false
  },
  "image/x-xpixmap": {
    source: "apache",
    extensions: [
      "xpm"
    ]
  },
  "image/x-xwindowdump": {
    source: "apache",
    extensions: [
      "xwd"
    ]
  },
  "message/cpim": {
    source: "iana"
  },
  "message/delivery-status": {
    source: "iana"
  },
  "message/disposition-notification": {
    source: "iana",
    extensions: [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    source: "iana"
  },
  "message/feedback-report": {
    source: "iana"
  },
  "message/global": {
    source: "iana",
    extensions: [
      "u8msg"
    ]
  },
  "message/global-delivery-status": {
    source: "iana",
    extensions: [
      "u8dsn"
    ]
  },
  "message/global-disposition-notification": {
    source: "iana",
    extensions: [
      "u8mdn"
    ]
  },
  "message/global-headers": {
    source: "iana",
    extensions: [
      "u8hdr"
    ]
  },
  "message/http": {
    source: "iana",
    compressible: false
  },
  "message/imdn+xml": {
    source: "iana",
    compressible: true
  },
  "message/news": {
    source: "iana"
  },
  "message/partial": {
    source: "iana",
    compressible: false
  },
  "message/rfc822": {
    source: "iana",
    compressible: true,
    extensions: [
      "eml",
      "mime"
    ]
  },
  "message/s-http": {
    source: "iana"
  },
  "message/sip": {
    source: "iana"
  },
  "message/sipfrag": {
    source: "iana"
  },
  "message/tracking-status": {
    source: "iana"
  },
  "message/vnd.si.simp": {
    source: "iana"
  },
  "message/vnd.wfa.wsc": {
    source: "iana",
    extensions: [
      "wsc"
    ]
  },
  "model/3mf": {
    source: "iana",
    extensions: [
      "3mf"
    ]
  },
  "model/e57": {
    source: "iana"
  },
  "model/gltf+json": {
    source: "iana",
    compressible: true,
    extensions: [
      "gltf"
    ]
  },
  "model/gltf-binary": {
    source: "iana",
    compressible: true,
    extensions: [
      "glb"
    ]
  },
  "model/iges": {
    source: "iana",
    compressible: false,
    extensions: [
      "igs",
      "iges"
    ]
  },
  "model/mesh": {
    source: "iana",
    compressible: false,
    extensions: [
      "msh",
      "mesh",
      "silo"
    ]
  },
  "model/mtl": {
    source: "iana",
    extensions: [
      "mtl"
    ]
  },
  "model/obj": {
    source: "iana",
    extensions: [
      "obj"
    ]
  },
  "model/step": {
    source: "iana"
  },
  "model/step+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "stpx"
    ]
  },
  "model/step+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "stpz"
    ]
  },
  "model/step-xml+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "stpxz"
    ]
  },
  "model/stl": {
    source: "iana",
    extensions: [
      "stl"
    ]
  },
  "model/vnd.collada+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "dae"
    ]
  },
  "model/vnd.dwf": {
    source: "iana",
    extensions: [
      "dwf"
    ]
  },
  "model/vnd.flatland.3dml": {
    source: "iana"
  },
  "model/vnd.gdl": {
    source: "iana",
    extensions: [
      "gdl"
    ]
  },
  "model/vnd.gs-gdl": {
    source: "apache"
  },
  "model/vnd.gs.gdl": {
    source: "iana"
  },
  "model/vnd.gtw": {
    source: "iana",
    extensions: [
      "gtw"
    ]
  },
  "model/vnd.moml+xml": {
    source: "iana",
    compressible: true
  },
  "model/vnd.mts": {
    source: "iana",
    extensions: [
      "mts"
    ]
  },
  "model/vnd.opengex": {
    source: "iana",
    extensions: [
      "ogex"
    ]
  },
  "model/vnd.parasolid.transmit.binary": {
    source: "iana",
    extensions: [
      "x_b"
    ]
  },
  "model/vnd.parasolid.transmit.text": {
    source: "iana",
    extensions: [
      "x_t"
    ]
  },
  "model/vnd.pytha.pyox": {
    source: "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    source: "iana"
  },
  "model/vnd.sap.vds": {
    source: "iana",
    extensions: [
      "vds"
    ]
  },
  "model/vnd.usdz+zip": {
    source: "iana",
    compressible: false,
    extensions: [
      "usdz"
    ]
  },
  "model/vnd.valve.source.compiled-map": {
    source: "iana",
    extensions: [
      "bsp"
    ]
  },
  "model/vnd.vtu": {
    source: "iana",
    extensions: [
      "vtu"
    ]
  },
  "model/vrml": {
    source: "iana",
    compressible: false,
    extensions: [
      "wrl",
      "vrml"
    ]
  },
  "model/x3d+binary": {
    source: "apache",
    compressible: false,
    extensions: [
      "x3db",
      "x3dbz"
    ]
  },
  "model/x3d+fastinfoset": {
    source: "iana",
    extensions: [
      "x3db"
    ]
  },
  "model/x3d+vrml": {
    source: "apache",
    compressible: false,
    extensions: [
      "x3dv",
      "x3dvz"
    ]
  },
  "model/x3d+xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "x3d",
      "x3dz"
    ]
  },
  "model/x3d-vrml": {
    source: "iana",
    extensions: [
      "x3dv"
    ]
  },
  "multipart/alternative": {
    source: "iana",
    compressible: false
  },
  "multipart/appledouble": {
    source: "iana"
  },
  "multipart/byteranges": {
    source: "iana"
  },
  "multipart/digest": {
    source: "iana"
  },
  "multipart/encrypted": {
    source: "iana",
    compressible: false
  },
  "multipart/form-data": {
    source: "iana",
    compressible: false
  },
  "multipart/header-set": {
    source: "iana"
  },
  "multipart/mixed": {
    source: "iana"
  },
  "multipart/multilingual": {
    source: "iana"
  },
  "multipart/parallel": {
    source: "iana"
  },
  "multipart/related": {
    source: "iana",
    compressible: false
  },
  "multipart/report": {
    source: "iana"
  },
  "multipart/signed": {
    source: "iana",
    compressible: false
  },
  "multipart/vnd.bint.med-plus": {
    source: "iana"
  },
  "multipart/voice-message": {
    source: "iana"
  },
  "multipart/x-mixed-replace": {
    source: "iana"
  },
  "text/1d-interleaved-parityfec": {
    source: "iana"
  },
  "text/cache-manifest": {
    source: "iana",
    compressible: true,
    extensions: [
      "appcache",
      "manifest"
    ]
  },
  "text/calendar": {
    source: "iana",
    extensions: [
      "ics",
      "ifb"
    ]
  },
  "text/calender": {
    compressible: true
  },
  "text/cmd": {
    compressible: true
  },
  "text/coffeescript": {
    extensions: [
      "coffee",
      "litcoffee"
    ]
  },
  "text/cql": {
    source: "iana"
  },
  "text/cql-expression": {
    source: "iana"
  },
  "text/cql-identifier": {
    source: "iana"
  },
  "text/css": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "css"
    ]
  },
  "text/csv": {
    source: "iana",
    compressible: true,
    extensions: [
      "csv"
    ]
  },
  "text/csv-schema": {
    source: "iana"
  },
  "text/directory": {
    source: "iana"
  },
  "text/dns": {
    source: "iana"
  },
  "text/ecmascript": {
    source: "iana"
  },
  "text/encaprtp": {
    source: "iana"
  },
  "text/enriched": {
    source: "iana"
  },
  "text/fhirpath": {
    source: "iana"
  },
  "text/flexfec": {
    source: "iana"
  },
  "text/fwdred": {
    source: "iana"
  },
  "text/gff3": {
    source: "iana"
  },
  "text/grammar-ref-list": {
    source: "iana"
  },
  "text/html": {
    source: "iana",
    compressible: true,
    extensions: [
      "html",
      "htm",
      "shtml"
    ]
  },
  "text/jade": {
    extensions: [
      "jade"
    ]
  },
  "text/javascript": {
    source: "iana",
    compressible: true
  },
  "text/jcr-cnd": {
    source: "iana"
  },
  "text/jsx": {
    compressible: true,
    extensions: [
      "jsx"
    ]
  },
  "text/less": {
    compressible: true,
    extensions: [
      "less"
    ]
  },
  "text/markdown": {
    source: "iana",
    compressible: true,
    extensions: [
      "markdown",
      "md"
    ]
  },
  "text/mathml": {
    source: "nginx",
    extensions: [
      "mml"
    ]
  },
  "text/mdx": {
    compressible: true,
    extensions: [
      "mdx"
    ]
  },
  "text/mizar": {
    source: "iana"
  },
  "text/n3": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "n3"
    ]
  },
  "text/parameters": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/parityfec": {
    source: "iana"
  },
  "text/plain": {
    source: "iana",
    compressible: true,
    extensions: [
      "txt",
      "text",
      "conf",
      "def",
      "list",
      "log",
      "in",
      "ini"
    ]
  },
  "text/provenance-notation": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    source: "iana"
  },
  "text/prs.lines.tag": {
    source: "iana",
    extensions: [
      "dsc"
    ]
  },
  "text/prs.prop.logic": {
    source: "iana"
  },
  "text/raptorfec": {
    source: "iana"
  },
  "text/red": {
    source: "iana"
  },
  "text/rfc822-headers": {
    source: "iana"
  },
  "text/richtext": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtx"
    ]
  },
  "text/rtf": {
    source: "iana",
    compressible: true,
    extensions: [
      "rtf"
    ]
  },
  "text/rtp-enc-aescm128": {
    source: "iana"
  },
  "text/rtploopback": {
    source: "iana"
  },
  "text/rtx": {
    source: "iana"
  },
  "text/sgml": {
    source: "iana",
    extensions: [
      "sgml",
      "sgm"
    ]
  },
  "text/shaclc": {
    source: "iana"
  },
  "text/shex": {
    source: "iana",
    extensions: [
      "shex"
    ]
  },
  "text/slim": {
    extensions: [
      "slim",
      "slm"
    ]
  },
  "text/spdx": {
    source: "iana",
    extensions: [
      "spdx"
    ]
  },
  "text/strings": {
    source: "iana"
  },
  "text/stylus": {
    extensions: [
      "stylus",
      "styl"
    ]
  },
  "text/t140": {
    source: "iana"
  },
  "text/tab-separated-values": {
    source: "iana",
    compressible: true,
    extensions: [
      "tsv"
    ]
  },
  "text/troff": {
    source: "iana",
    extensions: [
      "t",
      "tr",
      "roff",
      "man",
      "me",
      "ms"
    ]
  },
  "text/turtle": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "ttl"
    ]
  },
  "text/ulpfec": {
    source: "iana"
  },
  "text/uri-list": {
    source: "iana",
    compressible: true,
    extensions: [
      "uri",
      "uris",
      "urls"
    ]
  },
  "text/vcard": {
    source: "iana",
    compressible: true,
    extensions: [
      "vcard"
    ]
  },
  "text/vnd.a": {
    source: "iana"
  },
  "text/vnd.abc": {
    source: "iana"
  },
  "text/vnd.ascii-art": {
    source: "iana"
  },
  "text/vnd.curl": {
    source: "iana",
    extensions: [
      "curl"
    ]
  },
  "text/vnd.curl.dcurl": {
    source: "apache",
    extensions: [
      "dcurl"
    ]
  },
  "text/vnd.curl.mcurl": {
    source: "apache",
    extensions: [
      "mcurl"
    ]
  },
  "text/vnd.curl.scurl": {
    source: "apache",
    extensions: [
      "scurl"
    ]
  },
  "text/vnd.debian.copyright": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.dmclientscript": {
    source: "iana"
  },
  "text/vnd.dvb.subtitle": {
    source: "iana",
    extensions: [
      "sub"
    ]
  },
  "text/vnd.esmertec.theme-descriptor": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.familysearch.gedcom": {
    source: "iana",
    extensions: [
      "ged"
    ]
  },
  "text/vnd.ficlab.flt": {
    source: "iana"
  },
  "text/vnd.fly": {
    source: "iana",
    extensions: [
      "fly"
    ]
  },
  "text/vnd.fmi.flexstor": {
    source: "iana",
    extensions: [
      "flx"
    ]
  },
  "text/vnd.gml": {
    source: "iana"
  },
  "text/vnd.graphviz": {
    source: "iana",
    extensions: [
      "gv"
    ]
  },
  "text/vnd.hans": {
    source: "iana"
  },
  "text/vnd.hgl": {
    source: "iana"
  },
  "text/vnd.in3d.3dml": {
    source: "iana",
    extensions: [
      "3dml"
    ]
  },
  "text/vnd.in3d.spot": {
    source: "iana",
    extensions: [
      "spot"
    ]
  },
  "text/vnd.iptc.newsml": {
    source: "iana"
  },
  "text/vnd.iptc.nitf": {
    source: "iana"
  },
  "text/vnd.latex-z": {
    source: "iana"
  },
  "text/vnd.motorola.reflex": {
    source: "iana"
  },
  "text/vnd.ms-mediapackage": {
    source: "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    source: "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    source: "iana"
  },
  "text/vnd.senx.warpscript": {
    source: "iana"
  },
  "text/vnd.si.uricatalogue": {
    source: "iana"
  },
  "text/vnd.sosi": {
    source: "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    source: "iana",
    charset: "UTF-8",
    extensions: [
      "jad"
    ]
  },
  "text/vnd.trolltech.linguist": {
    source: "iana",
    charset: "UTF-8"
  },
  "text/vnd.wap.si": {
    source: "iana"
  },
  "text/vnd.wap.sl": {
    source: "iana"
  },
  "text/vnd.wap.wml": {
    source: "iana",
    extensions: [
      "wml"
    ]
  },
  "text/vnd.wap.wmlscript": {
    source: "iana",
    extensions: [
      "wmls"
    ]
  },
  "text/vtt": {
    source: "iana",
    charset: "UTF-8",
    compressible: true,
    extensions: [
      "vtt"
    ]
  },
  "text/x-asm": {
    source: "apache",
    extensions: [
      "s",
      "asm"
    ]
  },
  "text/x-c": {
    source: "apache",
    extensions: [
      "c",
      "cc",
      "cxx",
      "cpp",
      "h",
      "hh",
      "dic"
    ]
  },
  "text/x-component": {
    source: "nginx",
    extensions: [
      "htc"
    ]
  },
  "text/x-fortran": {
    source: "apache",
    extensions: [
      "f",
      "for",
      "f77",
      "f90"
    ]
  },
  "text/x-gwt-rpc": {
    compressible: true
  },
  "text/x-handlebars-template": {
    extensions: [
      "hbs"
    ]
  },
  "text/x-java-source": {
    source: "apache",
    extensions: [
      "java"
    ]
  },
  "text/x-jquery-tmpl": {
    compressible: true
  },
  "text/x-lua": {
    extensions: [
      "lua"
    ]
  },
  "text/x-markdown": {
    compressible: true,
    extensions: [
      "mkd"
    ]
  },
  "text/x-nfo": {
    source: "apache",
    extensions: [
      "nfo"
    ]
  },
  "text/x-opml": {
    source: "apache",
    extensions: [
      "opml"
    ]
  },
  "text/x-org": {
    compressible: true,
    extensions: [
      "org"
    ]
  },
  "text/x-pascal": {
    source: "apache",
    extensions: [
      "p",
      "pas"
    ]
  },
  "text/x-processing": {
    compressible: true,
    extensions: [
      "pde"
    ]
  },
  "text/x-sass": {
    extensions: [
      "sass"
    ]
  },
  "text/x-scss": {
    extensions: [
      "scss"
    ]
  },
  "text/x-setext": {
    source: "apache",
    extensions: [
      "etx"
    ]
  },
  "text/x-sfv": {
    source: "apache",
    extensions: [
      "sfv"
    ]
  },
  "text/x-suse-ymp": {
    compressible: true,
    extensions: [
      "ymp"
    ]
  },
  "text/x-uuencode": {
    source: "apache",
    extensions: [
      "uu"
    ]
  },
  "text/x-vcalendar": {
    source: "apache",
    extensions: [
      "vcs"
    ]
  },
  "text/x-vcard": {
    source: "apache",
    extensions: [
      "vcf"
    ]
  },
  "text/xml": {
    source: "iana",
    compressible: true,
    extensions: [
      "xml"
    ]
  },
  "text/xml-external-parsed-entity": {
    source: "iana"
  },
  "text/yaml": {
    compressible: true,
    extensions: [
      "yaml",
      "yml"
    ]
  },
  "video/1d-interleaved-parityfec": {
    source: "iana"
  },
  "video/3gpp": {
    source: "iana",
    extensions: [
      "3gp",
      "3gpp"
    ]
  },
  "video/3gpp-tt": {
    source: "iana"
  },
  "video/3gpp2": {
    source: "iana",
    extensions: [
      "3g2"
    ]
  },
  "video/av1": {
    source: "iana"
  },
  "video/bmpeg": {
    source: "iana"
  },
  "video/bt656": {
    source: "iana"
  },
  "video/celb": {
    source: "iana"
  },
  "video/dv": {
    source: "iana"
  },
  "video/encaprtp": {
    source: "iana"
  },
  "video/ffv1": {
    source: "iana"
  },
  "video/flexfec": {
    source: "iana"
  },
  "video/h261": {
    source: "iana",
    extensions: [
      "h261"
    ]
  },
  "video/h263": {
    source: "iana",
    extensions: [
      "h263"
    ]
  },
  "video/h263-1998": {
    source: "iana"
  },
  "video/h263-2000": {
    source: "iana"
  },
  "video/h264": {
    source: "iana",
    extensions: [
      "h264"
    ]
  },
  "video/h264-rcdo": {
    source: "iana"
  },
  "video/h264-svc": {
    source: "iana"
  },
  "video/h265": {
    source: "iana"
  },
  "video/iso.segment": {
    source: "iana",
    extensions: [
      "m4s"
    ]
  },
  "video/jpeg": {
    source: "iana",
    extensions: [
      "jpgv"
    ]
  },
  "video/jpeg2000": {
    source: "iana"
  },
  "video/jpm": {
    source: "apache",
    extensions: [
      "jpm",
      "jpgm"
    ]
  },
  "video/jxsv": {
    source: "iana"
  },
  "video/mj2": {
    source: "iana",
    extensions: [
      "mj2",
      "mjp2"
    ]
  },
  "video/mp1s": {
    source: "iana"
  },
  "video/mp2p": {
    source: "iana"
  },
  "video/mp2t": {
    source: "iana",
    extensions: [
      "ts"
    ]
  },
  "video/mp4": {
    source: "iana",
    compressible: false,
    extensions: [
      "mp4",
      "mp4v",
      "mpg4"
    ]
  },
  "video/mp4v-es": {
    source: "iana"
  },
  "video/mpeg": {
    source: "iana",
    compressible: false,
    extensions: [
      "mpeg",
      "mpg",
      "mpe",
      "m1v",
      "m2v"
    ]
  },
  "video/mpeg4-generic": {
    source: "iana"
  },
  "video/mpv": {
    source: "iana"
  },
  "video/nv": {
    source: "iana"
  },
  "video/ogg": {
    source: "iana",
    compressible: false,
    extensions: [
      "ogv"
    ]
  },
  "video/parityfec": {
    source: "iana"
  },
  "video/pointer": {
    source: "iana"
  },
  "video/quicktime": {
    source: "iana",
    compressible: false,
    extensions: [
      "qt",
      "mov"
    ]
  },
  "video/raptorfec": {
    source: "iana"
  },
  "video/raw": {
    source: "iana"
  },
  "video/rtp-enc-aescm128": {
    source: "iana"
  },
  "video/rtploopback": {
    source: "iana"
  },
  "video/rtx": {
    source: "iana"
  },
  "video/scip": {
    source: "iana"
  },
  "video/smpte291": {
    source: "iana"
  },
  "video/smpte292m": {
    source: "iana"
  },
  "video/ulpfec": {
    source: "iana"
  },
  "video/vc1": {
    source: "iana"
  },
  "video/vc2": {
    source: "iana"
  },
  "video/vnd.cctv": {
    source: "iana"
  },
  "video/vnd.dece.hd": {
    source: "iana",
    extensions: [
      "uvh",
      "uvvh"
    ]
  },
  "video/vnd.dece.mobile": {
    source: "iana",
    extensions: [
      "uvm",
      "uvvm"
    ]
  },
  "video/vnd.dece.mp4": {
    source: "iana"
  },
  "video/vnd.dece.pd": {
    source: "iana",
    extensions: [
      "uvp",
      "uvvp"
    ]
  },
  "video/vnd.dece.sd": {
    source: "iana",
    extensions: [
      "uvs",
      "uvvs"
    ]
  },
  "video/vnd.dece.video": {
    source: "iana",
    extensions: [
      "uvv",
      "uvvv"
    ]
  },
  "video/vnd.directv.mpeg": {
    source: "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    source: "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    source: "iana"
  },
  "video/vnd.dvb.file": {
    source: "iana",
    extensions: [
      "dvb"
    ]
  },
  "video/vnd.fvt": {
    source: "iana",
    extensions: [
      "fvt"
    ]
  },
  "video/vnd.hns.video": {
    source: "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    source: "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    source: "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    source: "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    source: "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    source: "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    source: "iana"
  },
  "video/vnd.motorola.video": {
    source: "iana"
  },
  "video/vnd.motorola.videop": {
    source: "iana"
  },
  "video/vnd.mpegurl": {
    source: "iana",
    extensions: [
      "mxu",
      "m4u"
    ]
  },
  "video/vnd.ms-playready.media.pyv": {
    source: "iana",
    extensions: [
      "pyv"
    ]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    source: "iana"
  },
  "video/vnd.nokia.mp4vr": {
    source: "iana"
  },
  "video/vnd.nokia.videovoip": {
    source: "iana"
  },
  "video/vnd.objectvideo": {
    source: "iana"
  },
  "video/vnd.radgamettools.bink": {
    source: "iana"
  },
  "video/vnd.radgamettools.smacker": {
    source: "iana"
  },
  "video/vnd.sealed.mpeg1": {
    source: "iana"
  },
  "video/vnd.sealed.mpeg4": {
    source: "iana"
  },
  "video/vnd.sealed.swf": {
    source: "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    source: "iana"
  },
  "video/vnd.uvvu.mp4": {
    source: "iana",
    extensions: [
      "uvu",
      "uvvu"
    ]
  },
  "video/vnd.vivo": {
    source: "iana",
    extensions: [
      "viv"
    ]
  },
  "video/vnd.youtube.yt": {
    source: "iana"
  },
  "video/vp8": {
    source: "iana"
  },
  "video/vp9": {
    source: "iana"
  },
  "video/webm": {
    source: "apache",
    compressible: false,
    extensions: [
      "webm"
    ]
  },
  "video/x-f4v": {
    source: "apache",
    extensions: [
      "f4v"
    ]
  },
  "video/x-fli": {
    source: "apache",
    extensions: [
      "fli"
    ]
  },
  "video/x-flv": {
    source: "apache",
    compressible: false,
    extensions: [
      "flv"
    ]
  },
  "video/x-m4v": {
    source: "apache",
    extensions: [
      "m4v"
    ]
  },
  "video/x-matroska": {
    source: "apache",
    compressible: false,
    extensions: [
      "mkv",
      "mk3d",
      "mks"
    ]
  },
  "video/x-mng": {
    source: "apache",
    extensions: [
      "mng"
    ]
  },
  "video/x-ms-asf": {
    source: "apache",
    extensions: [
      "asf",
      "asx"
    ]
  },
  "video/x-ms-vob": {
    source: "apache",
    extensions: [
      "vob"
    ]
  },
  "video/x-ms-wm": {
    source: "apache",
    extensions: [
      "wm"
    ]
  },
  "video/x-ms-wmv": {
    source: "apache",
    compressible: false,
    extensions: [
      "wmv"
    ]
  },
  "video/x-ms-wmx": {
    source: "apache",
    extensions: [
      "wmx"
    ]
  },
  "video/x-ms-wvx": {
    source: "apache",
    extensions: [
      "wvx"
    ]
  },
  "video/x-msvideo": {
    source: "apache",
    extensions: [
      "avi"
    ]
  },
  "video/x-sgi-movie": {
    source: "apache",
    extensions: [
      "movie"
    ]
  },
  "video/x-smv": {
    source: "apache",
    extensions: [
      "smv"
    ]
  },
  "x-conference/x-cooltalk": {
    source: "apache",
    extensions: [
      "ice"
    ]
  },
  "x-shader/x-fragment": {
    compressible: true
  },
  "x-shader/x-vertex": {
    compressible: true
  }
};
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
var mimeDb$1 = require$$0;
var mimeDb = mimeDb$1;
var extList$1 = function() {
  var ret = {};
  Object.keys(mimeDb).forEach(function(x) {
    var val = mimeDb[x];
    if (val.extensions && val.extensions.length > 0) {
      val.extensions.forEach(function(y2) {
        ret[y2] = x;
      });
    }
  });
  return ret;
};
var sortKeysLength$1 = {};
var toString$1 = Object.prototype.toString;
var isPlainObj$5 = function(x) {
  var prototype;
  return toString$1.call(x) === "[object Object]" && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
};
var isPlainObj$4 = isPlainObj$5;
var sortKeys$1 = function(obj, opts) {
  if (!isPlainObj$4(obj)) {
    throw new TypeError("Expected a plain object");
  }
  opts = opts || {};
  if (typeof opts === "function") {
    opts = { compare: opts };
  }
  var deep = opts.deep;
  var seenInput = [];
  var seenOutput = [];
  var sortKeys2 = function(x) {
    var seenIndex = seenInput.indexOf(x);
    if (seenIndex !== -1) {
      return seenOutput[seenIndex];
    }
    var ret = {};
    var keys = Object.keys(x).sort(opts.compare);
    seenInput.push(x);
    seenOutput.push(ret);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var val = x[key];
      ret[key] = deep && isPlainObj$4(val) ? sortKeys2(val) : val;
    }
    return ret;
  };
  return sortKeys2(obj);
};
var sortKeys = sortKeys$1;
sortKeysLength$1.desc = function(obj) {
  return sortKeys(obj, function(a, b) {
    return b.length - a.length;
  });
};
sortKeysLength$1.asc = function(obj) {
  return sortKeys(obj, function(a, b) {
    return a.length - b.length;
  });
};
const extList = extList$1;
const sortKeysLength = sortKeysLength$1;
extName$1.exports = (str) => {
  const obj = sortKeysLength.desc(extList());
  const exts = Object.keys(obj).filter((x) => str.endsWith(x));
  if (exts.length === 0) {
    return [];
  }
  return exts.map((x) => ({
    ext: x,
    mime: obj[x]
  }));
};
extName$1.exports.mime = (str) => {
  const obj = sortKeysLength.desc(extList());
  const exts = Object.keys(obj).filter((x) => obj[x] === str);
  if (exts.length === 0) {
    return [];
  }
  return exts.map((x) => ({
    ext: x,
    mime: obj[x]
  }));
};
const path$3 = path__default["default"];
const { app, BrowserWindow, shell, dialog } = require$$0__default["default"];
const unusedFilename = unusedFilename$2.exports;
const pupa = pupa$1;
const extName = extName$1.exports;
class CancelError extends Error {
}
const getFilenameFromMime = (name, mime) => {
  const extensions = extName.mime(mime);
  if (extensions.length !== 1) {
    return name;
  }
  return `${name}.${extensions[0].ext}`;
};
const majorElectronVersion = () => {
  const version = process.versions.electron.split(".");
  return Number.parseInt(version[0], 10);
};
const getWindowFromBrowserView = (webContents2) => {
  for (const currentWindow of BrowserWindow.getAllWindows()) {
    for (const currentBrowserView of currentWindow.getBrowserViews()) {
      if (currentBrowserView.webContents.id === webContents2.id) {
        return currentWindow;
      }
    }
  }
};
const getWindowFromWebContents = (webContents2) => {
  let window_;
  const webContentsType = webContents2.getType();
  switch (webContentsType) {
    case "webview":
      window_ = BrowserWindow.fromWebContents(webContents2.hostWebContents);
      break;
    case "browserView":
      window_ = getWindowFromBrowserView(webContents2);
      break;
    default:
      window_ = BrowserWindow.fromWebContents(webContents2);
      break;
  }
  return window_;
};
function registerListener(session, options, callback = () => {
}) {
  const downloadItems = new Set();
  let receivedBytes = 0;
  let completedBytes = 0;
  let totalBytes = 0;
  const activeDownloadItems = () => downloadItems.size;
  const progressDownloadItems = () => receivedBytes / totalBytes;
  options = __spreadValues2({
    showBadge: true,
    showProgressBar: true
  }, options);
  const listener = (event, item, webContents2) => {
    downloadItems.add(item);
    totalBytes += item.getTotalBytes();
    const window_ = majorElectronVersion() >= 12 ? BrowserWindow.fromWebContents(webContents2) : getWindowFromWebContents(webContents2);
    if (options.directory && !path$3.isAbsolute(options.directory)) {
      throw new Error("The `directory` option must be an absolute path");
    }
    const directory = options.directory || app.getPath("downloads");
    let filePath;
    if (options.filename) {
      filePath = path$3.join(directory, options.filename);
    } else {
      const filename = item.getFilename();
      const name = path$3.extname(filename) ? filename : getFilenameFromMime(filename, item.getMimeType());
      filePath = options.overwrite ? path$3.join(directory, name) : unusedFilename.sync(path$3.join(directory, name));
    }
    const errorMessage = options.errorMessage || "The download of {filename} was interrupted";
    if (options.saveAs) {
      item.setSaveDialogOptions(__spreadValues2({ defaultPath: filePath }, options.dialogOptions));
    } else {
      item.setSavePath(filePath);
    }
    item.on("updated", () => {
      receivedBytes = completedBytes;
      for (const item2 of downloadItems) {
        receivedBytes += item2.getReceivedBytes();
      }
      if (options.showBadge && ["darwin", "linux"].includes(process.platform)) {
        app.badgeCount = activeDownloadItems();
      }
      if (!window_.isDestroyed() && options.showProgressBar) {
        window_.setProgressBar(progressDownloadItems());
      }
      if (typeof options.onProgress === "function") {
        const itemTransferredBytes = item.getReceivedBytes();
        const itemTotalBytes = item.getTotalBytes();
        options.onProgress({
          percent: itemTotalBytes ? itemTransferredBytes / itemTotalBytes : 0,
          transferredBytes: itemTransferredBytes,
          totalBytes: itemTotalBytes
        });
      }
      if (typeof options.onTotalProgress === "function") {
        options.onTotalProgress({
          percent: progressDownloadItems(),
          transferredBytes: receivedBytes,
          totalBytes
        });
      }
    });
    item.on("done", (event2, state) => {
      completedBytes += item.getTotalBytes();
      downloadItems.delete(item);
      if (options.showBadge && ["darwin", "linux"].includes(process.platform)) {
        app.badgeCount = activeDownloadItems();
      }
      if (!window_.isDestroyed() && !activeDownloadItems()) {
        window_.setProgressBar(-1);
        receivedBytes = 0;
        completedBytes = 0;
        totalBytes = 0;
      }
      if (options.unregisterWhenDone) {
        session.removeListener("will-download", listener);
      }
      if (state === "cancelled") {
        if (typeof options.onCancel === "function") {
          options.onCancel(item);
        }
        callback(new CancelError());
      } else if (state === "interrupted") {
        const message = pupa(errorMessage, { filename: path$3.basename(filePath) });
        callback(new Error(message));
      } else if (state === "completed") {
        const savePath = item.getSavePath();
        if (process.platform === "darwin") {
          app.dock.downloadFinished(savePath);
        }
        if (options.openFolderWhenDone) {
          shell.showItemInFolder(savePath);
        }
        if (typeof options.onCompleted === "function") {
          options.onCompleted({
            fileName: item.getFilename(),
            filename: item.getFilename(),
            path: savePath,
            fileSize: item.getReceivedBytes(),
            mimeType: item.getMimeType(),
            url: item.getURL()
          });
        }
        callback(null, item);
      }
    });
    if (typeof options.onStarted === "function") {
      options.onStarted(item);
    }
  };
  session.on("will-download", listener);
}
electronDl.exports = (options = {}) => {
  app.on("session-created", (session) => {
    registerListener(session, options, (error, _) => {
      if (error) {
        const errorTitle = options.errorTitle || "Download Error";
        dialog.showErrorBox(errorTitle, error.message);
      }
    });
  });
};
electronDl.exports.download = (window_, url2, options) => new Promise((resolve, reject) => {
  options = __spreadProps2(__spreadValues2({}, options), {
    unregisterWhenDone: true
  });
  registerListener(window_.webContents.session, options, (error, item) => {
    if (error) {
      reject(error);
    } else {
      resolve(item);
    }
  });
  window_.webContents.downloadURL(url2);
});
electronDl.exports.CancelError = CancelError;
const electron$1 = require$$0__default["default"];
if (typeof electron$1 === "string") {
  throw new TypeError("Not running in an Electron environment!");
}
const isEnvSet = "ELECTRON_IS_DEV" in process.env;
const getFromEnv = Number.parseInt({}.ELECTRON_IS_DEV, 10) === 1;
var electronIsDev = isEnvSet ? getFromEnv : !electron$1.app.isPackaged;
const electron = require$$0__default["default"];
const cliTruncate = cliTruncate$1;
const { download } = electronDl.exports;
const isDev = electronIsDev;
const webContents = (win) => win.webContents || win.id && win;
const decorateMenuItem = (menuItem) => {
  return (options = {}) => {
    if (options.transform && !options.click) {
      menuItem.transform = options.transform;
    }
    return menuItem;
  };
};
const removeUnusedMenuItems = (menuTemplate) => {
  let notDeletedPreviousElement;
  return menuTemplate.filter((menuItem) => menuItem !== void 0 && menuItem !== false && menuItem.visible !== false && menuItem.visible !== "").filter((menuItem, index, array) => {
    const toDelete = menuItem.type === "separator" && (!notDeletedPreviousElement || index === array.length - 1 || array[index + 1].type === "separator");
    notDeletedPreviousElement = toDelete ? notDeletedPreviousElement : menuItem;
    return !toDelete;
  });
};
const create = (win, options) => {
  const handleContextMenu = (event, props) => {
    if (typeof options.shouldShowMenu === "function" && options.shouldShowMenu(event, props) === false) {
      return;
    }
    const { editFlags } = props;
    const hasText = props.selectionText.length > 0;
    const isLink = Boolean(props.linkURL);
    const can = (type) => editFlags[`can${type}`] && hasText;
    const defaultActions = {
      separator: () => ({ type: "separator" }),
      learnSpelling: decorateMenuItem({
        id: "learnSpelling",
        label: "&Learn Spelling",
        visible: Boolean(props.isEditable && hasText && props.misspelledWord),
        click() {
          const target = webContents(win);
          target.session.addWordToSpellCheckerDictionary(props.misspelledWord);
        }
      }),
      lookUpSelection: decorateMenuItem({
        id: "lookUpSelection",
        label: "Look Up \u201C{selection}\u201D",
        visible: process.platform === "darwin" && hasText && !isLink,
        click() {
          if (process.platform === "darwin") {
            webContents(win).showDefinitionForSelection();
          }
        }
      }),
      searchWithGoogle: decorateMenuItem({
        id: "searchWithGoogle",
        label: "&Search with Google",
        visible: hasText,
        click() {
          const url2 = new URL("https://www.google.com/search");
          url2.searchParams.set("q", props.selectionText);
          electron.shell.openExternal(url2.toString());
        }
      }),
      cut: decorateMenuItem({
        id: "cut",
        label: "Cu&t",
        enabled: can("Cut"),
        visible: props.isEditable,
        click(menuItem) {
          const target = webContents(win);
          if (!menuItem.transform && target) {
            target.cut();
          } else {
            props.selectionText = menuItem.transform ? menuItem.transform(props.selectionText) : props.selectionText;
            electron.clipboard.writeText(props.selectionText);
          }
        }
      }),
      copy: decorateMenuItem({
        id: "copy",
        label: "&Copy",
        enabled: can("Copy"),
        visible: props.isEditable || hasText,
        click(menuItem) {
          const target = webContents(win);
          if (!menuItem.transform && target) {
            target.copy();
          } else {
            props.selectionText = menuItem.transform ? menuItem.transform(props.selectionText) : props.selectionText;
            electron.clipboard.writeText(props.selectionText);
          }
        }
      }),
      paste: decorateMenuItem({
        id: "paste",
        label: "&Paste",
        enabled: editFlags.canPaste,
        visible: props.isEditable,
        click(menuItem) {
          const target = webContents(win);
          if (menuItem.transform) {
            let clipboardContent = electron.clipboard.readText(props.selectionText);
            clipboardContent = menuItem.transform ? menuItem.transform(clipboardContent) : clipboardContent;
            target.insertText(clipboardContent);
          } else {
            target.paste();
          }
        }
      }),
      selectAll: decorateMenuItem({
        id: "selectAll",
        label: "Select &All",
        click() {
          webContents(win).selectAll();
        }
      }),
      saveImage: decorateMenuItem({
        id: "saveImage",
        label: "Save I&mage",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL);
        }
      }),
      saveImageAs: decorateMenuItem({
        id: "saveImageAs",
        label: "Sa&ve Image As\u2026",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL, { saveAs: true });
        }
      }),
      saveVideo: decorateMenuItem({
        id: "saveVideo",
        label: "Save Vide&o",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL);
        }
      }),
      saveVideoAs: decorateMenuItem({
        id: "saveVideoAs",
        label: "Save Video& As\u2026",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          download(win, props.srcURL, { saveAs: true });
        }
      }),
      copyLink: decorateMenuItem({
        id: "copyLink",
        label: "Copy Lin&k",
        visible: props.linkURL.length > 0 && props.mediaType === "none",
        click(menuItem) {
          props.linkURL = menuItem.transform ? menuItem.transform(props.linkURL) : props.linkURL;
          electron.clipboard.write({
            bookmark: props.linkText,
            text: props.linkURL
          });
        }
      }),
      saveLinkAs: decorateMenuItem({
        id: "saveLinkAs",
        label: "Save Link As\u2026",
        visible: props.linkURL.length > 0 && props.mediaType === "none",
        click(menuItem) {
          props.linkURL = menuItem.transform ? menuItem.transform(props.linkURL) : props.linkURL;
          download(win, props.linkURL, { saveAs: true });
        }
      }),
      copyImage: decorateMenuItem({
        id: "copyImage",
        label: "Cop&y Image",
        visible: props.mediaType === "image",
        click() {
          webContents(win).copyImageAt(props.x, props.y);
        }
      }),
      copyImageAddress: decorateMenuItem({
        id: "copyImageAddress",
        label: "C&opy Image Address",
        visible: props.mediaType === "image",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          electron.clipboard.write({
            bookmark: props.srcURL,
            text: props.srcURL
          });
        }
      }),
      copyVideoAddress: decorateMenuItem({
        id: "copyVideoAddress",
        label: "Copy Video Ad&dress",
        visible: props.mediaType === "video",
        click(menuItem) {
          props.srcURL = menuItem.transform ? menuItem.transform(props.srcURL) : props.srcURL;
          electron.clipboard.write({
            bookmark: props.srcURL,
            text: props.srcURL
          });
        }
      }),
      inspect: () => ({
        id: "inspect",
        label: "I&nspect Element",
        click() {
          webContents(win).inspectElement(props.x, props.y);
          if (webContents(win).isDevToolsOpened()) {
            webContents(win).devToolsWebContents.focus();
          }
        }
      }),
      services: () => ({
        id: "services",
        label: "Services",
        role: "services",
        visible: process.platform === "darwin" && (props.isEditable || hasText)
      })
    };
    const shouldShowInspectElement = typeof options.showInspectElement === "boolean" ? options.showInspectElement : isDev;
    const shouldShowSelectAll = options.showSelectAll || options.showSelectAll !== false && process.platform !== "darwin";
    function word(suggestion) {
      return {
        id: "dictionarySuggestions",
        label: suggestion,
        visible: Boolean(props.isEditable && hasText && props.misspelledWord),
        click(menuItem) {
          const target = webContents(win);
          target.replaceMisspelling(menuItem.label);
        }
      };
    }
    let dictionarySuggestions = [];
    if (hasText && props.misspelledWord && props.dictionarySuggestions.length > 0) {
      dictionarySuggestions = props.dictionarySuggestions.map((suggestion) => word(suggestion));
    } else {
      dictionarySuggestions.push({
        id: "dictionarySuggestions",
        label: "No Guesses Found",
        visible: Boolean(hasText && props.misspelledWord),
        enabled: false
      });
    }
    let menuTemplate = [
      dictionarySuggestions.length > 0 && defaultActions.separator(),
      ...dictionarySuggestions,
      defaultActions.separator(),
      options.showLearnSpelling !== false && defaultActions.learnSpelling(),
      defaultActions.separator(),
      options.showLookUpSelection !== false && defaultActions.lookUpSelection(),
      defaultActions.separator(),
      options.showSearchWithGoogle !== false && defaultActions.searchWithGoogle(),
      defaultActions.separator(),
      defaultActions.cut(),
      defaultActions.copy(),
      defaultActions.paste(),
      shouldShowSelectAll && defaultActions.selectAll(),
      defaultActions.separator(),
      options.showSaveImage && defaultActions.saveImage(),
      options.showSaveImageAs && defaultActions.saveImageAs(),
      options.showCopyImage !== false && defaultActions.copyImage(),
      options.showCopyImageAddress && defaultActions.copyImageAddress(),
      options.showSaveVideo && defaultActions.saveVideo(),
      options.showSaveVideoAs && defaultActions.saveVideoAs(),
      options.showCopyVideoAddress && defaultActions.copyVideoAddress(),
      defaultActions.separator(),
      options.showCopyLink !== false && defaultActions.copyLink(),
      options.showSaveLinkAs && defaultActions.saveLinkAs(),
      defaultActions.separator(),
      shouldShowInspectElement && defaultActions.inspect(),
      options.showServices && defaultActions.services(),
      defaultActions.separator()
    ];
    if (options.menu) {
      menuTemplate = options.menu(defaultActions, props, win, dictionarySuggestions, event);
    }
    if (options.prepend) {
      const result = options.prepend(defaultActions, props, win, event);
      if (Array.isArray(result)) {
        menuTemplate.unshift(...result);
      }
    }
    if (options.append) {
      const result = options.append(defaultActions, props, win, event);
      if (Array.isArray(result)) {
        menuTemplate.push(...result);
      }
    }
    menuTemplate = removeUnusedMenuItems(menuTemplate);
    for (const menuItem of menuTemplate) {
      if (options.labels && options.labels[menuItem.id]) {
        menuItem.label = options.labels[menuItem.id];
      }
      if (typeof menuItem.label === "string" && menuItem.label.includes("{selection}")) {
        const selectionString = typeof props.selectionText === "string" ? props.selectionText.trim() : "";
        menuItem.label = menuItem.label.replace("{selection}", cliTruncate(selectionString, 25).replace(/&/g, "&&"));
      }
    }
    if (menuTemplate.length > 0) {
      const menu = electron.Menu.buildFromTemplate(menuTemplate);
      if (typeof options.onShow === "function") {
        menu.on("menu-will-show", options.onShow);
      }
      if (typeof options.onClose === "function") {
        menu.on("menu-will-close", options.onClose);
      }
      menu.popup(win);
    }
  };
  webContents(win).on("context-menu", handleContextMenu);
  return () => {
    if (win.isDestroyed()) {
      return;
    }
    webContents(win).removeListener("context-menu", handleContextMenu);
  };
};
var electronContextMenu = (options = {}) => {
  if (process.type === "renderer") {
    throw new Error("Cannot use electron-context-menu in the renderer process!");
  }
  let isDisposed = false;
  const disposables = [];
  const init2 = (win) => {
    if (isDisposed) {
      return;
    }
    const disposeMenu = create(win, options);
    disposables.push(disposeMenu);
    const removeDisposable = () => {
      const index = disposables.indexOf(disposeMenu);
      if (index !== -1) {
        disposables.splice(index, 1);
      }
    };
    if (typeof win.once !== "undefined") {
      win.once("closed", removeDisposable);
    }
    disposables.push(() => {
      win.off("closed", removeDisposable);
    });
  };
  const dispose = () => {
    for (const dispose2 of disposables) {
      dispose2();
    }
    disposables.length = 0;
    isDisposed = true;
  };
  if (options.window) {
    const win = options.window;
    if (webContents(win) === void 0) {
      const onDomReady = () => {
        init2(win);
      };
      const listenerFunction = win.addEventListener || win.addListener;
      listenerFunction("dom-ready", onDomReady, { once: true });
      disposables.push(() => {
        win.removeEventListener("dom-ready", onDomReady, { once: true });
      });
      return dispose;
    }
    init2(win);
    return dispose;
  }
  for (const win of electron.BrowserWindow.getAllWindows()) {
    init2(win);
  }
  const onWindowCreated = (event, win) => {
    init2(win);
  };
  electron.app.on("browser-window-created", onWindowCreated);
  disposables.push(() => {
    electron.app.removeListener("browser-window-created", onWindowCreated);
  });
  return dispose;
};
const DEFAULT_WINDOW_URL = electronIsDev$1 ? "http://localhost:3000" : require$$0$3.format({
  pathname: path__default["default"].join(__dirname, "../renderer/out/index.html"),
  protocol: "file:",
  slashes: true
});
const PRELOAD_JS_PATH = path__default["default"].resolve(__dirname, "../../preload/dist/", "index.js");
class WindowManager {
  listWindow = [];
  mainWindow;
  mainWebView;
  constructor() {
    this.initEventListener();
  }
  createMainWindow = async () => {
    if (this.mainWindow) {
      return this.mainWindow;
    }
    const window2 = new require$$0$1.BrowserWindow({
      show: false,
      width: 800,
      height: 600,
      backgroundColor: isMacOS ? "#D1D5DB" : "#6B7280",
      titleBarStyle: isMacOS ? "hiddenInset" : "default",
      frame: isMacOS,
      webPreferences: {
        devTools: electronIsDev$1,
        contextIsolation: true,
        nodeIntegration: false,
        preload: PRELOAD_JS_PATH,
        disableDialogs: false,
        safeDialogs: true,
        enableWebSQL: false
      }
    });
    this.mainWindow = window2;
    if (electronIsDev$1) {
      this.mainWindow.webContents.openDevTools({ mode: "detach" });
    }
    window2.on("closed", () => {
      this.mainWindow = null;
      this.listWindow.forEach((instance) => {
        var _a2;
        (_a2 = instance.window.webContents) == null ? void 0 : _a2.destroy();
      });
      this.listWindow = [];
    });
    window2.loadURL(`${DEFAULT_WINDOW_URL}/tabs`);
    window2.show();
    const windowView = this.mainWebView = await this.#createWindow({
      url: DEFAULT_WINDOW_URL + "/",
      name: "Home",
      type: "MANAGEMENT",
      id: 0
    });
    this.#setActiveTab(windowView);
  };
  #createWindow = async (tabData) => {
    const window2 = new require$$0$1.BrowserView({
      webPreferences: {
        devTools: electronIsDev$1,
        contextIsolation: true,
        nodeIntegration: false,
        preload: PRELOAD_JS_PATH,
        disableDialogs: false,
        safeDialogs: true,
        enableWebSQL: false
      }
    });
    electronContextMenu({ window: window2 });
    const url2 = this.#getRealUrl(tabData.url);
    window2.webContents.loadURL(url2);
    if (electronIsDev$1) {
      window2.webContents.openDevTools({ mode: "detach" });
    }
    window2.webContents.on("did-finish-load", () => {
    });
    this.listWindow.push({
      window: window2,
      tabData: __spreadProps2(__spreadValues2({}, tabData), {
        id: window2.webContents.id
      })
    });
    return window2;
  };
  #getRealUrl(url2) {
    const urlRegex = /^(https?|file):\/\/\S+$/;
    const ret = urlRegex.test(url2) ? url2 : DEFAULT_WINDOW_URL + url2;
    return ret;
  }
  getTabData = () => {
    var _a2, _b;
    return {
      tabs: this.listWindow.map((instance) => instance.tabData),
      active: (_b = (_a2 = this.mainWindow.getBrowserView()) == null ? void 0 : _a2.webContents) == null ? void 0 : _b.id
    };
  };
  #setActiveTab = (instance) => {
    this.mainWindow.setBrowserView(instance);
    instance.setBounds({ x: 0, y: 36, width: this.mainWindow.getBounds().width, height: this.mainWindow.getBounds().height - 36 });
    instance.setAutoResize({ width: true, height: true, horizontal: false, vertical: false });
    this.dispatchChangeEvent();
  };
  dispatchChangeEvent = () => {
    console.log("dispatch tabs change event");
    this.mainWindow.webContents.send("window-tabs-change", this.getTabData());
  };
  newTab = async (tabData) => {
    const window2 = await this.#createWindow(tabData);
    this.#setActiveTab(window2);
    return window2;
  };
  replaceTab = async (id, newTabData) => {
    const window2 = this.listWindow.find((instance) => instance.window.webContents.id === id);
    if (window2) {
      window2.tabData = newTabData;
      const url2 = this.#getRealUrl(newTabData.url);
      window2.window.webContents.loadURL(url2);
    }
  };
  initEventListener() {
    require$$0$1.ipcMain.handle("open-new-tab", async (_event, tabData) => {
      const window2 = await this.newTab(tabData);
      this.dispatchChangeEvent();
      return window2.webContents.id;
    });
    require$$0$1.ipcMain.handle("close-tab", async (_event, id) => {
      this.listWindow.forEach((win) => {
        if (win.window.webContents.id === id) {
          win.window.webContents.destroy();
          this.listWindow = this.listWindow.filter((instance) => instance.window.webContents.id !== id);
        }
      });
      this.#setActiveTab(this.mainWebView);
      this.dispatchChangeEvent();
    });
    require$$0$1.ipcMain.handle("switch-tab", async (_event, id) => {
      const tab = this.listWindow.find((instance) => instance.window.webContents.id === id);
      console.log("switch tab", id, tab);
      if (tab) {
        this.#setActiveTab(tab.window);
        this.dispatchChangeEvent();
      }
    });
    require$$0$1.ipcMain.handle("get-tabs-data", async (_event) => {
      console.log("call get-tabs-data");
      const ret = this.getTabData();
      return ret;
    });
    require$$0$1.ipcMain.handle("replace-tab", async (_event, data) => {
      this.replaceTab(data.id, data.newTab);
      this.dispatchChangeEvent();
      return this.getTabData();
    });
  }
  restoreOrCreateWindow = async () => {
    let window2 = this.mainWindow;
    if (window2 === void 0) {
      await this.createMainWindow();
      window2 = this.mainWindow;
    }
    if (window2.isMinimized()) {
      window2.restore();
    }
    window2.focus();
  };
}
const windowManger = new WindowManager();
var renderer = { exports: {} };
var scope = scopeFactory$1;
function scopeFactory$1(logger2) {
  return Object.defineProperties(scope2, {
    defaultLabel: { value: "", writable: true },
    labelPadding: { value: true, writable: true },
    maxLabelLength: { value: 0, writable: true },
    labelLength: {
      get() {
        switch (typeof scope2.labelPadding) {
          case "boolean":
            return scope2.labelPadding ? scope2.maxLabelLength : 0;
          case "number":
            return scope2.labelPadding;
          default:
            return 0;
        }
      }
    }
  });
  function scope2(label) {
    scope2.maxLabelLength = Math.max(scope2.maxLabelLength, label.length);
    const newScope = {};
    for (const level of [...logger2.levels, "log"]) {
      newScope[level] = (...d2) => logger2.logData(d2, { level, scope: label });
    }
    return newScope;
  }
}
const scopeFactory = scope;
class Logger$1 {
  static instances = {};
  errorHandler = null;
  eventLogger = null;
  functions = {};
  hooks = [];
  isDev = false;
  levels = null;
  logId = null;
  scope = null;
  transports = {};
  variables = {};
  constructor({
    allowUnknownLevel = false,
    errorHandler,
    eventLogger,
    initializeFn,
    isDev: isDev2 = false,
    levels = ["error", "warn", "info", "verbose", "debug", "silly"],
    logId,
    transportFactories = {},
    variables
  } = {}) {
    this.addLevel = this.addLevel.bind(this);
    this.create = this.create.bind(this);
    this.logData = this.logData.bind(this);
    this.processMessage = this.processMessage.bind(this);
    this.allowUnknownLevel = allowUnknownLevel;
    this.initializeFn = initializeFn;
    this.isDev = isDev2;
    this.levels = levels;
    this.logId = logId;
    this.transportFactories = transportFactories;
    this.variables = variables || {};
    this.scope = scopeFactory(this);
    this.addLevel("log", false);
    for (const name of this.levels) {
      this.addLevel(name, false);
    }
    this.errorHandler = errorHandler;
    errorHandler == null ? void 0 : errorHandler.setOptions({ logFn: this.error });
    this.eventLogger = eventLogger;
    eventLogger == null ? void 0 : eventLogger.setOptions({ logger: this });
    for (const [name, factory] of Object.entries(transportFactories)) {
      this.transports[name] = factory(this);
    }
    Logger$1.instances[logId] = this;
  }
  static getInstance({ logId }) {
    return this.instances[logId] || this.instances.default;
  }
  addLevel(level, index = this.levels.length) {
    if (index !== false) {
      this.levels.splice(index, 0, level);
    }
    this[level] = (...args) => this.logData(args, { level });
    this.functions[level] = this[level];
  }
  catchErrors(options) {
    this.processMessage({
      data: ["log.catchErrors is deprecated. Use log.errorHandler instead"],
      level: "warn"
    }, { transports: ["console"] });
    return this.errorHandler.startCatching(options);
  }
  create(options) {
    if (typeof options === "string") {
      options = { logId: options };
    }
    return new Logger$1(__spreadProps2(__spreadValues2({}, options), {
      errorHandler: this.errorHandler,
      initializeFn: this.initializeFn,
      isDev: this.isDev,
      transportFactories: this.transportFactories,
      variables: __spreadValues2({}, this.variables)
    }));
  }
  compareLevels(passLevel, checkLevel, levels = this.levels) {
    const pass = levels.indexOf(passLevel);
    const check = levels.indexOf(checkLevel);
    if (check === -1 || pass === -1) {
      return true;
    }
    return check <= pass;
  }
  initialize({ preload = true, spyRendererConsole = false } = {}) {
    this.initializeFn({ logger: this, preload, spyRendererConsole });
  }
  logData(data, options = {}) {
    this.processMessage(__spreadValues2({ data }, options));
  }
  processMessage(message, { transports = this.transports } = {}) {
    if (message.cmd === "errorHandler") {
      this.errorHandler.handle(message.error, {
        errorName: message.errorName,
        processType: "renderer",
        showDialog: Boolean(message.showDialog)
      });
      return;
    }
    let level = message.level;
    if (!this.allowUnknownLevel) {
      level = this.levels.includes(message.level) ? message.level : "info";
    }
    const normalizedMessage = __spreadProps2(__spreadValues2({
      date: new Date()
    }, message), {
      level,
      variables: __spreadValues2(__spreadValues2({}, this.variables), message.variables)
    });
    for (const [transName, transFn] of this.transportEntries(transports)) {
      if (typeof transFn !== "function" || transFn.level === false) {
        continue;
      }
      if (!this.compareLevels(transFn.level, message.level)) {
        continue;
      }
      try {
        const transformedMsg = this.hooks.reduce((msg, hook) => {
          return msg ? hook(msg, transFn, transName) : msg;
        }, normalizedMessage);
        if (transformedMsg) {
          transFn(__spreadProps2(__spreadValues2({}, transformedMsg), { data: [...transformedMsg.data] }));
        }
      } catch (e) {
        this.processInternalErrorFn(e);
      }
    }
  }
  processInternalErrorFn(_e) {
  }
  transportEntries(transports = this.transports) {
    const transportArray = Array.isArray(transports) ? transports : Object.entries(transports);
    return transportArray.map((item) => {
      switch (typeof item) {
        case "string":
          return this.transports[item] ? [item, this.transports[item]] : null;
        case "function":
          return [item.name, item];
        default:
          return Array.isArray(item) ? item : null;
      }
    }).filter(Boolean);
  }
}
var Logger_1 = Logger$1;
const consoleError = console.error;
class RendererErrorHandler {
  logFn = null;
  onError = null;
  showDialog = false;
  preventDefault = true;
  constructor({ logFn = null } = {}) {
    this.handleError = this.handleError.bind(this);
    this.handleRejection = this.handleRejection.bind(this);
    this.startCatching = this.startCatching.bind(this);
    this.logFn = logFn;
  }
  handle(error, {
    logFn = this.logFn,
    errorName = "",
    onError: onError2 = this.onError,
    showDialog = this.showDialog
  } = {}) {
    try {
      if ((onError2 == null ? void 0 : onError2({ error, errorName, processType: "renderer" })) !== false) {
        logFn({ error, errorName, showDialog });
      }
    } catch {
      consoleError(error);
    }
  }
  setOptions({ logFn, onError: onError2, preventDefault, showDialog }) {
    if (typeof logFn === "function") {
      this.logFn = logFn;
    }
    if (typeof onError2 === "function") {
      this.onError = onError2;
    }
    if (typeof preventDefault === "boolean") {
      this.preventDefault = preventDefault;
    }
    if (typeof showDialog === "boolean") {
      this.showDialog = showDialog;
    }
  }
  startCatching({ onError: onError2, showDialog } = {}) {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.setOptions({ onError: onError2, showDialog });
    window.addEventListener("error", (event) => {
      var _a2;
      this.preventDefault && ((_a2 = event.preventDefault) == null ? void 0 : _a2.call(event));
      this.handleError(event.error || event);
    });
    window.addEventListener("unhandledrejection", (event) => {
      var _a2;
      this.preventDefault && ((_a2 = event.preventDefault) == null ? void 0 : _a2.call(event));
      this.handleRejection(event.reason || event);
    });
  }
  handleError(error) {
    this.handle(error, { errorName: "Unhandled" });
  }
  handleRejection(reason) {
    const error = reason instanceof Error ? reason : new Error(JSON.stringify(reason));
    this.handle(error, { errorName: "Unhandled rejection" });
  }
}
var RendererErrorHandler_1 = RendererErrorHandler;
var console_1 = consoleTransportRendererFactory;
const consoleMethods = {
  error: console.error,
  warn: console.warn,
  info: console.info,
  verbose: console.info,
  debug: console.debug,
  silly: console.debug,
  log: console.log
};
function consoleTransportRendererFactory(logger2) {
  return Object.assign(transport, {
    format: "{h}:{i}:{s}.{ms}{scope} \u203A {text}",
    formatDataFn(_a2) {
      var _b = _a2, {
        data = [],
        date = new Date(),
        format = transport.format,
        logId = logger2.logId,
        scope: scope2 = logger2.scopeName
      } = _b, message = __objRest(_b, [
        "data",
        "date",
        "format",
        "logId",
        "scope"
      ]);
      if (typeof format === "function") {
        return format(__spreadProps2(__spreadValues2({}, message), { data, date, logId, scope: scope2 }));
      }
      if (typeof format !== "string") {
        return data;
      }
      data.unshift(format);
      if (typeof data[1] === "string" && data[1].match(/%[1cdfiOos]/)) {
        data = [`${data[0]} ${data[1]}`, ...data.slice(2)];
      }
      data[0] = data[0].replace(/\{(\w+)}/g, (substring, name) => {
        var _a3;
        switch (name) {
          case "level":
            return message.level;
          case "logId":
            return logId;
          case "scope":
            return scope2 ? ` (${scope2})` : "";
          case "text":
            return "";
          case "y":
            return date.getFullYear().toString(10);
          case "m":
            return (date.getMonth() + 1).toString(10).padStart(2, "0");
          case "d":
            return date.getDate().toString(10).padStart(2, "0");
          case "h":
            return date.getHours().toString(10).padStart(2, "0");
          case "i":
            return date.getMinutes().toString(10).padStart(2, "0");
          case "s":
            return date.getSeconds().toString(10).padStart(2, "0");
          case "ms":
            return date.getMilliseconds().toString(10).padStart(3, "0");
          case "iso":
            return date.toISOString();
          default: {
            return ((_a3 = message.variables) == null ? void 0 : _a3[name]) || substring;
          }
        }
      }).trim();
      return data;
    },
    writeFn({ message: { level, data } }) {
      const consoleLogFn = consoleMethods[level] || consoleMethods.info;
      setTimeout(() => consoleLogFn(...data));
    }
  });
  function transport(message) {
    transport.writeFn({
      message: __spreadProps2(__spreadValues2({}, message), { data: transport.formatDataFn(message) })
    });
  }
}
var ipc = ipcTransportRendererFactory;
const RESTRICTED_TYPES = new Set([Promise, WeakMap, WeakSet]);
function ipcTransportRendererFactory(logger2) {
  return Object.assign(transport, {
    depth: 5,
    serializeFn(data, { depth: depth2 = 5, seen = new WeakSet() } = {}) {
      if (depth2 < 1) {
        return `[${typeof data}]`;
      }
      if (seen.has(data)) {
        return data;
      }
      if (["function", "symbol"].includes(typeof data)) {
        return data.toString();
      }
      if (Object(data) !== data) {
        return data;
      }
      if (RESTRICTED_TYPES.has(data.constructor)) {
        return `[${data.constructor.name}]`;
      }
      if (Array.isArray(data)) {
        return data.map((item) => transport.serializeFn(item, { level: depth2 - 1, seen }));
      }
      if (data instanceof Error) {
        return data.stack;
      }
      if (data instanceof Map) {
        return new Map(Array.from(data).map(([key, value]) => [
          transport.serializeFn(key, { level: depth2 - 1, seen }),
          transport.serializeFn(value, { level: depth2 - 1, seen })
        ]));
      }
      if (data instanceof Set) {
        return new Set(Array.from(data).map((val) => transport.serializeFn(val, { level: depth2 - 1, seen })));
      }
      seen.add(data);
      return Object.fromEntries(Object.entries(data).map(([key, value]) => [
        key,
        transport.serializeFn(value, { level: depth2 - 1, seen })
      ]));
    }
  });
  function transport(message) {
    if (!window.__electronLog) {
      logger2.processMessage({
        data: ["electron-log: logger isn't initialized in the main process"],
        level: "error"
      }, { transports: ["console"] });
      return;
    }
    try {
      __electronLog.sendToMain(transport.serializeFn(message, {
        depth: transport.depth
      }));
    } catch (e) {
      logger2.transports.console({
        data: ["electronLog.transports.ipc", e, "data:", message.data],
        level: "error"
      });
    }
  }
}
(function(module) {
  const Logger2 = Logger_1;
  const RendererErrorHandler2 = RendererErrorHandler_1;
  const transportConsole = console_1;
  const transportIpc = ipc;
  module.exports = createLogger2();
  module.exports.Logger = Logger2;
  module.exports.default = module.exports;
  function createLogger2() {
    const logger2 = new Logger2({
      allowUnknownLevel: true,
      errorHandler: new RendererErrorHandler2(),
      initializeFn: () => {
      },
      logId: "default",
      transportFactories: {
        console: transportConsole,
        ipc: transportIpc
      },
      variables: {
        processType: "renderer"
      }
    });
    logger2.errorHandler.setOptions({
      logFn({ error, errorName, showDialog }) {
        logger2.transports.console({
          data: [errorName, error].filter(Boolean),
          level: "error"
        });
        logger2.transports.ipc({
          cmd: "errorHandler",
          error: {
            cause: error == null ? void 0 : error.cause,
            code: error == null ? void 0 : error.code,
            name: error == null ? void 0 : error.name,
            message: error == null ? void 0 : error.message,
            stack: error == null ? void 0 : error.stack
          },
          errorName,
          logId: logger2.logId,
          showDialog
        });
      }
    });
    if (typeof window === "object") {
      window.addEventListener("message", (event) => {
        const _a2 = event.data || {}, { cmd, logId } = _a2, message = __objRest(_a2, ["cmd", "logId"]);
        const instance = Logger2.getInstance({ logId });
        if (cmd === "message") {
          instance.processMessage(message, { transports: ["console"] });
        }
      });
    }
    return new Proxy(logger2, {
      get(target, prop) {
        if (typeof target[prop] !== "undefined") {
          return target[prop];
        }
        return (...data) => logger2.logData(data, { level: prop });
      }
    });
  }
})(renderer);
var log = renderer.exports;
if (!electronIsDev$1) {
  log.transports.file.level = "verbose";
}
process.on("unhandledRejection", log.error);
function startAutoUpdater() {
  if (require("electron-squirrel-startup")) {
    require$$0$1.app.quit();
  }
  if (!electronIsDev$1) {
    const server = "https://refi-updater.vercel.app";
    const feed = `${server}/update/${process.platform}/${require$$0$1.app.getVersion()}`;
    require$$0$1.autoUpdater.setFeedURL({ url: feed, serverType: "json" });
    setInterval(() => {
      require$$0$1.autoUpdater.checkForUpdates();
    }, 6e4);
    require$$0$1.autoUpdater.on("update-downloaded", (_, releaseNotes, releaseName) => {
      log.debug("Downloaded new update");
      const dialogOpts = {
        type: "info",
        buttons: ["Restart", "Later"],
        title: "Application Update",
        message: process.platform === "win32" ? releaseNotes : releaseName,
        detail: "A new version has been downloaded. Restart the application to apply the updates."
      };
      require$$0$1.dialog.showMessageBox(dialogOpts).then((returnValue) => {
        if (returnValue.response === 0)
          require$$0$1.autoUpdater.quitAndInstall();
      });
    });
    require$$0$1.autoUpdater.on("error", (message) => {
      log.error("There was a problem updating the application");
      log.error(message);
    });
  }
}
var dist$2 = {};
var httpProxyMiddleware = {};
var httpProxy$3 = { exports: {} };
var eventemitter3 = { exports: {} };
(function(module) {
  var has = Object.prototype.hasOwnProperty, prefix = "~";
  function Events() {
  }
  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__)
      prefix = false;
  }
  function EE2(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter2, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener = new EE2(fn, context || emitter2, once), evt = prefix ? prefix + event : event;
    if (!emitter2._events[evt])
      emitter2._events[evt] = listener, emitter2._eventsCount++;
    else if (!emitter2._events[evt].fn)
      emitter2._events[evt].push(listener);
    else
      emitter2._events[evt] = [emitter2._events[evt], listener];
    return emitter2;
  }
  function clearEvent(emitter2, evt) {
    if (--emitter2._eventsCount === 0)
      emitter2._events = new Events();
    else
      delete emitter2._events[evt];
  }
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    var names2 = [], events2, name;
    if (this._eventsCount === 0)
      return names2;
    for (name in events2 = this._events) {
      if (has.call(events2, name))
        names2.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
      return names2.concat(Object.getOwnPropertySymbols(events2));
    }
    return names2;
  };
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers2 = this._events[evt];
    if (!handlers2)
      return [];
    if (handlers2.fn)
      return [handlers2.fn];
    for (var i = 0, l = handlers2.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers2[i].fn;
    }
    return ee;
  };
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners)
      return 0;
    if (listeners.fn)
      return 1;
    return listeners.length;
  };
  EventEmitter.prototype.emit = function emit2(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once)
        this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length, j;
      for (i = 0; i < length; i++) {
        if (listeners[i].once)
          this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args)
              for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events2 = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events2.push(listeners[i]);
        }
      }
      if (events2.length)
        this._events[evt] = events2.length === 1 ? events2[0] : events2;
      else
        clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt])
        clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;
  {
    module.exports = EventEmitter;
  }
})(eventemitter3);
var common$4 = {};
var requiresPort = function required(port, protocol) {
  protocol = protocol.split(":")[0];
  port = +port;
  if (!port)
    return false;
  switch (protocol) {
    case "http":
    case "ws":
      return port !== 80;
    case "https":
    case "wss":
      return port !== 443;
    case "ftp":
      return port !== 21;
    case "gopher":
      return port !== 70;
    case "file":
      return false;
  }
  return port !== 0;
};
(function(exports) {
  var common2 = exports, url2 = require$$0__default$2["default"], extend = require$$0__default$1["default"]._extend, required2 = requiresPort;
  var upgradeHeader = /(^|,)\s*upgrade\s*($|,)/i, isSSL = /^https|wss/;
  common2.isSSL = isSSL;
  common2.setupOutgoing = function(outgoing, options, req, forward) {
    outgoing.port = options[forward || "target"].port || (isSSL.test(options[forward || "target"].protocol) ? 443 : 80);
    [
      "host",
      "hostname",
      "socketPath",
      "pfx",
      "key",
      "passphrase",
      "cert",
      "ca",
      "ciphers",
      "secureProtocol"
    ].forEach(function(e) {
      outgoing[e] = options[forward || "target"][e];
    });
    outgoing.method = options.method || req.method;
    outgoing.headers = extend({}, req.headers);
    if (options.headers) {
      extend(outgoing.headers, options.headers);
    }
    if (options.auth) {
      outgoing.auth = options.auth;
    }
    if (options.ca) {
      outgoing.ca = options.ca;
    }
    if (isSSL.test(options[forward || "target"].protocol)) {
      outgoing.rejectUnauthorized = typeof options.secure === "undefined" ? true : options.secure;
    }
    outgoing.agent = options.agent || false;
    outgoing.localAddress = options.localAddress;
    if (!outgoing.agent) {
      outgoing.headers = outgoing.headers || {};
      if (typeof outgoing.headers.connection !== "string" || !upgradeHeader.test(outgoing.headers.connection)) {
        outgoing.headers.connection = "close";
      }
    }
    var target = options[forward || "target"];
    var targetPath = target && options.prependPath !== false ? target.path || "" : "";
    var outgoingPath = !options.toProxy ? url2.parse(req.url).path || "" : req.url;
    outgoingPath = !options.ignorePath ? outgoingPath : "";
    outgoing.path = common2.urlJoin(targetPath, outgoingPath);
    if (options.changeOrigin) {
      outgoing.headers.host = required2(outgoing.port, options[forward || "target"].protocol) && !hasPort(outgoing.host) ? outgoing.host + ":" + outgoing.port : outgoing.host;
    }
    return outgoing;
  };
  common2.setupSocket = function(socket) {
    socket.setTimeout(0);
    socket.setNoDelay(true);
    socket.setKeepAlive(true, 0);
    return socket;
  };
  common2.getPort = function(req) {
    var res = req.headers.host ? req.headers.host.match(/:(\d+)/) : "";
    return res ? res[1] : common2.hasEncryptedConnection(req) ? "443" : "80";
  };
  common2.hasEncryptedConnection = function(req) {
    return Boolean(req.connection.encrypted || req.connection.pair);
  };
  common2.urlJoin = function() {
    var args = Array.prototype.slice.call(arguments), lastIndex = args.length - 1, last2 = args[lastIndex], lastSegs = last2.split("?"), retSegs;
    args[lastIndex] = lastSegs.shift();
    retSegs = [
      args.filter(Boolean).join("/").replace(/\/+/g, "/").replace("http:/", "http://").replace("https:/", "https://")
    ];
    retSegs.push.apply(retSegs, lastSegs);
    return retSegs.join("?");
  };
  common2.rewriteCookieProperty = function rewriteCookieProperty(header, config, property) {
    if (Array.isArray(header)) {
      return header.map(function(headerElement) {
        return rewriteCookieProperty(headerElement, config, property);
      });
    }
    return header.replace(new RegExp("(;\\s*" + property + "=)([^;]+)", "i"), function(match2, prefix, previousValue) {
      var newValue;
      if (previousValue in config) {
        newValue = config[previousValue];
      } else if ("*" in config) {
        newValue = config["*"];
      } else {
        return match2;
      }
      if (newValue) {
        return prefix + newValue;
      } else {
        return "";
      }
    });
  };
  function hasPort(host) {
    return !!~host.indexOf(":");
  }
})(common$4);
var url$3 = require$$0__default$2["default"], common$3 = common$4;
var redirectRegex = /^201|30(1|2|7|8)$/;
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, res, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var webOutgoing = {
  removeChunked: function removeChunked(req, res, proxyRes) {
    if (req.httpVersion === "1.0") {
      delete proxyRes.headers["transfer-encoding"];
    }
  },
  setConnection: function setConnection(req, res, proxyRes) {
    if (req.httpVersion === "1.0") {
      proxyRes.headers.connection = req.headers.connection || "close";
    } else if (req.httpVersion !== "2.0" && !proxyRes.headers.connection) {
      proxyRes.headers.connection = req.headers.connection || "keep-alive";
    }
  },
  setRedirectHostRewrite: function setRedirectHostRewrite(req, res, proxyRes, options) {
    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite) && proxyRes.headers["location"] && redirectRegex.test(proxyRes.statusCode)) {
      var target = url$3.parse(options.target);
      var u = url$3.parse(proxyRes.headers["location"]);
      if (target.host != u.host) {
        return;
      }
      if (options.hostRewrite) {
        u.host = options.hostRewrite;
      } else if (options.autoRewrite) {
        u.host = req.headers["host"];
      }
      if (options.protocolRewrite) {
        u.protocol = options.protocolRewrite;
      }
      proxyRes.headers["location"] = u.format();
    }
  },
  writeHeaders: function writeHeaders(req, res, proxyRes, options) {
    var rewriteCookieDomainConfig = options.cookieDomainRewrite, rewriteCookiePathConfig = options.cookiePathRewrite, preserveHeaderKeyCase = options.preserveHeaderKeyCase, rawHeaderKeyMap, setHeader = function(key2, header) {
      if (header == void 0)
        return;
      if (rewriteCookieDomainConfig && key2.toLowerCase() === "set-cookie") {
        header = common$3.rewriteCookieProperty(header, rewriteCookieDomainConfig, "domain");
      }
      if (rewriteCookiePathConfig && key2.toLowerCase() === "set-cookie") {
        header = common$3.rewriteCookieProperty(header, rewriteCookiePathConfig, "path");
      }
      res.setHeader(String(key2).trim(), header);
    };
    if (typeof rewriteCookieDomainConfig === "string") {
      rewriteCookieDomainConfig = { "*": rewriteCookieDomainConfig };
    }
    if (typeof rewriteCookiePathConfig === "string") {
      rewriteCookiePathConfig = { "*": rewriteCookiePathConfig };
    }
    if (preserveHeaderKeyCase && proxyRes.rawHeaders != void 0) {
      rawHeaderKeyMap = {};
      for (var i = 0; i < proxyRes.rawHeaders.length; i += 2) {
        var key = proxyRes.rawHeaders[i];
        rawHeaderKeyMap[key.toLowerCase()] = key;
      }
    }
    Object.keys(proxyRes.headers).forEach(function(key2) {
      var header = proxyRes.headers[key2];
      if (preserveHeaderKeyCase && rawHeaderKeyMap) {
        key2 = rawHeaderKeyMap[key2] || key2;
      }
      setHeader(key2, header);
    });
  },
  writeStatusCode: function writeStatusCode(req, res, proxyRes) {
    if (proxyRes.statusMessage) {
      res.statusCode = proxyRes.statusCode;
      res.statusMessage = proxyRes.statusMessage;
    } else {
      res.statusCode = proxyRes.statusCode;
    }
  }
};
var followRedirects$1 = { exports: {} };
var debug$3;
var debug_1 = function() {
  if (!debug$3) {
    try {
      debug$3 = require("debug")("follow-redirects");
    } catch (error) {
    }
    if (typeof debug$3 !== "function") {
      debug$3 = function() {
      };
    }
  }
  debug$3.apply(null, arguments);
};
var url$2 = require$$0__default$2["default"];
var URL$1 = url$2.URL;
var http$1 = require$$0__default$3["default"];
var https$1 = require$$1__default["default"];
var Writable = require$$3__default["default"].Writable;
var assert$1 = require$$4__default["default"];
var debug$2 = debug_1;
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function(event) {
  eventHandlers[event] = function(arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});
var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
var destroy = Writable.prototype.destroy || noop$1;
function RedirectableRequest(options, responseCallback) {
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];
  if (responseCallback) {
    this.on("response", responseCallback);
  }
  var self2 = this;
  this._onNativeResponse = function(response) {
    self2._processResponse(response);
  };
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};
RedirectableRequest.prototype.destroy = function(error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};
RedirectableRequest.prototype.write = function(data, encoding, callback) {
  if (this._ending) {
    throw new WriteAfterEndError();
  }
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data, encoding });
    this._currentRequest.write(data, encoding, callback);
  } else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};
RedirectableRequest.prototype.end = function(data, encoding, callback) {
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  } else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  } else {
    var self2 = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function() {
      self2._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};
RedirectableRequest.prototype.setHeader = function(name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};
RedirectableRequest.prototype.removeHeader = function(name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
  var self2 = this;
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }
  function startTimer(socket) {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
    }
    self2._timeout = setTimeout(function() {
      self2.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }
  function clearTimer() {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
      self2._timeout = null;
    }
    self2.removeListener("abort", clearTimer);
    self2.removeListener("error", clearTimer);
    self2.removeListener("response", clearTimer);
    self2.removeListener("close", clearTimer);
    if (callback) {
      self2.removeListener("timeout", callback);
    }
    if (!self2.socket) {
      self2._currentRequest.removeListener("socket", startTimer);
    }
  }
  if (callback) {
    this.on("timeout", callback);
  }
  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  }
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);
  return this;
};
[
  "flushHeaders",
  "getHeader",
  "setNoDelay",
  "setSocketKeepAlive"
].forEach(function(method) {
  RedirectableRequest.prototype[method] = function(a, b) {
    return this._currentRequest[method](a, b);
  };
});
["aborted", "connection", "socket"].forEach(function(property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function() {
      return this._currentRequest[property];
    }
  });
});
RedirectableRequest.prototype._sanitizeOptions = function(options) {
  if (!options.headers) {
    options.headers = {};
  }
  if (options.host) {
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};
RedirectableRequest.prototype._performRequest = function() {
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  }
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }
  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }
  this._currentUrl = /^\//.test(this._options.path) ? url$2.format(this._options) : this._options.path;
  if (this._isRedirect) {
    var i = 0;
    var self2 = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      if (request === self2._currentRequest) {
        if (error) {
          self2.emit("error", error);
        } else if (i < buffers.length) {
          var buffer = buffers[i++];
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } else if (self2._ended) {
          request.end();
        }
      }
    })();
  }
};
RedirectableRequest.prototype._processResponse = function(response) {
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode
    });
  }
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);
    this._requestBodyBuffers = [];
    return;
  }
  destroyRequest(this._currentRequest);
  response.destroy();
  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  }
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      Host: response.req.getHeader("host")
    }, this._options.headers);
  }
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
  var currentUrlParts = url$2.parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url$2.format(Object.assign(currentUrlParts, { host: currentHost }));
  var redirectUrl;
  try {
    redirectUrl = url$2.resolve(currentUrl, location);
  } catch (cause) {
    this.emit("error", new RedirectionError({ cause }));
    return;
  }
  debug$2("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url$2.parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts);
  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode
    };
    var requestDetails = {
      url: currentUrl,
      method,
      headers: requestHeaders
    };
    try {
      beforeRedirect(this._options, responseDetails, requestDetails);
    } catch (err) {
      this.emit("error", err);
      return;
    }
    this._sanitizeOptions(this._options);
  }
  try {
    this._performRequest();
  } catch (cause) {
    this.emit("error", new RedirectionError({ cause }));
  }
};
function wrap(protocols) {
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  };
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function(scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
    function request(input, options, callback) {
      if (isString(input)) {
        var parsed;
        try {
          parsed = urlToOptions(new URL$1(input));
        } catch (err) {
          parsed = url$2.parse(input);
        }
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
        input = parsed;
      } else if (URL$1 && input instanceof URL$1) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = { protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }
      assert$1.equal(options.protocol, protocol, "protocol mismatch");
      debug$2("options", options);
      return new RedirectableRequest(options, callback);
    }
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true }
    });
  });
  return exports;
}
function noop$1() {
}
function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ? urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };
  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }
  return options;
}
function removeMatchingHeaders(regex2, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex2.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
  function CustomError(properties) {
    Error.captureStackTrace(this, this.constructor);
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }
  CustomError.prototype = new (baseClass || Error)();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  return CustomError;
}
function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop$1);
  request.destroy(error);
}
function isSubdomain(subdomain, domain) {
  assert$1(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value) {
  return typeof value === "string" || value instanceof String;
}
function isFunction(value) {
  return typeof value === "function";
}
function isBuffer(value) {
  return typeof value === "object" && "length" in value;
}
followRedirects$1.exports = wrap({ http: http$1, https: https$1 });
followRedirects$1.exports.wrap = wrap;
var httpNative = require$$0__default$3["default"], httpsNative = require$$1__default["default"], web_o = webOutgoing, common$2 = common$4, followRedirects = followRedirects$1.exports;
web_o = Object.keys(web_o).map(function(pass) {
  return web_o[pass];
});
var nativeAgents = { http: httpNative, https: httpsNative };
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, res, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var webIncoming = {
  deleteLength: function deleteLength(req, res, options) {
    if ((req.method === "DELETE" || req.method === "OPTIONS") && !req.headers["content-length"]) {
      req.headers["content-length"] = "0";
      delete req.headers["transfer-encoding"];
    }
  },
  timeout: function timeout(req, res, options) {
    if (options.timeout) {
      req.socket.setTimeout(options.timeout);
    }
  },
  XHeaders: function XHeaders(req, res, options) {
    if (!options.xfwd)
      return;
    var encrypted = req.isSpdy || common$2.hasEncryptedConnection(req);
    var values = {
      for: req.connection.remoteAddress || req.socket.remoteAddress,
      port: common$2.getPort(req),
      proto: encrypted ? "https" : "http"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req.headers["x-forwarded-" + header] = (req.headers["x-forwarded-" + header] || "") + (req.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
    req.headers["x-forwarded-host"] = req.headers["x-forwarded-host"] || req.headers["host"] || "";
  },
  stream: function stream(req, res, options, _, server, clb) {
    server.emit("start", req, res, options.target || options.forward);
    var agents = options.followRedirects ? followRedirects : nativeAgents;
    var http2 = agents.http;
    var https2 = agents.https;
    if (options.forward) {
      var forwardReq = (options.forward.protocol === "https:" ? https2 : http2).request(common$2.setupOutgoing(options.ssl || {}, options, req, "forward"));
      var forwardError = createErrorHandler(forwardReq, options.forward);
      req.on("error", forwardError);
      forwardReq.on("error", forwardError);
      (options.buffer || req).pipe(forwardReq);
      if (!options.target) {
        return res.end();
      }
    }
    var proxyReq = (options.target.protocol === "https:" ? https2 : http2).request(common$2.setupOutgoing(options.ssl || {}, options, req));
    proxyReq.on("socket", function(socket) {
      if (server && !proxyReq.getHeader("expect")) {
        server.emit("proxyReq", proxyReq, req, res, options);
      }
    });
    if (options.proxyTimeout) {
      proxyReq.setTimeout(options.proxyTimeout, function() {
        proxyReq.abort();
      });
    }
    req.on("aborted", function() {
      proxyReq.abort();
    });
    var proxyError = createErrorHandler(proxyReq, options.target);
    req.on("error", proxyError);
    proxyReq.on("error", proxyError);
    function createErrorHandler(proxyReq2, url2) {
      return function proxyError2(err) {
        if (req.socket.destroyed && err.code === "ECONNRESET") {
          server.emit("econnreset", err, req, res, url2);
          return proxyReq2.abort();
        }
        if (clb) {
          clb(err, req, res, url2);
        } else {
          server.emit("error", err, req, res, url2);
        }
      };
    }
    (options.buffer || req).pipe(proxyReq);
    proxyReq.on("response", function(proxyRes) {
      if (server) {
        server.emit("proxyRes", proxyRes, req, res);
      }
      if (!res.headersSent && !options.selfHandleResponse) {
        for (var i = 0; i < web_o.length; i++) {
          if (web_o[i](req, res, proxyRes, options)) {
            break;
          }
        }
      }
      if (!res.finished) {
        proxyRes.on("end", function() {
          if (server)
            server.emit("end", req, res, proxyRes);
        });
        if (!options.selfHandleResponse)
          proxyRes.pipe(res);
      } else {
        if (server)
          server.emit("end", req, res, proxyRes);
      }
    });
  }
};
var http = require$$0__default$3["default"], https = require$$1__default["default"], common$1 = common$4;
/*!
 * Array of passes.
 *
 * A `pass` is just a function that is executed on `req, socket, options`
 * so that you can easily add new checks while still keeping the base
 * flexible.
 */
var wsIncoming = {
  checkMethodAndHeader: function checkMethodAndHeader(req, socket) {
    if (req.method !== "GET" || !req.headers.upgrade) {
      socket.destroy();
      return true;
    }
    if (req.headers.upgrade.toLowerCase() !== "websocket") {
      socket.destroy();
      return true;
    }
  },
  XHeaders: function XHeaders2(req, socket, options) {
    if (!options.xfwd)
      return;
    var values = {
      for: req.connection.remoteAddress || req.socket.remoteAddress,
      port: common$1.getPort(req),
      proto: common$1.hasEncryptedConnection(req) ? "wss" : "ws"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req.headers["x-forwarded-" + header] = (req.headers["x-forwarded-" + header] || "") + (req.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
  },
  stream: function stream2(req, socket, options, head, server, clb) {
    var createHttpHeader = function(line, headers) {
      return Object.keys(headers).reduce(function(head2, key) {
        var value = headers[key];
        if (!Array.isArray(value)) {
          head2.push(key + ": " + value);
          return head2;
        }
        for (var i = 0; i < value.length; i++) {
          head2.push(key + ": " + value[i]);
        }
        return head2;
      }, [line]).join("\r\n") + "\r\n\r\n";
    };
    common$1.setupSocket(socket);
    if (head && head.length)
      socket.unshift(head);
    var proxyReq = (common$1.isSSL.test(options.target.protocol) ? https : http).request(common$1.setupOutgoing(options.ssl || {}, options, req));
    if (server) {
      server.emit("proxyReqWs", proxyReq, req, socket, options, head);
    }
    proxyReq.on("error", onOutgoingError);
    proxyReq.on("response", function(res) {
      if (!res.upgrade) {
        socket.write(createHttpHeader("HTTP/" + res.httpVersion + " " + res.statusCode + " " + res.statusMessage, res.headers));
        res.pipe(socket);
      }
    });
    proxyReq.on("upgrade", function(proxyRes, proxySocket, proxyHead) {
      proxySocket.on("error", onOutgoingError);
      proxySocket.on("end", function() {
        server.emit("close", proxyRes, proxySocket, proxyHead);
      });
      socket.on("error", function() {
        proxySocket.end();
      });
      common$1.setupSocket(proxySocket);
      if (proxyHead && proxyHead.length)
        proxySocket.unshift(proxyHead);
      socket.write(createHttpHeader("HTTP/1.1 101 Switching Protocols", proxyRes.headers));
      proxySocket.pipe(socket).pipe(proxySocket);
      server.emit("open", proxySocket);
      server.emit("proxySocket", proxySocket);
    });
    return proxyReq.end();
    function onOutgoingError(err) {
      if (clb) {
        clb(err, req, socket);
      } else {
        server.emit("error", err, req, socket);
      }
      socket.end();
    }
  }
};
(function(module) {
  var httpProxy2 = module.exports, extend = require$$0__default$1["default"]._extend, parse_url = require$$0__default$2["default"].parse, EE3 = eventemitter3.exports, http2 = require$$0__default$3["default"], https2 = require$$1__default["default"], web = webIncoming, ws = wsIncoming;
  httpProxy2.Server = ProxyServer2;
  function createRightProxy(type) {
    return function(options) {
      return function(req, res) {
        var passes = type === "ws" ? this.wsPasses : this.webPasses, args = [].slice.call(arguments), cntr = args.length - 1, head, cbl;
        if (typeof args[cntr] === "function") {
          cbl = args[cntr];
          cntr--;
        }
        var requestOptions = options;
        if (!(args[cntr] instanceof Buffer) && args[cntr] !== res) {
          requestOptions = extend({}, options);
          extend(requestOptions, args[cntr]);
          cntr--;
        }
        if (args[cntr] instanceof Buffer) {
          head = args[cntr];
        }
        ["target", "forward"].forEach(function(e) {
          if (typeof requestOptions[e] === "string")
            requestOptions[e] = parse_url(requestOptions[e]);
        });
        if (!requestOptions.target && !requestOptions.forward) {
          return this.emit("error", new Error("Must provide a proper URL as target"));
        }
        for (var i = 0; i < passes.length; i++) {
          if (passes[i](req, res, requestOptions, head, this, cbl)) {
            break;
          }
        }
      };
    };
  }
  httpProxy2.createRightProxy = createRightProxy;
  function ProxyServer2(options) {
    EE3.call(this);
    options = options || {};
    options.prependPath = options.prependPath === false ? false : true;
    this.web = this.proxyRequest = createRightProxy("web")(options);
    this.ws = this.proxyWebsocketRequest = createRightProxy("ws")(options);
    this.options = options;
    this.webPasses = Object.keys(web).map(function(pass) {
      return web[pass];
    });
    this.wsPasses = Object.keys(ws).map(function(pass) {
      return ws[pass];
    });
    this.on("error", this.onError, this);
  }
  require$$0__default$1["default"].inherits(ProxyServer2, EE3);
  ProxyServer2.prototype.onError = function(err) {
    if (this.listeners("error").length === 1) {
      throw err;
    }
  };
  ProxyServer2.prototype.listen = function(port, hostname) {
    var self2 = this, closure = function(req, res) {
      self2.web(req, res);
    };
    this._server = this.options.ssl ? https2.createServer(this.options.ssl, closure) : http2.createServer(closure);
    if (this.options.ws) {
      this._server.on("upgrade", function(req, socket, head) {
        self2.ws(req, socket, head);
      });
    }
    this._server.listen(port, hostname);
    return this;
  };
  ProxyServer2.prototype.close = function(callback) {
    var self2 = this;
    if (this._server) {
      this._server.close(done);
    }
    function done() {
      self2._server = null;
      if (callback) {
        callback.apply(null, arguments);
      }
    }
  };
  ProxyServer2.prototype.before = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName)
        i = idx;
    });
    if (i === false)
      throw new Error("No such pass");
    passes.splice(i, 0, callback);
  };
  ProxyServer2.prototype.after = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName)
        i = idx;
    });
    if (i === false)
      throw new Error("No such pass");
    passes.splice(i++, 0, callback);
  };
})(httpProxy$3);
var ProxyServer = httpProxy$3.exports.Server;
function createProxyServer(options) {
  return new ProxyServer(options);
}
ProxyServer.createProxyServer = createProxyServer;
ProxyServer.createServer = createProxyServer;
ProxyServer.createProxy = createProxyServer;
var httpProxy$2 = ProxyServer;
/*!
 * Caron dimonio, con occhi di bragia
 * loro accennando, tutte le raccoglie;
 * batte col remo qualunque s’adagia 
 *
 * Charon the demon, with the eyes of glede,
 * Beckoning to them, collects them all together,
 * Beats with his oar whoever lags behind
 *          
 *          Dante - The Divine Comedy (Canto III)
 */
var httpProxy$1 = httpProxy$2;
var configFactory = {};
var isPlainObj$3 = (value) => {
  if (Object.prototype.toString.call(value) !== "[object Object]") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return prototype === null || prototype === Object.prototype;
};
var errors = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ERRORS = void 0;
  (function(ERRORS) {
    ERRORS["ERR_CONFIG_FACTORY_TARGET_MISSING"] = '[HPM] Missing "target" option. Example: {target: "http://www.example.org"}';
    ERRORS["ERR_CONTEXT_MATCHER_GENERIC"] = '[HPM] Invalid context. Expecting something like: "/api" or ["/api", "/ajax"]';
    ERRORS["ERR_CONTEXT_MATCHER_INVALID_ARRAY"] = '[HPM] Invalid context. Expecting something like: ["/api", "/ajax"] or ["/api/**", "!**.html"]';
    ERRORS["ERR_PATH_REWRITER_CONFIG"] = "[HPM] Invalid pathRewrite config. Expecting object with pathRewrite config or a rewrite function";
  })(exports.ERRORS || (exports.ERRORS = {}));
})(errors);
var logger$4 = {};
Object.defineProperty(logger$4, "__esModule", { value: true });
logger$4.getArrow = logger$4.getInstance = void 0;
const util$3 = require$$0__default$1["default"];
let loggerInstance;
const defaultProvider = {
  log: console.log,
  debug: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
var LEVELS;
(function(LEVELS2) {
  LEVELS2[LEVELS2["debug"] = 10] = "debug";
  LEVELS2[LEVELS2["info"] = 20] = "info";
  LEVELS2[LEVELS2["warn"] = 30] = "warn";
  LEVELS2[LEVELS2["error"] = 50] = "error";
  LEVELS2[LEVELS2["silent"] = 80] = "silent";
})(LEVELS || (LEVELS = {}));
function getInstance() {
  if (!loggerInstance) {
    loggerInstance = new Logger();
  }
  return loggerInstance;
}
logger$4.getInstance = getInstance;
class Logger {
  constructor() {
    this.setLevel("info");
    this.setProvider(() => defaultProvider);
  }
  log() {
    this.provider.log(this._interpolate.apply(null, arguments));
  }
  debug() {
    if (this._showLevel("debug")) {
      this.provider.debug(this._interpolate.apply(null, arguments));
    }
  }
  info() {
    if (this._showLevel("info")) {
      this.provider.info(this._interpolate.apply(null, arguments));
    }
  }
  warn() {
    if (this._showLevel("warn")) {
      this.provider.warn(this._interpolate.apply(null, arguments));
    }
  }
  error() {
    if (this._showLevel("error")) {
      this.provider.error(this._interpolate.apply(null, arguments));
    }
  }
  setLevel(v) {
    if (this.isValidLevel(v)) {
      this.logLevel = v;
    }
  }
  setProvider(fn) {
    if (fn && this.isValidProvider(fn)) {
      this.provider = fn(defaultProvider);
    }
  }
  isValidProvider(fnProvider) {
    const result = true;
    if (fnProvider && typeof fnProvider !== "function") {
      throw new Error("[HPM] Log provider config error. Expecting a function.");
    }
    return result;
  }
  isValidLevel(levelName) {
    const validLevels = Object.keys(LEVELS);
    const isValid = validLevels.includes(levelName);
    if (!isValid) {
      throw new Error("[HPM] Log level error. Invalid logLevel.");
    }
    return isValid;
  }
  _showLevel(showLevel) {
    let result = false;
    const currentLogLevel = LEVELS[this.logLevel];
    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {
      result = true;
    }
    return result;
  }
  _interpolate(format, ...args) {
    const result = util$3.format(format, ...args);
    return result;
  }
}
function getArrow(originalPath, newPath, originalTarget, newTarget) {
  const arrow = [">"];
  const isNewTarget = originalTarget !== newTarget;
  const isNewPath = originalPath !== newPath;
  if (isNewPath && !isNewTarget) {
    arrow.unshift("~");
  } else if (!isNewPath && isNewTarget) {
    arrow.unshift("=");
  } else if (isNewPath && isNewTarget) {
    arrow.unshift("\u2248");
  } else {
    arrow.unshift("-");
  }
  return arrow.join("");
}
logger$4.getArrow = getArrow;
Object.defineProperty(configFactory, "__esModule", { value: true });
configFactory.createConfig = void 0;
const isPlainObj$2 = isPlainObj$3;
const url$1 = require$$0__default$2["default"];
const errors_1$2 = errors;
const logger_1$4 = logger$4;
const logger$3 = (0, logger_1$4.getInstance)();
function createConfig(context, opts) {
  const config = {
    context: void 0,
    options: {}
  };
  if (isContextless(context, opts)) {
    config.context = "/";
    config.options = Object.assign(config.options, context);
  } else if (isStringShortHand(context)) {
    const oUrl = url$1.parse(context);
    const target = [oUrl.protocol, "//", oUrl.host].join("");
    config.context = oUrl.pathname || "/";
    config.options = Object.assign(config.options, { target }, opts);
    if (oUrl.protocol === "ws:" || oUrl.protocol === "wss:") {
      config.options.ws = true;
    }
  } else {
    config.context = context;
    config.options = Object.assign(config.options, opts);
  }
  configureLogger(config.options);
  if (!config.options.target && !config.options.router) {
    throw new Error(errors_1$2.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);
  }
  return config;
}
configFactory.createConfig = createConfig;
function isStringShortHand(context) {
  if (typeof context === "string") {
    return !!url$1.parse(context).host;
  }
}
function isContextless(context, opts) {
  return isPlainObj$2(context) && (opts == null || Object.keys(opts).length === 0);
}
function configureLogger(options) {
  if (options.logLevel) {
    logger$3.setLevel(options.logLevel);
  }
  if (options.logProvider) {
    logger$3.setProvider(options.logProvider);
  }
}
var contextMatcher$1 = {};
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
var isExtglob$1 = function isExtglob2(str) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  var match2;
  while (match2 = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
    if (match2[2])
      return true;
    str = str.slice(match2.index + match2[0].length);
  }
  return false;
};
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var isExtglob = isExtglob$1;
var chars = { "{": "}", "(": ")", "[": "]" };
var strictCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  var pipeIndex = -2;
  var closeSquareIndex = -2;
  var closeCurlyIndex = -2;
  var closeParenIndex = -2;
  var backSlashIndex = -2;
  while (index < str.length) {
    if (str[index] === "*") {
      return true;
    }
    if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
      return true;
    }
    if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
      if (closeSquareIndex < index) {
        closeSquareIndex = str.indexOf("]", index);
      }
      if (closeSquareIndex > index) {
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
      }
    }
    if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
      closeCurlyIndex = str.indexOf("}", index);
      if (closeCurlyIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
          return true;
        }
      }
    }
    if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
      closeParenIndex = str.indexOf(")", index);
      if (closeParenIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
          return true;
        }
      }
    }
    if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
      if (pipeIndex < index) {
        pipeIndex = str.indexOf("|", index);
      }
      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
        closeParenIndex = str.indexOf(")", pipeIndex);
        if (closeParenIndex > pipeIndex) {
          backSlashIndex = str.indexOf("\\", pipeIndex);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
    }
    if (str[index] === "\\") {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];
      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var relaxedCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  while (index < str.length) {
    if (/[*?{}()[\]]/.test(str[index])) {
      return true;
    }
    if (str[index] === "\\") {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];
      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var isGlob$1 = function isGlob2(str, options) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  if (isExtglob(str)) {
    return true;
  }
  var check = strictCheck;
  if (options && options.strict === false) {
    check = relaxedCheck;
  }
  return check(str);
};
var utils$8 = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type) => {
    let node = block.nodes[n];
    if (!node)
      return;
    if (type && node.type === type || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$8);
const utils$7 = utils$8;
var stringify$4 = (ast, options = {}) => {
  let stringify2 = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils$7.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = "";
    if (node.value) {
      if ((invalidBlock || invalidNode) && utils$7.isOpenOrClose(node)) {
        return "\\" + node.value;
      }
      return node.value;
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify2(child);
      }
    }
    return output;
  };
  return stringify2(ast);
};
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const isNumber$1 = isNumber$2;
const toRegexRange$1 = (min, max, options) => {
  if (isNumber$1(min) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max === void 0 || min === max) {
    return String(min);
  }
  if (isNumber$1(max) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = __spreadValues2({ relaxZeros: true }, options);
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap2 = String(opts.wrap);
  let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap2;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min, max);
  let b = Math.max(min, max);
  if (Math.abs(a - b) === 1) {
    let result = min + "|" + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }
  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state;
  return state.result;
};
function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, "-", false) || [];
  let onlyPositive = filterPatterns(pos, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min, max) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min, nines);
  let stops = new Set([max]);
  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }
  stop = countZeros(max + 1, zeros2) - 1;
  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern += options.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern, count: [count], digits };
}
function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max2 = ranges[i];
    let obj = rangeToPattern(String(start), String(max2), options);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max2 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max2, tok, options);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max2 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];
  for (let ele of arr) {
    let { string } = ele;
    if (!intersection && !contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
    if (intersection && contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++)
    arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val);
}
function countNines(min, len) {
  return Number(String(min).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}
function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }
  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;
  switch (diff) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
const util$2 = require$$0__default$1["default"];
const toRegexRange = toRegexRange_1;
const isObject$1 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const transform = (toNumber2) => {
  return (value) => toNumber2 === true ? Number(value) : String(value);
};
const isValidValue = (value) => {
  return typeof value === "number" || typeof value === "string" && value !== "";
};
const isNumber = (num) => Number.isInteger(+num);
const zeros = (input) => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === "-")
    value = value.slice(1);
  if (value === "0")
    return false;
  while (value[++index] === "0")
    ;
  return index > 0;
};
const stringify$3 = (start, end, options) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options.stringify === true;
};
const pad = (input, maxLength, toNumber2) => {
  if (maxLength > 0) {
    let dash = input[0] === "-" ? "-" : "";
    if (dash)
      input = input.slice(1);
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber2 === false) {
    return String(input);
  }
  return input;
};
const toMaxLen = (input, maxLength) => {
  let negative = input[0] === "-" ? "-" : "";
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength)
    input = "0" + input;
  return negative ? "-" + input : input;
};
const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, __spreadValues2({ wrap: false }, options));
  }
  let start = String.fromCharCode(a);
  if (a === b)
    return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap2 = options.wrap === true;
    let prefix = options.capture ? "" : "?:";
    return wrap2 ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options);
};
const rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util$2.inspect(...args));
};
const invalidRange = (start, end, options) => {
  if (options.strictRanges === true)
    throw rangeError([start, end]);
  return [];
};
const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  }
  if (a === 0)
    a = 0;
  if (b === 0)
    b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber2 = padded === false && stringify$3(start, end, options) === false;
  let format = options.transform || transform(toNumber2);
  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }
  let parts = { negatives: [], positives: [] };
  let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber2));
    }
    a = descending ? a - step : a + step;
    index++;
  }
  if (options.toRegex === true) {
    return step > 1 ? toSequence(parts, options) : toRegex(range, null, __spreadValues2({ wrap: false }, options));
  }
  return range;
};
const fillLetters = (start, end, step = 1, options = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options);
  }
  let format = options.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);
  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }
  let range = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }
  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }
  return range;
};
const fill$2 = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject$1(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = __spreadValues2({}, options);
  if (opts.capture === true)
    opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject$1(step))
      return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
const fill$1 = fillRange;
const utils$6 = utils$8;
const compile$1 = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils$6.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? "\\" : "";
    let output = "";
    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }
    if (node.type === "open") {
      return invalid ? prefix + node.value : "(";
    }
    if (node.type === "close") {
      return invalid ? prefix + node.value : ")";
    }
    if (node.type === "comma") {
      return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
    }
    if (node.value) {
      return node.value;
    }
    if (node.nodes && node.ranges > 0) {
      let args = utils$6.reduce(node.nodes);
      let range = fill$1(...args, __spreadProps2(__spreadValues2({}, options), { wrap: false, toRegex: true }));
      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }
    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };
  return walk(ast);
};
var compile_1 = compile$1;
const fill = fillRange;
const stringify$2 = stringify$4;
const utils$5 = utils$8;
const append$2 = (queue2 = "", stash = "", enclose = false) => {
  let result = [];
  queue2 = [].concat(queue2);
  stash = [].concat(stash);
  if (!stash.length)
    return queue2;
  if (!queue2.length) {
    return enclose ? utils$5.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (let item of queue2) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append$2(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string")
          ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append$2(item, ele, enclose) : item + ele);
      }
    }
  }
  return utils$5.flatten(result);
};
const expand$1 = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
  let walk = (node, parent = {}) => {
    node.queue = [];
    let p = parent;
    let q = parent.queue;
    while (p.type !== "brace" && p.type !== "root" && p.parent) {
      p = p.parent;
      q = p.queue;
    }
    if (node.invalid || node.dollar) {
      q.push(append$2(q.pop(), stringify$2(node, options)));
      return;
    }
    if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
      q.push(append$2(q.pop(), ["{}"]));
      return;
    }
    if (node.nodes && node.ranges > 0) {
      let args = utils$5.reduce(node.nodes);
      if (utils$5.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify$2(node, options);
      }
      q.push(append$2(q.pop(), range));
      node.nodes = [];
      return;
    }
    let enclose = utils$5.encloseBrace(node);
    let queue2 = node.queue;
    let block = node;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue2 = block.queue;
    }
    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];
      if (child.type === "comma" && node.type === "brace") {
        if (i === 1)
          queue2.push("");
        queue2.push("");
        continue;
      }
      if (child.type === "close") {
        q.push(append$2(q.pop(), queue2, enclose));
        continue;
      }
      if (child.value && child.type !== "open") {
        queue2.push(append$2(queue2.pop(), child.value));
        continue;
      }
      if (child.nodes) {
        walk(child, node);
      }
    }
    return queue2;
  };
  return utils$5.flatten(walk(ast));
};
var expand_1 = expand$1;
var constants$4 = {
  MAX_LENGTH: 1024 * 64,
  CHAR_0: "0",
  CHAR_9: "9",
  CHAR_UPPERCASE_A: "A",
  CHAR_LOWERCASE_A: "a",
  CHAR_UPPERCASE_Z: "Z",
  CHAR_LOWERCASE_Z: "z",
  CHAR_LEFT_PARENTHESES: "(",
  CHAR_RIGHT_PARENTHESES: ")",
  CHAR_ASTERISK: "*",
  CHAR_AMPERSAND: "&",
  CHAR_AT: "@",
  CHAR_BACKSLASH: "\\",
  CHAR_BACKTICK: "`",
  CHAR_CARRIAGE_RETURN: "\r",
  CHAR_CIRCUMFLEX_ACCENT: "^",
  CHAR_COLON: ":",
  CHAR_COMMA: ",",
  CHAR_DOLLAR: "$",
  CHAR_DOT: ".",
  CHAR_DOUBLE_QUOTE: '"',
  CHAR_EQUAL: "=",
  CHAR_EXCLAMATION_MARK: "!",
  CHAR_FORM_FEED: "\f",
  CHAR_FORWARD_SLASH: "/",
  CHAR_HASH: "#",
  CHAR_HYPHEN_MINUS: "-",
  CHAR_LEFT_ANGLE_BRACKET: "<",
  CHAR_LEFT_CURLY_BRACE: "{",
  CHAR_LEFT_SQUARE_BRACKET: "[",
  CHAR_LINE_FEED: "\n",
  CHAR_NO_BREAK_SPACE: "\xA0",
  CHAR_PERCENT: "%",
  CHAR_PLUS: "+",
  CHAR_QUESTION_MARK: "?",
  CHAR_RIGHT_ANGLE_BRACKET: ">",
  CHAR_RIGHT_CURLY_BRACE: "}",
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  CHAR_SEMICOLON: ";",
  CHAR_SINGLE_QUOTE: "'",
  CHAR_SPACE: " ",
  CHAR_TAB: "	",
  CHAR_UNDERSCORE: "_",
  CHAR_VERTICAL_LINE: "|",
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
};
const stringify$1 = stringify$4;
const {
  MAX_LENGTH: MAX_LENGTH$1,
  CHAR_BACKSLASH,
  CHAR_BACKTICK,
  CHAR_COMMA: CHAR_COMMA$1,
  CHAR_DOT: CHAR_DOT$1,
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1,
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1,
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1,
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1,
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1,
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1,
  CHAR_DOUBLE_QUOTE,
  CHAR_SINGLE_QUOTE,
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$4;
const parse$5 = (input, options = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  let opts = options || {};
  let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }
  let ast = { type: "root", input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth2 = 0;
  let value;
  const advance = () => input[index++];
  const push = (node) => {
    if (node.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node.type === "text") {
      prev.value += node.value;
      return;
    }
    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };
  push({ type: "bos" });
  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();
    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value === CHAR_BACKSLASH) {
      push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
      continue;
    }
    if (value === CHAR_RIGHT_SQUARE_BRACKET$1) {
      push({ type: "text", value: "\\" + value });
      continue;
    }
    if (value === CHAR_LEFT_SQUARE_BRACKET$1) {
      brackets++;
      let next;
      while (index < length && (next = advance())) {
        value += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET$1) {
          brackets++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          brackets--;
          if (brackets === 0) {
            break;
          }
        }
      }
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_PARENTHESES$1) {
      block = push({ type: "paren", nodes: [] });
      stack.push(block);
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_RIGHT_PARENTHESES$1) {
      if (block.type !== "paren") {
        push({ type: "text", value });
        continue;
      }
      block = stack.pop();
      push({ type: "text", value });
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;
      if (options.keepQuotes !== true) {
        value = "";
      }
      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }
        if (next === open) {
          if (options.keepQuotes === true)
            value += next;
          break;
        }
        value += next;
      }
      push({ type: "text", value });
      continue;
    }
    if (value === CHAR_LEFT_CURLY_BRACE$1) {
      depth2++;
      let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      let brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth: depth2,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push(brace);
      stack.push(block);
      push({ type: "open", value });
      continue;
    }
    if (value === CHAR_RIGHT_CURLY_BRACE$1) {
      if (block.type !== "brace") {
        push({ type: "text", value });
        continue;
      }
      let type = "close";
      block = stack.pop();
      block.close = true;
      push({ type, value });
      depth2--;
      block = stack[stack.length - 1];
      continue;
    }
    if (value === CHAR_COMMA$1 && depth2 > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: "text", value: stringify$1(block) }];
      }
      push({ type: "comma", value });
      block.commas++;
      continue;
    }
    if (value === CHAR_DOT$1 && depth2 > 0 && block.commas === 0) {
      let siblings = block.nodes;
      if (depth2 === 0 || siblings.length === 0) {
        push({ type: "text", value });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }
      push({ type: "dot", value });
      continue;
    }
    push({ type: "text", value });
  }
  do {
    block = stack.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node) => {
        if (!node.nodes) {
          if (node.type === "open")
            node.isOpen = true;
          if (node.type === "close")
            node.isClose = true;
          if (!node.nodes)
            node.type = "text";
          node.invalid = true;
        }
      });
      let parent = stack[stack.length - 1];
      let index2 = parent.nodes.indexOf(block);
      parent.nodes.splice(index2, 1, ...block.nodes);
    }
  } while (stack.length > 0);
  push({ type: "eos" });
  return ast;
};
var parse_1$1 = parse$5;
const stringify = stringify$4;
const compile = compile_1;
const expand = expand_1;
const parse$4 = parse_1$1;
const braces$1 = (input, options = {}) => {
  let output = [];
  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces$1.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces$1.create(input, options));
  }
  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};
braces$1.parse = (input, options = {}) => parse$4(input, options);
braces$1.stringify = (input, options = {}) => {
  if (typeof input === "string") {
    return stringify(braces$1.parse(input, options), options);
  }
  return stringify(input, options);
};
braces$1.compile = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  return compile(input, options);
};
braces$1.expand = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  let result = expand(input, options);
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input, options = {}) => {
  if (input === "" || input.length < 3) {
    return [input];
  }
  return options.expand !== true ? braces$1.compile(input, options) : braces$1.expand(input, options);
};
var braces_1 = braces$1;
var utils$4 = {};
const path$2 = path__default["default"];
const WIN_SLASH = "\\\\/";
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
const DOT_LITERAL = "\\.";
const PLUS_LITERAL = "\\+";
const QMARK_LITERAL = "\\?";
const SLASH_LITERAL = "\\/";
const ONE_CHAR = "(?=.)";
const QMARK = "[^/]";
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;
const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};
const WINDOWS_CHARS = __spreadProps2(__spreadValues2({}, POSIX_CHARS), {
  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
});
const POSIX_REGEX_SOURCE$1 = {
  alnum: "a-zA-Z0-9",
  alpha: "a-zA-Z",
  ascii: "\\x00-\\x7F",
  blank: " \\t",
  cntrl: "\\x00-\\x1F\\x7F",
  digit: "0-9",
  graph: "\\x21-\\x7E",
  lower: "a-z",
  print: "\\x20-\\x7E ",
  punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
  space: " \\t\\r\\n\\v\\f",
  upper: "A-Z",
  word: "A-Za-z0-9_",
  xdigit: "A-Fa-f0-9"
};
var constants$3 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
  REPLACEMENTS: {
    "***": "*",
    "**/**": "**",
    "**/**/**": "**"
  },
  CHAR_0: 48,
  CHAR_9: 57,
  CHAR_UPPERCASE_A: 65,
  CHAR_LOWERCASE_A: 97,
  CHAR_UPPERCASE_Z: 90,
  CHAR_LOWERCASE_Z: 122,
  CHAR_LEFT_PARENTHESES: 40,
  CHAR_RIGHT_PARENTHESES: 41,
  CHAR_ASTERISK: 42,
  CHAR_AMPERSAND: 38,
  CHAR_AT: 64,
  CHAR_BACKWARD_SLASH: 92,
  CHAR_CARRIAGE_RETURN: 13,
  CHAR_CIRCUMFLEX_ACCENT: 94,
  CHAR_COLON: 58,
  CHAR_COMMA: 44,
  CHAR_DOT: 46,
  CHAR_DOUBLE_QUOTE: 34,
  CHAR_EQUAL: 61,
  CHAR_EXCLAMATION_MARK: 33,
  CHAR_FORM_FEED: 12,
  CHAR_FORWARD_SLASH: 47,
  CHAR_GRAVE_ACCENT: 96,
  CHAR_HASH: 35,
  CHAR_HYPHEN_MINUS: 45,
  CHAR_LEFT_ANGLE_BRACKET: 60,
  CHAR_LEFT_CURLY_BRACE: 123,
  CHAR_LEFT_SQUARE_BRACKET: 91,
  CHAR_LINE_FEED: 10,
  CHAR_NO_BREAK_SPACE: 160,
  CHAR_PERCENT: 37,
  CHAR_PLUS: 43,
  CHAR_QUESTION_MARK: 63,
  CHAR_RIGHT_ANGLE_BRACKET: 62,
  CHAR_RIGHT_CURLY_BRACE: 125,
  CHAR_RIGHT_SQUARE_BRACKET: 93,
  CHAR_SEMICOLON: 59,
  CHAR_SINGLE_QUOTE: 39,
  CHAR_SPACE: 32,
  CHAR_TAB: 9,
  CHAR_UNDERSCORE: 95,
  CHAR_VERTICAL_LINE: 124,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
  SEP: path$2.sep,
  extglobChars(chars2) {
    return {
      "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars2.STAR})` },
      "?": { type: "qmark", open: "(?:", close: ")?" },
      "+": { type: "plus", open: "(?:", close: ")+" },
      "*": { type: "star", open: "(?:", close: ")*" },
      "@": { type: "at", open: "(?:", close: ")" }
    };
  },
  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};
(function(exports) {
  const path2 = path__default["default"];
  const win32 = process.platform === "win32";
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = constants$3;
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match2) => {
      return match2 === "\\" ? "" : match2;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path2.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append2 = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append2}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
})(utils$4);
const utils$3 = utils$4;
const {
  CHAR_ASTERISK,
  CHAR_AT,
  CHAR_BACKWARD_SLASH,
  CHAR_COMMA,
  CHAR_DOT,
  CHAR_EXCLAMATION_MARK,
  CHAR_FORWARD_SLASH,
  CHAR_LEFT_CURLY_BRACE,
  CHAR_LEFT_PARENTHESES,
  CHAR_LEFT_SQUARE_BRACKET,
  CHAR_PLUS,
  CHAR_QUESTION_MARK,
  CHAR_RIGHT_CURLY_BRACE,
  CHAR_RIGHT_PARENTHESES,
  CHAR_RIGHT_SQUARE_BRACKET
} = constants$3;
const isPathSeparator = (code) => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};
const depth = (token) => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};
const scan$1 = (input, options) => {
  const opts = options || {};
  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];
  let str = input;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob3 = false;
  let isExtglob3 = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces2 = 0;
  let prev;
  let code;
  let token = { value: "", depth: 0, isGlob: false };
  const eos = () => index >= length;
  const peek = () => str.charCodeAt(index + 1);
  const advance = () => {
    prev = code;
    return str.charCodeAt(++index);
  };
  while (index < length) {
    code = advance();
    let next;
    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();
      if (code === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }
    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces2++;
      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braces2++;
          continue;
        }
        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (braceEscaped !== true && code === CHAR_COMMA) {
          isBrace = token.isBrace = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_RIGHT_CURLY_BRACE) {
          braces2--;
          if (braces2 === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index);
      tokens.push(token);
      token = { value: "", depth: 0, isGlob: false };
      if (finished === true)
        continue;
      if (prev === CHAR_DOT && index === start + 1) {
        start += 2;
        continue;
      }
      lastIndex = index + 1;
      continue;
    }
    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob3 = token.isGlob = true;
        isExtglob3 = token.isExtglob = true;
        finished = true;
        if (code === CHAR_EXCLAMATION_MARK && index === start) {
          negatedExtglob = true;
        }
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              isGlob3 = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }
    if (code === CHAR_ASTERISK) {
      if (prev === CHAR_ASTERISK)
        isGlobstar = token.isGlobstar = true;
      isGlob3 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_QUESTION_MARK) {
      isGlob3 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code === CHAR_LEFT_SQUARE_BRACKET) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          isBracket = token.isBracket = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          break;
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = token.negated = true;
      start++;
      continue;
    }
    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
      isGlob3 = token.isGlob = true;
      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }
          if (code === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }
    if (isGlob3 === true) {
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
  }
  if (opts.noext === true) {
    isExtglob3 = false;
    isGlob3 = false;
  }
  let base = str;
  let prefix = "";
  let glob = "";
  if (start > 0) {
    prefix = str.slice(0, start);
    str = str.slice(start);
    lastIndex -= start;
  }
  if (base && isGlob3 === true && lastIndex > 0) {
    base = str.slice(0, lastIndex);
    glob = str.slice(lastIndex);
  } else if (isGlob3 === true) {
    base = "";
    glob = str;
  } else {
    base = str;
  }
  if (base && base !== "" && base !== "/" && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }
  if (opts.unescape === true) {
    if (glob)
      glob = utils$3.removeBackslashes(glob);
    if (base && backslashes === true) {
      base = utils$3.removeBackslashes(base);
    }
  }
  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob: isGlob3,
    isExtglob: isExtglob3,
    isGlobstar,
    negated,
    negatedExtglob
  };
  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }
  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;
    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== "") {
        parts.push(value);
      }
      prevIndex = i;
    }
    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);
      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }
    state.slashes = slashes;
    state.parts = parts;
  }
  return state;
};
var scan_1 = scan$1;
const constants$2 = constants$3;
const utils$2 = utils$4;
const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants$2;
const expandRange = (args, options) => {
  if (typeof options.expandRange === "function") {
    return options.expandRange(...args, options);
  }
  args.sort();
  const value = `[${args.join("-")}]`;
  try {
    new RegExp(value);
  } catch (ex) {
    return args.map((v) => utils$2.escapeRegex(v)).join("..");
  }
  return value;
};
const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};
const parse$3 = (input, options) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  input = REPLACEMENTS[input] || input;
  const opts = __spreadValues2({}, options);
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  const bos = { type: "bos", value: "", output: opts.prepend || "" };
  const tokens = [bos];
  const capture = opts.capture ? "" : "?:";
  const win32 = utils$2.isWindows(options);
  const PLATFORM_CHARS = constants$2.globChars(win32);
  const EXTGLOB_CHARS = constants$2.extglobChars(PLATFORM_CHARS);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    PLUS_LITERAL: PLUS_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOT_SLASH: NO_DOT_SLASH2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    QMARK: QMARK2,
    QMARK_NO_DOT: QMARK_NO_DOT2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = PLATFORM_CHARS;
  const globstar = (opts2) => {
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const nodot = opts.dot ? "" : NO_DOT2;
  const qmarkNoDot = opts.dot ? QMARK2 : QMARK_NO_DOT2;
  let star = opts.bash === true ? globstar(opts) : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  if (typeof opts.noext === "boolean") {
    opts.noextglob = opts.noext;
  }
  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: "",
    output: "",
    prefix: "",
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };
  input = utils$2.removePrefix(input, state);
  len = input.length;
  const extglobs = [];
  const braces2 = [];
  const stack = [];
  let prev = bos;
  let value;
  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || "";
  const remaining = () => input.slice(state.index + 1);
  const consume = (value2 = "", num = 0) => {
    state.consumed += value2;
    state.index += num;
  };
  const append2 = (token) => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };
  const negate = () => {
    let count = 1;
    while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
      advance();
      state.start++;
      count++;
    }
    if (count % 2 === 0) {
      return false;
    }
    state.negated = true;
    state.start++;
    return true;
  };
  const increment = (type) => {
    state[type]++;
    stack.push(type);
  };
  const decrement = (type) => {
    state[type]--;
    stack.pop();
  };
  const push = (tok) => {
    if (prev.type === "globstar") {
      const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
      const isExtglob3 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
      if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob3) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "star";
        prev.value = "*";
        prev.output = star;
        state.output += prev.output;
      }
    }
    if (extglobs.length && tok.type !== "paren") {
      extglobs[extglobs.length - 1].inner += tok.value;
    }
    if (tok.value || tok.output)
      append2(tok);
    if (prev && prev.type === "text" && tok.type === "text") {
      prev.value += tok.value;
      prev.output = (prev.output || "") + tok.value;
      return;
    }
    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };
  const extglobOpen = (type, value2) => {
    const token = __spreadProps2(__spreadValues2({}, EXTGLOB_CHARS[value2]), { conditions: 1, inner: "" });
    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? "(" : "") + token.open;
    increment("parens");
    push({ type, value: value2, output: state.output ? "" : ONE_CHAR2 });
    push({ type: "paren", extglob: true, value: advance(), output });
    extglobs.push(token);
  };
  const extglobClose = (token) => {
    let output = token.close + (opts.capture ? ")" : "");
    let rest;
    if (token.type === "negate") {
      let extglobStar = star;
      if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
        extglobStar = globstar(opts);
      }
      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }
      if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        const expression = parse$3(rest, __spreadProps2(__spreadValues2({}, options), { fastpaths: false })).output;
        output = token.close = `)${expression})${extglobStar})`;
      }
      if (token.prev.type === "bos") {
        state.negatedExtglob = true;
      }
    }
    push({ type: "paren", extglob: true, value, output });
    decrement("parens");
  };
  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;
    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars2, first2, rest, index) => {
      if (first2 === "\\") {
        backslashes = true;
        return m2;
      }
      if (first2 === "?") {
        if (esc) {
          return esc + first2 + (rest ? QMARK2.repeat(rest.length) : "");
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK2.repeat(rest.length) : "");
        }
        return QMARK2.repeat(chars2.length);
      }
      if (first2 === ".") {
        return DOT_LITERAL2.repeat(chars2.length);
      }
      if (first2 === "*") {
        if (esc) {
          return esc + first2 + (rest ? star : "");
        }
        return star;
      }
      return esc ? m2 : `\\${m2}`;
    });
    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, "");
      } else {
        output = output.replace(/\\+/g, (m2) => {
          return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
        });
      }
    }
    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }
    state.output = utils$2.wrapOutput(output, state, options);
    return state;
  }
  while (!eos()) {
    value = advance();
    if (value === "\0") {
      continue;
    }
    if (value === "\\") {
      const next = peek();
      if (next === "/" && opts.bash !== true) {
        continue;
      }
      if (next === "." || next === ";") {
        continue;
      }
      if (!next) {
        value += "\\";
        push({ type: "text", value });
        continue;
      }
      const match2 = /^\\+/.exec(remaining());
      let slashes = 0;
      if (match2 && match2[0].length > 2) {
        slashes = match2[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += "\\";
        }
      }
      if (opts.unescape === true) {
        value = advance();
      } else {
        value += advance();
      }
      if (state.brackets === 0) {
        push({ type: "text", value });
        continue;
      }
    }
    if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
      if (opts.posix !== false && value === ":") {
        const inner = prev.value.slice(1);
        if (inner.includes("[")) {
          prev.posix = true;
          if (inner.includes(":")) {
            const idx = prev.value.lastIndexOf("[");
            const pre = prev.value.slice(0, idx);
            const rest2 = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest2];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();
              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR2;
              }
              continue;
            }
          }
        }
      }
      if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
        value = `\\${value}`;
      }
      if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
        value = `\\${value}`;
      }
      if (opts.posix === true && value === "!" && prev.value === "[") {
        value = "^";
      }
      prev.value += value;
      append2({ value });
      continue;
    }
    if (state.quotes === 1 && value !== '"') {
      value = utils$2.escapeRegex(value);
      prev.value += value;
      append2({ value });
      continue;
    }
    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: "text", value });
      }
      continue;
    }
    if (value === "(") {
      increment("parens");
      push({ type: "paren", value });
      continue;
    }
    if (value === ")") {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError("opening", "("));
      }
      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }
      push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
      decrement("parens");
      continue;
    }
    if (value === "[") {
      if (opts.nobracket === true || !remaining().includes("]")) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("closing", "]"));
        }
        value = `\\${value}`;
      } else {
        increment("brackets");
      }
      push({ type: "bracket", value });
      continue;
    }
    if (value === "]") {
      if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
        push({ type: "text", value, output: `\\${value}` });
        continue;
      }
      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "["));
        }
        push({ type: "text", value, output: `\\${value}` });
        continue;
      }
      decrement("brackets");
      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
        value = `/${value}`;
      }
      prev.value += value;
      append2({ value });
      if (opts.literalBrackets === false || utils$2.hasRegexChars(prevValue)) {
        continue;
      }
      const escaped = utils$2.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }
    if (value === "{" && opts.nobrace !== true) {
      increment("braces");
      const open = {
        type: "brace",
        value,
        output: "(",
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };
      braces2.push(open);
      push(open);
      continue;
    }
    if (value === "}") {
      const brace = braces2[braces2.length - 1];
      if (opts.nobrace === true || !brace) {
        push({ type: "text", value, output: value });
        continue;
      }
      let output = ")";
      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];
        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === "brace") {
            break;
          }
          if (arr[i].type !== "dots") {
            range.unshift(arr[i].value);
          }
        }
        output = expandRange(range, opts);
        state.backtrack = true;
      }
      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = "\\{";
        value = output = "\\}";
        state.output = out;
        for (const t of toks) {
          state.output += t.output || t.value;
        }
      }
      push({ type: "brace", value, output });
      decrement("braces");
      braces2.pop();
      continue;
    }
    if (value === "|") {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: "text", value });
      continue;
    }
    if (value === ",") {
      let output = value;
      const brace = braces2[braces2.length - 1];
      if (brace && stack[stack.length - 1] === "braces") {
        brace.comma = true;
        output = "|";
      }
      push({ type: "comma", value, output });
      continue;
    }
    if (value === "/") {
      if (prev.type === "dot" && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = "";
        state.output = "";
        tokens.pop();
        prev = bos;
        continue;
      }
      push({ type: "slash", value, output: SLASH_LITERAL2 });
      continue;
    }
    if (value === ".") {
      if (state.braces > 0 && prev.type === "dot") {
        if (prev.value === ".")
          prev.output = DOT_LITERAL2;
        const brace = braces2[braces2.length - 1];
        prev.type = "dots";
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }
      if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
        push({ type: "text", value, output: DOT_LITERAL2 });
        continue;
      }
      push({ type: "dot", value, output: DOT_LITERAL2 });
      continue;
    }
    if (value === "?") {
      const isGroup = prev && prev.value === "(";
      if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("qmark", value);
        continue;
      }
      if (prev && prev.type === "paren") {
        const next = peek();
        let output = value;
        if (next === "<" && !utils$2.supportsLookbehinds()) {
          throw new Error("Node.js v10 or higher is required for regex lookbehinds");
        }
        if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
          output = `\\${value}`;
        }
        push({ type: "text", value, output });
        continue;
      }
      if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
        push({ type: "qmark", value, output: QMARK_NO_DOT2 });
        continue;
      }
      push({ type: "qmark", value, output: QMARK2 });
      continue;
    }
    if (value === "!") {
      if (opts.noextglob !== true && peek() === "(") {
        if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
          extglobOpen("negate", value);
          continue;
        }
      }
      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }
    if (value === "+") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("plus", value);
        continue;
      }
      if (prev && prev.value === "(" || opts.regex === false) {
        push({ type: "plus", value, output: PLUS_LITERAL2 });
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
        push({ type: "plus", value });
        continue;
      }
      push({ type: "plus", value: PLUS_LITERAL2 });
      continue;
    }
    if (value === "@") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        push({ type: "at", extglob: true, value, output: "" });
        continue;
      }
      push({ type: "text", value });
      continue;
    }
    if (value !== "*") {
      if (value === "$" || value === "^") {
        value = `\\${value}`;
      }
      const match2 = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match2) {
        value += match2[0];
        state.index += match2[0].length;
      }
      push({ type: "text", value });
      continue;
    }
    if (prev && (prev.type === "globstar" || prev.star === true)) {
      prev.type = "star";
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }
    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen("star", value);
      continue;
    }
    if (prev.type === "star") {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }
      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === "slash" || prior.type === "bos";
      const afterStar = before && (before.type === "star" || before.type === "globstar");
      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
        push({ type: "star", value, output: "" });
        continue;
      }
      const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
      const isExtglob3 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
      if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob3) {
        push({ type: "star", value, output: "" });
        continue;
      }
      while (rest.slice(0, 3) === "/**") {
        const after = input[state.index + 4];
        if (after && after !== "/") {
          break;
        }
        rest = rest.slice(3);
        consume("/**", 3);
      }
      if (prior.type === "bos" && eos()) {
        prev.type = "globstar";
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
        const end = rest[1] !== void 0 ? "|$" : "";
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = `${globstar(opts)}${SLASH_LITERAL2}|${SLASH_LITERAL2}${end})`;
        prev.value += value;
        state.output += prior.output + prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: "slash", value: "/", output: "" });
        continue;
      }
      if (prior.type === "bos" && rest[0] === "/") {
        prev.type = "globstar";
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL2}|${globstar(opts)}${SLASH_LITERAL2})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: "slash", value: "/", output: "" });
        continue;
      }
      state.output = state.output.slice(0, -prev.output.length);
      prev.type = "globstar";
      prev.output = globstar(opts);
      prev.value += value;
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }
    const token = { type: "star", value, output: star };
    if (opts.bash === true) {
      token.output = ".*?";
      if (prev.type === "bos" || prev.type === "slash") {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }
    if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }
    if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
      if (prev.type === "dot") {
        state.output += NO_DOT_SLASH2;
        prev.output += NO_DOT_SLASH2;
      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH2;
        prev.output += NO_DOTS_SLASH2;
      } else {
        state.output += nodot;
        prev.output += nodot;
      }
      if (peek() !== "*") {
        state.output += ONE_CHAR2;
        prev.output += ONE_CHAR2;
      }
    }
    push(token);
  }
  while (state.brackets > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "]"));
    state.output = utils$2.escapeLast(state.output, "[");
    decrement("brackets");
  }
  while (state.parens > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", ")"));
    state.output = utils$2.escapeLast(state.output, "(");
    decrement("parens");
  }
  while (state.braces > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "}"));
    state.output = utils$2.escapeLast(state.output, "{");
    decrement("braces");
  }
  if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
    push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL2}?` });
  }
  if (state.backtrack === true) {
    state.output = "";
    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;
      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }
  return state;
};
parse$3.fastpaths = (input, options) => {
  const opts = __spreadValues2({}, options);
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  input = REPLACEMENTS[input] || input;
  const win32 = utils$2.isWindows(options);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOTS: NO_DOTS2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = constants$2.globChars(win32);
  const nodot = opts.dot ? NO_DOTS2 : NO_DOT2;
  const slashDot = opts.dot ? NO_DOTS_SLASH2 : NO_DOT2;
  const capture = opts.capture ? "" : "?:";
  const state = { negated: false, prefix: "" };
  let star = opts.bash === true ? ".*?" : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  const globstar = (opts2) => {
    if (opts2.noglobstar === true)
      return star;
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const create2 = (str) => {
    switch (str) {
      case "*":
        return `${nodot}${ONE_CHAR2}${star}`;
      case ".*":
        return `${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*.*":
        return `${nodot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*/*":
        return `${nodot}${star}${SLASH_LITERAL2}${ONE_CHAR2}${slashDot}${star}`;
      case "**":
        return nodot + globstar(opts);
      case "**/*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${ONE_CHAR2}${star}`;
      case "**/*.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "**/.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      default: {
        const match2 = /^(.*?)\.(\w+)$/.exec(str);
        if (!match2)
          return;
        const source2 = create2(match2[1]);
        if (!source2)
          return;
        return source2 + DOT_LITERAL2 + match2[2];
      }
    }
  };
  const output = utils$2.removePrefix(input, state);
  let source = create2(output);
  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL2}?`;
  }
  return source;
};
var parse_1 = parse$3;
const path$1 = path__default["default"];
const scan = scan_1;
const parse$2 = parse_1;
const utils$1 = utils$4;
const constants$1 = constants$3;
const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
const picomatch$2 = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map((input) => picomatch$2(input, options, returnState));
    const arrayMatcher = (str) => {
      for (const isMatch of fns) {
        const state2 = isMatch(str);
        if (state2)
          return state2;
      }
      return false;
    };
    return arrayMatcher;
  }
  const isState = isObject(glob) && glob.tokens && glob.input;
  if (glob === "" || typeof glob !== "string" && !isState) {
    throw new TypeError("Expected pattern to be a non-empty string");
  }
  const opts = options || {};
  const posix = utils$1.isWindows(options);
  const regex2 = isState ? picomatch$2.compileRe(glob, options) : picomatch$2.makeRe(glob, options, false, true);
  const state = regex2.state;
  delete regex2.state;
  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = __spreadProps2(__spreadValues2({}, options), { ignore: null, onMatch: null, onResult: null });
    isIgnored = picomatch$2(opts.ignore, ignoreOpts, returnState);
  }
  const matcher = (input, returnObject = false) => {
    const { isMatch, match: match2, output } = picomatch$2.test(input, regex2, options, { glob, posix });
    const result = { glob, state, regex: regex2, posix, input, output, match: match2, isMatch };
    if (typeof opts.onResult === "function") {
      opts.onResult(result);
    }
    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (isIgnored(input)) {
      if (typeof opts.onIgnore === "function") {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (typeof opts.onMatch === "function") {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };
  if (returnState) {
    matcher.state = state;
  }
  return matcher;
};
picomatch$2.test = (input, regex2, options, { glob, posix } = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected input to be a string");
  }
  if (input === "") {
    return { isMatch: false, output: "" };
  }
  const opts = options || {};
  const format = opts.format || (posix ? utils$1.toPosixSlashes : null);
  let match2 = input === glob;
  let output = match2 && format ? format(input) : input;
  if (match2 === false) {
    output = format ? format(input) : input;
    match2 = output === glob;
  }
  if (match2 === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match2 = picomatch$2.matchBase(input, regex2, options, posix);
    } else {
      match2 = regex2.exec(output);
    }
  }
  return { isMatch: Boolean(match2), match: match2, output };
};
picomatch$2.matchBase = (input, glob, options, posix = utils$1.isWindows(options)) => {
  const regex2 = glob instanceof RegExp ? glob : picomatch$2.makeRe(glob, options);
  return regex2.test(path$1.basename(input));
};
picomatch$2.isMatch = (str, patterns, options) => picomatch$2(patterns, options)(str);
picomatch$2.parse = (pattern, options) => {
  if (Array.isArray(pattern))
    return pattern.map((p) => picomatch$2.parse(p, options));
  return parse$2(pattern, __spreadProps2(__spreadValues2({}, options), { fastpaths: false }));
};
picomatch$2.scan = (input, options) => scan(input, options);
picomatch$2.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }
  const opts = options || {};
  const prepend = opts.contains ? "" : "^";
  const append2 = opts.contains ? "" : "$";
  let source = `${prepend}(?:${state.output})${append2}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }
  const regex2 = picomatch$2.toRegex(source, options);
  if (returnState === true) {
    regex2.state = state;
  }
  return regex2;
};
picomatch$2.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== "string") {
    throw new TypeError("Expected a non-empty string");
  }
  let parsed = { negated: false, fastpaths: true };
  if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
    parsed.output = parse$2.fastpaths(input, options);
  }
  if (!parsed.output) {
    parsed = parse$2(input, options);
  }
  return picomatch$2.compileRe(parsed, options, returnOutput, returnState);
};
picomatch$2.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
  } catch (err) {
    if (options && options.debug === true)
      throw err;
    return /$^/;
  }
};
picomatch$2.constants = constants$1;
var picomatch_1 = picomatch$2;
var picomatch$1 = picomatch_1;
const util$1 = require$$0__default$1["default"];
const braces = braces_1;
const picomatch = picomatch$1;
const utils = utils$4;
const isEmptyString = (val) => val === "" || val === "./";
const micromatch$1 = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);
  let omit = new Set();
  let keep = new Set();
  let items = new Set();
  let negatives = 0;
  let onResult = (state) => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };
  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), __spreadProps2(__spreadValues2({}, options), { onResult }), true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated)
      negatives++;
    for (let item of list) {
      let matched = isMatch(item, true);
      let match2 = negated ? !matched.isMatch : matched.isMatch;
      if (!match2)
        continue;
      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }
  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter((item) => !omit.has(item));
  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(", ")}"`);
    }
    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
    }
  }
  return matches;
};
micromatch$1.match = micromatch$1;
micromatch$1.matcher = (pattern, options) => picomatch(pattern, options);
micromatch$1.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
micromatch$1.any = micromatch$1.isMatch;
micromatch$1.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = new Set();
  let items = [];
  let onResult = (state) => {
    if (options.onResult)
      options.onResult(state);
    items.push(state.output);
  };
  let matches = new Set(micromatch$1(list, patterns, __spreadProps2(__spreadValues2({}, options), { onResult })));
  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};
micromatch$1.contains = (str, pattern, options) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
  }
  if (Array.isArray(pattern)) {
    return pattern.some((p) => micromatch$1.contains(str, p, options));
  }
  if (typeof pattern === "string") {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }
    if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
      return true;
    }
  }
  return micromatch$1.isMatch(str, pattern, __spreadProps2(__spreadValues2({}, options), { contains: true }));
};
micromatch$1.matchKeys = (obj, patterns, options) => {
  if (!utils.isObject(obj)) {
    throw new TypeError("Expected the first argument to be an object");
  }
  let keys = micromatch$1(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys)
    res[key] = obj[key];
  return res;
};
micromatch$1.some = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (items.some((item) => isMatch(item))) {
      return true;
    }
  }
  return false;
};
micromatch$1.every = (list, patterns, options) => {
  let items = [].concat(list);
  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (!items.every((item) => isMatch(item))) {
      return false;
    }
  }
  return true;
};
micromatch$1.all = (str, patterns, options) => {
  if (typeof str !== "string") {
    throw new TypeError(`Expected a string: "${util$1.inspect(str)}"`);
  }
  return [].concat(patterns).every((p) => picomatch(p, options)(str));
};
micromatch$1.capture = (glob, input, options) => {
  let posix = utils.isWindows(options);
  let regex2 = picomatch.makeRe(String(glob), __spreadProps2(__spreadValues2({}, options), { capture: true }));
  let match2 = regex2.exec(posix ? utils.toPosixSlashes(input) : input);
  if (match2) {
    return match2.slice(1).map((v) => v === void 0 ? "" : v);
  }
};
micromatch$1.makeRe = (...args) => picomatch.makeRe(...args);
micromatch$1.scan = (...args) => picomatch.scan(...args);
micromatch$1.parse = (patterns, options) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str of braces(String(pattern), options)) {
      res.push(picomatch.parse(str, options));
    }
  }
  return res;
};
micromatch$1.braces = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
    return [pattern];
  }
  return braces(pattern, options);
};
micromatch$1.braceExpand = (pattern, options) => {
  if (typeof pattern !== "string")
    throw new TypeError("Expected a string");
  return micromatch$1.braces(pattern, __spreadProps2(__spreadValues2({}, options), { expand: true }));
};
var micromatch_1 = micromatch$1;
Object.defineProperty(contextMatcher$1, "__esModule", { value: true });
contextMatcher$1.match = void 0;
const isGlob = isGlob$1;
const micromatch = micromatch_1;
const url = require$$0__default$2["default"];
const errors_1$1 = errors;
function match(context, uri, req) {
  if (isStringPath(context)) {
    return matchSingleStringPath(context, uri);
  }
  if (isGlobPath(context)) {
    return matchSingleGlobPath(context, uri);
  }
  if (Array.isArray(context)) {
    if (context.every(isStringPath)) {
      return matchMultiPath(context, uri);
    }
    if (context.every(isGlobPath)) {
      return matchMultiGlobPath(context, uri);
    }
    throw new Error(errors_1$1.ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);
  }
  if (typeof context === "function") {
    const pathname = getUrlPathName(uri);
    return context(pathname, req);
  }
  throw new Error(errors_1$1.ERRORS.ERR_CONTEXT_MATCHER_GENERIC);
}
contextMatcher$1.match = match;
function matchSingleStringPath(context, uri) {
  const pathname = getUrlPathName(uri);
  return pathname.indexOf(context) === 0;
}
function matchSingleGlobPath(pattern, uri) {
  const pathname = getUrlPathName(uri);
  const matches = micromatch([pathname], pattern);
  return matches && matches.length > 0;
}
function matchMultiGlobPath(patternList, uri) {
  return matchSingleGlobPath(patternList, uri);
}
function matchMultiPath(contextList, uri) {
  let isMultiPath = false;
  for (const context of contextList) {
    if (matchSingleStringPath(context, uri)) {
      isMultiPath = true;
      break;
    }
  }
  return isMultiPath;
}
function getUrlPathName(uri) {
  return uri && url.parse(uri).pathname;
}
function isStringPath(context) {
  return typeof context === "string" && !isGlob(context);
}
function isGlobPath(context) {
  return isGlob(context);
}
var _handlers = {};
Object.defineProperty(_handlers, "__esModule", { value: true });
_handlers.getHandlers = _handlers.init = void 0;
const logger_1$3 = logger$4;
const logger$2 = (0, logger_1$3.getInstance)();
function init(proxy, option) {
  const handlers2 = getHandlers(option);
  for (const eventName of Object.keys(handlers2)) {
    proxy.on(eventName, handlers2[eventName]);
  }
  proxy.on("econnreset", (error, req, res, target) => {
    logger$2.error(`[HPM] ECONNRESET: %O`, error);
  });
  proxy.on("proxyReqWs", (proxyReq, req, socket, options, head) => {
    socket.on("error", (error) => {
      logger$2.error(`[HPM] WebSocket error: %O`, error);
    });
  });
  logger$2.debug("[HPM] Subscribed to http-proxy events:", Object.keys(handlers2));
}
_handlers.init = init;
function getHandlers(options) {
  const proxyEventsMap = {
    error: "onError",
    proxyReq: "onProxyReq",
    proxyReqWs: "onProxyReqWs",
    proxyRes: "onProxyRes",
    open: "onOpen",
    close: "onClose"
  };
  const handlers2 = {};
  for (const [eventName, onEventName] of Object.entries(proxyEventsMap)) {
    const fnHandler = options ? options[onEventName] : null;
    if (typeof fnHandler === "function") {
      handlers2[eventName] = fnHandler;
    }
  }
  if (typeof handlers2.error !== "function") {
    handlers2.error = defaultErrorHandler;
  }
  if (typeof handlers2.close !== "function") {
    handlers2.close = logClose;
  }
  return handlers2;
}
_handlers.getHandlers = getHandlers;
function defaultErrorHandler(err, req, res) {
  if (!req && !res) {
    throw err;
  }
  const host = req.headers && req.headers.host;
  const code = err.code;
  if (res.writeHead && !res.headersSent) {
    if (/HPE_INVALID/.test(code)) {
      res.writeHead(502);
    } else {
      switch (code) {
        case "ECONNRESET":
        case "ENOTFOUND":
        case "ECONNREFUSED":
        case "ETIMEDOUT":
          res.writeHead(504);
          break;
        default:
          res.writeHead(500);
      }
    }
  }
  res.end(`Error occurred while trying to proxy: ${host}${req.url}`);
}
function logClose(req, socket, head) {
  logger$2.info("[HPM] Client disconnected");
}
var pathRewriter = {};
Object.defineProperty(pathRewriter, "__esModule", { value: true });
pathRewriter.createPathRewriter = void 0;
const isPlainObj$1 = isPlainObj$3;
const errors_1 = errors;
const logger_1$2 = logger$4;
const logger$1 = (0, logger_1$2.getInstance)();
function createPathRewriter(rewriteConfig) {
  let rulesCache;
  if (!isValidRewriteConfig(rewriteConfig)) {
    return;
  }
  if (typeof rewriteConfig === "function") {
    const customRewriteFn = rewriteConfig;
    return customRewriteFn;
  } else {
    rulesCache = parsePathRewriteRules(rewriteConfig);
    return rewritePath;
  }
  function rewritePath(path2) {
    let result = path2;
    for (const rule of rulesCache) {
      if (rule.regex.test(path2)) {
        result = result.replace(rule.regex, rule.value);
        logger$1.debug('[HPM] Rewriting path from "%s" to "%s"', path2, result);
        break;
      }
    }
    return result;
  }
}
pathRewriter.createPathRewriter = createPathRewriter;
function isValidRewriteConfig(rewriteConfig) {
  if (typeof rewriteConfig === "function") {
    return true;
  } else if (isPlainObj$1(rewriteConfig)) {
    return Object.keys(rewriteConfig).length !== 0;
  } else if (rewriteConfig === void 0 || rewriteConfig === null) {
    return false;
  } else {
    throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);
  }
}
function parsePathRewriteRules(rewriteConfig) {
  const rules = [];
  if (isPlainObj$1(rewriteConfig)) {
    for (const [key] of Object.entries(rewriteConfig)) {
      rules.push({
        regex: new RegExp(key),
        value: rewriteConfig[key]
      });
      logger$1.info('[HPM] Proxy rewrite rule created: "%s" ~> "%s"', key, rewriteConfig[key]);
    }
  }
  return rules;
}
var router = {};
Object.defineProperty(router, "__esModule", { value: true });
router.getTarget = void 0;
const isPlainObj = isPlainObj$3;
const logger_1$1 = logger$4;
const logger = (0, logger_1$1.getInstance)();
async function getTarget(req, config) {
  let newTarget;
  const router2 = config.router;
  if (isPlainObj(router2)) {
    newTarget = getTargetFromProxyTable(req, router2);
  } else if (typeof router2 === "function") {
    newTarget = await router2(req);
  }
  return newTarget;
}
router.getTarget = getTarget;
function getTargetFromProxyTable(req, table) {
  let result;
  const host = req.headers.host;
  const path2 = req.url;
  const hostAndPath = host + path2;
  for (const [key] of Object.entries(table)) {
    if (containsPath(key)) {
      if (hostAndPath.indexOf(key) > -1) {
        result = table[key];
        logger.debug('[HPM] Router table match: "%s"', key);
        break;
      }
    } else {
      if (key === host) {
        result = table[key];
        logger.debug('[HPM] Router table match: "%s"', host);
        break;
      }
    }
  }
  return result;
}
function containsPath(v) {
  return v.indexOf("/") > -1;
}
Object.defineProperty(httpProxyMiddleware, "__esModule", { value: true });
httpProxyMiddleware.HttpProxyMiddleware = void 0;
const httpProxy = httpProxy$1;
const config_factory_1 = configFactory;
const contextMatcher = contextMatcher$1;
const handlers$1 = _handlers;
const logger_1 = logger$4;
const PathRewriter = pathRewriter;
const Router = router;
class HttpProxyMiddleware {
  constructor(context, opts) {
    this.logger = (0, logger_1.getInstance)();
    this.wsInternalSubscribed = false;
    this.serverOnCloseSubscribed = false;
    this.middleware = async (req, res, next) => {
      var _a2, _b;
      if (this.shouldProxy(this.config.context, req)) {
        try {
          const activeProxyOptions = await this.prepareProxyRequest(req);
          this.proxy.web(req, res, activeProxyOptions);
        } catch (err) {
          next(err);
        }
      } else {
        next();
      }
      const server = (_b = (_a2 = req.socket) !== null && _a2 !== void 0 ? _a2 : req.connection) === null || _b === void 0 ? void 0 : _b.server;
      if (server && !this.serverOnCloseSubscribed) {
        server.on("close", () => {
          this.logger.info("[HPM] server close signal received: closing proxy server");
          this.proxy.close();
        });
        this.serverOnCloseSubscribed = true;
      }
      if (this.proxyOptions.ws === true) {
        this.catchUpgradeRequest(server);
      }
    };
    this.catchUpgradeRequest = (server) => {
      if (!this.wsInternalSubscribed) {
        server.on("upgrade", this.handleUpgrade);
        this.wsInternalSubscribed = true;
      }
    };
    this.handleUpgrade = async (req, socket, head) => {
      if (this.shouldProxy(this.config.context, req)) {
        const activeProxyOptions = await this.prepareProxyRequest(req);
        this.proxy.ws(req, socket, head, activeProxyOptions);
        this.logger.info("[HPM] Upgrading to WebSocket");
      }
    };
    this.shouldProxy = (context2, req) => {
      const path2 = req.originalUrl || req.url;
      return contextMatcher.match(context2, path2, req);
    };
    this.prepareProxyRequest = async (req) => {
      req.url = req.originalUrl || req.url;
      const originalPath = req.url;
      const newProxyOptions = Object.assign({}, this.proxyOptions);
      await this.applyRouter(req, newProxyOptions);
      await this.applyPathRewrite(req, this.pathRewriter);
      if (this.proxyOptions.logLevel === "debug") {
        const arrow = (0, logger_1.getArrow)(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);
        this.logger.debug("[HPM] %s %s %s %s", req.method, originalPath, arrow, newProxyOptions.target);
      }
      return newProxyOptions;
    };
    this.applyRouter = async (req, options) => {
      let newTarget;
      if (options.router) {
        newTarget = await Router.getTarget(req, options);
        if (newTarget) {
          this.logger.debug('[HPM] Router new target: %s -> "%s"', options.target, newTarget);
          options.target = newTarget;
        }
      }
    };
    this.applyPathRewrite = async (req, pathRewriter2) => {
      if (pathRewriter2) {
        const path2 = await pathRewriter2(req.url, req);
        if (typeof path2 === "string") {
          req.url = path2;
        } else {
          this.logger.info("[HPM] pathRewrite: No rewritten path found. (%s)", req.url);
        }
      }
    };
    this.logError = (err, req, res, target) => {
      var _a2;
      const hostname = ((_a2 = req.headers) === null || _a2 === void 0 ? void 0 : _a2.host) || req.hostname || req.host;
      const requestHref = `${hostname}${req.url}`;
      const targetHref = `${target === null || target === void 0 ? void 0 : target.href}`;
      const errorMessage = "[HPM] Error occurred while proxying request %s to %s [%s] (%s)";
      const errReference = "https://nodejs.org/api/errors.html#errors_common_system_errors";
      this.logger.error(errorMessage, requestHref, targetHref, err.code || err, errReference);
    };
    this.config = (0, config_factory_1.createConfig)(context, opts);
    this.proxyOptions = this.config.options;
    this.proxy = httpProxy.createProxyServer({});
    this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);
    this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite);
    handlers$1.init(this.proxy, this.proxyOptions);
    this.proxy.on("error", this.logError);
    this.middleware.upgrade = (req, socket, head) => {
      if (!this.wsInternalSubscribed) {
        this.handleUpgrade(req, socket, head);
      }
    };
  }
}
httpProxyMiddleware.HttpProxyMiddleware = HttpProxyMiddleware;
var handlers = {};
var _public = {};
var responseInterceptor$1 = {};
Object.defineProperty(responseInterceptor$1, "__esModule", { value: true });
responseInterceptor$1.responseInterceptor = void 0;
const zlib = require$$0__default$4["default"];
function responseInterceptor(interceptor) {
  return async function proxyRes(proxyRes, req, res) {
    const originalProxyRes = proxyRes;
    let buffer = Buffer.from("", "utf8");
    const _proxyRes = decompress(proxyRes, proxyRes.headers["content-encoding"]);
    _proxyRes.on("data", (chunk) => buffer = Buffer.concat([buffer, chunk]));
    _proxyRes.on("end", async () => {
      copyHeaders(proxyRes, res);
      const interceptedBuffer = Buffer.from(await interceptor(buffer, originalProxyRes, req, res));
      res.setHeader("content-length", Buffer.byteLength(interceptedBuffer, "utf8"));
      res.write(interceptedBuffer);
      res.end();
    });
    _proxyRes.on("error", (error) => {
      res.end(`Error fetching proxied request: ${error.message}`);
    });
  };
}
responseInterceptor$1.responseInterceptor = responseInterceptor;
function decompress(proxyRes, contentEncoding) {
  let _proxyRes = proxyRes;
  let decompress2;
  switch (contentEncoding) {
    case "gzip":
      decompress2 = zlib.createGunzip();
      break;
    case "br":
      decompress2 = zlib.createBrotliDecompress();
      break;
    case "deflate":
      decompress2 = zlib.createInflate();
      break;
  }
  if (decompress2) {
    _proxyRes.pipe(decompress2);
    _proxyRes = decompress2;
  }
  return _proxyRes;
}
function copyHeaders(originalResponse, response) {
  response.statusCode = originalResponse.statusCode;
  response.statusMessage = originalResponse.statusMessage;
  if (response.setHeader) {
    let keys = Object.keys(originalResponse.headers);
    keys = keys.filter((key) => !["content-encoding", "transfer-encoding"].includes(key));
    keys.forEach((key) => {
      let value = originalResponse.headers[key];
      if (key === "set-cookie") {
        value = Array.isArray(value) ? value : [value];
        value = value.map((x) => x.replace(/Domain=[^;]+?/i, ""));
      }
      response.setHeader(key, value);
    });
  } else {
    response.headers = originalResponse.headers;
  }
}
var fixRequestBody$1 = {};
Object.defineProperty(fixRequestBody$1, "__esModule", { value: true });
fixRequestBody$1.fixRequestBody = void 0;
const querystring = require$$0__default$5["default"];
function fixRequestBody(proxyReq, req) {
  const requestBody = req.body;
  if (!requestBody) {
    return;
  }
  const contentType = proxyReq.getHeader("Content-Type");
  const writeBody = (bodyData) => {
    proxyReq.setHeader("Content-Length", Buffer.byteLength(bodyData));
    proxyReq.write(bodyData);
  };
  if (contentType && contentType.includes("application/json")) {
    writeBody(JSON.stringify(requestBody));
  }
  if (contentType && contentType.includes("application/x-www-form-urlencoded")) {
    writeBody(querystring.stringify(requestBody));
  }
}
fixRequestBody$1.fixRequestBody = fixRequestBody;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fixRequestBody = exports.responseInterceptor = void 0;
  var response_interceptor_1 = responseInterceptor$1;
  Object.defineProperty(exports, "responseInterceptor", { enumerable: true, get: function() {
    return response_interceptor_1.responseInterceptor;
  } });
  var fix_request_body_1 = fixRequestBody$1;
  Object.defineProperty(exports, "fixRequestBody", { enumerable: true, get: function() {
    return fix_request_body_1.fixRequestBody;
  } });
})(_public);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m2[k];
    } });
  } : function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(_public, exports);
})(handlers);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m2[k];
    } });
  } : function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createProxyMiddleware = void 0;
  const http_proxy_middleware_1 = httpProxyMiddleware;
  function createProxyMiddleware(context, options) {
    const { middleware } = new http_proxy_middleware_1.HttpProxyMiddleware(context, options);
    return middleware;
  }
  exports.createProxyMiddleware = createProxyMiddleware;
  __exportStar(handlers, exports);
})(dist$2);
var lib = { exports: {} };
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s2 = 1; s2 < arguments.length; s2++) {
    from = Object(arguments[s2]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
var vary$1 = { exports: {} };
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
vary$1.exports = vary;
vary$1.exports.append = append$1;
var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
function append$1(header, field) {
  if (typeof header !== "string") {
    throw new TypeError("header argument is required");
  }
  if (!field) {
    throw new TypeError("field argument is required");
  }
  var fields = !Array.isArray(field) ? parse$1(String(field)) : field;
  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError("field argument contains an invalid header name");
    }
  }
  if (header === "*") {
    return header;
  }
  var val = header;
  var vals = parse$1(header.toLowerCase());
  if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
    return "*";
  }
  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();
    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val ? val + ", " + fields[i] : fields[i];
    }
  }
  return val;
}
function parse$1(header) {
  var end = 0;
  var list = [];
  var start = 0;
  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 32:
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 44:
        list.push(header.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }
  list.push(header.substring(start, end));
  return list;
}
function vary(res, field) {
  if (!res || !res.getHeader || !res.setHeader) {
    throw new TypeError("res argument is required");
  }
  var val = res.getHeader("Vary") || "";
  var header = Array.isArray(val) ? val.join(", ") : String(val);
  if (val = append$1(header, field)) {
    res.setHeader("Vary", val);
  }
}
(function() {
  var assign = objectAssign;
  var vary2 = vary$1.exports;
  var defaults = {
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    preflightContinue: false,
    optionsSuccessStatus: 204
  };
  function isString2(s2) {
    return typeof s2 === "string" || s2 instanceof String;
  }
  function isOriginAllowed(origin, allowedOrigin) {
    if (Array.isArray(allowedOrigin)) {
      for (var i = 0; i < allowedOrigin.length; ++i) {
        if (isOriginAllowed(origin, allowedOrigin[i])) {
          return true;
        }
      }
      return false;
    } else if (isString2(allowedOrigin)) {
      return origin === allowedOrigin;
    } else if (allowedOrigin instanceof RegExp) {
      return allowedOrigin.test(origin);
    } else {
      return !!allowedOrigin;
    }
  }
  function configureOrigin(options, req) {
    var requestOrigin = req.headers.origin, headers = [], isAllowed;
    if (!options.origin || options.origin === "*") {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: "*"
      }]);
    } else if (isString2(options.origin)) {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: options.origin
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    } else {
      isAllowed = isOriginAllowed(requestOrigin, options.origin);
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: isAllowed ? requestOrigin : false
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    }
    return headers;
  }
  function configureMethods(options) {
    var methods = options.methods;
    if (methods.join) {
      methods = options.methods.join(",");
    }
    return {
      key: "Access-Control-Allow-Methods",
      value: methods
    };
  }
  function configureCredentials(options) {
    if (options.credentials === true) {
      return {
        key: "Access-Control-Allow-Credentials",
        value: "true"
      };
    }
    return null;
  }
  function configureAllowedHeaders(options, req) {
    var allowedHeaders = options.allowedHeaders || options.headers;
    var headers = [];
    if (!allowedHeaders) {
      allowedHeaders = req.headers["access-control-request-headers"];
      headers.push([{
        key: "Vary",
        value: "Access-Control-Request-Headers"
      }]);
    } else if (allowedHeaders.join) {
      allowedHeaders = allowedHeaders.join(",");
    }
    if (allowedHeaders && allowedHeaders.length) {
      headers.push([{
        key: "Access-Control-Allow-Headers",
        value: allowedHeaders
      }]);
    }
    return headers;
  }
  function configureExposedHeaders(options) {
    var headers = options.exposedHeaders;
    if (!headers) {
      return null;
    } else if (headers.join) {
      headers = headers.join(",");
    }
    if (headers && headers.length) {
      return {
        key: "Access-Control-Expose-Headers",
        value: headers
      };
    }
    return null;
  }
  function configureMaxAge(options) {
    var maxAge = (typeof options.maxAge === "number" || options.maxAge) && options.maxAge.toString();
    if (maxAge && maxAge.length) {
      return {
        key: "Access-Control-Max-Age",
        value: maxAge
      };
    }
    return null;
  }
  function applyHeaders(headers, res) {
    for (var i = 0, n = headers.length; i < n; i++) {
      var header = headers[i];
      if (header) {
        if (Array.isArray(header)) {
          applyHeaders(header, res);
        } else if (header.key === "Vary" && header.value) {
          vary2(res, header.value);
        } else if (header.value) {
          res.setHeader(header.key, header.value);
        }
      }
    }
  }
  function cors2(options, req, res, next) {
    var headers = [], method = req.method && req.method.toUpperCase && req.method.toUpperCase();
    if (method === "OPTIONS") {
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options));
      headers.push(configureMethods(options));
      headers.push(configureAllowedHeaders(options, req));
      headers.push(configureMaxAge(options));
      headers.push(configureExposedHeaders(options));
      applyHeaders(headers, res);
      if (options.preflightContinue) {
        next();
      } else {
        res.statusCode = options.optionsSuccessStatus;
        res.setHeader("Content-Length", "0");
        res.end();
      }
    } else {
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options));
      headers.push(configureExposedHeaders(options));
      applyHeaders(headers, res);
      next();
    }
  }
  function middlewareWrapper(o) {
    var optionsCallback = null;
    if (typeof o === "function") {
      optionsCallback = o;
    } else {
      optionsCallback = function(req, cb) {
        cb(null, o);
      };
    }
    return function corsMiddleware(req, res, next) {
      optionsCallback(req, function(err, options) {
        if (err) {
          next(err);
        } else {
          var corsOptions = assign({}, defaults, options);
          var originCallback = null;
          if (corsOptions.origin && typeof corsOptions.origin === "function") {
            originCallback = corsOptions.origin;
          } else if (corsOptions.origin) {
            originCallback = function(origin, cb) {
              cb(null, corsOptions.origin);
            };
          }
          if (originCallback) {
            originCallback(req.headers.origin, function(err2, origin) {
              if (err2 || !origin) {
                next(err2);
              } else {
                corsOptions.origin = origin;
                cors2(corsOptions, req, res, next);
              }
            });
          } else {
            next();
          }
        }
      });
    };
  }
  lib.exports = middlewareWrapper;
})();
var cors = lib.exports;
var constants = require$$0__default$6["default"];
var origCwd = process.cwd;
var cwd = null;
var platform = {}.GRACEFUL_FS_PLATFORM || process.platform;
process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process);
  return cwd;
};
try {
  process.cwd();
} catch (er) {
}
if (typeof process.chdir === "function") {
  var chdir = process.chdir;
  process.chdir = function(d2) {
    cwd = null;
    chdir.call(process, d2);
  };
  if (Object.setPrototypeOf)
    Object.setPrototypeOf(process.chdir, chdir);
}
var polyfills$1 = patch$1;
function patch$1(fs2) {
  if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs2);
  }
  if (!fs2.lutimes) {
    patchLutimes(fs2);
  }
  fs2.chown = chownFix(fs2.chown);
  fs2.fchown = chownFix(fs2.fchown);
  fs2.lchown = chownFix(fs2.lchown);
  fs2.chmod = chmodFix(fs2.chmod);
  fs2.fchmod = chmodFix(fs2.fchmod);
  fs2.lchmod = chmodFix(fs2.lchmod);
  fs2.chownSync = chownFixSync(fs2.chownSync);
  fs2.fchownSync = chownFixSync(fs2.fchownSync);
  fs2.lchownSync = chownFixSync(fs2.lchownSync);
  fs2.chmodSync = chmodFixSync(fs2.chmodSync);
  fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
  fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
  fs2.stat = statFix(fs2.stat);
  fs2.fstat = statFix(fs2.fstat);
  fs2.lstat = statFix(fs2.lstat);
  fs2.statSync = statFixSync(fs2.statSync);
  fs2.fstatSync = statFixSync(fs2.fstatSync);
  fs2.lstatSync = statFixSync(fs2.lstatSync);
  if (fs2.chmod && !fs2.lchmod) {
    fs2.lchmod = function(path2, mode, cb) {
      if (cb)
        process.nextTick(cb);
    };
    fs2.lchmodSync = function() {
    };
  }
  if (fs2.chown && !fs2.lchown) {
    fs2.lchown = function(path2, uid, gid, cb) {
      if (cb)
        process.nextTick(cb);
    };
    fs2.lchownSync = function() {
    };
  }
  if (platform === "win32") {
    fs2.rename = typeof fs2.rename !== "function" ? fs2.rename : function(fs$rename) {
      function rename(from, to, cb) {
        var start = Date.now();
        var backoff = 0;
        fs$rename(from, to, function CB(er) {
          if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
            setTimeout(function() {
              fs2.stat(to, function(stater, st) {
                if (stater && stater.code === "ENOENT")
                  fs$rename(from, to, CB);
                else
                  cb(er);
              });
            }, backoff);
            if (backoff < 100)
              backoff += 10;
            return;
          }
          if (cb)
            cb(er);
        });
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(rename, fs$rename);
      return rename;
    }(fs2.rename);
  }
  fs2.read = typeof fs2.read !== "function" ? fs2.read : function(fs$read) {
    function read(fd, buffer, offset, length, position, callback_) {
      var callback;
      if (callback_ && typeof callback_ === "function") {
        var eagCounter = 0;
        callback = function(er, _, __) {
          if (er && er.code === "EAGAIN" && eagCounter < 10) {
            eagCounter++;
            return fs$read.call(fs2, fd, buffer, offset, length, position, callback);
          }
          callback_.apply(this, arguments);
        };
      }
      return fs$read.call(fs2, fd, buffer, offset, length, position, callback);
    }
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(read, fs$read);
    return read;
  }(fs2.read);
  fs2.readSync = typeof fs2.readSync !== "function" ? fs2.readSync : function(fs$readSync) {
    return function(fd, buffer, offset, length, position) {
      var eagCounter = 0;
      while (true) {
        try {
          return fs$readSync.call(fs2, fd, buffer, offset, length, position);
        } catch (er) {
          if (er.code === "EAGAIN" && eagCounter < 10) {
            eagCounter++;
            continue;
          }
          throw er;
        }
      }
    };
  }(fs2.readSync);
  function patchLchmod(fs3) {
    fs3.lchmod = function(path2, mode, callback) {
      fs3.open(path2, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
        if (err) {
          if (callback)
            callback(err);
          return;
        }
        fs3.fchmod(fd, mode, function(err2) {
          fs3.close(fd, function(err22) {
            if (callback)
              callback(err2 || err22);
          });
        });
      });
    };
    fs3.lchmodSync = function(path2, mode) {
      var fd = fs3.openSync(path2, constants.O_WRONLY | constants.O_SYMLINK, mode);
      var threw = true;
      var ret;
      try {
        ret = fs3.fchmodSync(fd, mode);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs3.closeSync(fd);
          } catch (er) {
          }
        } else {
          fs3.closeSync(fd);
        }
      }
      return ret;
    };
  }
  function patchLutimes(fs3) {
    if (constants.hasOwnProperty("O_SYMLINK") && fs3.futimes) {
      fs3.lutimes = function(path2, at, mt, cb) {
        fs3.open(path2, constants.O_SYMLINK, function(er, fd) {
          if (er) {
            if (cb)
              cb(er);
            return;
          }
          fs3.futimes(fd, at, mt, function(er2) {
            fs3.close(fd, function(er22) {
              if (cb)
                cb(er2 || er22);
            });
          });
        });
      };
      fs3.lutimesSync = function(path2, at, mt) {
        var fd = fs3.openSync(path2, constants.O_SYMLINK);
        var ret;
        var threw = true;
        try {
          ret = fs3.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs3.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs3.closeSync(fd);
          }
        }
        return ret;
      };
    } else if (fs3.futimes) {
      fs3.lutimes = function(_a2, _b, _c, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs3.lutimesSync = function() {
      };
    }
  }
  function chmodFix(orig) {
    if (!orig)
      return orig;
    return function(target, mode, cb) {
      return orig.call(fs2, target, mode, function(er) {
        if (chownErOk(er))
          er = null;
        if (cb)
          cb.apply(this, arguments);
      });
    };
  }
  function chmodFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, mode) {
      try {
        return orig.call(fs2, target, mode);
      } catch (er) {
        if (!chownErOk(er))
          throw er;
      }
    };
  }
  function chownFix(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid, cb) {
      return orig.call(fs2, target, uid, gid, function(er) {
        if (chownErOk(er))
          er = null;
        if (cb)
          cb.apply(this, arguments);
      });
    };
  }
  function chownFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid) {
      try {
        return orig.call(fs2, target, uid, gid);
      } catch (er) {
        if (!chownErOk(er))
          throw er;
      }
    };
  }
  function statFix(orig) {
    if (!orig)
      return orig;
    return function(target, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = null;
      }
      function callback(er, stats) {
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        if (cb)
          cb.apply(this, arguments);
      }
      return options ? orig.call(fs2, target, options, callback) : orig.call(fs2, target, callback);
    };
  }
  function statFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, options) {
      var stats = options ? orig.call(fs2, target, options) : orig.call(fs2, target);
      if (stats) {
        if (stats.uid < 0)
          stats.uid += 4294967296;
        if (stats.gid < 0)
          stats.gid += 4294967296;
      }
      return stats;
    };
  }
  function chownErOk(er) {
    if (!er)
      return true;
    if (er.code === "ENOSYS")
      return true;
    var nonroot = !process.getuid || process.getuid() !== 0;
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true;
    }
    return false;
  }
}
var Stream = require$$3__default["default"].Stream;
var legacyStreams = legacy$1;
function legacy$1(fs2) {
  return {
    ReadStream,
    WriteStream
  };
  function ReadStream(path2, options) {
    if (!(this instanceof ReadStream))
      return new ReadStream(path2, options);
    Stream.call(this);
    var self2 = this;
    this.path = path2;
    this.fd = null;
    this.readable = true;
    this.paused = false;
    this.flags = "r";
    this.mode = 438;
    this.bufferSize = 64 * 1024;
    options = options || {};
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }
    if (this.encoding)
      this.setEncoding(this.encoding);
    if (this.start !== void 0) {
      if (typeof this.start !== "number") {
        throw TypeError("start must be a Number");
      }
      if (this.end === void 0) {
        this.end = Infinity;
      } else if (typeof this.end !== "number") {
        throw TypeError("end must be a Number");
      }
      if (this.start > this.end) {
        throw new Error("start must be <= end");
      }
      this.pos = this.start;
    }
    if (this.fd !== null) {
      process.nextTick(function() {
        self2._read();
      });
      return;
    }
    fs2.open(this.path, this.flags, this.mode, function(err, fd) {
      if (err) {
        self2.emit("error", err);
        self2.readable = false;
        return;
      }
      self2.fd = fd;
      self2.emit("open", fd);
      self2._read();
    });
  }
  function WriteStream(path2, options) {
    if (!(this instanceof WriteStream))
      return new WriteStream(path2, options);
    Stream.call(this);
    this.path = path2;
    this.fd = null;
    this.writable = true;
    this.flags = "w";
    this.encoding = "binary";
    this.mode = 438;
    this.bytesWritten = 0;
    options = options || {};
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }
    if (this.start !== void 0) {
      if (typeof this.start !== "number") {
        throw TypeError("start must be a Number");
      }
      if (this.start < 0) {
        throw new Error("start must be >= zero");
      }
      this.pos = this.start;
    }
    this.busy = false;
    this._queue = [];
    if (this.fd === null) {
      this._open = fs2.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
      this.flush();
    }
  }
}
var clone_1 = clone$1;
var getPrototypeOf = Object.getPrototypeOf || function(obj) {
  return obj.__proto__;
};
function clone$1(obj) {
  if (obj === null || typeof obj !== "object")
    return obj;
  if (obj instanceof Object)
    var copy = { __proto__: getPrototypeOf(obj) };
  else
    var copy = Object.create(null);
  Object.getOwnPropertyNames(obj).forEach(function(key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
  });
  return copy;
}
var fs$1 = fs__default["default"];
var polyfills = polyfills$1;
var legacy = legacyStreams;
var clone = clone_1;
var util = require$$0__default$1["default"];
var gracefulQueue;
var previousSymbol;
if (typeof Symbol === "function" && typeof Symbol.for === "function") {
  gracefulQueue = Symbol.for("graceful-fs.queue");
  previousSymbol = Symbol.for("graceful-fs.previous");
} else {
  gracefulQueue = "___graceful-fs.queue";
  previousSymbol = "___graceful-fs.previous";
}
function noop() {
}
function publishQueue(context, queue2) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue2;
    }
  });
}
var debug$1 = noop;
if (util.debuglog)
  debug$1 = util.debuglog("gfs4");
else if (/\bgfs4\b/i.test({}.NODE_DEBUG || ""))
  debug$1 = function() {
    var m2 = util.format.apply(util, arguments);
    m2 = "GFS4: " + m2.split(/\n/).join("\nGFS4: ");
    console.error(m2);
  };
if (!fs$1[gracefulQueue]) {
  var queue = commonjsGlobal[gracefulQueue] || [];
  publishQueue(fs$1, queue);
  fs$1.close = function(fs$close) {
    function close(fd, cb) {
      return fs$close.call(fs$1, fd, function(err) {
        if (!err) {
          resetQueue();
        }
        if (typeof cb === "function")
          cb.apply(this, arguments);
      });
    }
    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    });
    return close;
  }(fs$1.close);
  fs$1.closeSync = function(fs$closeSync) {
    function closeSync(fd) {
      fs$closeSync.apply(fs$1, arguments);
      resetQueue();
    }
    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    });
    return closeSync;
  }(fs$1.closeSync);
  if (/\bgfs4\b/i.test({}.NODE_DEBUG || "")) {
    process.on("exit", function() {
      debug$1(fs$1[gracefulQueue]);
      require$$4__default["default"].equal(fs$1[gracefulQueue].length, 0);
    });
  }
}
if (!commonjsGlobal[gracefulQueue]) {
  publishQueue(commonjsGlobal, fs$1[gracefulQueue]);
}
var gracefulFs = patch(clone(fs$1));
if ({}.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$1.__patched) {
  gracefulFs = patch(fs$1);
  fs$1.__patched = true;
}
function patch(fs2) {
  polyfills(fs2);
  fs2.gracefulify = patch;
  fs2.createReadStream = createReadStream;
  fs2.createWriteStream = createWriteStream;
  var fs$readFile = fs2.readFile;
  fs2.readFile = readFile;
  function readFile(path2, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$readFile(path2, options, cb);
    function go$readFile(path3, options2, cb2, startTime) {
      return fs$readFile(path3, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$readFile, [path3, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$writeFile = fs2.writeFile;
  fs2.writeFile = writeFile2;
  function writeFile2(path2, data, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$writeFile(path2, data, options, cb);
    function go$writeFile(path3, data2, options2, cb2, startTime) {
      return fs$writeFile(path3, data2, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$writeFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$appendFile = fs2.appendFile;
  if (fs$appendFile)
    fs2.appendFile = appendFile;
  function appendFile(path2, data, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    return go$appendFile(path2, data, options, cb);
    function go$appendFile(path3, data2, options2, cb2, startTime) {
      return fs$appendFile(path3, data2, options2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$appendFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$copyFile = fs2.copyFile;
  if (fs$copyFile)
    fs2.copyFile = copyFile;
  function copyFile(src2, dest, flags, cb) {
    if (typeof flags === "function") {
      cb = flags;
      flags = 0;
    }
    return go$copyFile(src2, dest, flags, cb);
    function go$copyFile(src3, dest2, flags2, cb2, startTime) {
      return fs$copyFile(src3, dest2, flags2, function(err) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$copyFile, [src3, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  var fs$readdir = fs2.readdir;
  fs2.readdir = readdir;
  var noReaddirOptionVersions = /^v[0-5]\./;
  function readdir(path2, options, cb) {
    if (typeof options === "function")
      cb = options, options = null;
    var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path3, options2, cb2, startTime) {
      return fs$readdir(path3, fs$readdirCallback(path3, options2, cb2, startTime));
    } : function go$readdir2(path3, options2, cb2, startTime) {
      return fs$readdir(path3, options2, fs$readdirCallback(path3, options2, cb2, startTime));
    };
    return go$readdir(path2, options, cb);
    function fs$readdirCallback(path3, options2, cb2, startTime) {
      return function(err, files) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([
            go$readdir,
            [path3, options2, cb2],
            err,
            startTime || Date.now(),
            Date.now()
          ]);
        else {
          if (files && files.sort)
            files.sort();
          if (typeof cb2 === "function")
            cb2.call(this, err, files);
        }
      };
    }
  }
  if (process.version.substr(0, 4) === "v0.8") {
    var legStreams = legacy(fs2);
    ReadStream = legStreams.ReadStream;
    WriteStream = legStreams.WriteStream;
  }
  var fs$ReadStream = fs2.ReadStream;
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;
  }
  var fs$WriteStream = fs2.WriteStream;
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;
  }
  Object.defineProperty(fs2, "ReadStream", {
    get: function() {
      return ReadStream;
    },
    set: function(val) {
      ReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(fs2, "WriteStream", {
    get: function() {
      return WriteStream;
    },
    set: function(val) {
      WriteStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileReadStream = ReadStream;
  Object.defineProperty(fs2, "FileReadStream", {
    get: function() {
      return FileReadStream;
    },
    set: function(val) {
      FileReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileWriteStream = WriteStream;
  Object.defineProperty(fs2, "FileWriteStream", {
    get: function() {
      return FileWriteStream;
    },
    set: function(val) {
      FileWriteStream = val;
    },
    enumerable: true,
    configurable: true
  });
  function ReadStream(path2, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this;
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
  }
  function ReadStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function(err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy();
        that.emit("error", err);
      } else {
        that.fd = fd;
        that.emit("open", fd);
        that.read();
      }
    });
  }
  function WriteStream(path2, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this;
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
  }
  function WriteStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function(err, fd) {
      if (err) {
        that.destroy();
        that.emit("error", err);
      } else {
        that.fd = fd;
        that.emit("open", fd);
      }
    });
  }
  function createReadStream(path2, options) {
    return new fs2.ReadStream(path2, options);
  }
  function createWriteStream(path2, options) {
    return new fs2.WriteStream(path2, options);
  }
  var fs$open = fs2.open;
  fs2.open = open;
  function open(path2, flags, mode, cb) {
    if (typeof mode === "function")
      cb = mode, mode = null;
    return go$open(path2, flags, mode, cb);
    function go$open(path3, flags2, mode2, cb2, startTime) {
      return fs$open(path3, flags2, mode2, function(err, fd) {
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$open, [path3, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb2 === "function")
            cb2.apply(this, arguments);
        }
      });
    }
  }
  return fs2;
}
function enqueue(elem) {
  debug$1("ENQUEUE", elem[0].name, elem[1]);
  fs$1[gracefulQueue].push(elem);
  retry();
}
var retryTimer;
function resetQueue() {
  var now = Date.now();
  for (var i = 0; i < fs$1[gracefulQueue].length; ++i) {
    if (fs$1[gracefulQueue][i].length > 2) {
      fs$1[gracefulQueue][i][3] = now;
      fs$1[gracefulQueue][i][4] = now;
    }
  }
  retry();
}
function retry() {
  clearTimeout(retryTimer);
  retryTimer = void 0;
  if (fs$1[gracefulQueue].length === 0)
    return;
  var elem = fs$1[gracefulQueue].shift();
  var fn = elem[0];
  var args = elem[1];
  var err = elem[2];
  var startTime = elem[3];
  var lastTime = elem[4];
  if (startTime === void 0) {
    debug$1("RETRY", fn.name, args);
    fn.apply(null, args);
  } else if (Date.now() - startTime >= 6e4) {
    debug$1("TIMEOUT", fn.name, args);
    var cb = args.pop();
    if (typeof cb === "function")
      cb.call(null, err);
  } else {
    var sinceAttempt = Date.now() - lastTime;
    var sinceStart = Math.max(lastTime - startTime, 1);
    var desiredDelay = Math.min(sinceStart * 1.2, 100);
    if (sinceAttempt >= desiredDelay) {
      debug$1("RETRY", fn.name, args);
      fn.apply(null, args.concat([startTime]));
    } else {
      fs$1[gracefulQueue].push(elem);
    }
  }
  if (retryTimer === void 0) {
    retryTimer = setTimeout(retry, 0);
  }
}
var fs$2 = gracefulFs;
const homeDirectory = os__default["default"].homedir();
const { env } = process;
const xdgData = env.XDG_DATA_HOME || (homeDirectory ? path__default["default"].join(homeDirectory, ".local", "share") : void 0);
const xdgConfig = env.XDG_CONFIG_HOME || (homeDirectory ? path__default["default"].join(homeDirectory, ".config") : void 0);
env.XDG_STATE_HOME || (homeDirectory ? path__default["default"].join(homeDirectory, ".local", "state") : void 0);
env.XDG_CACHE_HOME || (homeDirectory ? path__default["default"].join(homeDirectory, ".cache") : void 0);
env.XDG_RUNTIME_DIR || void 0;
const xdgDataDirectories = (env.XDG_DATA_DIRS || "/usr/local/share/:/usr/share/").split(":");
if (xdgData) {
  xdgDataDirectories.unshift(xdgData);
}
const xdgConfigDirectories = (env.XDG_CONFIG_DIRS || "/etc/xdg").split(":");
if (xdgConfig) {
  xdgConfigDirectories.unshift(xdgConfig);
}
var writeFileAtomic$1 = { exports: {} };
var imurmurhash = { exports: {} };
/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */
(function(module) {
  (function() {
    var cache2;
    function MurmurHash32(key, seed) {
      var m2 = this instanceof MurmurHash32 ? this : cache2;
      m2.reset(seed);
      if (typeof key === "string" && key.length > 0) {
        m2.hash(key);
      }
      if (m2 !== this) {
        return m2;
      }
    }
    MurmurHash32.prototype.hash = function(key) {
      var h1, k1, i, top, len;
      len = key.length;
      this.len += len;
      k1 = this.k1;
      i = 0;
      switch (this.rem) {
        case 0:
          k1 ^= len > i ? key.charCodeAt(i++) & 65535 : 0;
        case 1:
          k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 8 : 0;
        case 2:
          k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 16 : 0;
        case 3:
          k1 ^= len > i ? (key.charCodeAt(i) & 255) << 24 : 0;
          k1 ^= len > i ? (key.charCodeAt(i++) & 65280) >> 8 : 0;
      }
      this.rem = len + this.rem & 3;
      len -= this.rem;
      if (len > 0) {
        h1 = this.h1;
        while (1) {
          k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
          k1 = k1 << 15 | k1 >>> 17;
          k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
          h1 ^= k1;
          h1 = h1 << 13 | h1 >>> 19;
          h1 = h1 * 5 + 3864292196 & 4294967295;
          if (i >= len) {
            break;
          }
          k1 = key.charCodeAt(i++) & 65535 ^ (key.charCodeAt(i++) & 65535) << 8 ^ (key.charCodeAt(i++) & 65535) << 16;
          top = key.charCodeAt(i++);
          k1 ^= (top & 255) << 24 ^ (top & 65280) >> 8;
        }
        k1 = 0;
        switch (this.rem) {
          case 3:
            k1 ^= (key.charCodeAt(i + 2) & 65535) << 16;
          case 2:
            k1 ^= (key.charCodeAt(i + 1) & 65535) << 8;
          case 1:
            k1 ^= key.charCodeAt(i) & 65535;
        }
        this.h1 = h1;
      }
      this.k1 = k1;
      return this;
    };
    MurmurHash32.prototype.result = function() {
      var k1, h1;
      k1 = this.k1;
      h1 = this.h1;
      if (k1 > 0) {
        k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
        h1 ^= k1;
      }
      h1 ^= this.len;
      h1 ^= h1 >>> 16;
      h1 = h1 * 51819 + (h1 & 65535) * 2246770688 & 4294967295;
      h1 ^= h1 >>> 13;
      h1 = h1 * 44597 + (h1 & 65535) * 3266445312 & 4294967295;
      h1 ^= h1 >>> 16;
      return h1 >>> 0;
    };
    MurmurHash32.prototype.reset = function(seed) {
      this.h1 = typeof seed === "number" ? seed : 0;
      this.rem = this.k1 = this.len = 0;
      return this;
    };
    cache2 = new MurmurHash32();
    {
      module.exports = MurmurHash32;
    }
  })();
})(imurmurhash);
var signalExit = { exports: {} };
var signals$1 = { exports: {} };
(function(module) {
  module.exports = [
    "SIGABRT",
    "SIGALRM",
    "SIGHUP",
    "SIGINT",
    "SIGTERM"
  ];
  if (process.platform !== "win32") {
    module.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
  }
  if (process.platform === "linux") {
    module.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  }
})(signals$1);
var process$1 = commonjsGlobal.process;
const processOk = function(process2) {
  return process2 && typeof process2 === "object" && typeof process2.removeListener === "function" && typeof process2.emit === "function" && typeof process2.reallyExit === "function" && typeof process2.listeners === "function" && typeof process2.kill === "function" && typeof process2.pid === "number" && typeof process2.on === "function";
};
if (!processOk(process$1)) {
  signalExit.exports = function() {
    return function() {
    };
  };
} else {
  var assert = require$$4__default["default"];
  var signals = signals$1.exports;
  var isWin = /^win/i.test(process$1.platform);
  var EE = require$$2__default["default"];
  if (typeof EE !== "function") {
    EE = EE.EventEmitter;
  }
  var emitter;
  if (process$1.__signal_exit_emitter__) {
    emitter = process$1.__signal_exit_emitter__;
  } else {
    emitter = process$1.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }
  signalExit.exports = function(cb, opts) {
    if (!processOk(commonjsGlobal.process)) {
      return function() {
      };
    }
    assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
    if (loaded === false) {
      load();
    }
    var ev = "exit";
    if (opts && opts.alwaysLast) {
      ev = "afterexit";
    }
    var remove2 = function() {
      emitter.removeListener(ev, cb);
      if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);
    return remove2;
  };
  var unload = function unload2() {
    if (!loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = false;
    signals.forEach(function(sig) {
      try {
        process$1.removeListener(sig, sigListeners[sig]);
      } catch (er) {
      }
    });
    process$1.emit = originalProcessEmit;
    process$1.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  };
  signalExit.exports.unload = unload;
  var emit = function emit2(event, code, signal) {
    if (emitter.emitted[event]) {
      return;
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  };
  var sigListeners = {};
  signals.forEach(function(sig) {
    sigListeners[sig] = function listener() {
      if (!processOk(commonjsGlobal.process)) {
        return;
      }
      var listeners = process$1.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit("exit", null, sig);
        emit("afterexit", null, sig);
        if (isWin && sig === "SIGHUP") {
          sig = "SIGINT";
        }
        process$1.kill(process$1.pid, sig);
      }
    };
  });
  signalExit.exports.signals = function() {
    return signals;
  };
  var loaded = false;
  var load = function load2() {
    if (loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = true;
    emitter.count += 1;
    signals = signals.filter(function(sig) {
      try {
        process$1.on(sig, sigListeners[sig]);
        return true;
      } catch (er) {
        return false;
      }
    });
    process$1.emit = processEmit;
    process$1.reallyExit = processReallyExit;
  };
  signalExit.exports.load = load;
  var originalProcessReallyExit = process$1.reallyExit;
  var processReallyExit = function processReallyExit2(code) {
    if (!processOk(commonjsGlobal.process)) {
      return;
    }
    process$1.exitCode = code || 0;
    emit("exit", process$1.exitCode, null);
    emit("afterexit", process$1.exitCode, null);
    originalProcessReallyExit.call(process$1, process$1.exitCode);
  };
  var originalProcessEmit = process$1.emit;
  var processEmit = function processEmit2(ev, arg) {
    if (ev === "exit" && processOk(commonjsGlobal.process)) {
      if (arg !== void 0) {
        process$1.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      emit("exit", process$1.exitCode, null);
      emit("afterexit", process$1.exitCode, null);
      return ret;
    } else {
      return originalProcessEmit.apply(this, arguments);
    }
  };
}
var isTypedarray = isTypedArray$2;
isTypedArray$2.strict = isStrictTypedArray;
isTypedArray$2.loose = isLooseTypedArray;
var toString = Object.prototype.toString;
var names = {
  "[object Int8Array]": true,
  "[object Int16Array]": true,
  "[object Int32Array]": true,
  "[object Uint8Array]": true,
  "[object Uint8ClampedArray]": true,
  "[object Uint16Array]": true,
  "[object Uint32Array]": true,
  "[object Float32Array]": true,
  "[object Float64Array]": true
};
function isTypedArray$2(arr) {
  return isStrictTypedArray(arr) || isLooseTypedArray(arr);
}
function isStrictTypedArray(arr) {
  return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
}
function isLooseTypedArray(arr) {
  return names[toString.call(arr)];
}
var isTypedArray$1 = isTypedarray.strict;
var typedarrayToBuffer = function typedarrayToBuffer2(arr) {
  if (isTypedArray$1(arr)) {
    var buf = Buffer.from(arr.buffer);
    if (arr.byteLength !== arr.buffer.byteLength) {
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
    }
    return buf;
  } else {
    return Buffer.from(arr);
  }
};
writeFileAtomic$1.exports = writeFile;
writeFileAtomic$1.exports.sync = writeFileSync;
writeFileAtomic$1.exports._getTmpname = getTmpname;
writeFileAtomic$1.exports._cleanupOnExit = cleanupOnExit;
const fs = fs__default["default"];
const MurmurHash3 = imurmurhash.exports;
const onExit = signalExit.exports;
const path = path__default["default"];
const isTypedArray = isTypedarray;
const typedArrayToBuffer = typedarrayToBuffer;
const { promisify } = require$$0__default$1["default"];
const activeFiles = {};
const threadId = function getId() {
  try {
    const workerThreads = require("worker_threads");
    return workerThreads.threadId;
  } catch (e) {
    return 0;
  }
}();
let invocations = 0;
function getTmpname(filename) {
  return filename + "." + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();
}
function cleanupOnExit(tmpfile) {
  return () => {
    try {
      fs.unlinkSync(typeof tmpfile === "function" ? tmpfile() : tmpfile);
    } catch (_) {
    }
  };
}
function serializeActiveFile(absoluteName) {
  return new Promise((resolve) => {
    if (!activeFiles[absoluteName])
      activeFiles[absoluteName] = [];
    activeFiles[absoluteName].push(resolve);
    if (activeFiles[absoluteName].length === 1)
      resolve();
  });
}
function isChownErrOk(err) {
  if (err.code === "ENOSYS") {
    return true;
  }
  const nonroot = !process.getuid || process.getuid() !== 0;
  if (nonroot) {
    if (err.code === "EINVAL" || err.code === "EPERM") {
      return true;
    }
  }
  return false;
}
async function writeFileAsync(filename, data, options = {}) {
  if (typeof options === "string") {
    options = { encoding: options };
  }
  let fd;
  let tmpfile;
  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));
  const absoluteName = path.resolve(filename);
  try {
    await serializeActiveFile(absoluteName);
    const truename = await promisify(fs.realpath)(filename).catch(() => filename);
    tmpfile = getTmpname(truename);
    if (!options.mode || !options.chown) {
      const stats = await promisify(fs.stat)(truename).catch(() => {
      });
      if (stats) {
        if (options.mode == null) {
          options.mode = stats.mode;
        }
        if (options.chown == null && process.getuid) {
          options.chown = { uid: stats.uid, gid: stats.gid };
        }
      }
    }
    fd = await promisify(fs.open)(tmpfile, "w", options.mode);
    if (options.tmpfileCreated) {
      await options.tmpfileCreated(tmpfile);
    }
    if (isTypedArray(data)) {
      data = typedArrayToBuffer(data);
    }
    if (Buffer.isBuffer(data)) {
      await promisify(fs.write)(fd, data, 0, data.length, 0);
    } else if (data != null) {
      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || "utf8"));
    }
    if (options.fsync !== false) {
      await promisify(fs.fsync)(fd);
    }
    await promisify(fs.close)(fd);
    fd = null;
    if (options.chown) {
      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch((err) => {
        if (!isChownErrOk(err)) {
          throw err;
        }
      });
    }
    if (options.mode) {
      await promisify(fs.chmod)(tmpfile, options.mode).catch((err) => {
        if (!isChownErrOk(err)) {
          throw err;
        }
      });
    }
    await promisify(fs.rename)(tmpfile, truename);
  } finally {
    if (fd) {
      await promisify(fs.close)(fd).catch(() => {
      });
    }
    removeOnExitHandler();
    await promisify(fs.unlink)(tmpfile).catch(() => {
    });
    activeFiles[absoluteName].shift();
    if (activeFiles[absoluteName].length > 0) {
      activeFiles[absoluteName][0]();
    } else
      delete activeFiles[absoluteName];
  }
}
function writeFile(filename, data, options, callback) {
  if (options instanceof Function) {
    callback = options;
    options = {};
  }
  const promise = writeFileAsync(filename, data, options);
  if (callback) {
    promise.then(callback, callback);
  }
  return promise;
}
function writeFileSync(filename, data, options) {
  if (typeof options === "string")
    options = { encoding: options };
  else if (!options)
    options = {};
  try {
    filename = fs.realpathSync(filename);
  } catch (ex) {
  }
  const tmpfile = getTmpname(filename);
  if (!options.mode || !options.chown) {
    try {
      const stats = fs.statSync(filename);
      options = Object.assign({}, options);
      if (!options.mode) {
        options.mode = stats.mode;
      }
      if (!options.chown && process.getuid) {
        options.chown = { uid: stats.uid, gid: stats.gid };
      }
    } catch (ex) {
    }
  }
  let fd;
  const cleanup = cleanupOnExit(tmpfile);
  const removeOnExitHandler = onExit(cleanup);
  let threw = true;
  try {
    fd = fs.openSync(tmpfile, "w", options.mode || 438);
    if (options.tmpfileCreated) {
      options.tmpfileCreated(tmpfile);
    }
    if (isTypedArray(data)) {
      data = typedArrayToBuffer(data);
    }
    if (Buffer.isBuffer(data)) {
      fs.writeSync(fd, data, 0, data.length, 0);
    } else if (data != null) {
      fs.writeSync(fd, String(data), 0, String(options.encoding || "utf8"));
    }
    if (options.fsync !== false) {
      fs.fsyncSync(fd);
    }
    fs.closeSync(fd);
    fd = null;
    if (options.chown) {
      try {
        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);
      } catch (err) {
        if (!isChownErrOk(err)) {
          throw err;
        }
      }
    }
    if (options.mode) {
      try {
        fs.chmodSync(tmpfile, options.mode);
      } catch (err) {
        if (!isChownErrOk(err)) {
          throw err;
        }
      }
    }
    fs.renameSync(tmpfile, filename);
    threw = false;
  } finally {
    if (fd) {
      try {
        fs.closeSync(fd);
      } catch (ex) {
      }
    }
    removeOnExitHandler();
    if (threw) {
      cleanup();
    }
  }
}
var writeFileAtomic = writeFileAtomic$1.exports;
var isObj$1 = (value) => {
  const type = typeof value;
  return value !== null && (type === "object" || type === "function");
};
const isObj = isObj$1;
const disallowedKeys = new Set([
  "__proto__",
  "prototype",
  "constructor"
]);
const isValidPath = (pathSegments) => !pathSegments.some((segment) => disallowedKeys.has(segment));
function getPathSegments(path2) {
  const pathArray = path2.split(".");
  const parts = [];
  for (let i = 0; i < pathArray.length; i++) {
    let p = pathArray[i];
    while (p[p.length - 1] === "\\" && pathArray[i + 1] !== void 0) {
      p = p.slice(0, -1) + ".";
      p += pathArray[++i];
    }
    parts.push(p);
  }
  if (!isValidPath(parts)) {
    return [];
  }
  return parts;
}
var dotProp = {
  get(object, path2, value) {
    if (!isObj(object) || typeof path2 !== "string") {
      return value === void 0 ? object : value;
    }
    const pathArray = getPathSegments(path2);
    if (pathArray.length === 0) {
      return;
    }
    for (let i = 0; i < pathArray.length; i++) {
      object = object[pathArray[i]];
      if (object === void 0 || object === null) {
        if (i !== pathArray.length - 1) {
          return value;
        }
        break;
      }
    }
    return object === void 0 ? value : object;
  },
  set(object, path2, value) {
    if (!isObj(object) || typeof path2 !== "string") {
      return object;
    }
    const root = object;
    const pathArray = getPathSegments(path2);
    for (let i = 0; i < pathArray.length; i++) {
      const p = pathArray[i];
      if (!isObj(object[p])) {
        object[p] = {};
      }
      if (i === pathArray.length - 1) {
        object[p] = value;
      }
      object = object[p];
    }
    return root;
  },
  delete(object, path2) {
    if (!isObj(object) || typeof path2 !== "string") {
      return false;
    }
    const pathArray = getPathSegments(path2);
    for (let i = 0; i < pathArray.length; i++) {
      const p = pathArray[i];
      if (i === pathArray.length - 1) {
        delete object[p];
        return true;
      }
      object = object[p];
      if (!isObj(object)) {
        return false;
      }
    }
  },
  has(object, path2) {
    if (!isObj(object) || typeof path2 !== "string") {
      return false;
    }
    const pathArray = getPathSegments(path2);
    if (pathArray.length === 0) {
      return false;
    }
    for (let i = 0; i < pathArray.length; i++) {
      if (isObj(object)) {
        if (!(pathArray[i] in object)) {
          return false;
        }
        object = object[pathArray[i]];
      } else {
        return false;
      }
    }
    return true;
  }
};
const randomBytesAsync = require$$0$2.promisify(crypto__default["default"].randomBytes);
const urlSafeCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~".split("");
const numericCharacters = "0123456789".split("");
const distinguishableCharacters = "CDEHKMPRTUWXY012458".split("");
const asciiPrintableCharacters = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~".split("");
const alphanumericCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");
const generateForCustomCharacters = (length, characters) => {
  const characterCount = characters.length;
  const maxValidSelector = Math.floor(65536 / characterCount) * characterCount - 1;
  const entropyLength = 2 * Math.ceil(1.1 * length);
  let string = "";
  let stringLength = 0;
  while (stringLength < length) {
    const entropy = crypto__default["default"].randomBytes(entropyLength);
    let entropyPosition = 0;
    while (entropyPosition < entropyLength && stringLength < length) {
      const entropyValue = entropy.readUInt16LE(entropyPosition);
      entropyPosition += 2;
      if (entropyValue > maxValidSelector) {
        continue;
      }
      string += characters[entropyValue % characterCount];
      stringLength++;
    }
  }
  return string;
};
const generateForCustomCharactersAsync = async (length, characters) => {
  const characterCount = characters.length;
  const maxValidSelector = Math.floor(65536 / characterCount) * characterCount - 1;
  const entropyLength = 2 * Math.ceil(1.1 * length);
  let string = "";
  let stringLength = 0;
  while (stringLength < length) {
    const entropy = await randomBytesAsync(entropyLength);
    let entropyPosition = 0;
    while (entropyPosition < entropyLength && stringLength < length) {
      const entropyValue = entropy.readUInt16LE(entropyPosition);
      entropyPosition += 2;
      if (entropyValue > maxValidSelector) {
        continue;
      }
      string += characters[entropyValue % characterCount];
      stringLength++;
    }
  }
  return string;
};
const generateRandomBytes = (byteLength, type, length) => crypto__default["default"].randomBytes(byteLength).toString(type).slice(0, length);
const generateRandomBytesAsync = async (byteLength, type, length) => {
  const buffer = await randomBytesAsync(byteLength);
  return buffer.toString(type).slice(0, length);
};
const allowedTypes = new Set([
  void 0,
  "hex",
  "base64",
  "url-safe",
  "numeric",
  "distinguishable",
  "ascii-printable",
  "alphanumeric"
]);
const createGenerator = (generateForCustomCharacters2, generateRandomBytes2) => ({ length, type, characters }) => {
  if (!(length >= 0 && Number.isFinite(length))) {
    throw new TypeError("Expected a `length` to be a non-negative finite number");
  }
  if (type !== void 0 && characters !== void 0) {
    throw new TypeError("Expected either `type` or `characters`");
  }
  if (characters !== void 0 && typeof characters !== "string") {
    throw new TypeError("Expected `characters` to be string");
  }
  if (!allowedTypes.has(type)) {
    throw new TypeError(`Unknown type: ${type}`);
  }
  if (type === void 0 && characters === void 0) {
    type = "hex";
  }
  if (type === "hex" || type === void 0 && characters === void 0) {
    return generateRandomBytes2(Math.ceil(length * 0.5), "hex", length);
  }
  if (type === "base64") {
    return generateRandomBytes2(Math.ceil(length * 0.75), "base64", length);
  }
  if (type === "url-safe") {
    return generateForCustomCharacters2(length, urlSafeCharacters);
  }
  if (type === "numeric") {
    return generateForCustomCharacters2(length, numericCharacters);
  }
  if (type === "distinguishable") {
    return generateForCustomCharacters2(length, distinguishableCharacters);
  }
  if (type === "ascii-printable") {
    return generateForCustomCharacters2(length, asciiPrintableCharacters);
  }
  if (type === "alphanumeric") {
    return generateForCustomCharacters2(length, alphanumericCharacters);
  }
  if (characters.length === 0) {
    throw new TypeError("Expected `characters` string length to be greater than or equal to 1");
  }
  if (characters.length > 65536) {
    throw new TypeError("Expected `characters` string length to be less or equal to 65536");
  }
  return generateForCustomCharacters2(length, characters.split(""));
};
const cryptoRandomString = createGenerator(generateForCustomCharacters, generateRandomBytes);
cryptoRandomString.async = createGenerator(generateForCustomCharactersAsync, generateRandomBytesAsync);
function uniqueString() {
  return cryptoRandomString({ length: 32 });
}
const configDirectory = xdgConfig || path__default["default"].join(os__default["default"].tmpdir(), uniqueString());
const permissionError = "You don't have access to this file.";
const mkdirOptions = { mode: 448, recursive: true };
const writeFileOptions = { mode: 384 };
class Configstore {
  constructor(id, defaults, options = {}) {
    const pathPrefix = options.globalConfigPath ? path__default["default"].join(id, "config.json") : path__default["default"].join("configstore", `${id}.json`);
    this._path = options.configPath || path__default["default"].join(configDirectory, pathPrefix);
    if (defaults) {
      this.all = __spreadValues2(__spreadValues2({}, defaults), this.all);
    }
  }
  get all() {
    try {
      return JSON.parse(fs$2.readFileSync(this._path, "utf8"));
    } catch (error) {
      if (error.code === "ENOENT") {
        return {};
      }
      if (error.code === "EACCES") {
        error.message = `${error.message}
${permissionError}
`;
      }
      if (error.name === "SyntaxError") {
        writeFileAtomic.sync(this._path, "", writeFileOptions);
        return {};
      }
      throw error;
    }
  }
  set all(value) {
    try {
      fs$2.mkdirSync(path__default["default"].dirname(this._path), mkdirOptions);
      writeFileAtomic.sync(this._path, JSON.stringify(value, void 0, "	"), writeFileOptions);
    } catch (error) {
      if (error.code === "EACCES") {
        error.message = `${error.message}
${permissionError}
`;
      }
      throw error;
    }
  }
  get size() {
    return Object.keys(this.all || {}).length;
  }
  get(key) {
    return dotProp.get(this.all, key);
  }
  set(key, value) {
    const config = this.all;
    if (arguments.length === 1) {
      for (const k of Object.keys(key)) {
        dotProp.set(config, k, key[k]);
      }
    } else {
      dotProp.set(config, key, value);
    }
    this.all = config;
  }
  has(key) {
    return dotProp.has(this.all, key);
  }
  delete(key) {
    const config = this.all;
    dotProp.delete(config, key);
    this.all = config;
  }
  clear() {
    this.all = {};
  }
  get path() {
    return this._path;
  }
}
class MyConfigManager {
  config;
  constructor(configName) {
    const configDir = this.getConfigDir();
    const configPath = path__namespace.join(configDir, `${configName}.json`);
    if (!fs__namespace.existsSync(configDir)) {
      fs__namespace.mkdirSync(configDir);
    }
    this.config = new Configstore(configName, {}, { configPath });
  }
  getConfigDir() {
    return path__namespace.join(os__namespace.homedir(), ".comflowy");
  }
  get(key) {
    return this.config.get(key);
  }
  set(key, value) {
    this.config.set(key, value);
  }
  delete(key) {
    this.config.delete(key);
  }
}
const appConfigManager = new MyConfigManager("_config");
console.log("startasdwtf");
var extensionList = {
  "extensions": [
    {
      "author": "Dr.Lt.Data",
      "title": "ComfyUI-Manager",
      "reference": "https://github.com/ltdrdata/ComfyUI-Manager",
      "files": [
        "https://github.com/ltdrdata/ComfyUI-Manager"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI-Manager itself is also a custom node."
    },
    {
      "author": "Dr.Lt.Data",
      "title": "ComfyUI Impact Pack",
      "reference": "https://github.com/ltdrdata/ComfyUI-Impact-Pack",
      "files": [
        "https://github.com/ltdrdata/ComfyUI-Impact-Pack"
      ],
      "pip": ["ultralytics"],
      "install_type": "git-clone",
      "description": "This extension offers various detector nodes and detailer nodes that allow you to configure a workflow that automatically enhances facial details. And provide iterative upscaler.<BR><p style='background-color: black; color: red;'>NOTE:MMDetDetectorProvider and other legacy nodes are disabled by default. If you want to activate these nodes and use them, please edit the impact-pack.ini file in the ComfyUI-Impact-Pack directory and change 'mmdet_skip = True' to 'mmdet_skip = False.' </p>"
    },
    {
      "author": "Dr.Lt.Data",
      "title": "ComfyUI Inspire Pack",
      "reference": "https://github.com/ltdrdata/ComfyUI-Inspire-Pack",
      "nodename_pattern": "Inspire$",
      "files": [
        "https://github.com/ltdrdata/ComfyUI-Inspire-Pack"
      ],
      "install_type": "git-clone",
      "description": "This extension provides various nodes to support Lora Block Weight and the Impact Pack."
    },
    {
      "author": "comfyanonymous",
      "title": "ComfyUI_experiments",
      "reference": "https://github.com/comfyanonymous/ComfyUI_experiments",
      "files": [
        "https://github.com/comfyanonymous/ComfyUI_experiments"
      ],
      "install_type": "git-clone",
      "description": "Nodes: ModelSamplerTonemapNoiseTest, TonemapNoiseWithRescaleCFG, ReferenceOnlySimple, RescaleClassifierFreeGuidanceTest, ModelMergeBlockNumber, ModelMergeSDXL, ModelMergeSDXLTransformers, ModelMergeSDXLDetailedTransformers.<p style='background-color: black; color: red;'>NOTE: This is a consolidation of the previously separate custom nodes. Please delete the sampler_tonemap.py, sampler_rescalecfg.py, advanced_model_merging.py, sdxl_model_merging.py, and reference_only.py files installed in custom_nodes before.</p>"
    },
    {
      "author": "Stability-AI",
      "title": "stability-ComfyUI-nodes",
      "reference": "https://github.com/Stability-AI/stability-ComfyUI-nodes",
      "files": [
        "https://github.com/Stability-AI/stability-ComfyUI-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: ColorBlend, ControlLoraSave, GetImageSize. NOTE: Control-LoRA recolor example uses these nodes."
    },
    {
      "author": "Fannovel16",
      "title": "ComfyUI's ControlNet Auxiliary Preprocessors",
      "reference": "https://github.com/Fannovel16/comfyui_controlnet_aux",
      "files": [
        "https://github.com/Fannovel16/comfyui_controlnet_aux"
      ],
      "install_type": "git-clone",
      "description": "This is a rework of comfyui_controlnet_preprocessors based on ControlNet auxiliary models by \u{1F917}. I think the old repo isn't good enough to maintain. All old workflow will still be work with this repo but the version option won't do anything. Almost all v1 preprocessors are replaced by v1.1 except those doesn't appear in v1.1. <p style='background-color: black; color: red;'>NOTE: Please refrain from using the controlnet preprocessor alongside this installation, as it may lead to conflicts and prevent proper recognition.</p>"
    },
    {
      "author": "Fannovel16",
      "title": "ComfyUI Frame Interpolation",
      "reference": "https://github.com/Fannovel16/ComfyUI-Frame-Interpolation",
      "files": [
        "https://github.com/Fannovel16/ComfyUI-Frame-Interpolation"
      ],
      "install_type": "git-clone",
      "description": "Nodes: KSampler Gradually Adding More Denoise (efficient)"
    },
    {
      "author": "Fannovel16",
      "title": "ComfyUI Loopchain",
      "reference": "https://github.com/Fannovel16/ComfyUI-Loopchain",
      "files": [
        "https://github.com/Fannovel16/ComfyUI-Loopchain"
      ],
      "install_type": "git-clone",
      "description": "A collection of nodes which can be useful for animation in ComfyUI. The main focus of this extension is implementing a mechanism called loopchain. A loopchain in this case is the chain of nodes only executed repeatly in the workflow. If a node chain contains a loop node from this extension, it will become a loop chain."
    },
    {
      "author": "Fannovel16",
      "title": "ComfyUI MotionDiff",
      "reference": "https://github.com/Fannovel16/ComfyUI-MotionDiff",
      "files": [
        "https://github.com/Fannovel16/ComfyUI-MotionDiff"
      ],
      "install_type": "git-clone",
      "description": "Implementation of MDM, MotionDiffuse and ReMoDiffuse into ComfyUI."
    },
    {
      "author": "biegert",
      "title": "CLIPSeg",
      "reference": "https://github.com/biegert/ComfyUI-CLIPSeg",
      "files": [
        "https://github.com/biegert/ComfyUI-CLIPSeg/raw/main/custom_nodes/clipseg.py"
      ],
      "install_type": "copy",
      "description": "The CLIPSeg node generates a binary mask for a given input image and text prompt."
    },
    {
      "author": "BlenderNeko",
      "title": "ComfyUI Cutoff",
      "reference": "https://github.com/BlenderNeko/ComfyUI_Cutoff",
      "files": [
        "https://github.com/BlenderNeko/ComfyUI_Cutoff"
      ],
      "install_type": "git-clone",
      "description": "These custom nodes provides features that allow for better control over the effects of the text prompt."
    },
    {
      "author": "BlenderNeko",
      "title": "Advanced CLIP Text Encode",
      "reference": "https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_emb",
      "files": [
        "https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_emb"
      ],
      "install_type": "git-clone",
      "description": "Advanced CLIP Text Encode (if you need A1111 like prompt. you need this. But Cutoff node includes this feature, already.)"
    },
    {
      "author": "BlenderNeko",
      "title": "ComfyUI Noise",
      "reference": "https://github.com/BlenderNeko/ComfyUI_Noise",
      "files": [
        "https://github.com/BlenderNeko/ComfyUI_Noise"
      ],
      "install_type": "git-clone",
      "description": "This extension contains 6 nodes for ComfyUI that allows for more control and flexibility over the noise."
    },
    {
      "author": "BlenderNeko",
      "title": "Tiled sampling for ComfyUI",
      "reference": "https://github.com/BlenderNeko/ComfyUI_TiledKSampler",
      "files": [
        "https://github.com/BlenderNeko/ComfyUI_TiledKSampler"
      ],
      "install_type": "git-clone",
      "description": "This extension contains a tiled sampler for ComfyUI. It allows for denoising larger images by splitting it up into smaller tiles and denoising these. It tries to minimize any seams for showing up in the end result by gradually denoising all tiles one step at the time and randomizing tile positions for every step."
    },
    {
      "author": "BlenderNeko",
      "title": "SeeCoder [WIP]",
      "reference": "https://github.com/BlenderNeko/ComfyUI_SeeCoder",
      "files": [
        "https://github.com/BlenderNeko/ComfyUI_SeeCoder"
      ],
      "install_type": "git-clone",
      "description": "It provides the capability to generate CLIP from an image input, unlike unCLIP, which works in all models. (To use this extension, you need to download the required model file from <B>Install Models</B>)"
    },
    {
      "author": "jags111",
      "title": "Efficiency Nodes for ComfyUI Version 2.0+",
      "reference": "https://github.com/jags111/efficiency-nodes-comfyui",
      "files": [
        "https://github.com/jags111/efficiency-nodes-comfyui"
      ],
      "install_type": "git-clone",
      "description": "A collection of ComfyUI custom nodes to help streamline workflows and reduce total node count.<p style='background-color: black; color: red;'>NOTE: This node is originally created by LucianoCirino, but the <a href='https://github.com/LucianoCirino/efficiency-nodes-comfyui'>original repository</a> is no longer maintained and has been forked by a new maintainer. To use the forked version, you should uninstall the original version and <B>REINSTALL</B> this one.</p>"
    },
    {
      "author": "jags111",
      "title": "ComfyUI_Jags_VectorMagic",
      "reference": "https://github.com/jags111/ComfyUI_Jags_VectorMagic",
      "files": [
        "https://github.com/jags111/ComfyUI_Jags_VectorMagic"
      ],
      "install_type": "git-clone",
      "description": "a collection of nodes to explore Vector and image manipulation"
    },
    {
      "author": "Derfuu",
      "title": "Derfuu_ComfyUI_ModdedNodes",
      "reference": "https://github.com/Derfuu/Derfuu_ComfyUI_ModdedNodes",
      "files": [
        "https://github.com/Derfuu/Derfuu_ComfyUI_ModdedNodes"
      ],
      "install_type": "git-clone",
      "description": "Automate calculation depending on image sizes or something you want."
    },
    {
      "author": "paulo-coronado",
      "title": "comfy_clip_blip_node",
      "reference": "https://github.com/paulo-coronado/comfy_clip_blip_node",
      "files": [
        "https://github.com/paulo-coronado/comfy_clip_blip_node"
      ],
      "install_type": "git-clone",
      "apt_dependency": [
        "rustc",
        "cargo"
      ],
      "description": "CLIPTextEncodeBLIP: This custom node provides a CLIP Encoder that is capable of receiving images as input."
    },
    {
      "author": "Davemane42",
      "title": "Visual Area Conditioning / Latent composition",
      "reference": "https://github.com/Davemane42/ComfyUI_Dave_CustomNode",
      "files": [
        "https://github.com/Davemane42/ComfyUI_Dave_CustomNode"
      ],
      "install_type": "git-clone",
      "description": "This tool provides custom nodes that allow visualization and configuration of area conditioning and latent composite."
    },
    {
      "author": "WASasquatch",
      "title": "WAS Node Suite",
      "reference": "https://github.com/WASasquatch/was-node-suite-comfyui",
      "pip": ["numba"],
      "files": [
        "https://github.com/WASasquatch/was-node-suite-comfyui"
      ],
      "install_type": "git-clone",
      "description": "A node suite for ComfyUI with many new nodes, such as image processing, text processing, and more."
    },
    {
      "author": "WASasquatch",
      "title": "ComfyUI Preset Merger",
      "reference": "https://github.com/WASasquatch/ComfyUI_Preset_Merger",
      "files": [
        "https://github.com/WASasquatch/ComfyUI_Preset_Merger"
      ],
      "install_type": "git-clone",
      "description": "Nodes: ModelMergeByPreset. Merge checkpoint models by preset"
    },
    {
      "author": "WASasquatch",
      "title": "PPF_Noise_ComfyUI",
      "reference": "https://github.com/WASasquatch/PPF_Noise_ComfyUI",
      "files": [
        "https://github.com/WASasquatch/PPF_Noise_ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes: WAS_PFN_Latent. Perlin Power Fractal Noisey Latents"
    },
    {
      "author": "WASasquatch",
      "title": "Power Noise Suite for ComfyUI",
      "reference": "https://github.com/WASasquatch/PowerNoiseSuite",
      "files": [
        "https://github.com/WASasquatch/PowerNoiseSuite"
      ],
      "install_type": "git-clone",
      "description": "Power Noise Suite contains nodes centered around latent noise input, and diffusion, as well as latent adjustments."
    },
    {
      "author": "WASasquatch",
      "title": "FreeU_Advanced",
      "reference": "https://github.com/WASasquatch/FreeU_Advanced",
      "files": [
        "https://github.com/WASasquatch/FreeU_Advanced"
      ],
      "install_type": "git-clone",
      "description": "This custom node provides advanced settings for FreeU."
    },
    {
      "author": "WASasquatch",
      "title": "ASTERR",
      "reference": "https://github.com/WASasquatch/ASTERR",
      "files": [
        "https://github.com/WASasquatch/ASTERR"
      ],
      "install_type": "git-clone",
      "description": "Abstract Syntax Trees Evaluated Restricted Run (ASTERR) is a Python Script executor for ComfyUI. <p style='background-color: black; color: red;'>Warning:ASTERR runs Python Code from a Web Interface! It is highly recommended to run this in a closed-off environment, as it could have potential security risks.</p>"
    },
    {
      "author": "WASasquatch",
      "title": "WAS_Extras",
      "reference": "https://github.com/WASasquatch/WAS_Extras",
      "files": [
        "https://github.com/WASasquatch/WAS_Extras"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Conditioning (Blend), Inpainting VAE Encode (WAS), VividSharpen. Experimental nodes, or other random extra helper nodes."
    },
    {
      "author": "omar92",
      "title": "Quality of life Suit:V2",
      "reference": "https://github.com/omar92/ComfyUI-QualityOfLifeSuit_Omar92",
      "files": [
        "https://github.com/omar92/ComfyUI-QualityOfLifeSuit_Omar92"
      ],
      "install_type": "git-clone",
      "description": "openAI suite, String suite, Latent Tools, Image Tools: These custom nodes provide expanded functionality for image and string processing, latent processing, as well as the ability to interface with models such as ChatGPT/DallE-2."
    },
    {
      "author": "lilly1987",
      "title": "simple wildcard for ComfyUI",
      "reference": "https://github.com/lilly1987/ComfyUI_node_Lilly",
      "files": [
        "https://github.com/lilly1987/ComfyUI_node_Lilly"
      ],
      "install_type": "git-clone",
      "description": "These custom nodes provides a feature to insert arbitrary inputs through wildcards in the prompt. Additionally, this tool provides features that help simplify workflows, such as VAELoaderDecoder and SimplerSample."
    },
    {
      "author": "sylym",
      "title": "Vid2vid",
      "reference": "https://github.com/sylym/comfy_vid2vid",
      "files": [
        "https://github.com/sylym/comfy_vid2vid"
      ],
      "install_type": "git-clone",
      "description": "A node suite for ComfyUI that allows you to load image sequence and generate new image sequence with different styles or content."
    },
    {
      "author": "EllangoK",
      "title": "ComfyUI-post-processing-nodes",
      "reference": "https://github.com/EllangoK/ComfyUI-post-processing-nodes",
      "files": [
        "https://github.com/EllangoK/ComfyUI-post-processing-nodes"
      ],
      "install_type": "git-clone",
      "description": "A collection of post processing nodes for ComfyUI, simply download this repo and drag."
    },
    {
      "author": "LEv145",
      "title": "ImagesGrid",
      "reference": "https://github.com/LEv145/images-grid-comfy-plugin",
      "files": [
        "https://github.com/LEv145/images-grid-comfy-plugin"
      ],
      "install_type": "git-clone",
      "description": "This tool provides a viewer node that allows for checking multiple outputs in a grid, similar to the X/Y Plot extension."
    },
    {
      "author": "diontimmer",
      "title": "ComfyUI-Vextra-Nodes",
      "reference": "https://github.com/diontimmer/ComfyUI-Vextra-Nodes",
      "files": [
        "https://github.com/diontimmer/ComfyUI-Vextra-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Pixel Sort, Swap Color Mode, Solid Color, Glitch This, Add Text To Image, Play Sound, Prettify Prompt, Generate Noise, Flatten Colors"
    },
    {
      "author": "hnmr293",
      "title": "ComfyUI-nodes-hnmr",
      "reference": "https://github.com/hnmr293/ComfyUI-nodes-hnmr",
      "files": [
        "https://github.com/hnmr293/ComfyUI-nodes-hnmr"
      ],
      "install_type": "git-clone",
      "description": "Provide various custom nodes for Latent, Sampling, Model, Loader, Image, Text"
    },
    {
      "author": "BadCafeCode",
      "title": "Masquerade Nodes",
      "reference": "https://github.com/BadCafeCode/masquerade-nodes-comfyui",
      "files": [
        "https://github.com/BadCafeCode/masquerade-nodes-comfyui"
      ],
      "install_type": "git-clone",
      "description": "This is a node pack for ComfyUI, primarily dealing with masks."
    },
    {
      "author": "guoyk93",
      "title": "y.k.'s ComfyUI node suite",
      "reference": "https://github.com/guoyk93/yk-node-suite-comfyui",
      "files": [
        "https://github.com/guoyk93/yk-node-suite-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes: YKImagePadForOutpaint, YKMaskToImage"
    },
    {
      "author": "Jcd1230",
      "title": "Rembg Background Removal Node for ComfyUI",
      "reference": "https://github.com/Jcd1230/rembg-comfyui-node",
      "files": [
        "https://github.com/Jcd1230/rembg-comfyui-node"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Image Remove Background (rembg)"
    },
    {
      "author": "YinBailiang",
      "title": "MergeBlockWeighted_fo_ComfyUI",
      "reference": "https://github.com/YinBailiang/MergeBlockWeighted_fo_ComfyUI",
      "files": [
        "https://github.com/YinBailiang/MergeBlockWeighted_fo_ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes: MergeBlockWeighted"
    },
    {
      "author": "trojblue",
      "title": "trNodes",
      "reference": "https://github.com/trojblue/trNodes",
      "files": [
        "https://github.com/trojblue/trNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: image_layering, color_correction, model_router"
    },
    {
      "author": "szhublox",
      "title": "Auto-MBW",
      "reference": "https://github.com/szhublox/ambw_comfyui",
      "files": [
        "https://github.com/szhublox/ambw_comfyui"
      ],
      "install_type": "git-clone",
      "description": "Auto-MBW for ComfyUI loosely based on sdweb-auto-MBW. Nodes: auto merge block weighted"
    },
    {
      "author": "city96",
      "title": "ComfyUI_NetDist",
      "reference": "https://github.com/city96/ComfyUI_NetDist",
      "files": [
        "https://github.com/city96/ComfyUI_NetDist"
      ],
      "install_type": "git-clone",
      "description": "Run ComfyUI workflows on multiple local GPUs/networked machines. Nodes: Remote images, Local Remote control"
    },
    {
      "author": "city96",
      "title": "Latent-Interposer",
      "reference": "https://github.com/city96/SD-Latent-Interposer",
      "files": [
        "https://github.com/city96/SD-Latent-Interposer"
      ],
      "install_type": "git-clone",
      "description": "Custom node to convert the lantents between SDXL and SD v1.5 directly without the VAE decoding/encoding step."
    },
    {
      "author": "city96",
      "title": "SD-Advanced-Noise",
      "reference": "https://github.com/city96/SD-Advanced-Noise",
      "files": [
        "https://github.com/city96/SD-Advanced-Noise"
      ],
      "install_type": "git-clone",
      "description": "Nodes: LatentGaussianNoise, MathEncode. An experimental custom node that generates latent noise directly by utilizing the linear characteristics of the latent space."
    },
    {
      "author": "city96",
      "title": "SD-Latent-Upscaler",
      "reference": "https://github.com/city96/SD-Latent-Upscaler",
      "files": [
        "https://github.com/city96/SD-Latent-Upscaler"
      ],
      "pip": ["huggingface-hub"],
      "install_type": "git-clone",
      "description": "Upscaling stable diffusion latents using a small neural network."
    },
    {
      "author": "city96",
      "title": "ComfyUI_DiT [WIP]",
      "reference": "https://github.com/city96/ComfyUI_DiT",
      "files": [
        "https://github.com/city96/ComfyUI_DiT"
      ],
      "pip": ["huggingface-hub"],
      "install_type": "git-clone",
      "description": "Testbed for <a href='https://github.com/facebookresearch/DiT' target='blank'>DiT(Scalable Diffusion Models with Transformers)</a>. <p style='background-color: black; color: red;'>None of this code is stable, expect breaking changes if for some reason you want to use this.</p>"
    },
    {
      "author": "city96",
      "title": "ComfyUI_ColorMod",
      "reference": "https://github.com/city96/ComfyUI_ColorMod",
      "files": [
        "https://github.com/city96/ComfyUI_ColorMod"
      ],
      "install_type": "git-clone",
      "description": "This extension currently has two sets of nodes - one set for editing the contrast/color of images and another set for saving images as 16 bit PNG files."
    },
    {
      "author": "city96",
      "title": "Extra Models for ComfyUI",
      "reference": "https://github.com/city96/ComfyUI_ExtraModels",
      "files": [
        "https://github.com/city96/ComfyUI_ExtraModels"
      ],
      "install_type": "git-clone",
      "description": "This extension aims to add support for various random image diffusion models to ComfyUI."
    },
    {
      "author": "Kaharos94",
      "title": "ComfyUI-Saveaswebp",
      "reference": "https://github.com/Kaharos94/ComfyUI-Saveaswebp",
      "files": [
        "https://github.com/Kaharos94/ComfyUI-Saveaswebp"
      ],
      "install_type": "git-clone",
      "description": "Save a picture as Webp file in Comfy + Workflow loading"
    },
    {
      "author": "SLAPaper",
      "title": "ComfyUI-Image-Selector",
      "reference": "https://github.com/SLAPaper/ComfyUI-Image-Selector",
      "files": [
        "https://github.com/SLAPaper/ComfyUI-Image-Selector"
      ],
      "install_type": "git-clone",
      "description": "A custom node for ComfyUI, which can select one or some of images from a batch."
    },
    {
      "author": "flyingshutter",
      "title": "As_ComfyUI_CustomNodes",
      "reference": "https://github.com/flyingshutter/As_ComfyUI_CustomNodes",
      "files": [
        "https://github.com/flyingshutter/As_ComfyUI_CustomNodes"
      ],
      "install_type": "git-clone",
      "description": "Manipulation nodes for Image, Latent"
    },
    {
      "author": "Zuellni",
      "title": "Zuellni/ComfyUI-Custom-Nodes",
      "reference": "https://github.com/Zuellni/ComfyUI-Custom-Nodes",
      "files": [
        "https://github.com/Zuellni/ComfyUI-Custom-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: DeepFloyd, Filter, Select, Save, Decode, Encode, Repeat, Noise, Noise"
    },
    {
      "author": "Zuellni",
      "title": "ComfyUI-ExLlama",
      "reference": "https://github.com/Zuellni/ComfyUI-ExLlama",
      "files": [
        "https://github.com/Zuellni/ComfyUI-ExLlama"
      ],
      "pip": ["sentencepiece", "https://github.com/jllllll/exllama/releases/download/0.0.17/exllama-0.0.17+cu118-cp310-cp310-win_amd64.whl"],
      "install_type": "git-clone",
      "description": "Nodes: ExLlama Loader, ExLlama Generator. <BR>Used to load 4-bit GPTQ Llama/2 models. You can find a lot of them over at <a href='https://huggingface.co/TheBloke'>https://huggingface.co/TheBloke</a><p style='background-color: black; color: red;'>NOTE: You need to manually install a pip package that suits your system. For example. If your system is 'Python3.10 + Windows + CUDA 11.8' then you need to install 'exllama-0.0.17+cu118-cp310-cp310-win_amd64.whl'. Available package files are <a href='https://github.com/jllllll/exllama/releases'>here</a>."
    },
    {
      "author": "Zuellni",
      "title": "ComfyUI PickScore Nodes",
      "reference": "https://github.com/Zuellni/ComfyUI-PickScore-Nodes",
      "files": [
        "https://github.com/Zuellni/ComfyUI-PickScore-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Image scoring nodes for ComfyUI using PickScore with a batch of images to predict which ones fit a given prompt the best."
    },
    {
      "author": "AlekPet",
      "title": "AlekPet/ComfyUI_Custom_Nodes_AlekPet",
      "reference": "https://github.com/AlekPet/ComfyUI_Custom_Nodes_AlekPet",
      "files": [
        "https://github.com/AlekPet/ComfyUI_Custom_Nodes_AlekPet"
      ],
      "install_type": "git-clone",
      "description": "Nodes: PoseNode, TranslateCLIPTextEncodeNode"
    },
    {
      "author": "pythongosssss",
      "title": "ComfyUI WD 1.4 Tagger",
      "reference": "https://github.com/pythongosssss/ComfyUI-WD14-Tagger",
      "files": [
        "https://github.com/pythongosssss/ComfyUI-WD14-Tagger"
      ],
      "install_type": "git-clone",
      "description": "A ComfyUI extension allowing the interrogation of booru tags from images."
    },
    {
      "author": "pythongosssss",
      "title": "pythongosssss/ComfyUI-Custom-Scripts",
      "reference": "https://github.com/pythongosssss/ComfyUI-Custom-Scripts",
      "files": [
        "https://github.com/pythongosssss/ComfyUI-Custom-Scripts"
      ],
      "install_type": "git-clone",
      "description": "This extension provides: Auto Arrange Graph, Workflow SVG, Favicon Status, Image Feed, Latent Upscale By, Lock Nodes & Groups, Lora Subfolders, Preset Text, Show Text, Touch Support, Link Render Mode, Locking, Node Finder, Quick Nodes, Show Image On Menu, Show Text, Workflow Managements, Custom Widget Default Values"
    },
    {
      "author": "strimmlarn",
      "title": "ComfyUI_Strimmlarns_aesthetic_score",
      "reference": "https://github.com/strimmlarn/ComfyUI_Strimmlarns_aesthetic_score",
      "js_path": "strimmlarn",
      "files": [
        "https://github.com/strimmlarn/ComfyUI_Strimmlarns_aesthetic_score"
      ],
      "install_type": "git-clone",
      "description": "Nodes: CalculateAestheticScore, LoadAesteticModel, AesthetlcScoreSorter, ScoreToNumber"
    },
    {
      "author": "tinyterra",
      "title": "tinyterraNodes",
      "reference": "https://github.com/tinyterra/ComfyUI_tinyterraNodes",
      "files": [
        "https://github.com/TinyTerra/ComfyUI_tinyterraNodes"
      ],
      "install_type": "git-clone",
      "nodename_pattern": "^ttN ",
      "description": "This extension offers various pipe nodes, fullscreen image viewer based on node history, dynamic widgets, interface customization, and more."
    },
    {
      "author": "Jordach",
      "title": "comfy-plasma",
      "reference": "https://github.com/Jordach/comfy-plasma",
      "files": [
        "https://github.com/Jordach/comfy-plasma"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Plasma Noise, Random Noise, Greyscale Noise, Pink Noise, Brown Noise, Plasma KSampler"
    },
    {
      "author": "bvhari",
      "title": "ImageProcessing",
      "reference": "https://github.com/bvhari/ComfyUI_ImageProcessing",
      "files": [
        "https://github.com/bvhari/ComfyUI_ImageProcessing"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI custom nodes to apply various image processing techniques."
    },
    {
      "author": "bvhari",
      "title": "LatentToRGB",
      "reference": "https://github.com/bvhari/ComfyUI_LatentToRGB",
      "files": [
        "https://github.com/bvhari/ComfyUI_LatentToRGB"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI custom node to convert latent to RGB."
    },
    {
      "author": "bvhari",
      "title": "ComfyUI_PerpNeg [WIP]",
      "reference": "https://github.com/bvhari/ComfyUI_PerpNeg",
      "files": [
        "https://github.com/bvhari/ComfyUI_PerpNeg"
      ],
      "install_type": "git-clone",
      "description": "Nodes: KSampler (Advanced + Perp-Neg). Implementation of <a href='https://perp-neg.github.io/' target='blank'>Perp-Neg</a><br>Includes Tonemap and CFG Rescale optionsComfyUI custom node to convert latent to RGB.<p style='background-color: black; color: red;'>WARNING: Experimental code, might have incompatibilities and edge cases.</>"
    },
    {
      "author": "bvhari",
      "title": "ComfyUI_PerpWeight",
      "reference": "https://github.com/bvhari/ComfyUI_PerpWeight",
      "files": [
        "https://github.com/bvhari/ComfyUI_PerpWeight"
      ],
      "install_type": "git-clone",
      "description": "A novel weighting scheme for token vectors from CLIP. Allows a wider range of values for the weight. Inspired by Perp-Neg."
    },
    {
      "author": "ssitu",
      "title": "UltimateSDUpscale",
      "reference": "https://github.com/ssitu/ComfyUI_UltimateSDUpscale",
      "files": [
        "https://github.com/ssitu/ComfyUI_UltimateSDUpscale"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI nodes for the Ultimate Stable Diffusion Upscale script by Coyote-A."
    },
    {
      "author": "ssitu",
      "title": "NestedNodeBuilder",
      "reference": "https://github.com/ssitu/ComfyUI_NestedNodeBuilder",
      "files": [
        "https://github.com/ssitu/ComfyUI_NestedNodeBuilder"
      ],
      "install_type": "git-clone",
      "description": "This extension provides the ability to combine multiple nodes into a single node."
    },
    {
      "author": "ssitu",
      "title": "Restart Sampling",
      "reference": "https://github.com/ssitu/ComfyUI_restart_sampling",
      "files": [
        "https://github.com/ssitu/ComfyUI_restart_sampling"
      ],
      "install_type": "git-clone",
      "description": "Unofficial ComfyUI nodes for restart sampling based on the paper 'Restart Sampling for Improving Generative Processes' <a href='https://arxiv.org/abs/2306.14878' target='blank'>[paper]</a> <a href='https://github.com/Newbeeer/diffusion_restart_sampling' target='blank'>[repo]</a>"
    },
    {
      "author": "ssitu",
      "title": "ComfyUI roop",
      "reference": "https://github.com/ssitu/ComfyUI_roop",
      "files": [
        "https://github.com/ssitu/ComfyUI_roop"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI nodes for the roop A1111 webui script."
    },
    {
      "author": "ssitu",
      "title": "ComfyUI fabric",
      "reference": "https://github.com/ssitu/ComfyUI_fabric",
      "files": [
        "https://github.com/ssitu/ComfyUI_fabric"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI nodes based on the paper '<a href='https://arxiv.org/abs/2307.10159' target='blank'/>FABRIC: Personalizing Diffusion Models with Iterative Feedback</a>' (Feedback via Attention-Based Reference Image Conditioning)"
    },
    {
      "author": "space-nuko",
      "title": "Disco Diffusion",
      "reference": "https://github.com/space-nuko/ComfyUI-Disco-Diffusion",
      "files": [
        "https://github.com/space-nuko/ComfyUI-Disco-Diffusion"
      ],
      "install_type": "git-clone",
      "description": "Modularized version of Disco Diffusion for use with ComfyUI."
    },
    {
      "author": "space-nuko",
      "title": "OpenPose Editor",
      "reference": "https://github.com/space-nuko/ComfyUI-OpenPose-Editor",
      "files": [
        "https://github.com/space-nuko/ComfyUI-OpenPose-Editor"
      ],
      "install_type": "git-clone",
      "description": "A port of the openpose-editor extension for stable-diffusion-webui. NOTE: Requires <a href='https://github.com/comfyanonymous/ComfyUI/pull/711' target='blank'>this ComfyUI patch</a> to work correctly"
    },
    {
      "author": "space-nuko",
      "title": "nui suite",
      "reference": "https://github.com/space-nuko/nui-suite",
      "files": [
        "https://github.com/space-nuko/nui-suite"
      ],
      "install_type": "git-clone",
      "description": "NODES: Dynamic Prompts Text Encode, Feeling Lucky Text Encode, Output String"
    },
    {
      "author": "Nourepide",
      "title": "Allor Plugin",
      "reference": "https://github.com/Nourepide/ComfyUI-Allor",
      "files": [
        "https://github.com/Nourepide/ComfyUI-Allor"
      ],
      "install_type": "git-clone",
      "description": "Allor is a plugin for ComfyUI with an emphasis on transparency and performance.<BR><p style='background-color: black; color: red;'>NOTE: If you do not disable the default node override feature in the settings, the built-in nodes, namely ImageScale and ImageScaleBy nodes, will be disabled. (ref: <a href='https://github.com/Nourepide/ComfyUI-Allor#configuration' target='blank'>Configutation</a>)</p>"
    },
    {
      "author": "melMass",
      "title": "MTB Nodes",
      "reference": "https://github.com/melMass/comfy_mtb",
      "files": [
        "https://github.com/melMass/comfy_mtb"
      ],
      "nodename_pattern": "\\(mtb\\)$",
      "install_type": "git-clone",
      "description": "NODES: Face Swap, Film Interpolation, Latent Lerp, Int To Number, Bounding Box, Crop, Uncrop, ImageBlur, Denoise, ImageCompare, RGV to HSV, HSV to RGB, Color Correct, Modulo, Deglaze Image, Smart Step, ..."
    },
    {
      "author": "xXAdonesXx",
      "title": "NodeGPT",
      "reference": "https://github.com/xXAdonesXx/NodeGPT",
      "files": [
        "https://github.com/xXAdonesXx/NodeGPT"
      ],
      "install_type": "git-clone",
      "description": "Implementation of AutoGen inside ComfyUI. This repository is under development, and not everything is functioning correctly yet."
    },
    {
      "author": "RockOfFire",
      "title": "ComfyUI_Comfyroll_CustomNodes",
      "reference": "https://github.com/RockOfFire/ComfyUI_Comfyroll_CustomNodes",
      "files": [
        "https://github.com/RockOfFire/ComfyUI_Comfyroll_CustomNodes"
      ],
      "install_type": "git-clone",
      "description": "Custom nodes for SDXL and SD1.5 including Multi-ControlNet, LoRA, Aspect Ratio, Process Switches, and many more nodes."
    },
    {
      "author": "RockOfFire",
      "title": "CR Animation Nodes",
      "reference": "https://github.com/RockOfFire/CR_Animation_Nodes",
      "files": [
        "https://github.com/RockOfFire/CR_Animation_Nodes"
      ],
      "install_type": "git-clone",
      "description": "A comprehensive suite of nodes to enhance your animations. These nodes include some features similar to Deforum, and also some new ideas."
    },
    {
      "author": "bmad4ever",
      "title": "ComfyUI-Bmad-DirtyUndoRedo",
      "reference": "https://github.com/bmad4ever/ComfyUI-Bmad-DirtyUndoRedo",
      "files": [
        "https://github.com/bmad4ever/ComfyUI-Bmad-DirtyUndoRedo"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI extension that adds undo (and redo) functionality."
    },
    {
      "author": "bmad4ever",
      "title": "Bmad Nodes",
      "reference": "https://github.com/bmad4ever/comfyui_bmad_nodes",
      "files": [
        "https://github.com/bmad4ever/comfyui_bmad_nodes"
      ],
      "install_type": "git-clone",
      "description": "This custom node offers the following functionalities: API support for setting up API requests, computer vision primarily for masking or collages, and general utility to streamline workflow setup or implement essential missing features."
    },
    {
      "author": "bmad4ever",
      "title": "comfyui_ab_sampler",
      "reference": "https://github.com/bmad4ever/comfyui_ab_samplercustom",
      "files": [
        "https://github.com/bmad4ever/comfyui_ab_samplercustom"
      ],
      "install_type": "git-clone",
      "description": "Experimental sampler node. Sampling alternates between A and B inputs until only one remains, starting with A. B steps run over a 2x2 grid, where 3/4's of the grid are copies of the original input latent. When the optional mask is used, the region outside the defined roi is copied from the original latent at the end of every step."
    },
    {
      "author": "FizzleDorf",
      "title": "FizzNodes",
      "reference": "https://github.com/FizzleDorf/ComfyUI_FizzNodes",
      "files": [
        "https://github.com/FizzleDorf/ComfyUI_FizzNodes"
      ],
      "install_type": "git-clone",
      "description": "Scheduled prompts, scheduled float/int values and wave function nodes for animations and utility. compatable with <a href='https://www.framesync.xyz/' target='blank'>framesync</a> and <a href='https://www.chigozie.co.uk/keyframe-string-generator/' target='blank'>keyframe-string-generator</a> for audio synced animations in Comfyui."
    },
    {
      "author": "FizzleDorf",
      "title": "ComfyUI-AIT",
      "reference": "https://github.com/FizzleDorf/ComfyUI-AIT",
      "files": [
        "https://github.com/FizzleDorf/ComfyUI-AIT"
      ],
      "install_type": "git-clone",
      "description": "A ComfyUI implementation of Facebook Meta's <a href='https://github.com/facebookincubator/AITemplate' target='blank'/>AITemplate</a> repo for faster inference using cpp/cuda. This new repo is behind the old version but is a much more stable foundation to keep AIT online. Please be patient as the repo will eventually include the same features as before.<BR>NOTE: You can find the old AIT extension in the legacy channel."
    },
    {
      "author": "filipemeneses",
      "title": "Pixelization",
      "reference": "https://github.com/filipemeneses/comfy_pixelization",
      "files": [
        "https://github.com/filipemeneses/comfy_pixelization"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI node that pixelizes images."
    },
    {
      "author": "shiimizu",
      "title": "smZNodes",
      "reference": "https://github.com/shiimizu/ComfyUI_smZNodes",
      "files": [
        "https://github.com/shiimizu/ComfyUI_smZNodes"
      ],
      "install_type": "git-clone",
      "description": "NODES: CLIP Text Encode++. Achieve identical embeddings from stable-diffusion-webui for ComfyUI."
    },
    {
      "author": "ZaneA",
      "title": "ImageReward",
      "reference": "https://github.com/ZaneA/ComfyUI-ImageReward",
      "files": [
        "https://github.com/ZaneA/ComfyUI-ImageReward"
      ],
      "install_type": "git-clone",
      "description": "NODES: ImageRewardLoader, ImageRewardScore"
    },
    {
      "author": "SeargeDP",
      "title": "SeargeSDXL",
      "reference": "https://github.com/SeargeDP/SeargeSDXL",
      "files": [
        "https://github.com/SeargeDP/SeargeSDXL"
      ],
      "install_type": "git-clone",
      "description": "Custom nodes for easier use of SDXL in ComfyUI including an img2img workflow that utilizes both the base and refiner checkpoints."
    },
    {
      "author": "cubiq",
      "title": "Simple Math",
      "reference": "https://github.com/cubiq/ComfyUI_SimpleMath",
      "files": [
        "https://github.com/cubiq/ComfyUI_SimpleMath"
      ],
      "install_type": "git-clone",
      "description": "custom node for ComfyUI to perform simple math operations"
    },
    {
      "author": "cubiq",
      "title": "ComfyUI_IPAdapter_plus",
      "reference": "https://github.com/cubiq/ComfyUI_IPAdapter_plus",
      "files": [
        "https://github.com/cubiq/ComfyUI_IPAdapter_plus"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI reference implementation for IPAdapter models. The code is mostly taken from the original IPAdapter repository and laksjdjf's implementation, all credit goes to them. I just made the extension closer to ComfyUI philosophy."
    },
    {
      "author": "shockz0rz",
      "title": "InterpolateEverything",
      "reference": "https://github.com/shockz0rz/ComfyUI_InterpolateEverything",
      "files": [
        "https://github.com/shockz0rz/ComfyUI_InterpolateEverything"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Interpolate Poses, Interpolate Lineart, ... Custom nodes for interpolating between, well, everything in the Stable Diffusion ComfyUI."
    },
    {
      "author": "yolanother",
      "title": "Comfy UI Prompt Agent",
      "reference": "https://github.com/yolanother/DTAIComfyPromptAgent",
      "files": [
        "https://github.com/yolanother/DTAIComfyPromptAgent"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Prompt Agent, Prompt Agent (String). This script provides a prompt agent node for the Comfy UI stable diffusion client."
    },
    {
      "author": "yolanother",
      "title": "Image to Text Node",
      "reference": "https://github.com/yolanother/DTAIImageToTextNode",
      "files": [
        "https://github.com/yolanother/DTAIImageToTextNode"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Image URL to Text, Image to Text."
    },
    {
      "author": "yolanother",
      "title": "Comfy UI Online Loaders",
      "reference": "https://github.com/yolanother/DTAIComfyLoaders",
      "files": [
        "https://github.com/yolanother/DTAIComfyLoaders"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Submit Image (Parameters), Submit Image. A collection of loaders that use a shared common online data source rather than relying on the files to be present locally."
    },
    {
      "author": "yolanother",
      "title": "Comfy AI DoubTech.ai Image Sumission Node",
      "reference": "https://github.com/yolanother/DTAIComfyImageSubmit",
      "files": [
        "https://github.com/yolanother/DTAIComfyImageSubmit"
      ],
      "install_type": "git-clone",
      "description": "A ComfyAI submit node to upload images to DoubTech.ai"
    },
    {
      "author": "yolanother",
      "title": "Comfy UI QR Codes",
      "reference": "https://github.com/yolanother/DTAIComfyQRCodes",
      "files": [
        "https://github.com/yolanother/DTAIComfyQRCodes"
      ],
      "install_type": "git-clone",
      "description": "This extension introduces QR code nodes for the Comfy UI stable diffusion client. NOTE: ComfyUI qrcode extension required."
    },
    {
      "author": "yolanother",
      "title": "Variables for Comfy UI",
      "reference": "https://github.com/yolanother/DTAIComfyVariables",
      "files": [
        "https://github.com/yolanother/DTAIComfyVariables"
      ],
      "install_type": "git-clone",
      "description": "Nodes: String, Int, Float, Short String, CLIP Text Encode (With Variables), String Format, Short String Format. This extension introduces quality of life improvements by providing variable nodes and shared global variables."
    },
    {
      "author": "sipherxyz",
      "title": "comfyui-art-venture",
      "reference": "https://github.com/sipherxyz/comfyui-art-venture",
      "files": [
        "https://github.com/sipherxyz/comfyui-art-venture"
      ],
      "install_type": "git-clone",
      "description": "Nodes: ImagesConcat, LoadImageFromUrl, AV_UploadImage"
    },
    {
      "author": "SOELexicon",
      "title": "LexMSDBNodes",
      "reference": "https://github.com/SOELexicon/ComfyUI-LexMSDBNodes",
      "files": [
        "https://github.com/SOELexicon/ComfyUI-LexMSDBNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: MSSqlTableNode, MSSqlSelectNode. This extension provides custom nodes to interact with MSSQL."
    },
    {
      "author": "pants007",
      "title": "pants",
      "reference": "https://github.com/pants007/comfy-pants",
      "files": [
        "https://github.com/pants007/comfy-pants"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Make Square Node, Interrogate Node, TextEncodeAIO"
    },
    {
      "author": "evanspearman",
      "title": "ComfyMath",
      "reference": "https://github.com/evanspearman/ComfyMath",
      "files": [
        "https://github.com/evanspearman/ComfyMath"
      ],
      "install_type": "git-clone",
      "description": "Provides Math Nodes for ComfyUI. Boolean Logic, Integer Arithmetic, Floating Point Arithmetic and Functions, Vec2, Vec3, and Vec4 Arithmetic and Functions"
    },
    {
      "author": "civitai",
      "title": "comfy-nodes",
      "reference": "https://github.com/civitai/comfy-nodes",
      "files": [
        "https://github.com/civitai/comfy-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: CivitAI_Loaders. Load Checkpoints, and LORA models directly from CivitAI API."
    },
    {
      "author": "andersxa",
      "title": "CLIP Directional Prompt Attention",
      "reference": "https://github.com/andersxa/comfyui-PromptAttention",
      "files": [
        "https://github.com/andersxa/comfyui-PromptAttention"
      ],
      "pip": ["scikit-learn", "matplotlib"],
      "install_type": "git-clone",
      "description": "Nodes: CLIP Directional Prompt Attention Encode. Direction prompt attention tries to solve the problem of contextual words (or parts of the prompt) having an effect on much later or irrelevant parts of the prompt."
    },
    {
      "author": "ArtVentureX",
      "title": "AnimateDiff",
      "reference": "https://github.com/ArtVentureX/comfyui-animatediff",
      "pip": ["flash_attn"],
      "files": [
        "https://github.com/ArtVentureX/comfyui-animatediff"
      ],
      "install_type": "git-clone",
      "description": "AnimateDiff integration for ComfyUI, adapts from sd-webui-animatediff.<br><p style='background-color: black; color: red;'>You only need to download one of <a href='https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v14.ckpt' target='blank'>mm_sd_v14.ckpt</a> | <a href='https://huggingface.co/guoyww/animatediff/resolve/main/mm_sd_v15.ckpt' target='blank'>mm_sd_v15.ckpt</a>. Put the model weights under <font color='white'>ComfyUI/custom_nodes/comfyui-animatediff/models</font>. DO NOT change model filename.</p>"
    },
    {
      "author": "twri",
      "title": "SDXL Prompt Styler",
      "reference": "https://github.com/twri/sdxl_prompt_styler",
      "files": [
        "https://github.com/twri/sdxl_prompt_styler"
      ],
      "install_type": "git-clone",
      "description": "SDXL Prompt Styler is a node that enables you to style prompts based on predefined templates stored in a JSON file."
    },
    {
      "author": "wolfden",
      "title": "SDXL Prompt Styler (customized version by wolfden)",
      "reference": "https://github.com/wolfden/ComfyUi_PromptStylers",
      "files": [
        "https://github.com/wolfden/ComfyUi_PromptStylers"
      ],
      "install_type": "git-clone",
      "description": "These custom nodes provide a variety of customized prompt stylers based on <a href='https://github.com/twri/sdxl_prompt_styler' target='blank'>twri/SDXL Prompt Styler</a>."
    },
    {
      "author": "wolfden",
      "title": "ComfyUi_String_Function_Tree",
      "reference": "https://github.com/wolfden/ComfyUi_String_Function_Tree",
      "files": [
        "https://github.com/wolfden/ComfyUi_String_Function_Tree"
      ],
      "install_type": "git-clone",
      "description": "This custom node provides the capability to manipulate multiple string inputs."
    },
    {
      "author": "daxthin",
      "title": "facedetailer",
      "reference": "https://github.com/daxthin/facedetailer",
      "files": [
        "https://github.com/daxthin/facedetailer"
      ],
      "install_type": "git-clone",
      "description": "Face Detailer is a custom node for the 'ComfyUI' framework inspired by !After Detailer extension from auto1111, it allows you to detect faces using Mediapipe and YOLOv8n to create masks for the detected faces."
    },
    {
      "author": "asagi4",
      "title": "ComfyUI prompt control",
      "reference": "https://github.com/asagi4/comfyui-prompt-control",
      "files": [
        "https://github.com/asagi4/comfyui-prompt-control"
      ],
      "install_type": "git-clone",
      "description": "Nodes for convenient prompt editing. The aim is to make basic generations in ComfyUI completely prompt-controllable."
    },
    {
      "author": "jamesWalker55",
      "title": "ComfyUI - P2LDGAN Node",
      "reference": "https://github.com/jamesWalker55/comfyui-p2ldgan",
      "files": [
        "https://github.com/jamesWalker55/comfyui-p2ldgan"
      ],
      "install_type": "git-clone",
      "description": "Nodes: P2LDGAN. This integrates P2LDGAN into ComfyUI. P2LDGAN extracts lineart from input images.<BR><p style='background-color: black; color: red;'>To use this extension, you need to download the <a href='https://drive.google.com/file/d/1To4V_Btc3QhCLBWZ0PdSNgC1cbm3isHP' target='blank'>p2ldgan model</a> and save it in the <font color='white'>ComfyUI/custom_nodes/comfyui-p2ldgan/checkpoints</font> directory.</p>"
    },
    {
      "author": "jamesWalker55",
      "title": "Various ComfyUI Nodes by Type",
      "reference": "https://github.com/jamesWalker55/comfyui-various",
      "files": [
        "https://github.com/jamesWalker55/comfyui-various"
      ],
      "nodename_pattern": "^JW",
      "install_type": "git-clone",
      "description": "Nodes: JWInteger, JWFloat, JWString, JWImageLoadRGB, JWImageResize, ..."
    },
    {
      "author": "adieyal",
      "title": "DynamicPrompts Custom Nodes",
      "reference": "https://github.com/adieyal/comfyui-dynamicprompts",
      "files": [
        "https://github.com/adieyal/comfyui-dynamicprompts"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Random Prompts, Combinatorial Prompts, I'm Feeling Lucky, Magic Prompt, Jinja2 Templates. ComfyUI-DynamicPrompts is a custom nodes library that integrates into your existing ComfyUI Library. It provides nodes that enable the use of Dynamic Prompts in your ComfyUI."
    },
    {
      "author": "mihaiiancu",
      "title": "mihaiiancu/Inpaint",
      "reference": "https://github.com/mihaiiancu/ComfyUI_Inpaint",
      "files": [
        "https://github.com/mihaiiancu/ComfyUI_Inpaint"
      ],
      "install_type": "git-clone",
      "description": "Nodes: InpaintMediapipe. This node provides a simple interface to inpaint."
    },
    {
      "author": "kwaroran",
      "title": "abg-comfyui",
      "reference": "https://github.com/kwaroran/abg-comfyui",
      "files": [
        "https://github.com/kwaroran/abg-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Remove Image Background (abg). A Anime Background Remover node for comfyui, based on this hf space, works same as AGB extention in automatic1111."
    },
    {
      "author": "bash-j",
      "title": "Mikey Nodes",
      "reference": "https://github.com/bash-j/mikey_nodes",
      "files": [
        "https://github.com/bash-j/mikey_nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Prompt With Style, Prompt With SDXL, Resize Image for SDXL, Save Image With Prompt Data, HaldCLUT, Empty Latent Ratio Select/Custom SDXL"
    },
    {
      "author": "failfa.st",
      "title": "failfast-comfyui-extensions",
      "reference": "https://github.com/failfa-st/failfast-comfyui-extensions",
      "files": [
        "https://github.com/failfa-st/failfast-comfyui-extensions"
      ],
      "install_type": "git-clone",
      "description": "node color customization, custom colors, dot reroutes, link rendering options, straight lines, group freezing, node pinning, automated arrangement of nodes, copy image"
    },
    {
      "author": "Pfaeff",
      "title": "pfaeff-comfyui",
      "reference": "https://github.com/Pfaeff/pfaeff-comfyui",
      "files": [
        "https://github.com/Pfaeff/pfaeff-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes: AstropulsePixelDetector, BackgroundRemover, ImagePadForBetterOutpaint, InpaintingPipelineLoader, Inpainting, ..."
    },
    {
      "author": "wallish77",
      "title": "wlsh_nodes",
      "reference": "https://github.com/wallish77/wlsh_nodes",
      "files": [
        "https://github.com/wallish77/wlsh_nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Checkpoint Loader with Name, Save Prompt Info, Outpaint to Image, CLIP Positive-Negative, SDXL Quick Empty Latent, Empty Latent by Ratio, Time String, SDXL Steps, SDXL Resolutions ..."
    },
    {
      "author": "Kosinkadink",
      "title": "ComfyUI-Advanced-ControlNet",
      "reference": "https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet",
      "files": [
        "https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet"
      ],
      "install_type": "git-clone",
      "description": "Nodes: ControlNetLoaderAdvanced, DiffControlNetLoaderAdvanced, ScaledSoftControlNetWeights, SoftControlNetWeights, CustomControlNetWeights, SoftT2IAdapterWeights, CustomT2IAdapterWeights"
    },
    {
      "author": "Kosinkadink",
      "title": "AnimateDiff Evolved",
      "reference": "https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved",
      "files": [
        "https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved"
      ],
      "install_type": "git-clone",
      "description": "A forked repository that actively maintains <a href='https://github.com/ArtVentureX/comfyui-animatediff' target='blank'>AnimateDiff</a>, created by ArtVentureX.<BR><BR>Improved AnimateDiff integration for ComfyUI, adapts from sd-webui-animatediff.<br><p style='background-color: black; color: red;'>Download one or more motion models from <a href='https://huggingface.co/guoyww/animatediff/tree/main' target='blank'>Original Models</a> | <a href='https://huggingface.co/manshoety/AD_Stabilized_Motion/tree/main' target='blank'>Finetuned Models</a>. See README for additional model links and usage. Put the model weights under <font color='white'>ComfyUI/custom_nodes/ComfyUI-AnimateDiff-Evolved/models</font>. You are free to rename the models, but keeping original names will ease use when sharing your workflow.</p>"
    },
    {
      "author": "Kosinkadink",
      "title": "ComfyUI-VideoHelperSuite",
      "reference": "https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite",
      "files": [
        "https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite"
      ],
      "install_type": "git-clone",
      "description": "Nodes: VHS_VideoCombine. Nodes related to video workflows"
    },
    {
      "author": "Gourieff",
      "title": "ReActor Node for ComfyUI",
      "reference": "https://github.com/Gourieff/comfyui-reactor-node",
      "files": [
        "https://github.com/Gourieff/comfyui-reactor-node"
      ],
      "install_type": "git-clone",
      "description": "The Fast and Simple 'roop-like' Face Swap Extension Node for ComfyUI, based on ReActor (ex Roop-GE) SD-WebUI Face Swap Extension"
    },
    {
      "author": "imb101",
      "title": "FaceSwap",
      "reference": "https://github.com/imb101/ComfyUI-FaceSwap",
      "files": [
        "https://github.com/imb101/ComfyUI-FaceSwap"
      ],
      "install_type": "git-clone",
      "description": "Nodes:FaceSwapNode. Very basic custom node to enable face swapping in ComfyUI. (roop)"
    },
    {
      "author": "Chaoses-Ib",
      "title": "ComfyUI_Ib_CustomNodes",
      "reference": "https://github.com/Chaoses-Ib/ComfyUI_Ib_CustomNodes",
      "files": [
        "https://github.com/Chaoses-Ib/ComfyUI_Ib_CustomNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: LoadImageFromPath. Load Image From Path loads the image from the source path and does not have such problems."
    },
    {
      "author": "AIrjen",
      "title": "One Button Prompt",
      "reference": "https://github.com/AIrjen/OneButtonPrompt",
      "files": [
        "https://github.com/AIrjen/OneButtonPrompt"
      ],
      "install_type": "git-clone",
      "description": "One Button Prompt has a prompt generation node for beginners who have problems writing a good prompt, or advanced users who want to get inspired. It generates an entire prompt from scratch. It is random, but controlled. You simply load up the script and press generate, and let it surprise you."
    },
    {
      "author": "coreyryanhanson",
      "title": "ComfyQR",
      "reference": "https://github.com/coreyryanhanson/ComfyQR",
      "files": [
        "https://github.com/coreyryanhanson/ComfyQR"
      ],
      "install_type": "git-clone",
      "description": "QR generation within ComfyUI. Contains nodes suitable for workflows from generating basic QR images to techniques with advanced QR masking."
    },
    {
      "author": "coreyryanhanson",
      "title": "ComfyQR-scanning-nodes",
      "reference": "https://github.com/coreyryanhanson/ComfyQR-scanning-nodes",
      "files": [
        "https://github.com/coreyryanhanson/ComfyQR-scanning-nodes"
      ],
      "install_type": "git-clone",
      "description": "A set of ComfyUI nodes to quickly test generated QR codes for scannability. A companion project to ComfyQR."
    },
    {
      "author": "dimtoneff",
      "title": "ComfyUI PixelArt Detector",
      "reference": "https://github.com/dimtoneff/ComfyUI-PixelArt-Detector",
      "files": [
        "https://github.com/dimtoneff/ComfyUI-PixelArt-Detector"
      ],
      "install_type": "git-clone",
      "description": "This node manipulates the pixel art image in ways that it should look pixel perfect (downscales, changes palette, upscales etc.)."
    },
    {
      "author": "dimtoneff",
      "title": "Eagle PNGInfo",
      "reference": "https://github.com/hylarucoder/ComfyUI-Eagle-PNGInfo",
      "files": [
        "https://github.com/hylarucoder/ComfyUI-Eagle-PNGInfo"
      ],
      "install_type": "git-clone",
      "description": "Nodes: EagleImageNode"
    },
    {
      "author": "theUpsider",
      "title": "Styles CSV Loader Extension for ComfyUI",
      "reference": "https://github.com/theUpsider/ComfyUI-Styles_CSV_Loader",
      "files": [
        "https://github.com/theUpsider/ComfyUI-Styles_CSV_Loader"
      ],
      "install_type": "git-clone",
      "description": "This extension allows users to load styles from a CSV file, primarily for migration purposes from the automatic1111 Stable Diffusion web UI."
    },
    {
      "author": "M1kep",
      "title": "Comfy_KepListStuff",
      "reference": "https://github.com/M1kep/Comfy_KepListStuff",
      "files": [
        "https://github.com/M1kep/Comfy_KepListStuff"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Range(Step), Range(Num Steps), List Length, Image Overlay, Stack Images, Empty Images, Join Image Lists, Join Float Lists. This extension provides various list manipulation nodes"
    },
    {
      "author": "M1kep",
      "title": "ComfyLiterals",
      "reference": "https://github.com/M1kep/ComfyLiterals",
      "files": [
        "https://github.com/M1kep/ComfyLiterals"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Int, Float, String, Operation, Checkpoint"
    },
    {
      "author": "M1kep",
      "title": "KepPromptLang",
      "reference": "https://github.com/M1kep/KepPromptLang",
      "files": [
        "https://github.com/M1kep/KepPromptLang"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Build Gif, Special CLIP Loader. It offers various manipulation capabilities for the internal operations of the prompt."
    },
    {
      "author": "M1kep",
      "title": "Comfy_KepMatteAnything",
      "reference": "https://github.com/M1kep/Comfy_KepMatteAnything",
      "files": [
        "https://github.com/M1kep/Comfy_KepMatteAnything"
      ],
      "install_type": "git-clone",
      "description": "This extension provides a custom node that allows the use of <a href='https://github.com/hustvl/Matte-Anything' target='blank'>Matte Anything</a> in ComfyUI."
    },
    {
      "author": "M1kep",
      "title": "Comfy_KepKitchenSink",
      "reference": "https://github.com/M1kep/Comfy_KepKitchenSink",
      "files": [
        "https://github.com/M1kep/Comfy_KepKitchenSink"
      ],
      "install_type": "git-clone",
      "description": "Nodes: KepRotateImage"
    },
    {
      "author": "M1kep",
      "title": "ComfyUI-OtherVAEs",
      "reference": "https://github.com/M1kep/ComfyUI-OtherVAEs",
      "files": [
        "https://github.com/M1kep/ComfyUI-OtherVAEs"
      ],
      "install_type": "git-clone",
      "description": "Nodes: TAESD VAE Decode"
    },
    {
      "author": "M1kep",
      "title": "ComfyUI-KepOpenAI",
      "reference": "https://github.com/M1kep/ComfyUI-KepOpenAI",
      "files": [
        "https://github.com/M1kep/ComfyUI-KepOpenAI"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI-KepOpenAI is a user-friendly node that serves as an interface to the GPT-4 with Vision (GPT-4V) API. This integration facilitates the processing of images coupled with text prompts, leveraging the capabilities of the OpenAI API to generate text completions that are contextually relevant to the provided inputs."
    },
    {
      "author": "uarefans",
      "title": "ComfyUI-Fans",
      "reference": "https://github.com/uarefans/ComfyUI-Fans",
      "files": [
        "https://github.com/uarefans/ComfyUI-Fans"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Fans Styler (Max 10 Style), Fans Text Concat (Until 10 text)."
    },
    {
      "author": "NicholasMcCarthy",
      "title": "ComfyUI_TravelSuite",
      "reference": "https://github.com/NicholasMcCarthy/ComfyUI_TravelSuite",
      "files": [
        "https://github.com/NicholasMcCarthy/ComfyUI_TravelSuite"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI custom nodes to apply various latent travel techniques."
    },
    {
      "author": "ManglerFTW",
      "title": "ComfyI2I",
      "reference": "https://github.com/ManglerFTW/ComfyI2I",
      "files": [
        "https://github.com/ManglerFTW/ComfyI2I"
      ],
      "install_type": "git-clone",
      "description": "A set of custom nodes to perform image 2 image functions in ComfyUI."
    },
    {
      "author": "theUpsider",
      "title": "ComfyUI-Logic",
      "reference": "https://github.com/theUpsider/ComfyUI-Logic",
      "files": [
        "https://github.com/theUpsider/ComfyUI-Logic"
      ],
      "install_type": "git-clone",
      "description": "An extension to ComfyUI that introduces logic nodes and conditional rendering capabilities."
    },
    {
      "author": "mpiquero7164",
      "title": "SaveImgPrompt",
      "reference": "https://github.com/mpiquero7164/ComfyUI-SaveImgPrompt",
      "files": [
        "https://github.com/mpiquero7164/ComfyUI-SaveImgPrompt"
      ],
      "install_type": "git-clone",
      "description": "Save a png or jpeg and option to save prompt/workflow in a text or json file for each image in Comfy + Workflow loading."
    },
    {
      "author": "m-sokes",
      "title": "ComfyUI Sokes Nodes",
      "reference": "https://github.com/m-sokes/ComfyUI-Sokes-Nodes",
      "files": [
        "https://github.com/m-sokes/ComfyUI-Sokes-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Empty Latent Randomizer (9 Inputs)"
    },
    {
      "author": "Extraltodeus",
      "title": "noise latent perlinpinpin",
      "reference": "https://github.com/Extraltodeus/noise_latent_perlinpinpin",
      "files": [
        "https://github.com/Extraltodeus/noise_latent_perlinpinpin"
      ],
      "install_type": "git-clone",
      "description": "Nodes: NoisyLatentPerlin. This allows to create latent spaces filled with perlin-based noise that can actually be used by the samplers."
    },
    {
      "author": "JPS",
      "title": "JPS Custom Nodes for ComfyUI",
      "reference": "https://github.com/JPS-GER/ComfyUI_JPS-Nodes",
      "files": [
        "https://github.com/JPS-GER/ComfyUI_JPS-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: SDXL - Resolutions, SDXL - Basic Settings, SDXL - Additional Settings, Math - Resolution Multiply, Math - Largest Integer, Switch - TXT2IMG & IMG2IMG"
    },
    {
      "author": "hustille",
      "title": "hus' utils for ComfyUI",
      "reference": "https://github.com/hustille/ComfyUI_hus_utils",
      "files": [
        "https://github.com/hustille/ComfyUI_hus_utils"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI nodes primarily for seed and filename generation"
    },
    {
      "author": "hustille",
      "title": "ComfyUI_Fooocus_KSampler",
      "reference": "https://github.com/hustille/ComfyUI_Fooocus_KSampler",
      "files": [
        "https://github.com/hustille/ComfyUI_Fooocus_KSampler"
      ],
      "install_type": "git-clone",
      "description": "Nodes: KSampler With Refiner (Fooocus). The KSampler from <a href='https://github.com/lllyasviel/Fooocus' target='blank'>Fooocus</a> as a ComfyUI node <p style='background-color: black; color: red;'>NOTE: This patches basic ComfyUI behaviour - don't use together with other samplers. Or perhaps do? Other samplers might profit from those changes ... ymmv.</p>"
    },
    {
      "author": "badjeff",
      "title": "LoRA Tag Loader for ComfyUI",
      "reference": "https://github.com/badjeff/comfyui_lora_tag_loader",
      "files": [
        "https://github.com/badjeff/comfyui_lora_tag_loader"
      ],
      "install_type": "git-clone",
      "description": "A ComfyUI custom node to read LoRA tag(s) from text and load it into checkpoint model."
    },
    {
      "author": "rgthree",
      "title": "rgthree's ComfyUi Nodes",
      "reference": "https://github.com/rgthree/rgthree-comfy",
      "files": [
        "https://github.com/rgthree/rgthree-comfy"
      ],
      "nodename_pattern": " \\(rgthree\\)$",
      "install_type": "git-clone",
      "description": "Nodes: Seed, Reroute, Context, Lora Loader Stack, Context Switch, Fast Muter. These custom nodes helps organize the building of complex workflows."
    },
    {
      "author": "AIGODLIKE",
      "title": "AIGODLIKE-COMFYUI-TRANSLATION",
      "reference": "https://github.com/AIGODLIKE/AIGODLIKE-COMFYUI-TRANSLATION",
      "files": [
        "https://github.com/AIGODLIKE/AIGODLIKE-COMFYUI-TRANSLATION"
      ],
      "install_type": "git-clone",
      "description": "It provides language settings. (Contribution from users of various languages is needed due to the support for each language.)"
    },
    {
      "author": "syllebra",
      "title": "BilboX's ComfyUI Custom Nodes",
      "reference": "https://github.com/syllebra/bilbox-comfyui",
      "files": [
        "https://github.com/syllebra/bilbox-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes: BilboX's PromptGeek Photo Prompt. This provides a convenient way to compose photorealistic prompts into ComfyUI."
    },
    {
      "author": "Girish Gopaul",
      "title": "Save Image with Generation Metadata",
      "reference": "https://github.com/giriss/comfy-image-saver",
      "files": [
        "https://github.com/giriss/comfy-image-saver"
      ],
      "install_type": "git-clone",
      "description": "All the tools you need to save images with their generation metadata on ComfyUI. Compatible with Civitai & Prompthero geninfo auto-detection. Works with png, jpeg and webp."
    },
    {
      "author": "shingo1228",
      "title": "ComfyUI-send-Eagle(slim)",
      "reference": "https://github.com/shingo1228/ComfyUI-send-eagle-slim",
      "files": [
        "https://github.com/shingo1228/ComfyUI-send-eagle-slim"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Send Webp Image to Eagle. This is an extension node for ComfyUI that allows you to send generated images in webp format to Eagle. This extension node is a re-implementation of the Eagle linkage functions of the previous ComfyUI-send-Eagle node, focusing on the functions required for this node."
    },
    {
      "author": "shingo1228",
      "title": "ComfyUI-SDXL-EmptyLatentImage",
      "reference": "https://github.com/shingo1228/ComfyUI-SDXL-EmptyLatentImage",
      "files": [
        "https://github.com/shingo1228/ComfyUI-SDXL-EmptyLatentImage"
      ],
      "install_type": "git-clone",
      "description": "Nodes:SDXL Empty Latent Image. An extension node for ComfyUI that allows you to select a resolution from the pre-defined json files and output a Latent Image."
    },
    {
      "author": "laksjdjf",
      "title": "IPAdapter-ComfyUI",
      "reference": "https://github.com/laksjdjf/IPAdapter-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/IPAdapter-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Load IPAdapter. This custom nodes provides loader of the IP-Adapter model.<p style='background-color: black; color: red;'>NOTE: To use this extension node, you need to download the <a href='https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15.bin' target='blank'>ip-adapter_sd15.bin</a> file and place it in the <font color='white'><B>custom_nodes/IPAdapter-ComfyUI/models</B></font> directory. Additionally, you need to download the 'Clip vision model' from the 'Install models' menu as well.</P>"
    },
    {
      "author": "laksjdjf",
      "title": "pfg-ComfyUI",
      "reference": "https://github.com/laksjdjf/pfg-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/pfg-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI version of https://github.com/laksjdjf/pfg-webui. (To use this extension, you need to download the required model file from <B>Install Models</B>)"
    },
    {
      "author": "laksjdjf",
      "title": "attention-couple-ComfyUI",
      "reference": "https://github.com/laksjdjf/attention-couple-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/attention-couple-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Attention couple. This is a custom node that manipulates region-specific prompts. While vanilla ComfyUI employs an area specification method based on latent couples, this node divides regions using attention layers within UNet."
    },
    {
      "author": "laksjdjf",
      "title": "cd-tuner_negpip-ComfyUI",
      "reference": "https://github.com/laksjdjf/cd-tuner_negpip-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/cd-tuner_negpip-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Apply CDTuner, Apply Negapip. This extension provides the <a href='https://github.com/hako-mikan/sd-webui-cd-tuner' target='blank'>CD(Color/Detail) Tuner</a> and the <a href='https://github.com/hako-mikan/sd-webui-negpip' target='blank'>Negative Prompt in the Prompt</a>features."
    },
    {
      "author": "laksjdjf",
      "title": "LoRA-Merger-ComfyUI",
      "reference": "https://github.com/laksjdjf/LoRA-Merger-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/LoRA-Merger-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Load LoRA Weight Only, Load LoRA from Weight, Merge LoRA, Save LoRA. This extension provides nodes for merging LoRA."
    },
    {
      "author": "laksjdjf",
      "title": "LCMSampler-ComfyUI",
      "reference": "https://github.com/laksjdjf/LCMSampler-ComfyUI",
      "files": [
        "https://github.com/laksjdjf/LCMSampler-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "This extension node is intended for the use of LCM conversion for SSD-1B-anime. It does not guarantee operation with the original LCM (as it cannot load weights in the current version). To take advantage of fast generation with LCM, a node for using TAESD as a decoder is also provided. This is inspired by ComfyUI-OtherVAEs."
    },
    {
      "author": "alsritter",
      "title": "asymmetric-tiling-comfyui",
      "reference": "https://github.com/alsritter/asymmetric-tiling-comfyui",
      "files": [
        "https://github.com/alsritter/asymmetric-tiling-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Asymmetric_Tiling_KSampler. "
    },
    {
      "author": "meap158",
      "title": "GPU temperature protection",
      "reference": "https://github.com/meap158/ComfyUI-GPU-temperature-protection",
      "files": [
        "https://github.com/meap158/ComfyUI-GPU-temperature-protection"
      ],
      "install_type": "git-clone",
      "description": "Pause image generation when GPU temperature exceeds threshold."
    },
    {
      "author": "meap158",
      "title": "ComfyUI-Prompt-Expansion",
      "reference": "https://github.com/meap158/ComfyUI-Prompt-Expansion",
      "files": [
        "https://github.com/meap158/ComfyUI-Prompt-Expansion"
      ],
      "install_type": "git-clone",
      "description": "Dynamic prompt expansion, powered by GPT-2 locally on your device."
    },
    {
      "author": "TeaCrab",
      "title": "ComfyUI-TeaNodes",
      "reference": "https://github.com/TeaCrab/ComfyUI-TeaNodes",
      "files": [
        "https://github.com/TeaCrab/ComfyUI-TeaNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes:TC_EqualizeCLAHE, TC_SizeApproximation, TC_ImageResize, TC_ImageScale, TC_ColorFill."
    },
    {
      "author": "nagolinc",
      "title": "ComfyUI_FastVAEDecorder_SDXL",
      "reference": "https://github.com/nagolinc/ComfyUI_FastVAEDecorder_SDXL",
      "files": [
        "https://github.com/nagolinc/ComfyUI_FastVAEDecorder_SDXL"
      ],
      "install_type": "git-clone",
      "description": "Based off of: <a href='https://github.com/Birch-san/diffusers-play/tree/main/approx_vae'>Birch-san/diffusers-play/approx_vae</a>. This ComfyUI node allows you to quickly preview SDXL 1.0 latents."
    },
    {
      "author": "bradsec",
      "title": "ResolutionSelector for ComfyUI",
      "reference": "https://github.com/bradsec/ComfyUI_ResolutionSelector",
      "files": [
        "https://github.com/bradsec/ComfyUI_ResolutionSelector"
      ],
      "install_type": "git-clone",
      "description": "Nodes:ResolutionSelector"
    },
    {
      "author": "kohya-ss",
      "title": "ControlNet-LLLite-ComfyUI",
      "reference": "https://github.com/kohya-ss/ControlNet-LLLite-ComfyUI",
      "files": [
        "https://github.com/kohya-ss/ControlNet-LLLite-ComfyUI"
      ],
      "install_type": "git-clone",
      "description": "Nodes: LLLiteLoader"
    },
    {
      "author": "jjkramhoeft",
      "title": "ComfyUI-Jjk-Nodes",
      "reference": "https://github.com/jjkramhoeft/ComfyUI-Jjk-Nodes",
      "files": [
        "https://github.com/jjkramhoeft/ComfyUI-Jjk-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: SDXLRecommendedImageSize, JjkText, JjkShowText, JjkConcat. A set of custom nodes for ComfyUI - focused on text and parameter utility"
    },
    {
      "author": "dagthomas",
      "title": "SDXL Auto Prompter",
      "reference": "https://github.com/dagthomas/comfyui_dagthomas",
      "files": [
        "https://github.com/dagthomas/comfyui_dagthomas"
      ],
      "install_type": "git-clone",
      "description": "Easy prompting for generation of endless random art pieces and photographs!"
    },
    {
      "author": "marhensa",
      "title": "Recommended Resolution Calculator",
      "reference": "https://github.com/marhensa/sdxl-recommended-res-calc",
      "files": [
        "https://github.com/marhensa/sdxl-recommended-res-calc"
      ],
      "install_type": "git-clone",
      "description": "Input your desired output final resolution, it will automaticaly set the initial recommended SDXL ratio/size and its Upscale Factor to reach that output final resolution, also there's an option for 2x/4x reverse Upscale Factor. These all to avoid using bad/arbitary initial ratio/resolution."
    },
    {
      "author": "Nuked",
      "title": "ComfyUI-N-Nodes",
      "reference": "https://github.com/Nuked88/ComfyUI-N-Nodes",
      "files": [
        "https://github.com/Nuked88/ComfyUI-N-Nodes"
      ],
      "install_type": "git-clone",
      "description": "A suite of custom nodes for ConfyUI that includes GPT text-prompt generation, LoadVideo,SaveVideo,LoadFramesFromFolder and FrameInterpolator"
    },
    {
      "author": "Extraltodeus",
      "title": "LoadLoraWithTags",
      "reference": "https://github.com/Extraltodeus/LoadLoraWithTags",
      "files": [
        "https://github.com/Extraltodeus/LoadLoraWithTags"
      ],
      "install_type": "git-clone",
      "description": "Nodes:LoadLoraWithTags. Save/Load trigger words for loras from a json and auto fetch them on civitai if they are missing."
    },
    {
      "author": "richinsley",
      "title": "Comfy-LFO",
      "reference": "https://github.com/richinsley/Comfy-LFO",
      "files": [
        "https://github.com/richinsley/Comfy-LFO"
      ],
      "install_type": "git-clone",
      "description": "Nodes:LFO_Triangle, LFO_Sine, SawtoothNode, SquareNode, PulseNode. ComfyUI custom nodes to create Low Frequency Oscillators."
    },
    {
      "author": "Beinsezii",
      "title": "bsz-cui-extras",
      "reference": "https://github.com/Beinsezii/bsz-cui-extras",
      "files": [
        "https://github.com/Beinsezii/bsz-cui-extras"
      ],
      "install_type": "git-clone",
      "description": "This contains all-in-one 'principled' nodes for T2I, I2I, refining, and scaling. Additionally it has many tools for directly manipulating the color of latents, high res fix math, and scripted image post-processing."
    },
    {
      "author": "youyegit",
      "title": "tdxh_node_comfyui",
      "reference": "https://github.com/youyegit/tdxh_node_comfyui",
      "files": [
        "https://github.com/youyegit/tdxh_node_comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes:TdxhImageToSize, TdxhImageToSizeAdvanced, TdxhLoraLoader, TdxhIntInput, TdxhFloatInput, TdxhStringInput. Some nodes for stable diffusion comfyui. Sometimes it helps conveniently to use less nodes for doing the same things."
    },
    {
      "author": "Sxela",
      "title": "ComfyWarp",
      "reference": "https://github.com/Sxela/ComfyWarp",
      "files": [
        "https://github.com/Sxela/ComfyWarp"
      ],
      "install_type": "git-clone",
      "description": "Nodes:LoadFrameSequence, LoadFrame"
    },
    {
      "author": "skfoo",
      "title": "ComfyUI-Coziness",
      "reference": "https://github.com/skfoo/ComfyUI-Coziness",
      "files": [
        "https://github.com/skfoo/ComfyUI-Coziness"
      ],
      "install_type": "git-clone",
      "description": "Nodes:MultiLora Loader, Lora Text Extractor. Provides a node for assisting in loading loras through text."
    },
    {
      "author": "YOUR-WORST-TACO",
      "title": "ComfyUI-TacoNodes",
      "reference": "https://github.com/YOUR-WORST-TACO/ComfyUI-TacoNodes",
      "files": [
        "https://github.com/YOUR-WORST-TACO/ComfyUI-TacoNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes:TacoLatent, TacoAnimatedLoader, TacoImg2ImgAnimatedLoader, TacoGifMaker."
    },
    {
      "author": "Lerc",
      "title": "Canvas Tab",
      "reference": "https://github.com/Lerc/canvas_tab",
      "files": [
        "https://github.com/Lerc/canvas_tab"
      ],
      "install_type": "git-clone",
      "description": "This extension provides a full page image editor with mask support. There are two nodes, one to receive images from the editor and one to send images to the editor."
    },
    {
      "author": "Ttl",
      "title": "ComfyUI Neural network latent upscale custom node",
      "reference": "https://github.com/Ttl/ComfyUi_NNLatentUpscale",
      "files": [
        "https://github.com/Ttl/ComfyUi_NNLatentUpscale"
      ],
      "install_type": "git-clone",
      "description": "A custom ComfyUI node designed for rapid latent upscaling using a compact neural network, eliminating the need for VAE-based decoding and encoding."
    },
    {
      "author": "spro",
      "title": "Latent Mirror node for ComfyUI",
      "reference": "https://github.com/spro/comfyui-mirror",
      "files": [
        "https://github.com/spro/comfyui-mirror"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Latent Mirror. Node to mirror a latent along the Y (vertical / left to right) or X (horizontal / top to bottom) axis."
    },
    {
      "author": "Tropfchen",
      "title": "Embedding Picker",
      "reference": "https://github.com/Tropfchen/ComfyUI-Embedding_Picker",
      "files": [
        "https://github.com/Tropfchen/ComfyUI-Embedding_Picker"
      ],
      "install_type": "git-clone",
      "description": "Tired of forgetting and misspelling often weird names of embeddings you use? Or perhaps you use only one, cause you forgot you have tens of them installed?"
    },
    {
      "author": "Acly",
      "title": "ComfyUI Nodes for External Tooling",
      "reference": "https://github.com/Acly/comfyui-tooling-nodes",
      "files": [
        "https://github.com/Acly/comfyui-tooling-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Load Image (Base64), Load Mask (Base64), Send Image (WebSocket), Crop Image, Apply Mask to Image. Provides nodes geared towards using ComfyUI as a backend for external tools."
    },
    {
      "author": "picturesonpictures",
      "title": "comfy_PoP",
      "reference": "https://github.com/picturesonpictures/comfy_PoP",
      "files": ["https://github.com/picturesonpictures/comfy_PoP"],
      "install_type": "git-clone",
      "description": "A collection of custom nodes for ComfyUI. Includes a quick canny edge detection node with unconventional settings, simple LoRA stack nodes for workflow efficiency, and a customizable aspect ratio node."
    },
    {
      "author": "Dream Project",
      "title": "Dream Project Animation Nodes",
      "reference": "https://github.com/alt-key-project/comfyui-dream-project",
      "files": [
        "https://github.com/alt-key-project/comfyui-dream-project"
      ],
      "install_type": "git-clone",
      "description": "This extension offers various nodes that are useful for Deforum-like animations in ComfyUI."
    },
    {
      "author": "seanlynch",
      "title": "ComfyUI Optical Flow",
      "reference": "https://github.com/seanlynch/comfyui-optical-flow",
      "files": [
        "https://github.com/seanlynch/comfyui-optical-flow"
      ],
      "install_type": "git-clone",
      "description": "This package contains three nodes to help you compute optical flow between pairs of images, usually adjacent frames in a video, visualize the flow, and apply the flow to another image of the same dimensions. Most of the code is from Deforum, so this is released under the same license (MIT)."
    },
    {
      "author": "ealkanat",
      "title": "ComfyUI Easy Padding",
      "reference": "https://github.com/ealkanat/comfyui_easy_padding",
      "files": [
        "https://github.com/ealkanat/comfyui_easy_padding"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI Easy Padding is a simple custom ComfyUI node that helps you to add padding to images on ComfyUI."
    },
    {
      "author": "ArtBot2023",
      "title": "Character Face Swap",
      "reference": "https://github.com/ArtBot2023/CharacterFaceSwap",
      "files": [
        "https://github.com/ArtBot2023/CharacterFaceSwap"
      ],
      "install_type": "git-clone",
      "description": "Character face swap with LoRA and embeddings."
    },
    {
      "author": "mav-rik",
      "title": "Facerestore CF (Code Former)",
      "reference": "https://github.com/mav-rik/facerestore_cf",
      "files": [
        "https://github.com/mav-rik/facerestore_cf"
      ],
      "install_type": "git-clone",
      "description": "This is a copy of <a href='https://civitai.com/models/24690/comfyui-facerestore-node' target='blank'>facerestore custom node</a> with a bit of a change to support CodeFormer Fidelity parameter. These ComfyUI nodes can be used to restore faces in images similar to the face restore option in AUTOMATIC1111 webui.<BR>NOTE: To use this node, you need to download the face restoration model and face detection model from the 'Install models' menu."
    },
    {
      "author": "braintacles",
      "title": "braintacles-nodes",
      "reference": "https://github.com/braintacles/braintacles-comfyui-nodes",
      "files": [
        "https://github.com/braintacles/braintacles-comfyui-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: CLIPTextEncodeSDXL-Multi-IO, CLIPTextEncodeSDXL-Pipe, Empty Latent Image from Aspect-Ratio, Random Find and Replace."
    },
    {
      "author": "hayden-fr",
      "title": "ComfyUI-Model-Manager",
      "reference": "https://github.com/hayden-fr/ComfyUI-Model-Manager",
      "files": [
        "https://github.com/hayden-fr/ComfyUI-Model-Manager"
      ],
      "install_type": "git-clone",
      "description": "Manage models: browsing, download and delete."
    },
    {
      "author": "hayden-fr",
      "title": "ComfyUI-Image-Browsing",
      "reference": "https://github.com/hayden-fr/ComfyUI-Image-Browsing",
      "files": [
        "https://github.com/hayden-fr/ComfyUI-Image-Browsing"
      ],
      "install_type": "git-clone",
      "description": "Image Browsing: browsing, download and delete."
    },
    {
      "author": "ali1234",
      "title": "comfyui-job-iterator",
      "reference": "https://github.com/ali1234/comfyui-job-iterator",
      "files": [
        "https://github.com/ali1234/comfyui-job-iterator"
      ],
      "install_type": "git-clone",
      "description": "Implements iteration over sequences within a single workflow run. <p style='background-color: black; color: red;'>NOTE: This node replaces the execution of ComfyUI for iterative processing functionality.</p>"
    },
    {
      "author": "jmkl",
      "title": "ComfyUI Ricing",
      "reference": "https://github.com/jmkl/ComfyUI-ricing",
      "files": [
        "https://github.com/jmkl/ComfyUI-ricing"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI custom user.css and some script stuff. mainly for web interface."
    },
    {
      "author": "budihartono",
      "title": "Otonx's Custom Nodes",
      "reference": "https://github.com/budihartono/comfyui_otonx_nodes",
      "files": [
        "https://github.com/budihartono/comfyui_otonx_nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: OTX Multiple Values, OTX KSampler Feeder. This extension provides custom nodes for ComfyUI created for personal projects. Made available for reference. Nodes may be updated or changed intermittently or not at all. Review & test before use."
    },
    {
      "author": "ramyma",
      "title": "A8R8 ComfyUI Nodes",
      "reference": "https://github.com/ramyma/A8R8_ComfyUI_nodes",
      "files": [
        "https://github.com/ramyma/A8R8_ComfyUI_nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Base64Image Input Node, Base64Image Output Node. <a href='https://github.com/ramyma/a8r8' target='blank'>A8R8</a> supporting nodes to integrate with ComfyUI"
    },
    {
      "author": "spinagon",
      "title": "Seamless tiling Node for ComfyUI",
      "reference": "https://github.com/spinagon/ComfyUI-seamless-tiling",
      "files": [
        "https://github.com/spinagon/ComfyUI-seamless-tiling"
      ],
      "install_type": "git-clone",
      "description": "Node for generating almost seamless textures, based on similar setting from A1111."
    },
    {
      "author": "BiffMunky",
      "title": "Endless \uFE0F\u{1F30A}\u2728 Nodes",
      "reference": "https://github.com/tusharbhutt/Endless-Nodes",
      "files": [
        "https://github.com/tusharbhutt/Endless-Nodes"
      ],
      "install_type": "git-clone",
      "description": "A small set of nodes I created for various numerical and text inputs.  Features image saver with ability to have JSON saved to separate folder, parameter collection nodes, two aesthetic scoring models, switches for text and numbers, and conversion of string to numeric and vice versa."
    },
    {
      "author": "spacepxl",
      "title": "ComfyUI-HQ-Image-Save",
      "reference": "https://github.com/spacepxl/ComfyUI-HQ-Image-Save",
      "files": [
        "https://github.com/spacepxl/ComfyUI-HQ-Image-Save"
      ],
      "install_type": "git-clone",
      "description": "Add Image Save nodes for TIFF 16 bit and EXR 32 bit formats. Probably only useful if you're applying a LUT or other color corrections, and care about preserving as much color accuracy as possible."
    },
    {
      "author": "PTA",
      "title": "auto nodes layout",
      "reference": "https://github.com/phineas-pta/comfyui-auto-nodes-layout",
      "files": [
        "https://github.com/phineas-pta/comfyui-auto-nodes-layout"
      ],
      "install_type": "git-clone",
      "description": "A ComfyUI extension to apply better nodes layout algorithm to ComfyUI workflow (mostly for visualization purpose)"
    },
    {
      "author": "receyuki",
      "title": "comfyui-prompt-reader-node",
      "reference": "https://github.com/receyuki/comfyui-prompt-reader-node",
      "files": [
        "https://github.com/receyuki/comfyui-prompt-reader-node"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI node version of the SD Prompt Reader."
    },
    {
      "author": "rklaffehn",
      "title": "rk-comfy-nodes",
      "reference": "https://github.com/rklaffehn/rk-comfy-nodes",
      "files": [
        "https://github.com/rklaffehn/rk-comfy-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: RK_CivitAIMetaChecker, RK_CivitAIAddHashes."
    },
    {
      "author": "cubiq",
      "title": "ComfyUI Essentials",
      "reference": "https://github.com/cubiq/ComfyUI_essentials",
      "files": [
        "https://github.com/cubiq/ComfyUI_essentials"
      ],
      "install_type": "git-clone",
      "description": "Essential nodes that are weirdly missing from ComfyUI core. With few exceptions they are new features and not commodities. I hope this will be just a temporary repository until the nodes get included into ComfyUI."
    },
    {
      "author": "Clybius",
      "title": "ComfyUI-Latent-Modifiers",
      "reference": "https://github.com/Clybius/ComfyUI-Latent-Modifiers",
      "files": [
        "https://github.com/Clybius/ComfyUI-Latent-Modifiers"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Latent Diffusion Mega Modifier. ComfyUI nodes which modify the latent during the diffusion process. (Sharpness, Tonemap, Rescale, Extra Noise)"
    },
    {
      "author": "mcmonkeyprojects",
      "title": "Stable Diffusion Dynamic Thresholding (CFG Scale Fix)",
      "reference": "https://github.com/mcmonkeyprojects/sd-dynamic-thresholding",
      "files": [
        "https://github.com/mcmonkeyprojects/sd-dynamic-thresholding"
      ],
      "install_type": "git-clone",
      "description": "Extension for StableSwarmUI, ComfyUI, and AUTOMATIC1111 Stable Diffusion WebUI that enables a way to use higher CFG Scales without color issues. This works by clamping latents between steps."
    },
    {
      "author": "Tropfchen",
      "title": "YARS: Yet Another Resolution Selector",
      "reference": "https://github.com/Tropfchen/ComfyUI-yaResolutionSelector",
      "files": [
        "https://github.com/Tropfchen/ComfyUI-yaResolutionSelector"
      ],
      "install_type": "git-clone",
      "description": "A slightly different Resolution Selector node, allowing to freely change base resolution and aspect ratio, with options to maintain the pixel count or use the base resolution as the highest or lowest dimension."
    },
    {
      "author": "chrisgoringe",
      "title": "Variation seeds",
      "reference": "https://github.com/chrisgoringe/cg-noise",
      "files": [
        "https://github.com/chrisgoringe/cg-noise"
      ],
      "install_type": "git-clone",
      "description": "Adds KSampler custom nodes with variation seed and variation strength."
    },
    {
      "author": "chrisgoringe",
      "title": "Image chooser",
      "reference": "https://github.com/chrisgoringe/cg-image-picker",
      "files": [
        "https://github.com/chrisgoringe/cg-image-picker"
      ],
      "install_type": "git-clone",
      "description": "A custom node that pauses the flow while you choose which image (or latent) to pass on to the rest of the workflow."
    },
    {
      "author": "chrisgoringe",
      "title": "Use Everywhere (UE Nodes)",
      "reference": "https://github.com/chrisgoringe/cg-use-everywhere",
      "files": [
        "https://github.com/chrisgoringe/cg-use-everywhere"
      ],
      "install_type": "git-clone",
      "nodename_pattern": "^(UE\\? |UE )",
      "description": "A set of nodes that allow data to be 'broadcast' to some or all unconnected inputs. Greatly reduces link spaghetti."
    },
    {
      "author": "chrisgoringe",
      "title": "Prompt Info",
      "reference": "https://github.com/chrisgoringe/cg-prompt-info",
      "files": [
        "https://github.com/chrisgoringe/cg-prompt-info"
      ],
      "install_type": "git-clone",
      "description": "Prompt Info"
    },
    {
      "author": "TGu-97",
      "title": "TGu Utilities",
      "reference": "https://github.com/TGu-97/ComfyUI-TGu-utils",
      "files": [
        "https://github.com/TGu-97/ComfyUI-TGu-utils"
      ],
      "install_type": "git-clone",
      "description": "Nodes: MPN Switch, MPN Reroute, PN Switch. This is a set of custom nodes for ComfyUI. Mainly focus on control switches."
    },
    {
      "author": "seanlynch",
      "title": "SRL's nodes",
      "reference": "https://github.com/seanlynch/srl-nodes",
      "files": [
        "https://github.com/seanlynch/srl-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: SRL Conditional Interrupt, SRL Format String, SRL Eval, SRL Filter Image List. This is a collection of nodes I find useful. Note that at least one module allows execution of arbitrary code. Do not use any of these nodes on a system that allow untrusted users to control workflows or inputs.<p style='background-color: black; color: red;'>WARNING: The custom nodes in this extension are vulnerable to <B>security risks</B> because they allow the execution of arbitrary code through the workflow</>"
    },
    {
      "author": "alpertunga-bile",
      "title": "prompt-generator",
      "reference": "https://github.com/alpertunga-bile/prompt-generator-comfyui",
      "files": [
        "https://github.com/alpertunga-bile/prompt-generator-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Custom AI prompt generator node for ComfyUI."
    },
    {
      "author": "mlinmg",
      "title": "LaMa Preprocessor [WIP]",
      "reference": "https://github.com/mlinmg/ComfyUI-LaMA-Preprocessor",
      "files": [
        "https://github.com/mlinmg/ComfyUI-LaMA-Preprocessor"
      ],
      "install_type": "git-clone",
      "description": "A LaMa prerocessor for ComfyUI. This preprocessor finally enable users to generate coherent inpaint and outpaint prompt-free. The best results are given on landscapes, not so much in drawings/animation."
    },
    {
      "author": "azazeal04",
      "title": "ComfyUI-Styles",
      "reference": "https://github.com/azazeal04/ComfyUI-Styles",
      "files": [
        "https://github.com/azazeal04/ComfyUI-Styles"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Anime_Styler, Fantasy_Styler, Gothic_Styler, Line_Art_Styler, Movie_Poster_Styler, Punk_Styler, Travel_Poster_Styler. This extension offers 8 art style nodes, each of which includes approximately 50 individual style variations."
    },
    {
      "author": "kijai",
      "title": "KJNodes for ComfyUI",
      "reference": "https://github.com/kijai/ComfyUI-KJNodes",
      "files": [
        "https://github.com/kijai/ComfyUI-KJNodes"
      ],
      "install_type": "git-clone",
      "description": "Various quality of life -nodes for ComfyUI, mostly just visual stuff to improve usability."
    },
    {
      "author": "hhhzzyang",
      "title": "Comfyui-Lama",
      "reference": "https://github.com/hhhzzyang/Comfyui_Lama",
      "files": [
        "https://github.com/hhhzzyang/Comfyui_Lama"
      ],
      "install_type": "git-clone",
      "description": "Nodes: LamaaModelLoad, LamaApply, YamlConfigLoader. a costumer node is realized to remove anything/inpainting anything from a picture by mask inpainting.<p style='background-color: black; color: red;'>WARN:This extension includes the entire model, which can result in a very long initial installation time, and there may be some compatibility issues with older dependencies and ComfyUI.</p>"
    },
    {
      "author": "thedyze",
      "title": "Save Image Extended for ComfyUI",
      "reference": "https://github.com/thedyze/save-image-extended-comfyui",
      "files": [
        "https://github.com/thedyze/save-image-extended-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Customize the information saved in file- and folder names. Use the values of sampler parameters as part of file or folder names. Save your positive & negative prompt as entries in a JSON (text) file, in each folder."
    },
    {
      "author": "SOELexicon",
      "title": "ComfyUI-LexTools",
      "reference": "https://github.com/SOELexicon/ComfyUI-LexTools",
      "files": [
        "https://github.com/SOELexicon/ComfyUI-LexTools"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI-LexTools is a Python-based image processing and analysis toolkit that uses machine learning models for semantic image segmentation, image scoring, and image captioning."
    },
    {
      "author": "mikkel",
      "title": "ComfyUI - Text Overlay Plugin",
      "reference": "https://github.com/mikkel/ComfyUI-text-overlay",
      "files": [
        "https://github.com/mikkel/ComfyUI-text-overlay"
      ],
      "install_type": "git-clone",
      "description": "The ComfyUI Text Overlay Plugin provides functionalities for superimposing text on images. Users can select different font types, set text size, choose color, and adjust the text's position on the image."
    },
    {
      "author": "avatechai",
      "title": "avatar-graph-comfyui",
      "reference": "https://github.com/avatechai/avatar-graph-comfyui",
      "files": [
        "https://github.com/avatechai/avatar-graph-comfyui"
      ],
      "install_type": "git-clone",
      "description": "A custom nodes module for creating real-time interactive avatars powered by blender bpy mesh api + Avatech Shape Flow runtime."
    },
    {
      "author": "TRI3D-LC",
      "title": "tri3d-comfyui-nodes",
      "reference": "https://github.com/TRI3D-LC/tri3d-comfyui-nodes",
      "files": [
        "https://github.com/TRI3D-LC/tri3d-comfyui-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: tri3d-extract-hand, tri3d-fuzzification, tri3d-position-hands, tri3d-atr-parse."
    },
    {
      "author": "storyicon",
      "title": "segment anything",
      "reference": "https://github.com/storyicon/comfyui_segment_anything",
      "files": [
        "https://github.com/storyicon/comfyui_segment_anything"
      ],
      "install_type": "git-clone",
      "description": "Based on GroundingDino and SAM, use semantic strings to segment any element in an image. The comfyui version of sd-webui-segment-anything."
    },
    {
      "author": "a1lazydog",
      "title": "ComfyUI-AudioScheduler",
      "reference": "https://github.com/a1lazydog/ComfyUI-AudioScheduler",
      "files": [
        "https://github.com/a1lazydog/ComfyUI-AudioScheduler"
      ],
      "install_type": "git-clone",
      "description": "Load mp3 files and use the audio nodes to power animations and prompt scheduling. Use with FizzNodes."
    },
    {
      "author": "whatbirdisthat",
      "title": "cyberdolphin",
      "reference": "https://github.com/whatbirdisthat/cyberdolphin",
      "files": [
        "https://github.com/whatbirdisthat/cyberdolphin"
      ],
      "install_type": "git-clone",
      "description": "Cyberdolphin Suite of ComfyUI nodes for wiring up things."
    },
    {
      "author": "chrish-slingshot",
      "title": "CrasH Utils",
      "reference": "https://github.com/chrish-slingshot/CrasHUtils",
      "files": [
        "https://github.com/chrish-slingshot/CrasHUtils"
      ],
      "install_type": "git-clone",
      "description": "A mixture of effects and quality of life nodes. Nodes: ImageGlitcher (gives an image a cool glitchy effect), ColorStylizer (highlights a single color in an image), QueryLocalLLM (queries a local LLM API though oobabooga), SDXLReslution (resolution picker for the standard SDXL resolutions, the complete list), SDXLResolutionSplit (splits the SDXL resolution into width and height). "
    },
    {
      "author": "spinagon",
      "title": "ComfyUI-seam-carving",
      "reference": "https://github.com/spinagon/ComfyUI-seam-carving",
      "files": [
        "https://github.com/spinagon/ComfyUI-seam-carving"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Image Resize (seam carving). Seam carving (image resize) for ComfyUI. Based on <a href='https://github.com/li-plus/seam-carving' target='blank'>https://github.com/li-plus/seam-carving</a>. With seam carving algorithm, the image could be intelligently resized while keeping the important contents undistorted. The carving process could be further guided, so that an object could be removed from the image without apparent artifacts."
    },
    {
      "author": "YMC",
      "title": "ymc-node-suite-comfyui",
      "reference": "https://github.com/YMC-GitHub/ymc-node-suite-comfyui",
      "files": [
        "https://github.com/YMC-GitHub/ymc-node-suite-comfyui"
      ],
      "install_type": "git-clone",
      "description": "ymc 's nodes for comfyui. This extension is composed of nodes that provide various utility features such as text, region, and I/O."
    },
    {
      "author": "chibiace",
      "title": "ComfyUI-Chibi-Nodes",
      "reference": "https://github.com/chibiace/ComfyUI-Chibi-Nodes",
      "files": [
        "https://github.com/chibiace/ComfyUI-Chibi-Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Loader, Prompts, ImageTool, Wildcards, LoadEmbedding, ConditionText, SaveImages, ..."
    },
    {
      "author": "DigitalIO",
      "title": "ComfyUI-stable-wildcards",
      "reference": "https://github.com/DigitalIO/ComfyUI-stable-wildcards",
      "files": [
        "https://github.com/DigitalIO/ComfyUI-stable-wildcards"
      ],
      "install_type": "git-clone",
      "description": "Wildcard implementation that can be reproduced with workflows."
    },
    {
      "author": "THtianhao",
      "title": "ComfyUI-Portrait-Maker",
      "reference": "https://github.com/THtianhao/ComfyUI-Portrait-Maker",
      "files": [
        "https://github.com/THtianhao/ComfyUI-Portrait-Maker"
      ],
      "install_type": "git-clone",
      "description": "Nodes:RetainFace, FaceFusion, RatioMerge2Image, MaskMerge2Image, ReplaceBoxImg, ExpandMaskBox, FaceSkin, SkinRetouching, PortraitEnhancement, ..."
    },
    {
      "author": "THtianhao",
      "title": "ComfyUI-FaceChain",
      "reference": "https://github.com/THtianhao/ComfyUI-FaceChain",
      "files": [
        "https://github.com/THtianhao/ComfyUI-FaceChain"
      ],
      "install_type": "git-clone",
      "description": "Nodes:FC_LoraMerge."
    },
    {
      "author": "zer0TF",
      "title": "Cute Comfy",
      "reference": "https://github.com/zer0TF/cute-comfy",
      "files": [
        "https://github.com/zer0TF/cute-comfy"
      ],
      "install_type": "git-clone",
      "description": "Adds a configurable folder watcher that auto-converts Comfy metadata into a Civitai-friendly format for automatic resource tagging when you upload images. Oh, and it makes your UI awesome, too. \u{1F49C}"
    },
    {
      "author": "chflame163",
      "title": "ComfyUI_MSSpeech_TTS",
      "reference": "https://github.com/chflame163/ComfyUI_MSSpeech_TTS",
      "files": [
        "https://github.com/chflame163/ComfyUI_MSSpeech_TTS"
      ],
      "install_type": "git-clone",
      "description": "A text-to-speech plugin used under ComfyUI. It utilizes the Microsoft Speech TTS interface to convert text content into MP3 format audio files."
    },
    {
      "author": "drustan-hawk",
      "title": "primitive-types",
      "reference": "https://github.com/drustan-hawk/primitive-types",
      "files": [
        "https://github.com/drustan-hawk/primitive-types"
      ],
      "install_type": "git-clone",
      "description": "A text-to-speech plugin used under ComfyUI. It utilizes the Microsoft Speech TTS interface to convert text content into MP3 format audio files."
    },
    {
      "author": "shadowcz007",
      "title": "comfyui-mixlab-nodes [WIP]",
      "reference": "https://github.com/shadowcz007/comfyui-mixlab-nodes",
      "files": [
        "https://github.com/shadowcz007/comfyui-mixlab-nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: RandomPrompt, TransparentImage, LoadImageFromPath, Splitting a long image into sections, ImagesCrop, Consistency Decoder Loader, Consistency Decoder Decode"
    },
    {
      "author": "ostris",
      "title": "Ostris Nodes ComfyUI",
      "reference": "https://github.com/ostris/ostris_nodes_comfyui",
      "files": [
        "https://github.com/ostris/ostris_nodes_comfyui"
      ],
      "install_type": "git-clone",
      "nodename_pattern": "- Ostris$",
      "description": "This is a collection of custom nodes for ComfyUI that I made for some QOL. I will be adding much more advanced ones in the future once I get more familiar with the API."
    },
    {
      "author": "0xbitches",
      "title": "Latent Consistency Model for ComfyUI",
      "reference": "https://github.com/0xbitches/ComfyUI-LCM",
      "files": [
        "https://github.com/0xbitches/ComfyUI-LCM"
      ],
      "install_type": "git-clone",
      "description": "This custom node implements a Latent Consistency Model sampler in ComfyUI. (LCM)"
    },
    {
      "author": "aszc-dev",
      "title": "Core ML Suite for ComfyUI",
      "reference": "https://github.com/aszc-dev/ComfyUI-CoreMLSuite",
      "files": [
        "https://github.com/aszc-dev/ComfyUI-CoreMLSuite"
      ],
      "install_type": "git-clone",
      "description": "This extension contains a set of custom nodes for ComfyUI that allow you to use Core ML models in your ComfyUI workflows. The models can be obtained here, or you can convert your own models using coremltools. The main motivation behind using Core ML models in ComfyUI is to allow you to utilize the ANE (Apple Neural Engine) on Apple Silicon (M1/M2) machines to improve performance."
    },
    {
      "author": "taabata",
      "title": "Syrian Falcon Nodes",
      "reference": "https://github.com/taabata/Comfy_Syrian_Falcon_Nodes",
      "files": [
        "https://github.com/taabata/Comfy_Syrian_Falcon_Nodes/raw/main/SyrianFalconNodes.py"
      ],
      "install_type": "copy",
      "description": "Nodes:Prompt editing, Word as Image"
    },
    {
      "author": "taabata",
      "title": "LCM_Inpaint-Outpaint_Comfy",
      "reference": "https://github.com/taabata/LCM_Inpaint-Outpaint_Comfy",
      "files": [
        "https://github.com/taabata/LCM_Inpaint-Outpaint_Comfy"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI custom nodes for inpainting/outpainting using the new latent consistency model (LCM)"
    },
    {
      "author": "noxinias",
      "title": "ComfyUI_NoxinNodes",
      "reference": "https://github.com/noxinias/ComfyUI_NoxinNodes",
      "files": [
        "https://github.com/noxinias/ComfyUI_NoxinNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Noxin Complete Chime, Noxin Scaled Resolutions, Load from Noxin Prompt Library, Save to Noxin Prompt Library"
    },
    {
      "author": "apesplat",
      "title": "ezXY scripts and nodes",
      "reference": "https://github.com/GMapeSplat/ComfyUI_ezXY",
      "files": [
        "https://github.com/GMapeSplat/ComfyUI_ezXY"
      ],
      "install_type": "git-clone",
      "description": "Extensions/Patches: Enables linking float and integer inputs and ouputs. Values are automatically cast to the correct type and clamped to the correct range. Works with both builtin and custom nodes.<p style='background-color: black; color: red;'>NOTE: This repo patches ComfyUI's validate_inputs and map_node_over_list functions while running. May break depending on your version of ComfyUI. Can be deactivated in config.yaml.</p>Nodes: A collection of nodes for facilitating the generation of XY plots. Capable of plotting changes over most primitive values."
    },
    {
      "author": "kinfolk0117",
      "title": "SimpleTiles",
      "reference": "https://github.com/kinfolk0117/ComfyUI_SimpleTiles",
      "files": [
        "https://github.com/kinfolk0117/ComfyUI_SimpleTiles"
      ],
      "install_type": "git-clone",
      "description": "Nodes:TileSplit, TileMerge."
    },
    {
      "author": "kinfolk0117",
      "title": "ComfyUI_GradientDeepShrink",
      "reference": "https://github.com/kinfolk0117/ComfyUI_GradientDeepShrink",
      "files": [
        "https://github.com/kinfolk0117/ComfyUI_GradientDeepShrink"
      ],
      "install_type": "git-clone",
      "description": "Nodes:GradientPatchModelAddDownscale (Kohya Deep Shrink)."
    },
    {
      "author": "kinfolk0117",
      "title": "TiledIPAdapter",
      "reference": "https://github.com/kinfolk0117/ComfyUI_TiledIPAdapter",
      "files": [
        "https://github.com/kinfolk0117/ComfyUI_TiledIPAdapter"
      ],
      "install_type": "git-clone",
      "description": "Proof of concent on how to use IPAdapter to control tiled upscaling. NOTE: You need to have 'ComfyUI_IPAdapter_plus' installed."
    },
    {
      "author": "Fictiverse",
      "title": "ComfyUI Fictiverse Nodes",
      "reference": "https://github.com/Fictiverse/ComfyUI_Fictiverse",
      "files": [
        "https://github.com/Fictiverse/ComfyUI_Fictiverse"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Color correction."
    },
    {
      "author": "idrirap",
      "title": "ComfyUI-Lora-Auto-Trigger-Words",
      "reference": "https://github.com/idrirap/ComfyUI-Lora-Auto-Trigger-Words",
      "files": [
        "https://github.com/idrirap/ComfyUI-Lora-Auto-Trigger-Words"
      ],
      "install_type": "git-clone",
      "description": "This project is a fork of <a href='https://github.com/Extraltodeus/LoadLoraWithTags'>https://github.com/Extraltodeus/LoadLoraWithTags</a> The aim of these custom nodes is to get an easy access to the tags used to trigger a lora."
    },
    {
      "author": "aianimation55",
      "title": "Comfy UI FatLabels",
      "reference": "https://github.com/aianimation55/ComfyUI-FatLabels",
      "files": [
        "https://github.com/aianimation55/ComfyUI-FatLabels"
      ],
      "install_type": "git-clone",
      "description": "It's a super simple custom node for Comfy UI, to generate text, with a font size option. Useful for bigger labelling of nodes, helpful for wider screen captures or tutorials. Plus you can of course use the text within your generations."
    },
    {
      "author": "noEmbryo",
      "title": "noEmbryo nodes",
      "reference": "https://github.com/noembryo/ComfyUI-noEmbryo",
      "files": [
        "https://github.com/noembryo/ComfyUI-noEmbryo"
      ],
      "install_type": "git-clone",
      "description": "PromptTermList (1-6): are some nodes that help with the creation of Prompts inside ComfyUI. Resolution Scale outputs image dimensions using a scale factor. Regex Text Chopper outputs the chopped parts of a text using RegEx."
    },
    {
      "author": "mikkel",
      "title": "ComfyUI - Mask Bounding Box",
      "reference": "https://github.com/mikkel/comfyui-mask-boundingbox",
      "files": [
        "https://github.com/mikkel/comfyui-mask-boundingbox"
      ],
      "install_type": "git-clone",
      "description": "The ComfyUI Mask Bounding Box Plugin provides functionalities for selecting a specific size mask from an image. Can be combined with ClipSEG to replace any aspect of an SDXL image with an SD1.5 output."
    },
    {
      "author": "ParmanBabra",
      "title": "ComfyUI-Malefish-Custom-Scripts",
      "reference": "https://github.com/ParmanBabra/ComfyUI-Malefish-Custom-Scripts",
      "files": [
        "https://github.com/ParmanBabra/ComfyUI-Malefish-Custom-Scripts"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Multi Lora Loader, Random (Prompt), Combine (Prompt), CSV Prompts Loader"
    },
    {
      "author": "IAmMatan.com",
      "title": "ComfyUI Serving toolkit",
      "reference": "https://github.com/matan1905/ComfyUI-Serving-Toolkit",
      "files": [
        "https://github.com/matan1905/ComfyUI-Serving-Toolkit"
      ],
      "install_type": "git-clone",
      "description": "This extension adds nodes that allow you to easily serve your workflow (for example using a discord bot) "
    },
    {
      "author": "PCMonsterx",
      "title": "ComfyUI-CSV-Loader",
      "reference": "https://github.com/PCMonsterx/ComfyUI-CSV-Loader",
      "files": [
        "https://github.com/PCMonsterx/ComfyUI-CSV-Loader"
      ],
      "install_type": "git-clone",
      "description": "CSV Loader for prompt building within ComfyUI interface. Allows access to positive/negative prompts associated with a name. Selections are being pulled from CSV files."
    },
    {
      "author": "Trung0246",
      "title": "ComfyUI-0246",
      "reference": "https://github.com/Trung0246/ComfyUI-0246",
      "files": [
        "https://github.com/Trung0246/ComfyUI-0246"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Highway, Junction. Random nodes for ComfyUI I made to solve my struggle with ComfyUI. Have varying quality."
    },
    {
      "author": "fexli",
      "title": "fexli-util-node-comfyui",
      "reference": "https://github.com/fexli/fexli-util-node-comfyui",
      "files": [
        "https://github.com/fexli/fexli-util-node-comfyui"
      ],
      "install_type": "git-clone",
      "description": "Nodes:FEImagePadForOutpaint, FEColorOut, FEColor2Image, FERandomizedColor2Image"
    },
    {
      "author": "AbyssYuan0",
      "title": "ComfyUI_BadgerTools",
      "reference": "https://github.com/AbyssYuan0/ComfyUI_BadgerTools",
      "files": [
        "https://github.com/AbyssYuan0/ComfyUI_BadgerTools"
      ],
      "install_type": "git-clone",
      "description": "Nodes:ImageOverlap-badger, FloatToInt-badger, IntToString-badger, FloatToString-badger, ImageNormalization-badger, ImageScaleToSide-badger, NovelToFizz-badger."
    },
    {
      "author": "palant",
      "title": "Image Resize for ComfyUI",
      "reference": "https://github.com/palant/image-resize-comfyui",
      "files": [
        "https://github.com/palant/image-resize-comfyui"
      ],
      "install_type": "git-clone",
      "description": "This custom node provides various tools for resizing images. The goal is resizing without distorting proportions, yet without having to perform any calculations with the size of the original image. If a mask is present, it is resized and modified along with the image."
    },
    {
      "author": "palant",
      "title": "Integrated Nodes for ComfyUI",
      "reference": "https://github.com/palant/integrated-nodes-comfyui",
      "files": [
        "https://github.com/palant/integrated-nodes-comfyui"
      ],
      "install_type": "git-clone",
      "description": "This tool will turn entire workflows or parts of them into single integrated nodes. In a way, it is similar to the Node Templates functionality but hides the inner structure. This is useful if all you want is to reuse and quickly configure a bunch of nodes without caring how they are interconnected."
    },
    {
      "author": "palant",
      "title": "Extended Save Image for ComfyUI",
      "reference": "https://github.com/palant/extended-saveimage-comfyui",
      "files": [
        "https://github.com/palant/extended-saveimage-comfyui"
      ],
      "install_type": "git-clone",
      "description": "This custom node is largely identical to the usual Save Image but allows saving images also in JPEG and WEBP formats, the latter with both lossless and lossy compression. Metadata is embedded in the images as usual, and the resulting images can be used to load a workflow."
    },
    {
      "author": "whmc76",
      "title": "ComfyUI-Openpose-Editor-Plus",
      "reference": "https://github.com/whmc76/ComfyUI-Openpose-Editor-Plus",
      "files": [
        "https://github.com/whmc76/ComfyUI-Openpose-Editor-Plus"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Openpose Editor Plus"
    },
    {
      "author": "martijnat",
      "title": "comfyui-previewlatent",
      "reference": "https://github.com/martijnat/comfyui-previewlatent",
      "files": [
        "https://github.com/martijnat/comfyui-previewlatent"
      ],
      "install_type": "git-clone",
      "description": "a ComfyUI plugin for previewing latents without vae decoding. Useful for showing intermediate results and can be used a faster 'preview image' if you don't wan't to use vae decode."
    },
    {
      "author": "peteromallet",
      "title": "ComfyUI-Creative-Interpolation [Beta]",
      "reference": "https://github.com/peteromallet/ComfyUI-Creative-Interpolation",
      "files": [
        "https://github.com/peteromallet/ComfyUI-Creative-Interpolation"
      ],
      "install_type": "git-clone",
      "description": "This a ComfyUI node for batch creative interpolation. The goal is to allow you to input a batch of images, and to provide a range of simple settings to control how the images are interpolated between."
    },
    {
      "author": "gemell1",
      "title": "ComfyUI_GMIC",
      "reference": "https://github.com/gemell1/ComfyUI_GMIC",
      "files": [
        "https://github.com/gemell1/ComfyUI_GMIC"
      ],
      "install_type": "git-clone",
      "description": "Nodes:GMIC Image Processing."
    },
    {
      "author": "LonicaMewinsky",
      "title": "ComfyBreakAnim",
      "reference": "https://github.com/LonicaMewinsky/ComfyUI-MakeFrame",
      "files": [
        "https://github.com/LonicaMewinsky/ComfyUI-MakeFrame"
      ],
      "install_type": "git-clone",
      "description": "Nodes:BreakFrames, GetKeyFrames, MakeGrid."
    },
    {
      "author": "TheBarret",
      "title": "ZSuite",
      "reference": "https://github.com/TheBarret/ZSuite",
      "files": [
        "https://github.com/TheBarret/ZSuite"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Prompter, RF Noise, SeedMod."
    },
    {
      "author": "romeobuilderotti",
      "title": "ComfyUI PNG Metadata",
      "reference": "https://github.com/romeobuilderotti/ComfyUI-PNG-Metadata",
      "files": [
        "https://github.com/romeobuilderotti/ComfyUI-PNG-Metadata"
      ],
      "install_type": "git-clone",
      "description": "Add custom Metadata fields to your saved PNG files."
    },
    {
      "author": "ka-puna",
      "title": "comfyui-yanc",
      "reference": "https://github.com/ka-puna/comfyui-yanc",
      "files": [
        "https://github.com/ka-puna/comfyui-yanc"
      ],
      "install_type": "git-clone",
      "description": "NOTE: Concatenate Strings, Format Datetime String, Integer Caster, Multiline String, Truncate String. Yet Another Node Collection, a repository of simple nodes for ComfyUI. This repository eases the addition or removal of custom nodes to itself."
    },
    {
      "author": "amorano",
      "title": "Jovimetrix Composition Nodes",
      "reference": "https://github.com/Amorano/Jovimetrix",
      "files": [
        "https://github.com/Amorano/Jovimetrix"
      ],
      "install_type": "git-clone",
      "description": "Composition nodes like Substance Designer heavily inspired by WAS and MTB Node Suites"
    },
    {
      "author": "Umikaze-job",
      "title": "select_folder_path_easy",
      "reference": "https://github.com/Umikaze-job/select_folder_path_easy",
      "files": [
        "https://github.com/Umikaze-job/select_folder_path_easy"
      ],
      "install_type": "git-clone",
      "description": "This extension simply connects the nodes and specifies the output path of the generated images to a manageable path."
    },
    {
      "author": "Niutonian",
      "title": "ComfyUi-NoodleWebcam",
      "reference": "https://github.com/Niutonian/ComfyUi-NoodleWebcam",
      "files": [
        "https://github.com/Niutonian/ComfyUi-NoodleWebcam"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Noodle webcam is a node that records frames and send them to your favourite node."
    },
    {
      "author": "Feidorian",
      "title": "feidorian-ComfyNodes",
      "reference": "https://github.com/Feidorian/feidorian-ComfyNodes",
      "nodename_pattern": "^Feidorian_",
      "files": [
        "https://github.com/Feidorian/feidorian-ComfyNodes"
      ],
      "install_type": "git-clone",
      "description": "This extension provides various custom nodes. literals, loaders, logic, output, switches"
    },
    {
      "author": "wutipong",
      "title": "ComfyUI-TextUtils",
      "reference": "https://github.com/wutipong/ComfyUI-TextUtils",
      "files": [
        "https://github.com/wutipong/ComfyUI-TextUtils"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Create N-Token String"
    },
    {
      "author": "natto-maki",
      "title": "ComfyUI-NegiTools",
      "reference": "https://github.com/natto-maki/ComfyUI-NegiTools",
      "files": [
        "https://github.com/natto-maki/ComfyUI-NegiTools"
      ],
      "install_type": "git-clone",
      "description": "Nodes:OpenAI DALLe3, OpenAI Translate to English, String Function, Seed Generator"
    },
    {
      "author": "LonicaMewinsky",
      "title": "ComfyUI-RawSaver",
      "reference": "https://github.com/LonicaMewinsky/ComfyUI-RawSaver",
      "files": [
        "https://github.com/LonicaMewinsky/ComfyUI-RawSaver"
      ],
      "install_type": "git-clone",
      "description": "Nodes:SaveTifImage. ComfyUI custom node for purpose of saving image as uint16 tif file."
    },
    {
      "author": "jojkaart",
      "title": "ComfyUI-sampler-lcm-alternative",
      "reference": "https://github.com/jojkaart/ComfyUI-sampler-lcm-alternative",
      "files": [
        "https://github.com/jojkaart/ComfyUI-sampler-lcm-alternative"
      ],
      "install_type": "git-clone",
      "description": "Nodes:LCMScheduler, SamplerLCMAlternative, SamplerLCMCycle. ComfyUI Custom Sampler nodes that add a new improved LCM sampler functions"
    },
    {
      "author": "GTSuya-Studio",
      "title": "ComfyUI-GTSuya-Nodes",
      "reference": "https://github.com/GTSuya-Studio/ComfyUI-Gtsuya-Nodes",
      "files": [
        "https://github.com/GTSuya-Studio/ComfyUI-Gtsuya-Nodes"
      ],
      "install_type": "git-clone",
      "description": "ComfyUI-GTSuya-Nodes is a ComyUI extension designed to add several wildcards supports into ComfyUI. Wildcards allow you to use __name__ syntax in your prompt to get a random line from a file named name.txt in a wildcards directory."
    },
    {
      "author": "oyvindg",
      "title": "ComfyUI-TrollSuite",
      "reference": "https://github.com/oyvindg/ComfyUI-TrollSuite",
      "files": [
        "https://github.com/oyvindg/ComfyUI-TrollSuite"
      ],
      "install_type": "git-clone",
      "description": "Nodes: BinaryImageMask, ImagePadding, LoadLastCreatedImage, RandomMask, TransparentImage."
    },
    {
      "author": "drago87",
      "title": "ComfyUI_Dragos_Nodes",
      "reference": "https://github.com/drago87/ComfyUI_Dragos_Nodes",
      "files": [
        "https://github.com/drago87/ComfyUI_Dragos_Nodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes:File Padding, Image Info, VAE Loader With Name"
    },
    {
      "author": "ansonkao",
      "title": "comfyui-geometry",
      "reference": "https://github.com/ansonkao/comfyui-geometry",
      "files": [
        "https://github.com/ansonkao/comfyui-geometry"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Mask to Centroid, Mask to Eigenvector. A small collection of custom nodes for use with ComfyUI, for geometry calculations"
    },
    {
      "author": "bronkula",
      "title": "comfyui-fitsize",
      "reference": "https://github.com/bronkula/comfyui-fitsize",
      "files": [
        "https://github.com/bronkula/comfyui-fitsize"
      ],
      "install_type": "git-clone",
      "description": "Nodes: Fit Size, Fit Size From Image. A simple set of nodes for making an image fit within a bounding box"
    },
    {
      "author": "kijai",
      "title": "ComfyUI-SVD",
      "reference": "https://github.com/kijai/ComfyUI-SVD",
      "files": [
        "https://github.com/kijai/ComfyUI-SVD"
      ],
      "install_type": "git-clone",
      "description": "Preliminary use of SVD in ComfyUI.<BR>NOTE: Quick Implementation, Unstable. See details on repositories."
    },
    {
      "author": "toyxyz",
      "title": "ComfyUI_toyxyz_test_nodes",
      "reference": "https://github.com/toyxyz/ComfyUI_toyxyz_test_nodes",
      "files": [
        "https://github.com/toyxyz/ComfyUI_toyxyz_test_nodes"
      ],
      "install_type": "git-clone",
      "description": "This node was created to send a webcam to ComfyUI in real time. This node is recommended for use with LCM."
    },
    {
      "author": "thecooltechguy",
      "title": "ComfyUI Stable Video Diffusion",
      "reference": "https://github.com/thecooltechguy/ComfyUI-Stable-Video-Diffusion",
      "files": [
        "https://github.com/thecooltechguy/ComfyUI-Stable-Video-Diffusion"
      ],
      "install_type": "git-clone",
      "description": "Easily use Stable Video Diffusion inside ComfyUI!"
    },
    {
      "author": "Danand",
      "title": "ComfyUI-ComfyCouple",
      "reference": "https://github.com/Danand/ComfyUI-ComfyCouple",
      "files": [
        "https://github.com/Danand/ComfyUI-ComfyCouple"
      ],
      "install_type": "git-clone",
      "description": " Simple custom node which helps to generate images of actual couples."
    },
    {
      "author": "42lux",
      "title": "ComfyUI-safety-checker",
      "reference": "https://github.com/42lux/ComfyUI-safety-checker",
      "files": [
        "https://github.com/42lux/ComfyUI-safety-checker"
      ],
      "install_type": "git-clone",
      "description": "A NSFW/Safety Checker Node for ComfyUI."
    },
    {
      "author": "sergekatzmann",
      "title": "ComfyUI_Nimbus-Pack",
      "reference": "https://github.com/sergekatzmann/ComfyUI_Nimbus-Pack",
      "files": [
        "https://github.com/sergekatzmann/ComfyUI_Nimbus-Pack"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Image Square Adapter Node"
    },
    {
      "author": "komojini",
      "title": "ComfyUI_SDXL_DreamBooth_LoRA_CustomNodes",
      "reference": "https://github.com/komojini/ComfyUI_SDXL_DreamBooth_LoRA_CustomNodes",
      "files": [
        "https://github.com/komojini/ComfyUI_SDXL_DreamBooth_LoRA_CustomNodes"
      ],
      "install_type": "git-clone",
      "description": "Nodes:XL DreamBooth LoRA"
    },
    {
      "author": "ZHO-ZHO-ZHO",
      "title": "ComfyUI-Text_Image-Composite",
      "reference": "https://github.com/ZHO-ZHO-ZHO/ComfyUI-Text_Image-Composite",
      "files": [
        "https://github.com/ZHO-ZHO-ZHO/ComfyUI-Text_Image-Composite"
      ],
      "install_type": "git-clone",
      "description": "Nodes:Text_Image_Zho, Text_Image_Multiline_Zho, RGB_Image_Zho, AlphaChanelAddByMask, ImageComposite_Zho, ..."
    },
    {
      "author": "Off-Live",
      "title": "ComfyUI-off-suite",
      "reference": "https://github.com/Off-Live/ComfyUI-off-suite",
      "files": [
        "https://github.com/Off-Live/ComfyUI-off-suite"
      ],
      "install_type": "copy",
      "description": "Nodes:Image Crop Fit Node, OFF SEGS to Image, Crop Center wigh SEGS, Watermarking, GW Number Formatting Node."
    },
    {
      "author": "Ser-Hilary",
      "title": "SDXL_sizing",
      "reference": "https://github.com/Ser-Hilary/SDXL_sizing",
      "files": [
        "https://github.com/Ser-Hilary/SDXL_sizing/raw/main/conditioning_sizing_for_SDXL.py"
      ],
      "install_type": "copy",
      "description": "Nodes:sizing_node. Size calculation node related to image size in prompts supported by SDXL."
    },
    {
      "author": "ailex000",
      "title": "Image Gallery",
      "reference": "https://github.com/ailex000/ComfyUI-Extensions",
      "js_path": "image-gallery",
      "files": [
        "https://github.com/ailex000/ComfyUI-Extensions/raw/main/image-gallery/imageGallery.js"
      ],
      "install_type": "copy",
      "description": "Custom javascript extensions for better UX for ComfyUI. Supported nodes: PreviewImage, SaveImage. Double click on image to open."
    },
    {
      "author": "rock-land",
      "title": "graphNavigator",
      "reference": "https://github.com/rock-land/graphNavigator",
      "js_path": "graphNavigator",
      "files": [
        "https://github.com/rock-land/graphNavigator/raw/main/graphNavigator/graphNavigator.js"
      ],
      "install_type": "copy",
      "description": "ComfyUI Web Extension for saving views and navigating graphs."
    },
    {
      "author": "diffus3",
      "title": "diffus3/ComfyUI-extensions",
      "reference": "https://github.com/diffus3/ComfyUI-extensions",
      "js_path": "diffus3",
      "files": [
        "https://github.com/diffus3/ComfyUI-extensions/raw/main/multiReroute/multireroute.js",
        "https://github.com/diffus3/ComfyUI-extensions/raw/main/setget/setget.js"
      ],
      "install_type": "copy",
      "description": "Extensions: subgraph, setget, multiReroute"
    },
    {
      "author": "m957ymj75urz",
      "title": "m957ymj75urz/ComfyUI-Custom-Nodes",
      "reference": "https://github.com/m957ymj75urz/ComfyUI-Custom-Nodes",
      "js_path": "m957ymj75urz",
      "files": [
        "https://github.com/m957ymj75urz/ComfyUI-Custom-Nodes/raw/main/clip-text-encode-split/clip_text_encode_split.py",
        "https://github.com/m957ymj75urz/ComfyUI-Custom-Nodes/raw/main/colors/colors.js"
      ],
      "install_type": "copy",
      "description": "Nodes: RawText, RawTextCLIPEncode, RawTextCombine, RawTextReplace, Extension: m957ymj75urz.colors"
    },
    {
      "author": "Bikecicle",
      "title": "Waveform Extensions",
      "reference": "https://github.com/Bikecicle/ComfyUI-Waveform-Extensions",
      "files": [
        "https://github.com/Bikecicle/ComfyUI-Waveform-Extensions/raw/main/EXT_AudioManipulation.py",
        "https://github.com/Bikecicle/ComfyUI-Waveform-Extensions/raw/main/EXT_VariationUtils.py"
      ],
      "install_type": "copy",
      "description": "Some additional audio utilites for use on top of Sample Diffusion ComfyUI Extension"
    },
    {
      "author": "dawangraoming",
      "title": "KSampler GPU",
      "reference": "https://github.com/dawangraoming/ComfyUI_ksampler_gpu",
      "files": [
        "https://github.com/dawangraoming/ComfyUI_ksampler_gpu/raw/main/ksampler_gpu.py"
      ],
      "install_type": "copy",
      "description": "KSampler is provided, based on GPU random noise"
    },
    {
      "author": "fitCorder",
      "title": "fcSuite",
      "reference": "https://github.com/fitCorder/fcSuite",
      "files": [
        "https://github.com/fitCorder/fcSuite/raw/main/fcSuite.py"
      ],
      "install_type": "copy",
      "description": "fcFloatMatic is a custom module, that when configured correctly will increment through the lines generating you loras at different strengths. The JSON file will load the config."
    },
    {
      "author": "lrzjason",
      "title": "ComfyUIJasonNode",
      "reference": "https://github.com/lrzjason/ComfyUIJasonNode",
      "files": [
        "https://github.com/lrzjason/ComfyUIJasonNode/raw/main/SDXLMixSampler.py",
        "https://github.com/lrzjason/ComfyUIJasonNode/raw/main/LatentByRatio.py"
      ],
      "install_type": "copy",
      "description": "Nodes:SDXLMixSampler, LatentByRatio"
    },
    {
      "author": "lordgasmic",
      "title": "Wildcards",
      "reference": "https://github.com/lordgasmic/ComfyUI-Wildcards",
      "files": [
        "https://github.com/lordgasmic/ComfyUI-Wildcards/raw/master/wildcards.py"
      ],
      "install_type": "copy",
      "description": "Nodes:CLIPTextEncodeWithWildcards. This wildcard node is a wildcard node that operates based on the seed."
    },
    {
      "author": "throttlekitty",
      "title": "SDXLCustomAspectRatio",
      "reference": "https://github.com/throttlekitty/SDXLCustomAspectRatio",
      "files": [
        "https://raw.githubusercontent.com/throttlekitty/SDXLCustomAspectRatio/main/SDXLAspectRatio.py"
      ],
      "install_type": "copy",
      "description": "A quick and easy ComfyUI custom node for setting SDXL-friendly aspect ratios."
    },
    {
      "author": "s1dlx",
      "title": "comfy_meh",
      "reference": "https://github.com/s1dlx/comfy_meh",
      "files": [
        "https://github.com/s1dlx/comfy_meh/raw/main/meh.py"
      ],
      "install_type": "copy",
      "description": "Advanced merging methods."
    },
    {
      "author": "tudal",
      "title": "Hakkun-ComfyUI-nodes",
      "reference": "https://github.com/tudal/Hakkun-ComfyUI-nodes",
      "files": [
        "https://github.com/tudal/Hakkun-ComfyUI-nodes/raw/main/hakkun_nodes.py"
      ],
      "install_type": "copy",
      "description": "Nodes: Prompt parser. ComfyUI extra nodes. Mostly prompt parsing."
    },
    {
      "author": "SadaleNet",
      "title": "ComfyUI A1111-like Prompt Custom Node Solution",
      "reference": "https://github.com/SadaleNet/CLIPTextEncodeA1111-ComfyUI",
      "files": [
        "https://github.com/SadaleNet/CLIPTextEncodeA1111-ComfyUI/raw/master/custom_nodes/clip_text_encoder_a1111.py"
      ],
      "install_type": "copy",
      "description": "Nodes: CLIPTextEncodeA1111, RerouteTextForCLIPTextEncodeA1111."
    },
    {
      "author": "wsippel",
      "title": "SDXLResolutionPresets",
      "reference": "https://github.com/wsippel/comfyui_ws",
      "files": [
        "https://github.com/wsippel/comfyui_ws/raw/main/sdxl_utility.py"
      ],
      "install_type": "copy",
      "description": "Nodes: SDXLResolutionPresets. Easy access to the officially supported resolutions, in both horizontal and vertical formats: 1024x1024, 1152x896, 1216x832, 1344x768, 1536x640"
    },
    {
      "author": "nicolai256",
      "title": "comfyUI_Nodes_nicolai256",
      "reference": "https://github.com/nicolai256/comfyUI_Nodes_nicolai256",
      "files": [
        "https://github.com/nicolai256/comfyUI_Nodes_nicolai256/raw/main/yugioh-presets.py"
      ],
      "install_type": "copy",
      "description": "Nodes: yugioh_Presets. by Nicolai256 inspired by throttlekitty SDXLAspectRatio"
    },
    {
      "author": "Onierous",
      "title": "QRNG_Node_ComfyUI",
      "reference": "https://github.com/Onierous/QRNG_Node_ComfyUI",
      "files": [
        "https://github.com/Onierous/QRNG_Node_ComfyUI/raw/main/qrng_node.py"
      ],
      "install_type": "copy",
      "description": "Nodes: QRNG Node CSV. A node that takes in an array of random numbers from the ANU QRNG API and stores them locally for generating quantum random number noise_seeds in ComfyUI"
    },
    {
      "author": "ntdviet",
      "title": "ntdviet/comfyui-ext",
      "reference": "https://github.com/ntdviet/comfyui-ext",
      "files": [
        "https://github.com/ntdviet/comfyui-ext/raw/main/custom_nodes/gcLatentTunnel/gcLatentTunnel.py"
      ],
      "install_type": "copy",
      "description": "Nodes:LatentGarbageCollector. This ComfyUI custom node flushes the GPU cache and empty cuda interprocess memory. It's helpfull for low memory environment such as the free Google Colab, especially when the workflow VAE decode latents of the size above 1500x1500."
    },
    {
      "author": "alkemann",
      "title": "alkemann nodes",
      "reference": "https://gist.github.com/alkemann/7361b8eb966f29c8238fd323409efb68",
      "files": [
        "https://gist.github.com/alkemann/7361b8eb966f29c8238fd323409efb68/raw/f9605be0b38d38d3e3a2988f89248ff557010076/alkemann.py"
      ],
      "install_type": "copy",
      "description": "Nodes:Int to Text, Seed With Text, Save A1 Image."
    },
    {
      "author": "catscandrive",
      "title": "Image loader with subfolders",
      "reference": "https://github.com/catscandrive/comfyui-imagesubfolders",
      "files": [
        "https://github.com/catscandrive/comfyui-imagesubfolders/raw/main/loadImageWithSubfolders.py"
      ],
      "install_type": "copy",
      "description": "Adds an Image Loader node that also shows images in subfolders of the default input directory"
    },
    {
      "author": "Smuzzies",
      "title": "Chatbox Overlay node for ComfyUI",
      "reference": "https://github.com/Smuzzies/comfyui_chatbox_overlay",
      "files": [
        "https://github.com/Smuzzies/comfyui_chatbox_overlay/raw/main/chatbox_overlay.py"
      ],
      "install_type": "copy",
      "description": "Nodes: Chatbox Overlay. Custom node for ComfyUI to add a text box over a processed image before save node."
    },
    {
      "author": "CaptainGrock",
      "title": "ComfyUIInvisibleWatermark",
      "reference": "https://github.com/CaptainGrock/ComfyUIInvisibleWatermark",
      "files": [
        "https://github.com/CaptainGrock/ComfyUIInvisibleWatermark/raw/main/Invisible%20Watermark.py"
      ],
      "install_type": "copy",
      "description": "Nodes:Apply Invisible Watermark, Extract Watermark. Adds up to 12 characters encoded into an image that can be extracted."
    },
    {
      "author": "theally",
      "title": "TheAlly's Custom Nodes",
      "reference": "https://civitai.com/models/19625?modelVersionId=23296",
      "files": [
        "https://civitai.com/api/download/models/25114",
        "https://civitai.com/api/download/models/24679",
        "https://civitai.com/api/download/models/24154",
        "https://civitai.com/api/download/models/23884",
        "https://civitai.com/api/download/models/23649",
        "https://civitai.com/api/download/models/23467",
        "https://civitai.com/api/download/models/23296"
      ],
      "install_type": "unzip",
      "description": "Custom nodes for ComfyUI by TheAlly."
    },
    {
      "author": "xss",
      "title": "Custom Nodes by xss",
      "reference": "https://civitai.com/models/24869/comfyui-custom-nodes-by-xss",
      "files": [
        "https://civitai.com/api/download/models/32717",
        "https://civitai.com/api/download/models/47776",
        "https://civitai.com/api/download/models/29772",
        "https://civitai.com/api/download/models/31618",
        "https://civitai.com/api/download/models/31591",
        "https://civitai.com/api/download/models/29773",
        "https://civitai.com/api/download/models/29774",
        "https://civitai.com/api/download/models/29755",
        "https://civitai.com/api/download/models/29750"
      ],
      "install_type": "unzip",
      "description": "Various image processing nodes."
    },
    {
      "author": "aimingfail",
      "title": "Image2Halftone Node for ComfyUI",
      "reference": "https://civitai.com/models/143293/image2halftone-node-for-comfyui",
      "files": [
        "https://civitai.com/api/download/models/158997"
      ],
      "install_type": "unzip",
      "description": "This is a node to convert an image into a CMYK Halftone dot image."
    }
  ]
};
var extensionNodeMapping = {
  "https://gist.github.com/alkemann/7361b8eb966f29c8238fd323409efb68/raw/f9605be0b38d38d3e3a2988f89248ff557010076/alkemann.py": [
    [
      "Int to Text",
      "Save A1 Image",
      "Seed With Text"
    ],
    {
      "title_aux": "alkemann nodes"
    }
  ],
  "https://github.com/0xbitches/ComfyUI-LCM": [
    [
      "LCM_Sampler",
      "LCM_Sampler_Advanced",
      "LCM_img2img_Sampler",
      "LCM_img2img_Sampler_Advanced"
    ],
    {
      "title_aux": "Latent Consistency Model for ComfyUI"
    }
  ],
  "https://github.com/42lux/ComfyUI-safety-checker": [
    [
      "Safety Checker"
    ],
    {
      "title_aux": "ComfyUI-safety-checker"
    }
  ],
  "https://github.com/AIrjen/OneButtonPrompt": [
    [
      "CreatePromptVariant",
      "OneButtonPrompt",
      "SavePromptToFile"
    ],
    {
      "title_aux": "One Button Prompt"
    }
  ],
  "https://github.com/AbyssYuan0/ComfyUI_BadgerTools": [
    [
      "FloatToInt-badger",
      "FloatToString-badger",
      "ImageNormalization-badger",
      "ImageOverlap-badger",
      "ImageScaleToSide-badger",
      "IntToString-badger",
      "NovelToFizz-badger"
    ],
    {
      "title_aux": "ComfyUI_BadgerTools"
    }
  ],
  "https://github.com/Acly/comfyui-tooling-nodes": [
    [
      "ETN_ApplyMaskToImage",
      "ETN_CropImage",
      "ETN_LoadImageBase64",
      "ETN_LoadMaskBase64",
      "ETN_SendImageWebSocket"
    ],
    {
      "title_aux": "ComfyUI Nodes for External Tooling"
    }
  ],
  "https://github.com/Amorano/Jovimetrix": [
    [
      "\u2697\uFE0F Blend (jov)",
      "\u2697\uFE0F Blend Mask (jov)",
      "\u2699\uFE0F Options (jov)",
      "\u2728 Shape Generator (jov)",
      "\u{1F308} HSV (jov)",
      "\u{1F30A} Wave Generator (jov)",
      "\u{1F331} Transform (jov)",
      "\u{1F369} GLSL (jov)",
      "\u{1F387} Extend (jov)",
      "\u{1F39E}\uFE0F StreamWriter (jov)",
      "\u{1F4C9} Threshold (jov)",
      "\u{1F4FA} StreamReader (jov)",
      "\u{1F506} Pixel Shader (jov)",
      "\u{1F506} Pixel Shader Image (jov)",
      "\u{1F530} Mirror (jov)",
      "\u{1F533} Tile (jov)",
      "\u{1F55B} Tick (jov)",
      "\u{1F578}\uFE0F Adjust (jov)",
      "\u{1F5FA}\uFE0F Projection (jov)",
      "\u{1F68C} Route (jov)",
      "\u{1F7EA} Constant (jov)"
    ],
    {
      "author": "amorano",
      "description": "Procedural & Compositing. Includes a Webcam node.",
      "title": "Jovimetrix Composition Pack",
      "title_aux": "Jovimetrix Composition Nodes"
    }
  ],
  "https://github.com/ArtBot2023/CharacterFaceSwap": [
    [
      "Color Blend",
      "Crop Face",
      "Exclude Facial Feature",
      "Generation Parameter Input",
      "Generation Parameter Output",
      "Image Full BBox",
      "Load BiseNet",
      "Load RetinaFace",
      "Mask Contour",
      "Segment Face",
      "Uncrop Face"
    ],
    {
      "title_aux": "Character Face Swap"
    }
  ],
  "https://github.com/ArtVentureX/comfyui-animatediff": [
    [
      "AnimateDiffCombine",
      "AnimateDiffLoraLoader",
      "AnimateDiffModuleLoader",
      "AnimateDiffSampler",
      "AnimateDiffSlidingWindowOptions",
      "ImageSizeAndBatchSize",
      "LoadVideo"
    ],
    {
      "title_aux": "AnimateDiff"
    }
  ],
  "https://github.com/BadCafeCode/masquerade-nodes-comfyui": [
    [
      "Blur",
      "Change Channel Count",
      "Combine Masks",
      "Constant Mask",
      "Convert Color Space",
      "Create QR Code",
      "Create Rect Mask",
      "Cut By Mask",
      "Get Image Size",
      "Image To Mask",
      "Make Image Batch",
      "Mask By Text",
      "Mask Morphology",
      "Mask To Region",
      "MasqueradeIncrementer",
      "Mix Color By Mask",
      "Mix Images By Mask",
      "Paste By Mask",
      "Prune By Mask",
      "Separate Mask Components",
      "Unary Image Op",
      "Unary Mask Op"
    ],
    {
      "title_aux": "Masquerade Nodes"
    }
  ],
  "https://github.com/Beinsezii/bsz-cui-extras": [
    [
      "BSZAbsoluteHires",
      "BSZAspectHires",
      "BSZColoredLatentImageXL",
      "BSZCombinedHires",
      "BSZHueChromaXL",
      "BSZInjectionKSampler",
      "BSZLatentDebug",
      "BSZLatentFill",
      "BSZLatentGradient",
      "BSZLatentHSVAImage",
      "BSZLatentOffsetXL",
      "BSZLatentRGBAImage",
      "BSZLatentbuster",
      "BSZPixelbuster",
      "BSZPixelbusterHelp",
      "BSZPrincipledConditioning",
      "BSZPrincipledSampler",
      "BSZPrincipledScale",
      "BSZStrangeResample"
    ],
    {
      "title_aux": "bsz-cui-extras"
    }
  ],
  "https://github.com/Bikecicle/ComfyUI-Waveform-Extensions/raw/main/EXT_AudioManipulation.py": [
    [
      "BatchJoinAudio",
      "CutAudio",
      "DuplicateAudio",
      "JoinAudio",
      "ResampleAudio",
      "ReverseAudio",
      "StretchAudio"
    ],
    {
      "title_aux": "Waveform Extensions"
    }
  ],
  "https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_emb": [
    [
      "BNK_AddCLIPSDXLParams",
      "BNK_AddCLIPSDXLRParams",
      "BNK_CLIPTextEncodeAdvanced",
      "BNK_CLIPTextEncodeSDXLAdvanced"
    ],
    {
      "title_aux": "Advanced CLIP Text Encode"
    }
  ],
  "https://github.com/BlenderNeko/ComfyUI_Cutoff": [
    [
      "BNK_CutoffBasePrompt",
      "BNK_CutoffRegionsToConditioning",
      "BNK_CutoffRegionsToConditioning_ADV",
      "BNK_CutoffSetRegions"
    ],
    {
      "title_aux": "ComfyUI Cutoff"
    }
  ],
  "https://github.com/BlenderNeko/ComfyUI_Noise": [
    [
      "BNK_DuplicateBatchIndex",
      "BNK_GetSigma",
      "BNK_InjectNoise",
      "BNK_NoisyLatentImage",
      "BNK_SlerpLatent",
      "BNK_Unsampler"
    ],
    {
      "title_aux": "ComfyUI Noise"
    }
  ],
  "https://github.com/BlenderNeko/ComfyUI_SeeCoder": [
    [
      "ConcatConditioning",
      "SEECoderImageEncode"
    ],
    {
      "title_aux": "SeeCoder [WIP]"
    }
  ],
  "https://github.com/BlenderNeko/ComfyUI_TiledKSampler": [
    [
      "BNK_TiledKSampler",
      "BNK_TiledKSamplerAdvanced"
    ],
    {
      "title_aux": "Tiled sampling for ComfyUI"
    }
  ],
  "https://github.com/CaptainGrock/ComfyUIInvisibleWatermark/raw/main/Invisible%20Watermark.py": [
    [
      "Apply Invisible Watermark",
      "Extract Watermark"
    ],
    {
      "title_aux": "ComfyUIInvisibleWatermark"
    }
  ],
  "https://github.com/Chaoses-Ib/ComfyUI_Ib_CustomNodes": [
    [
      "LoadImageFromPath"
    ],
    {
      "title_aux": "ComfyUI_Ib_CustomNodes"
    }
  ],
  "https://github.com/Clybius/ComfyUI-Latent-Modifiers": [
    [
      "Latent Diffusion Mega Modifier"
    ],
    {
      "title_aux": "ComfyUI-Latent-Modifiers"
    }
  ],
  "https://github.com/Danand/ComfyUI-ComfyCouple": [
    [
      "Attention couple",
      "Comfy Couple"
    ],
    {
      "author": "Rei D.",
      "description": "If you want to draw two different characters together without blending their features, so you could try to check out this custom node.",
      "nickname": "Danand",
      "title": "Comfy Couple",
      "title_aux": "ComfyUI-ComfyCouple"
    }
  ],
  "https://github.com/Davemane42/ComfyUI_Dave_CustomNode": [
    [
      "ABGRemover",
      "ConditioningStretch",
      "ConditioningUpscale",
      "MultiAreaConditioning",
      "MultiLatentComposite"
    ],
    {
      "title_aux": "Visual Area Conditioning / Latent composition"
    }
  ],
  "https://github.com/Derfuu/Derfuu_ComfyUI_ModdedNodes": [
    [
      "ABSNode_DF",
      "Absolute value",
      "Ceil",
      "CeilNode_DF",
      "Conditioning area scale by ratio",
      "ConditioningSetArea with tuples",
      "ConditioningSetAreaEXT_DF",
      "ConditioningSetArea_DF",
      "CosNode_DF",
      "Cosines",
      "Divide",
      "DivideNode_DF",
      "EmptyLatentImage_DF",
      "Float",
      "Float debug print",
      "Float2Tuple_DF",
      "FloatDebugPrint_DF",
      "FloatNode_DF",
      "Floor",
      "FloorNode_DF",
      "Get image size",
      "Get latent size",
      "GetImageSize_DF",
      "GetLatentSize_DF",
      "Image scale by ratio",
      "Image scale to side",
      "ImageScale_Ratio_DF",
      "ImageScale_Side_DF",
      "Int debug print",
      "Int to float",
      "Int to tuple",
      "Int2Float_DF",
      "IntDebugPrint_DF",
      "Integer",
      "IntegerNode_DF",
      "Latent Scale by ratio",
      "Latent Scale to side",
      "LatentComposite with tuples",
      "LatentScale_Ratio_DF",
      "LatentScale_Side_DF",
      "MultilineStringNode_DF",
      "Multiply",
      "MultiplyNode_DF",
      "PowNode_DF",
      "Power",
      "Random",
      "RandomFloat_DF",
      "SinNode_DF",
      "Sinus",
      "SqrtNode_DF",
      "Square root",
      "String debug print",
      "StringNode_DF",
      "Subtract",
      "SubtractNode_DF",
      "Sum",
      "SumNode_DF",
      "TanNode_DF",
      "Tangent",
      "Text",
      "Text box",
      "Tuple",
      "Tuple debug print",
      "Tuple multiply",
      "Tuple swap",
      "Tuple to floats",
      "Tuple to ints",
      "Tuple2Float_DF",
      "TupleDebugPrint_DF",
      "TupleNode_DF"
    ],
    {
      "title_aux": "Derfuu_ComfyUI_ModdedNodes"
    }
  ],
  "https://github.com/EllangoK/ComfyUI-post-processing-nodes": [
    [
      "ArithmeticBlend",
      "AsciiArt",
      "Blend",
      "Blur",
      "CannyEdgeMask",
      "ChromaticAberration",
      "ColorCorrect",
      "ColorTint",
      "Dissolve",
      "Dither",
      "DodgeAndBurn",
      "FilmGrain",
      "Glow",
      "HSVThresholdMask",
      "KMeansQuantize",
      "KuwaharaBlur",
      "Parabolize",
      "PencilSketch",
      "PixelSort",
      "Pixelize",
      "Quantize",
      "Sharpen",
      "SineWave",
      "Solarize",
      "Vignette"
    ],
    {
      "title_aux": "ComfyUI-post-processing-nodes"
    }
  ],
  "https://github.com/Extraltodeus/LoadLoraWithTags": [
    [
      "LoraLoaderTagsQuery"
    ],
    {
      "title_aux": "LoadLoraWithTags"
    }
  ],
  "https://github.com/Extraltodeus/noise_latent_perlinpinpin": [
    [
      "NoisyLatentPerlin"
    ],
    {
      "title_aux": "noise latent perlinpinpin"
    }
  ],
  "https://github.com/Fannovel16/ComfyUI-Frame-Interpolation": [
    [
      "AMT VFI",
      "CAIN VFI",
      "EISAI VFI",
      "FILM VFI",
      "FLAVR VFI",
      "GMFSS Fortuna VFI",
      "IFRNet VFI",
      "IFUnet VFI",
      "KSampler Gradually Adding More Denoise (efficient)",
      "M2M VFI",
      "Make Interpolation State List",
      "RIFE VFI",
      "STMFNet VFI",
      "Sepconv VFI"
    ],
    {
      "title_aux": "ComfyUI Frame Interpolation"
    }
  ],
  "https://github.com/Fannovel16/ComfyUI-Loopchain": [
    [
      "EmptyLatentImageLoop",
      "FolderToImageStorage",
      "ImageStorageExportLoop",
      "ImageStorageImport",
      "ImageStorageReset",
      "LatentStorageExportLoop",
      "LatentStorageImport",
      "LatentStorageReset"
    ],
    {
      "title_aux": "ComfyUI Loopchain"
    }
  ],
  "https://github.com/Fannovel16/ComfyUI-MotionDiff": [
    [
      "EmptyMotionData",
      "ExportSMPLTo3DSoftware",
      "MotionCLIPTextEncode",
      "MotionDataVisualizer",
      "MotionDiffLoader",
      "MotionDiffSimpleSampler",
      "RenderSMPLMesh",
      "SMPLLoader",
      "SaveSMPL",
      "SmplifyMotionData"
    ],
    {
      "title_aux": "ComfyUI MotionDiff"
    }
  ],
  "https://github.com/Fannovel16/comfyui_controlnet_aux": [
    [
      "AIO_Preprocessor",
      "AnimalPosePreprocessor",
      "AnimeFace_SemSegPreprocessor",
      "AnimeLineArtPreprocessor",
      "BAE-NormalMapPreprocessor",
      "BinaryPreprocessor",
      "CannyEdgePreprocessor",
      "ColorPreprocessor",
      "DWPreprocessor",
      "FakeScribblePreprocessor",
      "HEDPreprocessor",
      "HintImageEnchance",
      "ImageGenResolutionFromImage",
      "ImageGenResolutionFromLatent",
      "InpaintPreprocessor",
      "LeReS-DepthMapPreprocessor",
      "LineArtPreprocessor",
      "M-LSDPreprocessor",
      "Manga2Anime_LineArt_Preprocessor",
      "MediaPipe-FaceMeshPreprocessor",
      "MiDaS-DepthMapPreprocessor",
      "MiDaS-NormalMapPreprocessor",
      "OneFormer-ADE20K-SemSegPreprocessor",
      "OneFormer-COCO-SemSegPreprocessor",
      "OpenposePreprocessor",
      "PiDiNetPreprocessor",
      "PixelPerfectResolution",
      "SAMPreprocessor",
      "ScribblePreprocessor",
      "Scribble_XDoG_Preprocessor",
      "SemSegPreprocessor",
      "ShufflePreprocessor",
      "TilePreprocessor",
      "UniFormer-SemSegPreprocessor",
      "Zoe-DepthMapPreprocessor"
    ],
    {
      "author": "tstandley",
      "title_aux": "ComfyUI's ControlNet Auxiliary Preprocessors"
    }
  ],
  "https://github.com/Fictiverse/ComfyUI_Fictiverse": [
    [
      "Add Noise to Image with Mask",
      "Color correction",
      "Displace Image with Depth",
      "Displace Images with Mask",
      "Zoom Image with Depth"
    ],
    {
      "title_aux": "ComfyUI Fictiverse Nodes"
    }
  ],
  "https://github.com/FizzleDorf/ComfyUI-AIT": [
    [
      "AIT_Unet_Loader",
      "AIT_VAE_Encode_Loader"
    ],
    {
      "title_aux": "ComfyUI-AIT"
    }
  ],
  "https://github.com/FizzleDorf/ComfyUI_FizzNodes": [
    [
      "AbsCosWave",
      "AbsSinWave",
      "BatchGLIGENSchedule",
      "BatchPromptSchedule",
      "BatchPromptScheduleEncodeSDXL",
      "BatchPromptScheduleLatentInput",
      "BatchPromptScheduleNodeFlowEnd",
      "BatchPromptScheduleSDXLLatentInput",
      "BatchStringSchedule",
      "BatchValueSchedule",
      "BatchValueScheduleLatentInput",
      "CalculateFrameOffset",
      "ConcatStringSingle",
      "CosWave",
      "FizzFrame",
      "FizzFrameConcatenate",
      "Init FizzFrame",
      "InvCosWave",
      "InvSinWave",
      "Lerp",
      "PromptSchedule",
      "PromptScheduleEncodeSDXL",
      "PromptScheduleNodeFlow",
      "PromptScheduleNodeFlowEnd",
      "SawtoothWave",
      "SinWave",
      "SquareWave",
      "StringConcatenate",
      "StringSchedule",
      "TriangleWave",
      "ValueSchedule",
      "convertKeyframeKeysToBatchKeys"
    ],
    {
      "title_aux": "FizzNodes"
    }
  ],
  "https://github.com/GMapeSplat/ComfyUI_ezXY": [
    [
      "ConcatenateString",
      "ItemFromDropdown",
      "IterationDriver",
      "JoinImages",
      "LineToConsole",
      "NumberFromList",
      "NumbersToList",
      "PlotImages",
      "StringFromList",
      "StringToLabel",
      "StringsToList",
      "ezMath",
      "ezXY_AssemblePlot",
      "ezXY_Driver"
    ],
    {
      "title_aux": "ezXY scripts and nodes"
    }
  ],
  "https://github.com/GTSuya-Studio/ComfyUI-Gtsuya-Nodes": [
    [
      "Get From Danbooru",
      "Simple Wildcards",
      "Simple Wildcards (Dir.)",
      "Wildcards"
    ],
    {
      "title_aux": "ComfyUI-GTSuya-Nodes"
    }
  ],
  "https://github.com/Gourieff/comfyui-reactor-node": [
    [
      "ReActorFaceSwap",
      "ReActorLoadFaceModel",
      "ReActorSaveFaceModel"
    ],
    {
      "title_aux": "ReActor Node for ComfyUI"
    }
  ],
  "https://github.com/JPS-GER/ComfyUI_JPS-Nodes": [
    [
      "Conditioning Switch (JPS)",
      "ControlNet Switch (JPS)",
      "Crop Image Square (JPS)",
      "Crop Image TargetSize (JPS)",
      "Disable Enable Switch (JPS)",
      "Enable Disable Switch (JPS)",
      "Generation Settings (JPS)",
      "Generation Settings Pipe (JPS)",
      "Generation TXT IMG Settings (JPS)",
      "Get Date Time String (JPS)",
      "Get Image Size (JPS)",
      "IP Adapter Settings (JPS)",
      "IP Adapter Settings Pipe (JPS)",
      "Image Switch (JPS)",
      "Images Masks MultiPipe (JPS)",
      "Integer Switch (JPS)",
      "Largest Int (JPS)",
      "Latent Switch (JPS)",
      "Lora Loader (JPS)",
      "Model Switch (JPS)",
      "Multiply Float Float (JPS)",
      "Multiply Int Float (JPS)",
      "Multiply Int Int (JPS)",
      "Resolution Multiply (JPS)",
      "Revision Settings (JPS)",
      "Revision Settings Pipe (JPS)",
      "SDXL Basic Settings (JPS)",
      "SDXL Basic Settings Pipe (JPS)",
      "SDXL Fundamentals MultiPipe (JPS)",
      "SDXL Prompt Handling (JPS)",
      "SDXL Prompt Handling Plus (JPS)",
      "SDXL Prompt Styler (JPS)",
      "SDXL Recommended Resolution Calc (JPS)",
      "SDXL Resolutions (JPS)",
      "Sampler Scheduler Settings (JPS)",
      "Substract Int Int (JPS)",
      "Text Concatenate (JPS)",
      "VAE Switch (JPS)"
    ],
    {
      "author": "JPS",
      "description": "Various nodes to handle SDXL Resolutions, SDXL Basic Settings, IP Adapter Settings, Revision Settings, SDXL Prompt Styler, Crop Image to Square, Crop Image to Target Size, Get Date-Time String, Resolution Multiply, Largest Integer, 5-to-1 Switches for Integer, Images, Latents, Conditioning, Model, VAE, ControlNet",
      "nickname": "JPS Custom Nodes",
      "title": "JPS Custom Nodes for ComfyUI",
      "title_aux": "JPS Custom Nodes for ComfyUI"
    }
  ],
  "https://github.com/Jcd1230/rembg-comfyui-node": [
    [
      "Image Remove Background (rembg)"
    ],
    {
      "title_aux": "Rembg Background Removal Node for ComfyUI"
    }
  ],
  "https://github.com/Jordach/comfy-plasma": [
    [
      "JDC_AutoContrast",
      "JDC_BlendImages",
      "JDC_BrownNoise",
      "JDC_Contrast",
      "JDC_EqualizeGrey",
      "JDC_GaussianBlur",
      "JDC_GreyNoise",
      "JDC_Greyscale",
      "JDC_ImageLoader",
      "JDC_ImageLoaderMeta",
      "JDC_PinkNoise",
      "JDC_Plasma",
      "JDC_PlasmaSampler",
      "JDC_PowerImage",
      "JDC_RandNoise",
      "JDC_ResizeFactor"
    ],
    {
      "title_aux": "comfy-plasma"
    }
  ],
  "https://github.com/Kaharos94/ComfyUI-Saveaswebp": [
    [
      "Save_as_webp"
    ],
    {
      "title_aux": "ComfyUI-Saveaswebp"
    }
  ],
  "https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet": [
    [
      "ACN_AdvancedControlNetApply",
      "ControlNetLoaderAdvanced",
      "CustomControlNetWeights",
      "CustomT2IAdapterWeights",
      "DiffControlNetLoaderAdvanced",
      "LatentKeyframe",
      "LatentKeyframeBatchedGroup",
      "LatentKeyframeGroup",
      "LatentKeyframeTiming",
      "LoadImagesFromDirectory",
      "ScaledSoftControlNetWeights",
      "SoftControlNetWeights",
      "SoftT2IAdapterWeights",
      "TimestepKeyframe"
    ],
    {
      "title_aux": "ComfyUI-Advanced-ControlNet"
    }
  ],
  "https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved": [
    [
      "ADE_AnimateDiffCombine",
      "ADE_AnimateDiffLoRALoader",
      "ADE_AnimateDiffLoaderV1Advanced",
      "ADE_AnimateDiffLoaderWithContext",
      "ADE_AnimateDiffModelSettings",
      "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths",
      "ADE_AnimateDiffModelSettingsSimple",
      "ADE_AnimateDiffModelSettings_Release",
      "ADE_AnimateDiffUniformContextOptions",
      "ADE_AnimateDiffUniformContextOptionsExperimental",
      "ADE_AnimateDiffUnload",
      "ADE_EmptyLatentImageLarge",
      "AnimateDiffLoaderV1",
      "CheckpointLoaderSimpleWithNoiseSelect"
    ],
    {
      "title_aux": "AnimateDiff Evolved"
    }
  ],
  "https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite": [
    [
      "VHS_DuplicateImages",
      "VHS_DuplicateLatents",
      "VHS_GetImageCount",
      "VHS_GetLatentCount",
      "VHS_LoadImages",
      "VHS_LoadImagesPath",
      "VHS_LoadVideo",
      "VHS_LoadVideoPath",
      "VHS_MergeImages",
      "VHS_MergeLatents",
      "VHS_SelectEveryNthImage",
      "VHS_SelectEveryNthLatent",
      "VHS_SplitImages",
      "VHS_SplitLatents",
      "VHS_VideoCombine"
    ],
    {
      "title_aux": "ComfyUI-VideoHelperSuite"
    }
  ],
  "https://github.com/LEv145/images-grid-comfy-plugin": [
    [
      "GridAnnotation",
      "ImageCombine",
      "ImagesGridByColumns",
      "ImagesGridByRows",
      "LatentCombine"
    ],
    {
      "title_aux": "ImagesGrid"
    }
  ],
  "https://github.com/Lerc/canvas_tab": [
    [
      "Canvas_Tab",
      "Send_To_Editor"
    ],
    {
      "author": "Lerc",
      "description": "This extension provides a full page image editor with mask support. There are two nodes, one to receive images from the editor and one to send images to the editor.",
      "nickname": "Canvas Tab",
      "title": "Canvas Tab",
      "title_aux": "Canvas Tab"
    }
  ],
  "https://github.com/LonicaMewinsky/ComfyUI-MakeFrame": [
    [
      "BreakFrames",
      "BreakGrid",
      "GetKeyFrames",
      "MakeGrid",
      "RandomImageFromDir"
    ],
    {
      "title_aux": "ComfyBreakAnim"
    }
  ],
  "https://github.com/LonicaMewinsky/ComfyUI-RawSaver": [
    [
      "SaveTifImage"
    ],
    {
      "title_aux": "ComfyUI-RawSaver"
    }
  ],
  "https://github.com/M1kep/ComfyLiterals": [
    [
      "Checkpoint",
      "Float",
      "Int",
      "KepStringLiteral",
      "Lora",
      "Operation",
      "String"
    ],
    {
      "title_aux": "ComfyLiterals"
    }
  ],
  "https://github.com/M1kep/ComfyUI-KepOpenAI": [
    [
      "KepOpenAI_ImageWithPrompt"
    ],
    {
      "title_aux": "ComfyUI-KepOpenAI"
    }
  ],
  "https://github.com/M1kep/ComfyUI-OtherVAEs": [
    [
      "OtherVAE_Taesd"
    ],
    {
      "title_aux": "ComfyUI-OtherVAEs"
    }
  ],
  "https://github.com/M1kep/Comfy_KepKitchenSink": [
    [
      "KepRotateImage"
    ],
    {
      "title_aux": "Comfy_KepKitchenSink"
    }
  ],
  "https://github.com/M1kep/Comfy_KepListStuff": [
    [
      "Empty Images",
      "Image Overlay",
      "ImageListLoader",
      "Join Float Lists",
      "Join Image Lists",
      "KepStringList",
      "KepStringListFromNewline",
      "Kep_JoinListAny",
      "Kep_RepeatList",
      "Kep_ReverseList",
      "Kep_VariableImageBuilder",
      "List Length",
      "Range(Num Steps) - Float",
      "Range(Num Steps) - Int",
      "Range(Step) - Float",
      "Range(Step) - Int",
      "Stack Images",
      "XYAny",
      "XYImage"
    ],
    {
      "title_aux": "Comfy_KepListStuff"
    }
  ],
  "https://github.com/M1kep/Comfy_KepMatteAnything": [
    [
      "MatteAnything_DinoBoxes",
      "MatteAnything_GenerateVITMatte",
      "MatteAnything_InitSamPredictor",
      "MatteAnything_LoadDINO",
      "MatteAnything_LoadVITMatteModel",
      "MatteAnything_SAMLoader",
      "MatteAnything_SAMMaskFromBoxes",
      "MatteAnything_ToTrimap"
    ],
    {
      "title_aux": "Comfy_KepMatteAnything"
    }
  ],
  "https://github.com/M1kep/KepPromptLang": [
    [
      "Build Gif",
      "Special CLIP Loader"
    ],
    {
      "title_aux": "KepPromptLang"
    }
  ],
  "https://github.com/ManglerFTW/ComfyI2I": [
    [
      "Color Transfer",
      "Combine and Paste",
      "Inpaint Segments",
      "Mask Ops"
    ],
    {
      "author": "ManglerFTW",
      "title": "ComfyI2I",
      "title_aux": "ComfyI2I"
    }
  ],
  "https://github.com/NicholasMcCarthy/ComfyUI_TravelSuite": [
    [
      "LatentTravel"
    ],
    {
      "title_aux": "ComfyUI_TravelSuite"
    }
  ],
  "https://github.com/Niutonian/ComfyUi-NoodleWebcam": [
    [
      "WebcamNode"
    ],
    {
      "title_aux": "ComfyUi-NoodleWebcam"
    }
  ],
  "https://github.com/Nourepide/ComfyUI-Allor": [
    [
      "AlphaChanelAdd",
      "AlphaChanelAddByMask",
      "AlphaChanelAsMask",
      "AlphaChanelRemove",
      "AlphaChanelRestore",
      "ClipClamp",
      "ClipVisionClamp",
      "ClipVisionOutputClamp",
      "ConditioningClamp",
      "ControlNetClamp",
      "GligenClamp",
      "ImageBatchFork",
      "ImageBatchGet",
      "ImageBatchJoin",
      "ImageBatchRemove",
      "ImageClamp",
      "ImageCompositeAbsolute",
      "ImageCompositeAbsoluteByContainer",
      "ImageCompositeRelative",
      "ImageCompositeRelativeByContainer",
      "ImageContainer",
      "ImageContainerInheritanceAdd",
      "ImageContainerInheritanceMax",
      "ImageContainerInheritanceScale",
      "ImageContainerInheritanceSum",
      "ImageDrawArc",
      "ImageDrawArcByContainer",
      "ImageDrawChord",
      "ImageDrawChordByContainer",
      "ImageDrawEllipse",
      "ImageDrawEllipseByContainer",
      "ImageDrawLine",
      "ImageDrawLineByContainer",
      "ImageDrawPieslice",
      "ImageDrawPiesliceByContainer",
      "ImageDrawPolygon",
      "ImageDrawRectangle",
      "ImageDrawRectangleByContainer",
      "ImageDrawRectangleRounded",
      "ImageDrawRectangleRoundedByContainer",
      "ImageEffectsAdjustment",
      "ImageEffectsGrayscale",
      "ImageEffectsLensBokeh",
      "ImageEffectsLensChromaticAberration",
      "ImageEffectsLensOpticAxis",
      "ImageEffectsLensVignette",
      "ImageEffectsLensZoomBurst",
      "ImageEffectsNegative",
      "ImageEffectsSepia",
      "ImageFilterBilateralBlur",
      "ImageFilterBlur",
      "ImageFilterBoxBlur",
      "ImageFilterContour",
      "ImageFilterDetail",
      "ImageFilterEdgeEnhance",
      "ImageFilterEdgeEnhanceMore",
      "ImageFilterEmboss",
      "ImageFilterFindEdges",
      "ImageFilterGaussianBlur",
      "ImageFilterGaussianBlurAdvanced",
      "ImageFilterMax",
      "ImageFilterMedianBlur",
      "ImageFilterMin",
      "ImageFilterMode",
      "ImageFilterRank",
      "ImageFilterSharpen",
      "ImageFilterSmooth",
      "ImageFilterSmoothMore",
      "ImageFilterStackBlur",
      "ImageNoiseBeta",
      "ImageNoiseBinomial",
      "ImageNoiseBytes",
      "ImageNoiseGaussian",
      "ImageSegmentation",
      "ImageSegmentationCustom",
      "ImageSegmentationCustomAdvanced",
      "ImageText",
      "ImageTextMultiline",
      "ImageTextMultilineOutlined",
      "ImageTextOutlined",
      "ImageTransformCropAbsolute",
      "ImageTransformCropCorners",
      "ImageTransformCropRelative",
      "ImageTransformPaddingAbsolute",
      "ImageTransformPaddingRelative",
      "ImageTransformResizeAbsolute",
      "ImageTransformResizeRelative",
      "ImageTransformRotate",
      "ImageTransformTranspose",
      "LatentClamp",
      "MaskClamp",
      "ModelClamp",
      "StyleModelClamp",
      "UpscaleModelClamp",
      "VaeClamp"
    ],
    {
      "title_aux": "Allor Plugin"
    }
  ],
  "https://github.com/Nuked88/ComfyUI-N-Nodes": [
    [
      "DynamicPrompt",
      "Float Variable",
      "FrameInterpolator",
      "GPT Loader Simple",
      "GPTSampler",
      "Integer Variable",
      "LoadFramesFromFolder",
      "LoadVideo",
      "SaveVideo",
      "SetMetadataForSaveVideo",
      "String Variable"
    ],
    {
      "title_aux": "ComfyUI-N-Nodes"
    }
  ],
  "https://github.com/Onierous/QRNG_Node_ComfyUI/raw/main/qrng_node.py": [
    [
      "QRNG_Node_CSV"
    ],
    {
      "title_aux": "QRNG_Node_ComfyUI"
    }
  ],
  "https://github.com/PCMonsterx/ComfyUI-CSV-Loader": [
    [
      "Load Artists CSV",
      "Load Artmovements CSV",
      "Load Characters CSV",
      "Load Colors CSV",
      "Load Composition CSV",
      "Load Lighting CSV",
      "Load Negative CSV",
      "Load Positive CSV",
      "Load Settings CSV",
      "Load Styles CSV"
    ],
    {
      "title_aux": "ComfyUI-CSV-Loader"
    }
  ],
  "https://github.com/ParmanBabra/ComfyUI-Malefish-Custom-Scripts": [
    [
      "CSVPromptsLoader",
      "CombinePrompt",
      "MultiLoraLoader",
      "RandomPrompt"
    ],
    {
      "title_aux": "ComfyUI-Malefish-Custom-Scripts"
    }
  ],
  "https://github.com/Pfaeff/pfaeff-comfyui": [
    [
      "AstropulsePixelDetector",
      "BackgroundRemover",
      "ImagePadForBetterOutpaint",
      "Inpainting",
      "InpaintingPipelineLoader"
    ],
    {
      "title_aux": "pfaeff-comfyui"
    }
  ],
  "https://github.com/RockOfFire/CR_Animation_Nodes": [
    [
      "CR Central Schedule",
      "CR Combine Schedules",
      "CR Current Frame",
      "CR Cycle Images",
      "CR Cycle Images Simple",
      "CR Cycle LoRAs",
      "CR Cycle Models",
      "CR Cycle Text",
      "CR Cycle Text Simple",
      "CR Debatch Frames",
      "CR Encode Scheduled Prompts",
      "CR Gradient Float",
      "CR Gradient Integer",
      "CR Image List",
      "CR Image List Simple",
      "CR Increment Float",
      "CR Increment Integer",
      "CR Index Increment",
      "CR Index Multiply",
      "CR Index Reset",
      "CR Input Text List",
      "CR Interpolate Latents",
      "CR Keyframe List",
      "CR LoRA List",
      "CR Load Animation Frames",
      "CR Load Flow Frames",
      "CR Load Prompt Style",
      "CR Load Schedule From File",
      "CR Load Scheduled LoRAs",
      "CR Load Scheduled Models",
      "CR Model List",
      "CR Output Flow Frames",
      "CR Output Schedule To File",
      "CR Prompt List",
      "CR Prompt List Keyframes",
      "CR Prompt Scheduler",
      "CR Prompt Text",
      "CR Schedule Input Switch",
      "CR Schedule To ScheduleList",
      "CR Simple Prompt List",
      "CR Simple Prompt List Keyframes",
      "CR Simple Prompt Scheduler",
      "CR Simple Schedule",
      "CR Simple Text Scheduler",
      "CR Simple Value Scheduler",
      "CR String To Combo",
      "CR Text List",
      "CR Text List Simple",
      "CR Text List To String",
      "CR Text Scheduler",
      "CR Value Scheduler"
    ],
    {
      "title_aux": "CR Animation Nodes"
    }
  ],
  "https://github.com/RockOfFire/ComfyUI_Comfyroll_CustomNodes": [
    [
      "CR 3D Camera Drone",
      "CR 3D Camera Static",
      "CR 3D Polygon",
      "CR 3D Solids",
      "CR Add Annotation",
      "CR Alternate Latents",
      "CR Apply Annotations",
      "CR Apply ControlNet",
      "CR Apply LoRA Stack",
      "CR Apply Model Merge",
      "CR Apply Multi Upscale",
      "CR Apply Multi-ControlNet",
      "CR Arabic Text RTL",
      "CR Aspect Ratio SDXL",
      "CR Batch Process Switch",
      "CR Central Schedule",
      "CR Check Job Complete",
      "CR Checker Pattern",
      "CR Clip Input Switch",
      "CR Color Bars",
      "CR Color Gradient",
      "CR Color Panel",
      "CR Color Tint",
      "CR Combine Schedules",
      "CR Comic Panel Templates",
      "CR Composite Text",
      "CR Conditioning Input Switch",
      "CR Conditioning Mixer",
      "CR Continuous Rotation",
      "CR Continuous Track",
      "CR Continuous Zoom",
      "CR ControlNet Input Switch",
      "CR Current Frame",
      "CR Cycle Images",
      "CR Cycle Images Simple",
      "CR Cycle LoRAs",
      "CR Cycle Models",
      "CR Cycle Styles",
      "CR Cycle Text",
      "CR Cycle Text Simple",
      "CR Debatch Frames",
      "CR Draw Perspective Text",
      "CR Draw Text",
      "CR Encode Scheduled Prompts",
      "CR Float To Integer",
      "CR Float To String",
      "CR Gradient Float",
      "CR Gradient Integer",
      "CR Halftone Filter",
      "CR Halftone Grid",
      "CR Hires Fix Process Switch",
      "CR Image Border",
      "CR Image Grid Panel",
      "CR Image Input Switch",
      "CR Image Input Switch (4 way)",
      "CR Image List",
      "CR Image List Simple",
      "CR Image Output",
      "CR Image Panel",
      "CR Image Pipe Edit",
      "CR Image Pipe In",
      "CR Image Pipe Out",
      "CR Image Size",
      "CR Image Transition",
      "CR Image XY Panel",
      "CR Img2Img Process Switch",
      "CR Increment Float",
      "CR Increment Integer",
      "CR Index",
      "CR Index Increment",
      "CR Index Multiply",
      "CR Index Reset",
      "CR Input Text List",
      "CR Integer Multiple",
      "CR Integer To String",
      "CR Interpolate Latents",
      "CR Interpolate Prompt Weights",
      "CR Interpolate Rotation",
      "CR Interpolate Track",
      "CR Interpolate Zoom",
      "CR Job Current Frame",
      "CR Job List",
      "CR Job Scheduler",
      "CR Keyframe List",
      "CR Latent Batch Size",
      "CR Latent Input Switch",
      "CR LoRA List",
      "CR LoRA Stack",
      "CR Load Animation Frames",
      "CR Load Flow Frames",
      "CR Load LoRA",
      "CR Load Prompt Style",
      "CR Load Schedule From File",
      "CR Load Scheduled ControlNets",
      "CR Load Scheduled LoRAs",
      "CR Load Scheduled Models",
      "CR Load Workflow",
      "CR Load XY Annotation From File",
      "CR Mask Text",
      "CR Model Input Switch",
      "CR Model List",
      "CR Model Merge Stack",
      "CR Module Input",
      "CR Module Output",
      "CR Module Pipe Loader",
      "CR Multi Upscale Stack",
      "CR Multi-ControlNet Stack",
      "CR Multi-Panel Meme Template",
      "CR Output Flow Frames",
      "CR Output Schedule To File",
      "CR Overlay Text",
      "CR Overlay Transparent Image",
      "CR Page Layout",
      "CR Pipe Switch",
      "CR Polygons",
      "CR Popular Meme Templates",
      "CR Prompt List",
      "CR Prompt List Keyframes",
      "CR Prompt Scheduler",
      "CR Prompt Text",
      "CR Prompt Weight Scheduler",
      "CR Radial Gradient",
      "CR SD1.5 Aspect Ratio",
      "CR SDXL Aspect Ratio",
      "CR SDXL Base Prompt Encoder",
      "CR SDXL Prompt Mix Presets",
      "CR SDXL Style Text",
      "CR Schedule Camera Movements",
      "CR Schedule ControlNets",
      "CR Schedule Input Switch",
      "CR Schedule Styles",
      "CR Schedule To ScheduleList",
      "CR Seed",
      "CR Seed to Int",
      "CR Simple Annotations",
      "CR Simple Meme Template",
      "CR Simple Prompt List",
      "CR Simple Prompt List Keyframes",
      "CR Simple Prompt Scheduler",
      "CR Simple Schedule",
      "CR Simple Text Panel",
      "CR Simple Text Scheduler",
      "CR Simple Text Watermark",
      "CR Simple Value Scheduler",
      "CR Spawn Workflow Instance",
      "CR Split String",
      "CR Starburst Colors",
      "CR Starburst Lines",
      "CR String To Combo",
      "CR String To Number",
      "CR Strobe Images",
      "CR Style Bars",
      "CR Style List",
      "CR Switch Model and CLIP",
      "CR Text Input Switch",
      "CR Text Input Switch (4 way)",
      "CR Text List",
      "CR Text List Cross Join",
      "CR Text List Simple",
      "CR Text List To String",
      "CR Text Scheduler",
      "CR Trigger",
      "CR Upscale Image",
      "CR VAE Input Switch",
      "CR Value",
      "CR Value Scheduler",
      "CR XY From Folder",
      "CR XY Grid",
      "CR XY Index",
      "CR XY Interpolate",
      "CR XY List",
      "CR XY Save Grid Image",
      "CR XYZ Index",
      "CR XYZ Interpolate",
      "CR XYZ List"
    ],
    {
      "author": "RockOfFire",
      "description": "Custom nodes for SDXL and SD1.5 including Multi-ControlNet, LoRA, Aspect Ratio, Process Switches, and many more nodes.",
      "nickname": "Comfyroll Custom Nodes",
      "title": "Comfyroll Custom Nodes",
      "title_aux": "ComfyUI_Comfyroll_CustomNodes"
    }
  ],
  "https://github.com/SLAPaper/ComfyUI-Image-Selector": [
    [
      "ImageDuplicator",
      "ImageSelector",
      "LatentDuplicator",
      "LatentSelector"
    ],
    {
      "title_aux": "ComfyUI-Image-Selector"
    }
  ],
  "https://github.com/SOELexicon/ComfyUI-LexMSDBNodes": [
    [
      "MSSqlSelectNode",
      "MSSqlTableNode"
    ],
    {
      "title_aux": "LexMSDBNodes"
    }
  ],
  "https://github.com/SOELexicon/ComfyUI-LexTools": [
    [
      "AgeClassifierNode",
      "ArtOrHumanClassifierNode",
      "DocumentClassificationNode",
      "FoodCategoryClassifierNode",
      "ImageAspectPadNode",
      "ImageCaptioning",
      "ImageFilterByFloatScoreNode",
      "ImageFilterByIntScoreNode",
      "ImageQualityScoreNode",
      "ImageRankingNode",
      "ImageScaleToMin",
      "MD5ImageHashNode",
      "SamplerPropertiesNode",
      "ScoreConverterNode",
      "SeedIncrementerNode",
      "SegformerNode",
      "SegformerNodeMasks",
      "SegformerNodeMergeSegments",
      "StepCfgIncrementNode"
    ],
    {
      "title_aux": "ComfyUI-LexTools"
    }
  ],
  "https://github.com/SadaleNet/CLIPTextEncodeA1111-ComfyUI/raw/master/custom_nodes/clip_text_encoder_a1111.py": [
    [
      "CLIPTextEncodeA1111",
      "RerouteTextForCLIPTextEncodeA1111"
    ],
    {
      "title_aux": "ComfyUI A1111-like Prompt Custom Node Solution"
    }
  ],
  "https://github.com/SeargeDP/SeargeSDXL": [
    [
      "SeargeAdvancedParameters",
      "SeargeCheckpointLoader",
      "SeargeConditionMixing",
      "SeargeConditioningMuxer2",
      "SeargeConditioningMuxer5",
      "SeargeConditioningParameters",
      "SeargeControlnetAdapterV2",
      "SeargeControlnetModels",
      "SeargeCustomAfterUpscaling",
      "SeargeCustomAfterVaeDecode",
      "SeargeCustomPromptMode",
      "SeargeDebugPrinter",
      "SeargeEnablerInputs",
      "SeargeFloatConstant",
      "SeargeFloatMath",
      "SeargeFloatPair",
      "SeargeFreeU",
      "SeargeGenerated1",
      "SeargeGenerationParameters",
      "SeargeHighResolution",
      "SeargeImage2ImageAndInpainting",
      "SeargeImageAdapterV2",
      "SeargeImageSave",
      "SeargeImageSaving",
      "SeargeInput1",
      "SeargeInput2",
      "SeargeInput3",
      "SeargeInput4",
      "SeargeInput5",
      "SeargeInput6",
      "SeargeInput7",
      "SeargeIntegerConstant",
      "SeargeIntegerMath",
      "SeargeIntegerPair",
      "SeargeIntegerScaler",
      "SeargeLatentMuxer3",
      "SeargeLoraLoader",
      "SeargeLoras",
      "SeargeMagicBox",
      "SeargeModelSelector",
      "SeargeOperatingMode",
      "SeargeOutput1",
      "SeargeOutput2",
      "SeargeOutput3",
      "SeargeOutput4",
      "SeargeOutput5",
      "SeargeOutput6",
      "SeargeOutput7",
      "SeargeParameterProcessor",
      "SeargePipelineStart",
      "SeargePipelineTerminator",
      "SeargePreviewImage",
      "SeargePromptAdapterV2",
      "SeargePromptCombiner",
      "SeargePromptStyles",
      "SeargePromptText",
      "SeargeSDXLBasePromptEncoder",
      "SeargeSDXLImage2ImageSampler",
      "SeargeSDXLImage2ImageSampler2",
      "SeargeSDXLPromptEncoder",
      "SeargeSDXLRefinerPromptEncoder",
      "SeargeSDXLSampler",
      "SeargeSDXLSampler2",
      "SeargeSDXLSamplerV3",
      "SeargeSamplerAdvanced",
      "SeargeSamplerInputs",
      "SeargeSaveFolderInputs",
      "SeargeSeparator",
      "SeargeStylePreprocessor",
      "SeargeTextInputV2",
      "SeargeUpscaleModelLoader",
      "SeargeUpscaleModels",
      "SeargeVAELoader"
    ],
    {
      "title_aux": "SeargeSDXL"
    }
  ],
  "https://github.com/Ser-Hilary/SDXL_sizing/raw/main/conditioning_sizing_for_SDXL.py": [
    [
      "get_aspect_from_image",
      "get_aspect_from_ints",
      "sizing_node",
      "sizing_node_basic",
      "sizing_node_unparsed"
    ],
    {
      "title_aux": "SDXL_sizing"
    }
  ],
  "https://github.com/Smuzzies/comfyui_chatbox_overlay/raw/main/chatbox_overlay.py": [
    [
      "Chatbox Overlay"
    ],
    {
      "title_aux": "Chatbox Overlay node for ComfyUI"
    }
  ],
  "https://github.com/Stability-AI/stability-ComfyUI-nodes": [
    [
      "ColorBlend",
      "ControlLoraSave",
      "GetImageSize"
    ],
    {
      "title_aux": "stability-ComfyUI-nodes"
    }
  ],
  "https://github.com/Sxela/ComfyWarp": [
    [
      "ExtractOpticalFlow",
      "LoadFrame",
      "LoadFrameFromDataset",
      "LoadFrameFromFolder",
      "LoadFramePairFromDataset",
      "LoadFrameSequence",
      "MakeFrameDataset",
      "MixConsistencyMaps",
      "OffsetNumber",
      "ResizeToFit",
      "SaveFrame",
      "WarpFrame"
    ],
    {
      "title_aux": "ComfyWarp"
    }
  ],
  "https://github.com/TGu-97/ComfyUI-TGu-utils": [
    [
      "MPNReroute",
      "MPNSwitch",
      "PNSwitch"
    ],
    {
      "title_aux": "TGu Utilities"
    }
  ],
  "https://github.com/THtianhao/ComfyUI-FaceChain": [
    [
      "FCStyleLoraLoad",
      "FC_CropAndPaste",
      "FC_CropBottom",
      "FC_CropFace",
      "FC_CropMask",
      "FC_FaceDetection",
      "FC_FaceFusion",
      "FC_MaskOP",
      "FC_ReplaceImage",
      "FC_Segment",
      "FC_StyleLoraLoad"
    ],
    {
      "title_aux": "ComfyUI-FaceChain"
    }
  ],
  "https://github.com/THtianhao/ComfyUI-Portrait-Maker": [
    [
      "PM_BoxCropImage",
      "PM_ColorTransfer",
      "PM_ExpandMaskBox",
      "PM_FaceFusion",
      "PM_FaceShapMatch",
      "PM_FaceSkin",
      "PM_GetImageInfo",
      "PM_ImageResizeTarget",
      "PM_ImageScaleShort",
      "PM_MakeUpTransfer",
      "PM_MaskDilateErode",
      "PM_MaskMerge2Image",
      "PM_PortraitEnhancement",
      "PM_RatioMerge2Image",
      "PM_ReplaceBoxImg",
      "PM_RetinaFace",
      "PM_SkinRetouching",
      "PM_SuperColorTransfer",
      "PM_SuperMakeUpTransfer"
    ],
    {
      "title_aux": "ComfyUI-Portrait-Maker"
    }
  ],
  "https://github.com/TRI3D-LC/tri3d-comfyui-nodes": [
    [
      "tri3d-atr-parse",
      "tri3d-atr-parse-batch",
      "tri3d-extract-hand",
      "tri3d-extract-parts-batch",
      "tri3d-extract-parts-batch2",
      "tri3d-extract-parts-mask-batch",
      "tri3d-fuzzification",
      "tri3d-interaction-canny",
      "tri3d-position-hands",
      "tri3d-position-parts-batch",
      "tri3d-skin-feathered-padded-mask",
      "tri3d-swap-pixels"
    ],
    {
      "title_aux": "tri3d-comfyui-nodes"
    }
  ],
  "https://github.com/TeaCrab/ComfyUI-TeaNodes": [
    [
      "TC_ColorFill",
      "TC_EqualizeCLAHE",
      "TC_ImageResize",
      "TC_ImageScale",
      "TC_MaskBG_DIS",
      "TC_RandomColorFill",
      "TC_SizeApproximation"
    ],
    {
      "title_aux": "ComfyUI-TeaNodes"
    }
  ],
  "https://github.com/TheBarret/ZSuite": [
    [
      "ZSuite: Prompter",
      "ZSuite: RF Noise",
      "ZSuite: SeedMod"
    ],
    {
      "title_aux": "ZSuite"
    }
  ],
  "https://github.com/TinyTerra/ComfyUI_tinyterraNodes": [
    [
      "ttN busIN",
      "ttN busOUT",
      "ttN compareInput",
      "ttN concat",
      "ttN debugInput",
      "ttN float",
      "ttN hiresfixScale",
      "ttN imageOutput",
      "ttN imageREMBG",
      "ttN int",
      "ttN multiModelMerge",
      "ttN pipe2BASIC",
      "ttN pipe2DETAILER",
      "ttN pipeEDIT",
      "ttN pipeEncodeConcat",
      "ttN pipeIN",
      "ttN pipeKSampler",
      "ttN pipeKSamplerAdvanced",
      "ttN pipeKSamplerSDXL",
      "ttN pipeLoader",
      "ttN pipeLoaderSDXL",
      "ttN pipeLoraStack",
      "ttN pipeOUT",
      "ttN seed",
      "ttN seedDebug",
      "ttN text",
      "ttN text3BOX_3WAYconcat",
      "ttN text7BOX_concat",
      "ttN textDebug",
      "ttN xyPlot"
    ],
    {
      "author": "tinyterra",
      "description": "This extension offers various pipe nodes, fullscreen image viewer based on node history, dynamic widgets, interface customization, and more.",
      "nickname": "ttNodes",
      "title": "tinyterraNodes",
      "title_aux": "tinyterraNodes"
    }
  ],
  "https://github.com/Tropfchen/ComfyUI-Embedding_Picker": [
    [
      "EmbeddingPicker"
    ],
    {
      "title_aux": "Embedding Picker"
    }
  ],
  "https://github.com/Tropfchen/ComfyUI-yaResolutionSelector": [
    [
      "YARS",
      "YARSAdv"
    ],
    {
      "title_aux": "YARS: Yet Another Resolution Selector"
    }
  ],
  "https://github.com/Trung0246/ComfyUI-0246": [
    [
      "Beautify",
      "Count",
      "Highway",
      "Hold",
      "Junction",
      "JunctionBatch",
      "Loop",
      "Mimic",
      "Random"
    ],
    {
      "title_aux": "ComfyUI-0246"
    }
  ],
  "https://github.com/Ttl/ComfyUi_NNLatentUpscale": [
    [
      "NNLatentUpscale"
    ],
    {
      "title_aux": "ComfyUI Neural network latent upscale custom node"
    }
  ],
  "https://github.com/Umikaze-job/select_folder_path_easy": [
    [
      "SelectFolderPathEasy"
    ],
    {
      "title_aux": "select_folder_path_easy"
    }
  ],
  "https://github.com/WASasquatch/ASTERR": [
    [
      "ASTERR",
      "SaveASTERR"
    ],
    {
      "title_aux": "ASTERR"
    }
  ],
  "https://github.com/WASasquatch/ComfyUI_Preset_Merger": [
    [
      "Preset_Model_Merge"
    ],
    {
      "title_aux": "ComfyUI Preset Merger"
    }
  ],
  "https://github.com/WASasquatch/FreeU_Advanced": [
    [
      "FreeU (Advanced)"
    ],
    {
      "title_aux": "FreeU_Advanced"
    }
  ],
  "https://github.com/WASasquatch/PPF_Noise_ComfyUI": [
    [
      "Blend Latents (PPF Noise)",
      "Cross-Hatch Power Fractal (PPF Noise)",
      "Images as Latents (PPF Noise)",
      "Perlin Power Fractal Latent (PPF Noise)"
    ],
    {
      "title_aux": "PPF_Noise_ComfyUI"
    }
  ],
  "https://github.com/WASasquatch/PowerNoiseSuite": [
    [
      "Blend Latents (PPF Noise)",
      "Cross-Hatch Power Fractal (PPF Noise)",
      "Cross-Hatch Power Fractal Settings (PPF Noise)",
      "Images as Latents (PPF Noise)",
      "Latent Adjustment (PPF Noise)",
      "Latents to CPU (PPF Noise)",
      "Linear Cross-Hatch Power Fractal (PPF Noise)",
      "Perlin Power Fractal Latent (PPF Noise)",
      "Perlin Power Fractal Settings (PPF Noise)",
      "Power KSampler Advanced (PPF Noise)",
      "Power-Law Noise (PPF Noise)"
    ],
    {
      "title_aux": "Power Noise Suite for ComfyUI"
    }
  ],
  "https://github.com/WASasquatch/WAS_Extras": [
    [
      "BLVAEEncode",
      "CLIPTextEncodeList",
      "CLIPTextEncodeSequence2",
      "ConditioningBlend",
      "DebugInput",
      "KSamplerSeq",
      "KSamplerSeq2",
      "VAEEncodeForInpaint (WAS)",
      "VividSharpen"
    ],
    {
      "title_aux": "WAS_Extras"
    }
  ],
  "https://github.com/WASasquatch/was-node-suite-comfyui": [
    [
      "BLIP Analyze Image",
      "BLIP Model Loader",
      "Blend Latents",
      "Bounded Image Blend",
      "Bounded Image Blend with Mask",
      "Bounded Image Crop",
      "Bounded Image Crop with Mask",
      "Bus Node",
      "CLIP Input Switch",
      "CLIP Vision Input Switch",
      "CLIPSeg Batch Masking",
      "CLIPSeg Masking",
      "CLIPSeg Model Loader",
      "CLIPTextEncode (BlenderNeko Advanced + NSP)",
      "CLIPTextEncode (NSP)",
      "Cache Node",
      "Checkpoint Loader",
      "Checkpoint Loader (Simple)",
      "Conditioning Input Switch",
      "Constant Number",
      "Control Net Model Input Switch",
      "Convert Masks to Images",
      "Create Grid Image",
      "Create Grid Image from Batch",
      "Create Morph Image",
      "Create Morph Image from Path",
      "Create Video from Path",
      "Debug Number to Console",
      "Dictionary to Console",
      "Diffusers Hub Model Down-Loader",
      "Diffusers Model Loader",
      "Export API",
      "Image Analyze",
      "Image Aspect Ratio",
      "Image Batch",
      "Image Blank",
      "Image Blend",
      "Image Blend by Mask",
      "Image Blending Mode",
      "Image Bloom Filter",
      "Image Bounds",
      "Image Bounds to Console",
      "Image Canny Filter",
      "Image Chromatic Aberration",
      "Image Color Palette",
      "Image Crop Face",
      "Image Crop Location",
      "Image Crop Square Location",
      "Image Displacement Warp",
      "Image Dragan Photography Filter",
      "Image Edge Detection Filter",
      "Image Film Grain",
      "Image Filter Adjustments",
      "Image Flip",
      "Image Generate Gradient",
      "Image Gradient Map",
      "Image High Pass Filter",
      "Image History Loader",
      "Image Input Switch",
      "Image Levels Adjustment",
      "Image Load",
      "Image Lucy Sharpen",
      "Image Median Filter",
      "Image Mix RGB Channels",
      "Image Monitor Effects Filter",
      "Image Nova Filter",
      "Image Padding",
      "Image Paste Crop",
      "Image Paste Crop by Location",
      "Image Paste Face",
      "Image Perlin Noise",
      "Image Perlin Power Fractal",
      "Image Pixelate",
      "Image Power Noise",
      "Image Rembg (Remove Background)",
      "Image Remove Background (Alpha)",
      "Image Remove Color",
      "Image Resize",
      "Image Rotate",
      "Image Rotate Hue",
      "Image SSAO (Ambient Occlusion)",
      "Image SSDO (Direct Occlusion)",
      "Image Save",
      "Image Seamless Texture",
      "Image Select Channel",
      "Image Select Color",
      "Image Shadows and Highlights",
      "Image Size to Number",
      "Image Stitch",
      "Image Style Filter",
      "Image Threshold",
      "Image Tiled",
      "Image Transpose",
      "Image Voronoi Noise Filter",
      "Image fDOF Filter",
      "Image to Latent Mask",
      "Image to Noise",
      "Image to Seed",
      "Images to Linear",
      "Images to RGB",
      "Inset Image Bounds",
      "Integer place counter",
      "KSampler (WAS)",
      "KSampler Cycle",
      "Latent Input Switch",
      "Latent Noise Injection",
      "Latent Size to Number",
      "Latent Upscale by Factor (WAS)",
      "Load Cache",
      "Load Image Batch",
      "Load Lora",
      "Load Text File",
      "Logic Boolean",
      "Lora Input Switch",
      "Lora Loader",
      "Mask Arbitrary Region",
      "Mask Batch",
      "Mask Batch to Mask",
      "Mask Ceiling Region",
      "Mask Crop Dominant Region",
      "Mask Crop Minority Region",
      "Mask Crop Region",
      "Mask Dilate Region",
      "Mask Dominant Region",
      "Mask Erode Region",
      "Mask Fill Holes",
      "Mask Floor Region",
      "Mask Gaussian Region",
      "Mask Invert",
      "Mask Minority Region",
      "Mask Paste Region",
      "Mask Smooth Region",
      "Mask Threshold Region",
      "Masks Add",
      "Masks Combine Batch",
      "Masks Combine Regions",
      "Masks Subtract",
      "MiDaS Depth Approximation",
      "MiDaS Mask Image",
      "MiDaS Model Loader",
      "Model Input Switch",
      "Number Counter",
      "Number Input Condition",
      "Number Input Switch",
      "Number Multiple Of",
      "Number Operation",
      "Number PI",
      "Number to Float",
      "Number to Int",
      "Number to Seed",
      "Number to String",
      "Number to Text",
      "Prompt Multiple Styles Selector",
      "Prompt Styles Selector",
      "Random Number",
      "SAM Image Mask",
      "SAM Model Loader",
      "SAM Parameters",
      "SAM Parameters Combine",
      "Samples Passthrough (Stat System)",
      "Save Text File",
      "Seed",
      "String to Text",
      "Tensor Batch to Image",
      "Text Add Token by Input",
      "Text Add Tokens",
      "Text Compare",
      "Text Concatenate",
      "Text Dictionary Update",
      "Text File History Loader",
      "Text Find and Replace",
      "Text Find and Replace Input",
      "Text Find and Replace by Dictionary",
      "Text Input Switch",
      "Text List",
      "Text List Concatenate",
      "Text Load Line From File",
      "Text Multiline",
      "Text Parse A1111 Embeddings",
      "Text Parse Noodle Soup Prompts",
      "Text Parse Tokens",
      "Text Random Line",
      "Text Random Prompt",
      "Text Shuffle",
      "Text String",
      "Text String Truncate",
      "Text to Conditioning",
      "Text to Console",
      "Text to Number",
      "Text to String",
      "True Random.org Number Generator",
      "Upscale Model Loader",
      "Upscale Model Switch",
      "VAE Input Switch",
      "Video Dump Frames",
      "Write to GIF",
      "Write to Video",
      "unCLIP Checkpoint Loader"
    ],
    {
      "title_aux": "WAS Node Suite"
    }
  ],
  "https://github.com/YMC-GitHub/ymc-node-suite-comfyui": [
    [
      "Image Save",
      "Save Text File",
      "canvas-util-cal-size",
      "conditioning-util-input-switch",
      "cutoff-region-util",
      "hks-util-cal-denoise-step",
      "img-util-get-image-size",
      "img-util-switch-input-image",
      "io-util-file-list-get",
      "io-util-file-list-get-text",
      "number-util-random-num",
      "pipe-util-to-basic-pipe",
      "region-util-get-by-center-and-size",
      "region-util-get-by-lt",
      "region-util-get-crop-location-from-center-size-text",
      "region-util-get-pad-out-location-by-size",
      "text-preset-colors",
      "text-util-join-text",
      "text-util-loop-text",
      "text-util-path-list",
      "text-util-prompt-add-prompt",
      "text-util-prompt-adv-dup",
      "text-util-prompt-adv-search",
      "text-util-prompt-del",
      "text-util-prompt-dup",
      "text-util-prompt-join",
      "text-util-prompt-search",
      "text-util-prompt-shuffle",
      "text-util-prompt-std",
      "text-util-prompt-unweight",
      "text-util-random-text",
      "text-util-search-text",
      "text-util-show-text",
      "text-util-switch-text",
      "xyz-util-txt-to-int"
    ],
    {
      "title_aux": "ymc-node-suite-comfyui"
    }
  ],
  "https://github.com/YOUR-WORST-TACO/ComfyUI-TacoNodes": [
    [
      "Example",
      "TacoAnimatedLoader",
      "TacoGifMaker",
      "TacoImg2ImgAnimatedLoader",
      "TacoImg2ImgAnimatedProcessor",
      "TacoLatent"
    ],
    {
      "title_aux": "ComfyUI-TacoNodes"
    }
  ],
  "https://github.com/YinBailiang/MergeBlockWeighted_fo_ComfyUI": [
    [
      "MergeBlockWeighted"
    ],
    {
      "title_aux": "MergeBlockWeighted_fo_ComfyUI"
    }
  ],
  "https://github.com/ZHO-ZHO-ZHO/ComfyUI-Text_Image-Composite": [
    [
      "AlphaChanelAddByMask",
      "ImageCompositeBy_BG_Zho",
      "ImageCompositeBy_Zho",
      "ImageComposite_BG_Zho",
      "ImageComposite_Zho",
      "RGB_Image_Zho",
      "Text_Image_Multiline_Zho",
      "Text_Image_Zho"
    ],
    {
      "title_aux": "ComfyUI-Text_Image-Composite"
    }
  ],
  "https://github.com/ZaneA/ComfyUI-ImageReward": [
    [
      "ImageRewardLoader",
      "ImageRewardScore"
    ],
    {
      "title_aux": "ImageReward"
    }
  ],
  "https://github.com/Zuellni/ComfyUI-ExLlama": [
    [
      "ZuellniExLlamaGenerator",
      "ZuellniExLlamaLoader",
      "ZuellniTextPreview",
      "ZuellniTextReplace"
    ],
    {
      "title_aux": "ComfyUI-ExLlama"
    }
  ],
  "https://github.com/Zuellni/ComfyUI-PickScore-Nodes": [
    [
      "ZuellniPickScoreImageProcessor",
      "ZuellniPickScoreLoader",
      "ZuellniPickScoreSelector",
      "ZuellniPickScoreTextProcessor"
    ],
    {
      "title_aux": "ComfyUI PickScore Nodes"
    }
  ],
  "https://github.com/a1lazydog/ComfyUI-AudioScheduler": [
    [
      "AmplitudeToGraph",
      "AmplitudeToNumber",
      "AudioToAmplitudeGraph",
      "AudioToFFTs",
      "BatchAmplitudeSchedule",
      "ClipAmplitude",
      "GateNormalizedAmplitude",
      "LoadAudio",
      "NormalizeAmplitude",
      "NormalizedAmplitudeDrivenString",
      "NormalizedAmplitudeToGraph",
      "NormalizedAmplitudeToNumber",
      "TransientAmplitudeBasic"
    ],
    {
      "title_aux": "ComfyUI-AudioScheduler"
    }
  ],
  "https://github.com/adieyal/comfyui-dynamicprompts": [
    [
      "DPCombinatorialGenerator",
      "DPFeelingLucky",
      "DPJinja",
      "DPMagicPrompt",
      "DPOutput",
      "DPRandomGenerator"
    ],
    {
      "title_aux": "DynamicPrompts Custom Nodes"
    }
  ],
  "https://github.com/aianimation55/ComfyUI-FatLabels": [
    [
      "FatLabels"
    ],
    {
      "title_aux": "Comfy UI FatLabels"
    }
  ],
  "https://github.com/alpertunga-bile/prompt-generator-comfyui": [
    [
      "Prompt Generator"
    ],
    {
      "title_aux": "prompt-generator"
    }
  ],
  "https://github.com/alsritter/asymmetric-tiling-comfyui": [
    [
      "Asymmetric_Tiling_KSampler"
    ],
    {
      "title_aux": "asymmetric-tiling-comfyui"
    }
  ],
  "https://github.com/alt-key-project/comfyui-dream-project": [
    [
      "Analyze Palette [Dream]",
      "Beat Curve [Dream]",
      "Big Float Switch [Dream]",
      "Big Image Switch [Dream]",
      "Big Int Switch [Dream]",
      "Big Latent Switch [Dream]",
      "Big Palette Switch [Dream]",
      "Big Text Switch [Dream]",
      "Boolean To Float [Dream]",
      "Boolean To Int [Dream]",
      "Build Prompt [Dream]",
      "CSV Curve [Dream]",
      "CSV Generator [Dream]",
      "Calculation [Dream]",
      "Common Frame Dimensions [Dream]",
      "Compare Palettes [Dream]",
      "FFMPEG Video Encoder [Dream]",
      "File Count [Dream]",
      "Finalize Prompt [Dream]",
      "Float Input [Dream]",
      "Float to Log Entry [Dream]",
      "Frame Count Calculator [Dream]",
      "Frame Counter (Directory) [Dream]",
      "Frame Counter (Simple) [Dream]",
      "Frame Counter Info [Dream]",
      "Frame Counter Offset [Dream]",
      "Frame Counter Time Offset [Dream]",
      "Image Brightness Adjustment [Dream]",
      "Image Color Shift [Dream]",
      "Image Contrast Adjustment [Dream]",
      "Image Motion [Dream]",
      "Image Sequence Blend [Dream]",
      "Image Sequence Loader [Dream]",
      "Image Sequence Saver [Dream]",
      "Image Sequence Tweening [Dream]",
      "Int Input [Dream]",
      "Int to Log Entry [Dream]",
      "Laboratory [Dream]",
      "Linear Curve [Dream]",
      "Log Entry Joiner [Dream]",
      "Log File [Dream]",
      "Noise from Area Palettes [Dream]",
      "Noise from Palette [Dream]",
      "Palette Color Align [Dream]",
      "Palette Color Shift [Dream]",
      "Sample Image Area as Palette [Dream]",
      "Sample Image as Palette [Dream]",
      "Saw Curve [Dream]",
      "Sine Curve [Dream]",
      "Smooth Event Curve [Dream]",
      "String Input [Dream]",
      "String Tokenizer [Dream]",
      "String to Log Entry [Dream]",
      "Text Input [Dream]",
      "Triangle Curve [Dream]",
      "Triangle Event Curve [Dream]",
      "WAV Curve [Dream]"
    ],
    {
      "title_aux": "Dream Project Animation Nodes"
    }
  ],
  "https://github.com/andersxa/comfyui-PromptAttention": [
    [
      "CLIPAttentionMaskEncode"
    ],
    {
      "title_aux": "CLIP Directional Prompt Attention"
    }
  ],
  "https://github.com/asagi4/comfyui-prompt-control": [
    [
      "CondLinearInterpolate",
      "ConditioningCutoff",
      "EditableCLIPEncode",
      "FilterSchedule",
      "JinjaRender",
      "LoRAScheduler",
      "PCSplitSampling",
      "PromptControlSimple",
      "PromptToSchedule",
      "ScheduleToCond",
      "ScheduleToModel",
      "SimpleWildcard",
      "StringConcat"
    ],
    {
      "title_aux": "ComfyUI prompt control"
    }
  ],
  "https://github.com/aszc-dev/ComfyUI-CoreMLSuite": [
    [
      "Core ML Converter",
      "Core ML LCM Converter",
      "Core ML LoRA Loader",
      "CoreMLModelAdapter",
      "CoreMLSampler",
      "CoreMLSamplerAdvanced",
      "CoreMLUNetLoader"
    ],
    {
      "title_aux": "Core ML Suite for ComfyUI"
    }
  ],
  "https://github.com/avatechai/avatar-graph-comfyui": [
    [
      "ApplyMeshTransformAsShapeKey",
      "B_ENUM",
      "B_VECTOR3",
      "B_VECTOR4",
      "CreateShapeFlow",
      "ExportBlendshapes",
      "ExportGLTF",
      "Image Alpha Mask Merge",
      "ImageBridge",
      "LoadImageWithAlpha",
      "SAM MultiLayer",
      "Save Image With Workflow"
    ],
    {
      "author": "Avatech Limited",
      "description": "Include nodes for sam + bpy operation, that allows workflow creations for generative 2d character rig.",
      "nickname": "Avatar Graph",
      "title": "Avatar Graph",
      "title_aux": "avatar-graph-comfyui"
    }
  ],
  "https://github.com/azazeal04/ComfyUI-Styles": [
    [
      "menus"
    ],
    {
      "title_aux": "ComfyUI-Styles"
    }
  ],
  "https://github.com/badjeff/comfyui_lora_tag_loader": [
    [
      "LoraTagLoader"
    ],
    {
      "title_aux": "LoRA Tag Loader for ComfyUI"
    }
  ],
  "https://github.com/bash-j/mikey_nodes": [
    [
      "AddMetaData",
      "Batch Crop Image",
      "Batch Crop Resize Inplace",
      "Batch Load Images",
      "Batch Resize Image for SDXL",
      "Checkpoint Loader Simple Mikey",
      "Empty Latent Ratio Custom SDXL",
      "Empty Latent Ratio Select SDXL",
      "FileNamePrefix",
      "Float to String",
      "HaldCLUT",
      "Image Caption",
      "ImageBorder",
      "ImagePaste",
      "Int to String",
      "LoraSyntaxProcessor",
      "Mikey Sampler",
      "Mikey Sampler Base Only",
      "Mikey Sampler Base Only Advanced",
      "Mikey Sampler Tiled",
      "Mikey Sampler Tiled Base Only",
      "MikeySamplerTiledAdvanced",
      "OobaPrompt",
      "PresetRatioSelector",
      "Prompt With SDXL",
      "Prompt With Style",
      "Prompt With Style V2",
      "Prompt With Style V3",
      "Range Float",
      "Range Integer",
      "Ratio Advanced",
      "Resize Image for SDXL",
      "Save Image If True",
      "Save Image With Prompt Data",
      "Save Images Mikey",
      "Save Images No Display",
      "SaveMetaData",
      "SearchAndReplace",
      "Seed String",
      "Style Conditioner",
      "Style Conditioner Base Only",
      "Text2InputOr3rdOption",
      "TextCombinations",
      "TextCombinations3",
      "TextPreserve",
      "Upscale Tile Calculator",
      "Wildcard Processor",
      "WildcardAndLoraSyntaxProcessor",
      "WildcardOobaPrompt"
    ],
    {
      "title_aux": "Mikey Nodes"
    }
  ],
  "https://github.com/biegert/ComfyUI-CLIPSeg/raw/main/custom_nodes/clipseg.py": [
    [
      "CLIPSeg",
      "CombineSegMasks"
    ],
    {
      "title_aux": "CLIPSeg"
    }
  ],
  "https://github.com/bmad4ever/comfyui_ab_samplercustom": [
    [
      "AB SamplerCustom (experimental)"
    ],
    {
      "title_aux": "comfyui_ab_sampler"
    }
  ],
  "https://github.com/bmad4ever/comfyui_bmad_nodes": [
    [
      "AdaptiveThresholding",
      "Add String To Many",
      "AddAlpha",
      "AdjustRect",
      "AnyToAny",
      "BoundingRect (contours)",
      "BuildColorRangeAdvanced (hsv)",
      "BuildColorRangeHSV (hsv)",
      "CLAHE",
      "CLIPEncodeMultiple",
      "CLIPEncodeMultipleAdvanced",
      "ChameleonMask",
      "CheckpointLoader (dirty)",
      "CheckpointLoaderSimple (dirty)",
      "Color (RGB)",
      "Color (hexadecimal)",
      "Color Clip",
      "Color Clip (advanced)",
      "Color Clip ADE20k",
      "ColorDictionary",
      "ColorDictionary (custom)",
      "Conditioning (combine multiple)",
      "Conditioning (combine selective)",
      "Conditioning Grid (cond)",
      "Conditioning Grid (string)",
      "Conditioning Grid (string) Advanced",
      "Contour To Mask",
      "Contours",
      "ControlNetHadamard",
      "ControlNetHadamard (manual)",
      "ConvertImg",
      "CopyMakeBorder",
      "CreateRequestMetadata",
      "DistanceTransform",
      "Draw Contour(s)",
      "EqualizeHistogram",
      "FadeMaskEdges",
      "Filter Contour",
      "FindComplementaryColor",
      "FindThreshold",
      "FlatLatentsIntoSingleGrid",
      "Framed Mask Grab Cut",
      "Framed Mask Grab Cut 2",
      "FromListGetColors",
      "FromListGetConds",
      "FromListGetImages",
      "FromListGetLatents",
      "FromListGetModels",
      "FromListGetStrings",
      "Get Contour from list",
      "Get Models",
      "Get Prompt",
      "HypernetworkLoader (dirty)",
      "ImageBatchToList",
      "InRange (hsv)",
      "Inpaint",
      "Input/String to Int Array",
      "KMeansColor",
      "Load 64 Encoded Image",
      "LoraLoader (dirty)",
      "MaskGrid N KSamplers Advanced",
      "Merge Latent Batch Gridwise",
      "MonoMerge",
      "MorphologicOperation",
      "MorphologicSkeletoning",
      "OtsuThreshold",
      "RGB to HSV",
      "Rect Grab Cut",
      "Repeat Into Grid (image)",
      "Repeat Into Grid (latent)",
      "RequestInputs",
      "SampleColorHSV",
      "Save Image (api)",
      "SeamlessClone",
      "SeamlessClone (simple)",
      "SetRequestStateToComplete",
      "String",
      "String to Float",
      "String to Integer",
      "ToColorList",
      "ToCondList",
      "ToImageList",
      "ToLatentList",
      "ToModelList",
      "ToStringList",
      "VAEEncodeBatch"
    ],
    {
      "title_aux": "Bmad Nodes"
    }
  ],
  "https://github.com/bradsec/ComfyUI_ResolutionSelector": [
    [
      "ResolutionSelector"
    ],
    {
      "title_aux": "ResolutionSelector for ComfyUI"
    }
  ],
  "https://github.com/braintacles/braintacles-comfyui-nodes": [
    [
      "CLIPTextEncodeSDXL-Multi-IO",
      "CLIPTextEncodeSDXL-Pipe",
      "Empty Latent Image from Aspect-Ratio",
      "Random Find and Replace",
      "VAE Decode Pipe",
      "VAE Decode Tiled Pipe",
      "VAE Encode Pipe",
      "VAE Encode Tiled Pipe"
    ],
    {
      "title_aux": "braintacles-nodes"
    }
  ],
  "https://github.com/bronkula/comfyui-fitsize": [
    [
      "FitSizeFromImage",
      "FitSizeFromInt",
      "FitSizeResizeImage",
      "LoadToFitResizeImage"
    ],
    {
      "title_aux": "comfyui-fitsize"
    }
  ],
  "https://github.com/budihartono/comfyui_otonx_nodes": [
    [
      "OTX Integer Multiple Inputs 4",
      "OTX Integer Multiple Inputs 5",
      "OTX Integer Multiple Inputs 6",
      "OTX KSampler Feeder",
      "OTX Versatile Multiple Inputs 4",
      "OTX Versatile Multiple Inputs 5",
      "OTX Versatile Multiple Inputs 6"
    ],
    {
      "title_aux": "Otonx's Custom Nodes"
    }
  ],
  "https://github.com/bvhari/ComfyUI_ImageProcessing": [
    [
      "BilateralFilter",
      "Brightness",
      "Gamma",
      "Hue",
      "Saturation",
      "SigmoidCorrection",
      "UnsharpMask"
    ],
    {
      "title_aux": "ImageProcessing"
    }
  ],
  "https://github.com/bvhari/ComfyUI_LatentToRGB": [
    [
      "LatentToRGB"
    ],
    {
      "title_aux": "LatentToRGB"
    }
  ],
  "https://github.com/bvhari/ComfyUI_PerpNeg": [
    [
      "KSamplerAdvancedPerpNeg"
    ],
    {
      "title_aux": "ComfyUI_PerpNeg [WIP]"
    }
  ],
  "https://github.com/bvhari/ComfyUI_PerpWeight": [
    [
      "CLIPTextEncodePerpWeight"
    ],
    {
      "title_aux": "ComfyUI_PerpWeight"
    }
  ],
  "https://github.com/catscandrive/comfyui-imagesubfolders/raw/main/loadImageWithSubfolders.py": [
    [
      "LoadImagewithSubfolders"
    ],
    {
      "title_aux": "Image loader with subfolders"
    }
  ],
  "https://github.com/chflame163/ComfyUI_MSSpeech_TTS": [
    [
      "MicorsoftSpeech_TTS"
    ],
    {
      "title_aux": "ComfyUI_MSSpeech_TTS"
    }
  ],
  "https://github.com/chibiace/ComfyUI-Chibi-Nodes": [
    [
      "ConditionText",
      "ImageTool",
      "LoadEmbedding",
      "Loader",
      "Prompts",
      "SaveImages",
      "Textbox",
      "Wildcards"
    ],
    {
      "title_aux": "ComfyUI-Chibi-Nodes"
    }
  ],
  "https://github.com/chrisgoringe/cg-image-picker": [
    [
      "Preview Chooser",
      "Preview Chooser Fabric"
    ],
    {
      "title_aux": "Image chooser"
    }
  ],
  "https://github.com/chrisgoringe/cg-noise": [
    [
      "Hijack",
      "KSampler Advanced with Variations",
      "KSampler with Variations",
      "UnHijack"
    ],
    {
      "title_aux": "Variation seeds"
    }
  ],
  "https://github.com/chrisgoringe/cg-use-everywhere": [
    [
      "Seed Everywhere"
    ],
    {
      "title_aux": "Use Everywhere (UE Nodes)"
    }
  ],
  "https://github.com/city96/ComfyUI_ColorMod": [
    [
      "ColorModEdges",
      "ColorModPivot",
      "LoadImageHighPrec",
      "PreviewImageHighPrec",
      "SaveImageHighPrec"
    ],
    {
      "title_aux": "ComfyUI_ColorMod"
    }
  ],
  "https://github.com/city96/ComfyUI_DiT": [
    [
      "DiTCheckpointLoader",
      "DiTCheckpointLoaderSimple",
      "DiTLabelCombine",
      "DiTLabelSelect",
      "DiTSampler"
    ],
    {
      "title_aux": "ComfyUI_DiT [WIP]"
    }
  ],
  "https://github.com/city96/ComfyUI_ExtraModels": [
    [
      "DiTCondLabelEmpty",
      "DiTCondLabelSelect",
      "DitCheckpointLoader",
      "ExtraVAELoader",
      "PixArtCheckpointLoader",
      "PixArtDPMSampler",
      "PixArtResolutionSelect",
      "PixArtT5TextEncode",
      "T5TextEncode",
      "T5v11Loader"
    ],
    {
      "title_aux": "Extra Models for ComfyUI"
    }
  ],
  "https://github.com/city96/ComfyUI_NetDist": [
    [
      "FetchRemote",
      "QueueRemote"
    ],
    {
      "title_aux": "ComfyUI_NetDist"
    }
  ],
  "https://github.com/city96/SD-Advanced-Noise": [
    [
      "LatentGaussianNoise",
      "MathEncode"
    ],
    {
      "title_aux": "SD-Advanced-Noise"
    }
  ],
  "https://github.com/city96/SD-Latent-Interposer": [
    [
      "LatentInterposer"
    ],
    {
      "title_aux": "Latent-Interposer"
    }
  ],
  "https://github.com/city96/SD-Latent-Upscaler": [
    [
      "LatentUpscaler"
    ],
    {
      "title_aux": "SD-Latent-Upscaler"
    }
  ],
  "https://github.com/civitai/comfy-nodes": [
    [
      "CivitAI_Checkpoint_Loader",
      "CivitAI_Lora_Loader"
    ],
    {
      "title_aux": "comfy-nodes"
    }
  ],
  "https://github.com/comfyanonymous/ComfyUI": [
    [
      "BasicScheduler",
      "CLIPLoader",
      "CLIPMergeSimple",
      "CLIPSave",
      "CLIPSetLastLayer",
      "CLIPTextEncode",
      "CLIPTextEncodeSDXL",
      "CLIPTextEncodeSDXLRefiner",
      "CLIPVisionEncode",
      "CLIPVisionLoader",
      "Canny",
      "CheckpointLoader",
      "CheckpointLoaderSimple",
      "CheckpointSave",
      "ConditioningAverage",
      "ConditioningCombine",
      "ConditioningConcat",
      "ConditioningSetArea",
      "ConditioningSetAreaPercentage",
      "ConditioningSetMask",
      "ConditioningSetTimestepRange",
      "ConditioningZeroOut",
      "ControlNetApply",
      "ControlNetApplyAdvanced",
      "ControlNetLoader",
      "CropMask",
      "DiffControlNetLoader",
      "DiffusersLoader",
      "DualCLIPLoader",
      "EmptyImage",
      "EmptyLatentImage",
      "ExponentialScheduler",
      "FeatherMask",
      "FlipSigmas",
      "FreeU",
      "FreeU_V2",
      "GLIGENLoader",
      "GLIGENTextBoxApply",
      "GrowMask",
      "HyperTile",
      "HypernetworkLoader",
      "ImageBatch",
      "ImageBlend",
      "ImageBlur",
      "ImageColorToMask",
      "ImageCompositeMasked",
      "ImageCrop",
      "ImageInvert",
      "ImageOnlyCheckpointLoader",
      "ImagePadForOutpaint",
      "ImageQuantize",
      "ImageScale",
      "ImageScaleBy",
      "ImageScaleToTotalPixels",
      "ImageSharpen",
      "ImageToMask",
      "ImageUpscaleWithModel",
      "InvertMask",
      "JoinImageWithAlpha",
      "KSampler",
      "KSamplerAdvanced",
      "KSamplerSelect",
      "KarrasScheduler",
      "LatentAdd",
      "LatentBlend",
      "LatentComposite",
      "LatentCompositeMasked",
      "LatentCrop",
      "LatentFlip",
      "LatentFromBatch",
      "LatentInterpolate",
      "LatentMultiply",
      "LatentRotate",
      "LatentSubtract",
      "LatentUpscale",
      "LatentUpscaleBy",
      "LoadImage",
      "LoadImageMask",
      "LoadLatent",
      "LoraLoader",
      "LoraLoaderModelOnly",
      "MaskComposite",
      "MaskToImage",
      "ModelMergeAdd",
      "ModelMergeBlocks",
      "ModelMergeSimple",
      "ModelMergeSubtract",
      "ModelSamplingContinuousEDM",
      "ModelSamplingDiscrete",
      "PatchModelAddDownscale",
      "PolyexponentialScheduler",
      "PorterDuffImageComposite",
      "PreviewImage",
      "RebatchLatents",
      "RepeatImageBatch",
      "RepeatLatentBatch",
      "RescaleCFG",
      "SVD_img2vid_Conditioning",
      "SamplerCustom",
      "SamplerDPMPP_2M_SDE",
      "SamplerDPMPP_SDE",
      "SaveAnimatedPNG",
      "SaveAnimatedWEBP",
      "SaveImage",
      "SaveLatent",
      "SetLatentNoiseMask",
      "SolidMask",
      "SplitImageWithAlpha",
      "SplitSigmas",
      "StyleModelApply",
      "StyleModelLoader",
      "TomePatchModel",
      "UNETLoader",
      "UpscaleModelLoader",
      "VAEDecode",
      "VAEDecodeTiled",
      "VAEEncode",
      "VAEEncodeForInpaint",
      "VAEEncodeTiled",
      "VAELoader",
      "VAESave",
      "VPScheduler",
      "VideoLinearCFGGuidance",
      "unCLIPCheckpointLoader",
      "unCLIPConditioning"
    ],
    {
      "title_aux": "ComfyUI"
    }
  ],
  "https://github.com/comfyanonymous/ComfyUI_experiments": [
    [
      "ModelMergeBlockNumber",
      "ModelMergeSDXL",
      "ModelMergeSDXLDetailedTransformers",
      "ModelMergeSDXLTransformers",
      "ModelSamplerTonemapNoiseTest",
      "ReferenceOnlySimple",
      "RescaleClassifierFreeGuidanceTest",
      "TonemapNoiseWithRescaleCFG"
    ],
    {
      "title_aux": "ComfyUI_experiments"
    }
  ],
  "https://github.com/coreyryanhanson/ComfyQR": [
    [
      "comfy-qr-by-image-size",
      "comfy-qr-by-module-size",
      "comfy-qr-by-module-split",
      "comfy-qr-mask_errors"
    ],
    {
      "title_aux": "ComfyQR"
    }
  ],
  "https://github.com/coreyryanhanson/ComfyQR-scanning-nodes": [
    [
      "comfy-qr-read",
      "comfy-qr-validate"
    ],
    {
      "title_aux": "ComfyQR-scanning-nodes"
    }
  ],
  "https://github.com/cubiq/ComfyUI_IPAdapter_plus": [
    [
      "IPAdapterApply",
      "IPAdapterApplyEncoded",
      "IPAdapterEncoder",
      "IPAdapterLoadEmbeds",
      "IPAdapterModelLoader",
      "IPAdapterSaveEmbeds",
      "PrepImageForClipVision"
    ],
    {
      "title_aux": "ComfyUI_IPAdapter_plus"
    }
  ],
  "https://github.com/cubiq/ComfyUI_SimpleMath": [
    [
      "SimpleMath",
      "SimpleMathDebug"
    ],
    {
      "title_aux": "Simple Math"
    }
  ],
  "https://github.com/cubiq/ComfyUI_essentials": [
    [
      "ConsoleDebug+",
      "GetImageSize+",
      "ImageCASharpening+",
      "ImageCrop+",
      "ImageDesaturate+",
      "ImageEnhanceDifference+",
      "ImageFlip+",
      "ImagePosterize+",
      "ImageResize+",
      "MaskBlur+",
      "MaskFlip+",
      "MaskPreview+",
      "ModelCompile+",
      "SimpleMath+"
    ],
    {
      "title_aux": "ComfyUI Essentials"
    }
  ],
  "https://github.com/dagthomas/comfyui_dagthomas": [
    [
      "CSL",
      "CSVPromptGenerator",
      "PromptGenerator"
    ],
    {
      "title_aux": "SDXL Auto Prompter"
    }
  ],
  "https://github.com/dawangraoming/ComfyUI_ksampler_gpu/raw/main/ksampler_gpu.py": [
    [
      "KSamplerAdvancedGPU",
      "KSamplerGPU"
    ],
    {
      "title_aux": "KSampler GPU"
    }
  ],
  "https://github.com/daxthin/facedetailer": [
    [
      "DZ_Face_Detailer"
    ],
    {
      "title_aux": "facedetailer"
    }
  ],
  "https://github.com/dimtoneff/ComfyUI-PixelArt-Detector": [
    [
      "PixelArtAddDitherPattern",
      "PixelArtDetectorConverter",
      "PixelArtDetectorSave",
      "PixelArtDetectorToImage",
      "PixelArtLoadPalettes"
    ],
    {
      "title_aux": "ComfyUI PixelArt Detector"
    }
  ],
  "https://github.com/diontimmer/ComfyUI-Vextra-Nodes": [
    [
      "Add Text To Image",
      "Apply Instagram Filter",
      "Create Solid Color",
      "Flatten Colors",
      "Generate Noise Image",
      "GlitchThis Effect",
      "Hue Rotation",
      "Load Picture Index",
      "Pixel Sort",
      "Play Sound At Execution",
      "Prettify Prompt Using distilgpt2",
      "Swap Color Mode"
    ],
    {
      "title_aux": "ComfyUI-Vextra-Nodes"
    }
  ],
  "https://github.com/drago87/ComfyUI_Dragos_Nodes": [
    [
      "file_padding",
      "image_info",
      "lora_loader",
      "vae_loader"
    ],
    {
      "title_aux": "ComfyUI_Dragos_Nodes"
    }
  ],
  "https://github.com/drustan-hawk/primitive-types": [
    [
      "float",
      "int",
      "string",
      "string_multiline"
    ],
    {
      "title_aux": "primitive-types"
    }
  ],
  "https://github.com/ealkanat/comfyui_easy_padding": [
    [
      "comfyui-easy-padding"
    ],
    {
      "title_aux": "ComfyUI Easy Padding"
    }
  ],
  "https://github.com/evanspearman/ComfyMath": [
    [
      "CM_BoolBinaryOperation",
      "CM_BoolToInt",
      "CM_BoolUnaryOperation",
      "CM_BreakoutVec2",
      "CM_BreakoutVec3",
      "CM_BreakoutVec4",
      "CM_ComposeVec2",
      "CM_ComposeVec3",
      "CM_ComposeVec4",
      "CM_FloatBinaryCondition",
      "CM_FloatBinaryOperation",
      "CM_FloatToInt",
      "CM_FloatToNumber",
      "CM_FloatUnaryCondition",
      "CM_FloatUnaryOperation",
      "CM_IntBinaryCondition",
      "CM_IntBinaryOperation",
      "CM_IntToBool",
      "CM_IntToFloat",
      "CM_IntToNumber",
      "CM_IntUnaryCondition",
      "CM_IntUnaryOperation",
      "CM_NearestSDXLResolution",
      "CM_NumberBinaryCondition",
      "CM_NumberBinaryOperation",
      "CM_NumberToFloat",
      "CM_NumberToInt",
      "CM_NumberUnaryCondition",
      "CM_NumberUnaryOperation",
      "CM_SDXLResolution",
      "CM_Vec2BinaryCondition",
      "CM_Vec2BinaryOperation",
      "CM_Vec2ScalarOperation",
      "CM_Vec2ToScalarBinaryOperation",
      "CM_Vec2ToScalarUnaryOperation",
      "CM_Vec2UnaryCondition",
      "CM_Vec2UnaryOperation",
      "CM_Vec3BinaryCondition",
      "CM_Vec3BinaryOperation",
      "CM_Vec3ScalarOperation",
      "CM_Vec3ToScalarBinaryOperation",
      "CM_Vec3ToScalarUnaryOperation",
      "CM_Vec3UnaryCondition",
      "CM_Vec3UnaryOperation",
      "CM_Vec4BinaryCondition",
      "CM_Vec4BinaryOperation",
      "CM_Vec4ScalarOperation",
      "CM_Vec4ToScalarBinaryOperation",
      "CM_Vec4ToScalarUnaryOperation",
      "CM_Vec4UnaryCondition",
      "CM_Vec4UnaryOperation"
    ],
    {
      "title_aux": "ComfyMath"
    }
  ],
  "https://github.com/fexli/fexli-util-node-comfyui": [
    [
      "FEColor2Image",
      "FEColorOut",
      "FEImagePadForOutpaint",
      "FERandomizedColor2Image"
    ],
    {
      "title_aux": "fexli-util-node-comfyui"
    }
  ],
  "https://github.com/filipemeneses/comfy_pixelization": [
    [
      "Pixelization"
    ],
    {
      "title_aux": "Pixelization"
    }
  ],
  "https://github.com/fitCorder/fcSuite/raw/main/fcSuite.py": [
    [
      "fcFloat",
      "fcFloatMatic",
      "fcInteger"
    ],
    {
      "title_aux": "fcSuite"
    }
  ],
  "https://github.com/flyingshutter/As_ComfyUI_CustomNodes": [
    [
      "BatchIndex_AS",
      "CropImage_AS",
      "ImageMixMasked_As",
      "ImageToMask_AS",
      "Increment_AS",
      "Int2Any_AS",
      "LatentAdd_AS",
      "LatentMixMasked_As",
      "LatentMix_AS",
      "LatentToImages_AS",
      "LoadLatent_AS",
      "MapRange_AS",
      "MaskToImage_AS",
      "Math_AS",
      "NoiseImage_AS",
      "Number2Float_AS",
      "Number2Int_AS",
      "Number_AS",
      "SaveLatent_AS",
      "TextToImage_AS",
      "TextWildcardList_AS"
    ],
    {
      "title_aux": "As_ComfyUI_CustomNodes"
    }
  ],
  "https://github.com/gemell1/ComfyUI_GMIC": [
    [
      "GmicCliWrapper"
    ],
    {
      "title_aux": "ComfyUI_GMIC"
    }
  ],
  "https://github.com/giriss/comfy-image-saver": [
    [
      "Cfg Literal",
      "Checkpoint Selector",
      "Int Literal",
      "Sampler Selector",
      "Save Image w/Metadata",
      "Scheduler Selector",
      "Seed Generator",
      "String Literal",
      "Width/Height Literal"
    ],
    {
      "title_aux": "Save Image with Generation Metadata"
    }
  ],
  "https://github.com/guoyk93/yk-node-suite-comfyui": [
    [
      "YKImagePadForOutpaint",
      "YKMaskToImage"
    ],
    {
      "title_aux": "y.k.'s ComfyUI node suite"
    }
  ],
  "https://github.com/hhhzzyang/Comfyui_Lama": [
    [
      "LamaApply",
      "LamaModelLoader",
      "YamlConfigLoader"
    ],
    {
      "title_aux": "Comfyui-Lama"
    }
  ],
  "https://github.com/hnmr293/ComfyUI-nodes-hnmr": [
    [
      "CLIPIter",
      "Dict2Model",
      "GridImage",
      "ImageBlend2",
      "KSamplerOverrided",
      "KSamplerSetting",
      "KSamplerXYZ",
      "LatentToHist",
      "LatentToImage",
      "ModelIter",
      "RandomLatentImage",
      "SaveStateDict",
      "SaveText",
      "StateDictLoader",
      "StateDictMerger",
      "StateDictMergerBlockWeighted",
      "StateDictMergerBlockWeightedMulti",
      "VAEDecodeBatched",
      "VAEEncodeBatched",
      "VAEIter"
    ],
    {
      "title_aux": "ComfyUI-nodes-hnmr"
    }
  ],
  "https://github.com/hustille/ComfyUI_Fooocus_KSampler": [
    [
      "KSampler With Refiner (Fooocus)"
    ],
    {
      "title_aux": "ComfyUI_Fooocus_KSampler"
    }
  ],
  "https://github.com/hustille/ComfyUI_hus_utils": [
    [
      "3way Prompt Styler",
      "Batch State",
      "Date Time Format",
      "Debug Extra",
      "Fetch widget value",
      "Text Hash"
    ],
    {
      "title_aux": "hus' utils for ComfyUI"
    }
  ],
  "https://github.com/hylarucoder/ComfyUI-Eagle-PNGInfo": [
    [
      "EagleImageNode",
      "SDXLPromptStyler",
      "SDXLPromptStylerAdvanced",
      "SDXLResolutionPresets"
    ],
    {
      "title_aux": "Eagle PNGInfo"
    }
  ],
  "https://github.com/idrirap/ComfyUI-Lora-Auto-Trigger-Words": [
    [
      "FusionText",
      "LoraLoaderAdvanced",
      "LoraLoaderStackedAdvanced",
      "LoraLoaderStackedVanilla",
      "LoraLoaderVanilla",
      "Randomizer",
      "TagsFormater",
      "TagsSelector",
      "TextInputBasic"
    ],
    {
      "title_aux": "ComfyUI-Lora-Auto-Trigger-Words"
    }
  ],
  "https://github.com/imb101/ComfyUI-FaceSwap": [
    [
      "FaceSwapNode"
    ],
    {
      "title_aux": "FaceSwap"
    }
  ],
  "https://github.com/jags111/ComfyUI_Jags_VectorMagic": [
    [
      "CircularVAEDecode",
      "my unique name",
      "xy_Tiling_KSampler"
    ],
    {
      "title_aux": "ComfyUI_Jags_VectorMagic"
    }
  ],
  "https://github.com/jags111/efficiency-nodes-comfyui": [
    [
      "AnimateDiff Script",
      "Apply ControlNet Stack",
      "Control Net Stacker",
      "Eff. Loader SDXL",
      "Efficient Loader",
      "HighRes-Fix Script",
      "Image Overlay",
      "Join XY Inputs of Same Type",
      "KSampler (Efficient)",
      "KSampler Adv. (Efficient)",
      "KSampler SDXL (Eff.)",
      "LoRA Stacker",
      "Manual XY Entry Info",
      "Noise Control Script",
      "Pack SDXL Tuple",
      "Tiled Upscaler Script",
      "Unpack SDXL Tuple",
      "XY Input: Add/Return Noise",
      "XY Input: Aesthetic Score",
      "XY Input: CFG Scale",
      "XY Input: Checkpoint",
      "XY Input: Clip Skip",
      "XY Input: Control Net",
      "XY Input: Control Net Plot",
      "XY Input: Denoise",
      "XY Input: LoRA",
      "XY Input: LoRA Plot",
      "XY Input: LoRA Stacks",
      "XY Input: Manual XY Entry",
      "XY Input: Prompt S/R",
      "XY Input: Refiner On/Off",
      "XY Input: Sampler/Scheduler",
      "XY Input: Seeds++ Batch",
      "XY Input: Steps",
      "XY Input: VAE",
      "XY Plot"
    ],
    {
      "title_aux": "Efficiency Nodes for ComfyUI Version 2.0+"
    }
  ],
  "https://github.com/jjkramhoeft/ComfyUI-Jjk-Nodes": [
    [
      "JjkConcat",
      "JjkShowText",
      "JjkText",
      "SDXLRecommendedImageSize"
    ],
    {
      "title_aux": "ComfyUI-Jjk-Nodes"
    }
  ],
  "https://github.com/jojkaart/ComfyUI-sampler-lcm-alternative": [
    [
      "LCMScheduler",
      "SamplerLCMAlternative",
      "SamplerLCMCycle"
    ],
    {
      "title_aux": "ComfyUI-sampler-lcm-alternative"
    }
  ],
  "https://github.com/ka-puna/comfyui-yanc": [
    [
      "YANC.ConcatStrings",
      "YANC.FormatDatetimeString",
      "YANC.GetWidgetValueString",
      "YANC.IntegerCaster",
      "YANC.MultilineString",
      "YANC.TruncateString"
    ],
    {
      "title_aux": "comfyui-yanc"
    }
  ],
  "https://github.com/kijai/ComfyUI-KJNodes": [
    [
      "BatchCLIPSeg",
      "BatchCropFromMask",
      "BatchCropFromMaskAdvanced",
      "BatchUncrop",
      "BatchUncropAdvanced",
      "BboxToInt",
      "ColorMatch",
      "ColorToMask",
      "ConditioningMultiCombine",
      "ConditioningSetMaskAndCombine",
      "ConditioningSetMaskAndCombine3",
      "ConditioningSetMaskAndCombine4",
      "ConditioningSetMaskAndCombine5",
      "CreateAudioMask",
      "CreateFadeMask",
      "CreateFadeMaskAdvanced",
      "CreateFluidMask",
      "CreateGradientMask",
      "CreateMagicMask",
      "CreateShapeMask",
      "CreateTextMask",
      "CreateVoronoiMask",
      "CrossFadeImages",
      "EmptyLatentImagePresets",
      "FloatConstant",
      "GetImageRangeFromBatch",
      "GrowMaskWithBlur",
      "INTConstant",
      "ImageBatchTestPattern",
      "ImageConcanate",
      "ImageGridComposite2x2",
      "ImageGridComposite3x3",
      "OffsetMask",
      "ReplaceImagesInBatch",
      "ResizeMask",
      "ReverseImageBatch",
      "RoundMask",
      "SaveImageWithAlpha",
      "SomethingToString",
      "SplitBboxes",
      "VRAM_Debug",
      "WidgetToString"
    ],
    {
      "title_aux": "KJNodes for ComfyUI"
    }
  ],
  "https://github.com/kijai/ComfyUI-SVD": [
    [
      "SVDimg2vid"
    ],
    {
      "title_aux": "ComfyUI-SVD"
    }
  ],
  "https://github.com/kinfolk0117/ComfyUI_GradientDeepShrink": [
    [
      "GradientPatchModelAddDownscale"
    ],
    {
      "title_aux": "ComfyUI_GradientDeepShrink"
    }
  ],
  "https://github.com/kinfolk0117/ComfyUI_SimpleTiles": [
    [
      "TileCalc",
      "TileMerge",
      "TileSplit"
    ],
    {
      "title_aux": "SimpleTiles"
    }
  ],
  "https://github.com/kinfolk0117/ComfyUI_TiledIPAdapter": [
    [
      "TiledIPAdapter"
    ],
    {
      "title_aux": "TiledIPAdapter"
    }
  ],
  "https://github.com/kohya-ss/ControlNet-LLLite-ComfyUI": [
    [
      "LLLiteLoader"
    ],
    {
      "title_aux": "ControlNet-LLLite-ComfyUI"
    }
  ],
  "https://github.com/komojini/ComfyUI_SDXL_DreamBooth_LoRA_CustomNodes": [
    [
      "XL DreamBooth LoRA",
      "XLDB_LoRA"
    ],
    {
      "title_aux": "ComfyUI_SDXL_DreamBooth_LoRA_CustomNodes"
    }
  ],
  "https://github.com/kwaroran/abg-comfyui": [
    [
      "Remove Image Background (abg)"
    ],
    {
      "title_aux": "abg-comfyui"
    }
  ],
  "https://github.com/laksjdjf/IPAdapter-ComfyUI": [
    [
      "IPAdapter",
      "ImageCrop"
    ],
    {
      "title_aux": "IPAdapter-ComfyUI"
    }
  ],
  "https://github.com/laksjdjf/LCMSampler-ComfyUI": [
    [
      "SamplerLCM",
      "TAESDLoader"
    ],
    {
      "title_aux": "LCMSampler-ComfyUI"
    }
  ],
  "https://github.com/laksjdjf/LoRA-Merger-ComfyUI": [
    [
      "LoraLoaderFromWeight",
      "LoraLoaderWeightOnly",
      "LoraMerge",
      "LoraSave"
    ],
    {
      "title_aux": "LoRA-Merger-ComfyUI"
    }
  ],
  "https://github.com/laksjdjf/attention-couple-ComfyUI": [
    [
      "Attention couple"
    ],
    {
      "title_aux": "attention-couple-ComfyUI"
    }
  ],
  "https://github.com/laksjdjf/cd-tuner_negpip-ComfyUI": [
    [
      "CDTuner",
      "Negapip",
      "Negpip"
    ],
    {
      "title_aux": "cd-tuner_negpip-ComfyUI"
    }
  ],
  "https://github.com/laksjdjf/pfg-ComfyUI": [
    [
      "PFG"
    ],
    {
      "title_aux": "pfg-ComfyUI"
    }
  ],
  "https://github.com/lilly1987/ComfyUI_node_Lilly": [
    [
      "CheckpointLoaderSimpleText",
      "LoraLoaderText",
      "LoraLoaderTextRandom",
      "Random_Sampler",
      "VAELoaderDecode"
    ],
    {
      "title_aux": "simple wildcard for ComfyUI"
    }
  ],
  "https://github.com/lordgasmic/ComfyUI-Wildcards/raw/master/wildcards.py": [
    [
      "CLIPTextEncodeWithWildcards"
    ],
    {
      "title_aux": "Wildcards"
    }
  ],
  "https://github.com/lrzjason/ComfyUIJasonNode/raw/main/SDXLMixSampler.py": [
    [
      "SDXLMixSampler"
    ],
    {
      "title_aux": "ComfyUIJasonNode"
    }
  ],
  "https://github.com/ltdrdata/ComfyUI-Impact-Pack": [
    [
      "AddMask",
      "BasicPipeToDetailerPipe",
      "BasicPipeToDetailerPipeSDXL",
      "BboxDetectorCombined",
      "BboxDetectorCombined_v2",
      "BboxDetectorForEach",
      "BboxDetectorSEGS",
      "BitwiseAndMask",
      "BitwiseAndMaskForEach",
      "CLIPSegDetectorProvider",
      "CfgScheduleHookProvider",
      "CombineRegionalPrompts",
      "CoreMLDetailerHookProvider",
      "DenoiseScheduleHookProvider",
      "DetailerForEach",
      "DetailerForEachDebug",
      "DetailerForEachDebugPipe",
      "DetailerForEachPipe",
      "DetailerPipeToBasicPipe",
      "EditBasicPipe",
      "EditDetailerPipe",
      "EditDetailerPipeSDXL",
      "EmptySegs",
      "FaceDetailer",
      "FaceDetailerPipe",
      "FromBasicPipe",
      "FromBasicPipe_v2",
      "FromDetailerPipe",
      "FromDetailerPipeSDXL",
      "FromDetailerPipe_v2",
      "ImageListToImageBatch",
      "ImageMaskSwitch",
      "ImageReceiver",
      "ImageSender",
      "ImpactAssembleSEGS",
      "ImpactCombineConditionings",
      "ImpactCompare",
      "ImpactConditionalBranch",
      "ImpactConditionalStopIteration",
      "ImpactControlBridge",
      "ImpactControlNetApplySEGS",
      "ImpactDecomposeSEGS",
      "ImpactDilateMask",
      "ImpactDilate_Mask_SEG_ELT",
      "ImpactDummyInput",
      "ImpactEdit_SEG_ELT",
      "ImpactFloat",
      "ImpactFrom_SEG_ELT",
      "ImpactHFTransformersClassifierProvider",
      "ImpactImageBatchToImageList",
      "ImpactImageInfo",
      "ImpactInt",
      "ImpactInversedSwitch",
      "ImpactIsNotEmptySEGS",
      "ImpactKSamplerAdvancedBasicPipe",
      "ImpactKSamplerBasicPipe",
      "ImpactLogger",
      "ImpactMakeImageBatch",
      "ImpactMakeImageList",
      "ImpactMinMax",
      "ImpactNeg",
      "ImpactNodeSetMuteState",
      "ImpactQueueTrigger",
      "ImpactQueueTriggerCountdown",
      "ImpactSEGSClassify",
      "ImpactSEGSConcat",
      "ImpactSEGSLabelFilter",
      "ImpactSEGSOrderedFilter",
      "ImpactSEGSPicker",
      "ImpactSEGSRangeFilter",
      "ImpactSEGSToMaskBatch",
      "ImpactSEGSToMaskList",
      "ImpactScaleBy_BBOX_SEG_ELT",
      "ImpactSegsAndMask",
      "ImpactSegsAndMaskForEach",
      "ImpactSetWidgetValue",
      "ImpactSimpleDetectorSEGS",
      "ImpactSimpleDetectorSEGSPipe",
      "ImpactSimpleDetectorSEGS_for_AD",
      "ImpactSleep",
      "ImpactStringSelector",
      "ImpactSwitch",
      "ImpactValueReceiver",
      "ImpactValueSender",
      "ImpactWildcardEncode",
      "ImpactWildcardProcessor",
      "IterativeImageUpscale",
      "IterativeLatentUpscale",
      "KSamplerAdvancedProvider",
      "KSamplerProvider",
      "LatentPixelScale",
      "LatentReceiver",
      "LatentSender",
      "LatentSwitch",
      "MMDetDetectorProvider",
      "MMDetLoader",
      "MaskDetailerPipe",
      "MaskListToMaskBatch",
      "MaskPainter",
      "MaskToSEGS",
      "MasksToMaskList",
      "MediaPipeFaceMeshToSEGS",
      "NoiseInjectionDetailerHookProvider",
      "NoiseInjectionHookProvider",
      "ONNXDetectorProvider",
      "ONNXDetectorSEGS",
      "PixelKSampleHookCombine",
      "PixelKSampleUpscalerProvider",
      "PixelKSampleUpscalerProviderPipe",
      "PixelTiledKSampleUpscalerProvider",
      "PixelTiledKSampleUpscalerProviderPipe",
      "PreviewBridge",
      "ReencodeLatent",
      "ReencodeLatentPipe",
      "RegionalPrompt",
      "RegionalSampler",
      "RegionalSamplerAdvanced",
      "RemoveNoiseMask",
      "SAMDetectorCombined",
      "SAMDetectorSegmented",
      "SAMLoader",
      "SEGSDetailer",
      "SEGSDetailerForAnimateDiff",
      "SEGSPaste",
      "SEGSPreview",
      "SEGSSwitch",
      "SEGSToImageList",
      "SegmDetectorCombined",
      "SegmDetectorCombined_v2",
      "SegmDetectorForEach",
      "SegmDetectorSEGS",
      "SegsMaskCombine",
      "SegsToCombinedMask",
      "SubtractMask",
      "SubtractMaskForEach",
      "TiledKSamplerProvider",
      "ToBasicPipe",
      "ToBinaryMask",
      "ToDetailerPipe",
      "ToDetailerPipeSDXL",
      "TwoAdvancedSamplersForMask",
      "TwoSamplersForMask",
      "TwoSamplersForMaskUpscalerProvider",
      "TwoSamplersForMaskUpscalerProviderPipe",
      "UltralyticsDetectorProvider"
    ],
    {
      "author": "Dr.Lt.Data",
      "description": "This extension offers various detector nodes and detailer nodes that allow you to configure a workflow that automatically enhances facial details. And provide iterative upscaler.",
      "nickname": "Impact Pack",
      "title": "Impact Pack",
      "title_aux": "ComfyUI Impact Pack"
    }
  ],
  "https://github.com/ltdrdata/ComfyUI-Inspire-Pack": [
    [
      "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "ApplyRegionalIPAdapters //Inspire",
      "BindImageListPromptList //Inspire",
      "CacheBackendData //Inspire",
      "CacheBackendDataList //Inspire",
      "CacheBackendDataNumberKey //Inspire",
      "CacheBackendDataNumberKeyList //Inspire",
      "Canny_Preprocessor_Provider_for_SEGS //Inspire",
      "ChangeImageBatchSize //Inspire",
      "Color_Preprocessor_Provider_for_SEGS //Inspire",
      "DWPreprocessor_Provider_for_SEGS //Inspire",
      "FakeScribblePreprocessor_Provider_for_SEGS //Inspire",
      "FloatRange //Inspire",
      "FromIPAdapterPipe //Inspire",
      "GlobalSeed //Inspire",
      "HEDPreprocessor_Provider_for_SEGS //Inspire",
      "InpaintPreprocessor_Provider_for_SEGS //Inspire",
      "KSampler //Inspire",
      "KSamplerAdvanced //Inspire",
      "KSamplerAdvancedProgress //Inspire",
      "KSamplerProgress //Inspire",
      "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
      "LineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "ListCounter //Inspire",
      "LoadImage //Inspire",
      "LoadImageListFromDir //Inspire",
      "LoadImagesFromDir //Inspire",
      "LoadPromptsFromDir //Inspire",
      "LoadPromptsFromFile //Inspire",
      "LoraBlockInfo //Inspire",
      "LoraLoaderBlockWeight //Inspire",
      "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "MediaPipeFaceMeshDetectorProvider //Inspire",
      "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire",
      "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
      "OpenPose_Preprocessor_Provider_for_SEGS //Inspire",
      "PromptBuilder //Inspire",
      "PromptExtractor //Inspire",
      "RegionalConditioningColorMask //Inspire",
      "RegionalConditioningSimple //Inspire",
      "RegionalIPAdapterColorMask //Inspire",
      "RegionalIPAdapterEncodedColorMask //Inspire",
      "RegionalIPAdapterEncodedMask //Inspire",
      "RegionalIPAdapterMask //Inspire",
      "RegionalPromptColorMask //Inspire",
      "RegionalPromptSimple //Inspire",
      "RegionalSeedExplorerColorMask //Inspire",
      "RegionalSeedExplorerMask //Inspire",
      "RemoveBackendData //Inspire",
      "RemoveBackendDataNumberKey //Inspire",
      "RetrieveBackendData //Inspire",
      "RetrieveBackendDataNumberKey //Inspire",
      "SeedExplorer //Inspire",
      "ShowCachedInfo //Inspire",
      "TilePreprocessor_Provider_for_SEGS //Inspire",
      "ToIPAdapterPipe //Inspire",
      "UnzipPrompt //Inspire",
      "WildcardEncode //Inspire",
      "XY Input: Lora Block Weight //Inspire",
      "ZipPrompt //Inspire",
      "Zoe_DepthMap_Preprocessor_Provider_for_SEGS //Inspire"
    ],
    {
      "author": "Dr.Lt.Data",
      "description": "This extension provides various nodes to support Lora Block Weight and the Impact Pack.",
      "nickname": "Inspire Pack",
      "title": "Inspire Pack",
      "title_aux": "ComfyUI Inspire Pack"
    }
  ],
  "https://github.com/m-sokes/ComfyUI-Sokes-Nodes": [
    [
      "Custom Date Format | sokes \u{1F9AC}",
      "Latent Switch x9 | sokes \u{1F9AC}"
    ],
    {
      "title_aux": "ComfyUI Sokes Nodes"
    }
  ],
  "https://github.com/m957ymj75urz/ComfyUI-Custom-Nodes/raw/main/clip-text-encode-split/clip_text_encode_split.py": [
    [
      "RawText",
      "RawTextCombine",
      "RawTextEncode",
      "RawTextReplace"
    ],
    {
      "title_aux": "m957ymj75urz/ComfyUI-Custom-Nodes"
    }
  ],
  "https://github.com/marhensa/sdxl-recommended-res-calc": [
    [
      "RecommendedResCalc"
    ],
    {
      "title_aux": "Recommended Resolution Calculator"
    }
  ],
  "https://github.com/martijnat/comfyui-previewlatent": [
    [
      "PreviewLatent",
      "PreviewLatentAdvanced"
    ],
    {
      "title_aux": "comfyui-previewlatent"
    }
  ],
  "https://github.com/matan1905/ComfyUI-Serving-Toolkit": [
    [
      "DiscordServing",
      "ServingInputNumber",
      "ServingInputText",
      "ServingOutput",
      "WebSocketServing"
    ],
    {
      "title_aux": "ComfyUI Serving toolkit"
    }
  ],
  "https://github.com/mav-rik/facerestore_cf": [
    [
      "CropFace",
      "FaceRestoreCFWithModel",
      "FaceRestoreModelLoader"
    ],
    {
      "title_aux": "Facerestore CF (Code Former)"
    }
  ],
  "https://github.com/mcmonkeyprojects/sd-dynamic-thresholding": [
    [
      "DynamicThresholdingFull",
      "DynamicThresholdingSimple"
    ],
    {
      "title_aux": "Stable Diffusion Dynamic Thresholding (CFG Scale Fix)"
    }
  ],
  "https://github.com/meap158/ComfyUI-GPU-temperature-protection": [
    [
      "GPUTemperatureProtection"
    ],
    {
      "title_aux": "GPU temperature protection"
    }
  ],
  "https://github.com/meap158/ComfyUI-Prompt-Expansion": [
    [
      "PromptExpansion"
    ],
    {
      "title_aux": "ComfyUI-Prompt-Expansion"
    }
  ],
  "https://github.com/melMass/comfy_mtb": [
    [
      "Animation Builder (mtb)",
      "Any To String (mtb)",
      "Batch Float (mtb)",
      "Batch Float Assemble (mtb)",
      "Batch Float Fill (mtb)",
      "Batch Make (mtb)",
      "Batch Merge (mtb)",
      "Batch Shake (mtb)",
      "Batch Shape (mtb)",
      "Batch Transform (mtb)",
      "Bbox (mtb)",
      "Bbox From Mask (mtb)",
      "Blur (mtb)",
      "Color Correct (mtb)",
      "Colored Image (mtb)",
      "Concat Images (mtb)",
      "Crop (mtb)",
      "Debug (mtb)",
      "Deep Bump (mtb)",
      "Export With Ffmpeg (mtb)",
      "Face Swap (mtb)",
      "Film Interpolation (mtb)",
      "Fit Number (mtb)",
      "Float To Number (mtb)",
      "Get Batch From History (mtb)",
      "Image Compare (mtb)",
      "Image Premultiply (mtb)",
      "Image Remove Background Rembg (mtb)",
      "Image Resize Factor (mtb)",
      "Image Tile Offset (mtb)",
      "Int To Bool (mtb)",
      "Int To Number (mtb)",
      "Interpolate Clip Sequential (mtb)",
      "Latent Lerp (mtb)",
      "Load Face Analysis Model (mtb)",
      "Load Face Enhance Model (mtb)",
      "Load Face Swap Model (mtb)",
      "Load Film Model (mtb)",
      "Load Image From Url (mtb)",
      "Load Image Sequence (mtb)",
      "Mask To Image (mtb)",
      "Math Expression (mtb)",
      "Model Patch Seamless (mtb)",
      "Qr Code (mtb)",
      "Restore Face (mtb)",
      "Save Gif (mtb)",
      "Save Image Grid (mtb)",
      "Save Image Sequence (mtb)",
      "Save Tensors (mtb)",
      "Sharpen (mtb)",
      "Smart Step (mtb)",
      "Stack Images (mtb)",
      "String Replace (mtb)",
      "Styles Loader (mtb)",
      "Text To Image (mtb)",
      "Transform Image (mtb)",
      "Uncrop (mtb)",
      "Unsplash Image (mtb)",
      "Vae Decode (mtb)"
    ],
    {
      "title_aux": "MTB Nodes"
    }
  ],
  "https://github.com/mihaiiancu/ComfyUI_Inpaint": [
    [
      "InpaintMediapipe"
    ],
    {
      "title_aux": "mihaiiancu/Inpaint"
    }
  ],
  "https://github.com/mikkel/ComfyUI-text-overlay": [
    [
      "Image Text Overlay"
    ],
    {
      "title_aux": "ComfyUI - Text Overlay Plugin"
    }
  ],
  "https://github.com/mikkel/comfyui-mask-boundingbox": [
    [
      "Mask Bounding Box"
    ],
    {
      "title_aux": "ComfyUI - Mask Bounding Box"
    }
  ],
  "https://github.com/mlinmg/ComfyUI-LaMA-Preprocessor": [
    [
      "LaMaPreprocessor",
      "lamaPreprocessor"
    ],
    {
      "title_aux": "LaMa Preprocessor [WIP]"
    }
  ],
  "https://github.com/mpiquero7164/ComfyUI-SaveImgPrompt": [
    [
      "Save IMG Prompt"
    ],
    {
      "title_aux": "SaveImgPrompt"
    }
  ],
  "https://github.com/nagolinc/ComfyUI_FastVAEDecorder_SDXL": [
    [
      "FastLatentToImage"
    ],
    {
      "title_aux": "ComfyUI_FastVAEDecorder_SDXL"
    }
  ],
  "https://github.com/natto-maki/ComfyUI-NegiTools": [
    [
      "NegiTools_OpenAiDalle3",
      "NegiTools_OpenAiTranslate",
      "NegiTools_SeedGenerator",
      "NegiTools_StringFunction"
    ],
    {
      "title_aux": "ComfyUI-NegiTools"
    }
  ],
  "https://github.com/nicolai256/comfyUI_Nodes_nicolai256/raw/main/yugioh-presets.py": [
    [
      "yugioh_Presets"
    ],
    {
      "title_aux": "comfyUI_Nodes_nicolai256"
    }
  ],
  "https://github.com/noembryo/ComfyUI-noEmbryo": [
    [
      "PromptTermList1",
      "PromptTermList2",
      "PromptTermList3",
      "PromptTermList4",
      "PromptTermList5",
      "PromptTermList6"
    ],
    {
      "author": "noEmbryo",
      "description": "Some useful nodes for ComfyUI",
      "nickname": "noEmbryo",
      "title": "noEmbryo nodes for ComfyUI",
      "title_aux": "noEmbryo nodes"
    }
  ],
  "https://github.com/noxinias/ComfyUI_NoxinNodes": [
    [
      "NoxinChime",
      "NoxinPromptLoad",
      "NoxinPromptSave",
      "NoxinScaledResolution",
      "NoxinSimpleMath",
      "NoxinSplitPrompt"
    ],
    {
      "title_aux": "ComfyUI_NoxinNodes"
    }
  ],
  "https://github.com/ntdviet/comfyui-ext/raw/main/custom_nodes/gcLatentTunnel/gcLatentTunnel.py": [
    [
      "gcLatentTunnel"
    ],
    {
      "title_aux": "ntdviet/comfyui-ext"
    }
  ],
  "https://github.com/omar92/ComfyUI-QualityOfLifeSuit_Omar92": [
    [
      "CLIPStringEncode _O",
      "Chat completion _O",
      "ChatGPT Simple _O",
      "ChatGPT _O",
      "ChatGPT compact _O",
      "Chat_Completion _O",
      "Chat_Message _O",
      "Chat_Message_fromString _O",
      "Concat Text _O",
      "ConcatRandomNSP_O",
      "Debug String _O",
      "Debug Text _O",
      "Debug Text route _O",
      "Edit_image _O",
      "Equation1param _O",
      "Equation2params _O",
      "GetImage_(Width&Height) _O",
      "GetLatent_(Width&Height) _O",
      "ImageScaleFactor _O",
      "ImageScaleFactorSimple _O",
      "LatentUpscaleFactor _O",
      "LatentUpscaleFactorSimple _O",
      "LatentUpscaleMultiply",
      "Note _O",
      "RandomNSP _O",
      "Replace Text _O",
      "String _O",
      "Text _O",
      "Text2Image _O",
      "Trim Text _O",
      "VAEDecodeParallel _O",
      "combine_chat_messages _O",
      "compine_chat_messages _O",
      "concat Strings _O",
      "create image _O",
      "create_image _O",
      "debug Completeion _O",
      "debug messages_O",
      "float _O",
      "floatToInt _O",
      "floatToText _O",
      "int _O",
      "intToFloat _O",
      "load_openAI _O",
      "replace String _O",
      "replace String advanced _O",
      "saveTextToFile _O",
      "seed _O",
      "selectLatentFromBatch _O",
      "string2Image _O",
      "trim String _O",
      "variation_image _O"
    ],
    {
      "title_aux": "Quality of life Suit:V2"
    }
  ],
  "https://github.com/ostris/ostris_nodes_comfyui": [
    [
      "LLM Pipe Loader - Ostris",
      "LLM Prompt Upsampling - Ostris",
      "One Seed - Ostris",
      "Text Box - Ostris"
    ],
    {
      "title_aux": "Ostris Nodes ComfyUI"
    }
  ],
  "https://github.com/oyvindg/ComfyUI-TrollSuite": [
    [
      "BinaryImageMask",
      "ImagePadding",
      "LoadLastImage",
      "RandomMask",
      "TransparentImage"
    ],
    {
      "title_aux": "ComfyUI-TrollSuite"
    }
  ],
  "https://github.com/palant/extended-saveimage-comfyui": [
    [
      "SaveImageExtended"
    ],
    {
      "title_aux": "Extended Save Image for ComfyUI"
    }
  ],
  "https://github.com/palant/image-resize-comfyui": [
    [
      "ImageResize"
    ],
    {
      "title_aux": "Image Resize for ComfyUI"
    }
  ],
  "https://github.com/pants007/comfy-pants": [
    [
      "CLIPTextEncodeAIO",
      "Image Make Square"
    ],
    {
      "title_aux": "pants"
    }
  ],
  "https://github.com/paulo-coronado/comfy_clip_blip_node": [
    [
      "CLIPTextEncodeBLIP",
      "CLIPTextEncodeBLIP-2",
      "Example"
    ],
    {
      "title_aux": "comfy_clip_blip_node"
    }
  ],
  "https://github.com/peteromallet/ComfyUI-Creative-Interpolation": [
    [
      "ACN_AdvancedControlNetApplyImport",
      "BatchCreativeInterpolation",
      "ControlNetLoaderAdvancedImport",
      "CustomControlNetWeights",
      "CustomT2IAdapterWeights",
      "DiffControlNetLoaderAdvancedImport",
      "LatentKeyframeBatchedGroupImport",
      "LatentKeyframeGroupImport",
      "LatentKeyframeImport",
      "LatentKeyframeTiming",
      "LoadImagesFromDirectory",
      "ScaledSoftControlNetWeightsImport",
      "SoftControlNetWeights",
      "SoftT2IAdapterWeights",
      "TimestepKeyframe"
    ],
    {
      "title_aux": "ComfyUI-Creative-Interpolation [Beta]"
    }
  ],
  "https://github.com/picturesonpictures/comfy_PoP": [
    [
      "AdaptiveCannyDetector_PoP",
      "AnyAspectRatio",
      "ConditioningMultiplier_PoP",
      "ConditioningNormalizer_PoP",
      "LoadImageResizer_PoP",
      "LoraStackLoader10_PoP",
      "LoraStackLoader_PoP",
      "VAEDecoderPoP",
      "VAEEncoderPoP"
    ],
    {
      "title_aux": "comfy_PoP"
    }
  ],
  "https://github.com/pythongosssss/ComfyUI-Custom-Scripts": [
    [
      "CheckpointLoader|pysssss",
      "ConstrainImage|pysssss",
      "LoadText|pysssss",
      "LoraLoader|pysssss",
      "MathExpression|pysssss",
      "MultiPrimitive|pysssss",
      "PlaySound|pysssss",
      "Repeater|pysssss",
      "ReroutePrimitive|pysssss",
      "SaveText|pysssss",
      "ShowText|pysssss",
      "StringFunction|pysssss"
    ],
    {
      "title_aux": "pythongosssss/ComfyUI-Custom-Scripts"
    }
  ],
  "https://github.com/pythongosssss/ComfyUI-WD14-Tagger": [
    [
      "WD14Tagger|pysssss"
    ],
    {
      "title_aux": "ComfyUI WD 1.4 Tagger"
    }
  ],
  "https://github.com/ramyma/A8R8_ComfyUI_nodes": [
    [
      "Base64ImageInput",
      "Base64ImageOutput"
    ],
    {
      "title_aux": "A8R8 ComfyUI Nodes"
    }
  ],
  "https://github.com/receyuki/comfyui-prompt-reader-node": [
    [
      "SDBatchLoader",
      "SDParameterGenerator",
      "SDPromptMerger",
      "SDPromptReader",
      "SDPromptSaver",
      "SDTypeConverter"
    ],
    {
      "author": "receyuki",
      "description": "ComfyUI node version of the SD Prompt Reader",
      "nickname": "SD Prompt Reader",
      "title": "SD Prompt Reader",
      "title_aux": "comfyui-prompt-reader-node"
    }
  ],
  "https://github.com/richinsley/Comfy-LFO": [
    [
      "LFO_Pulse",
      "LFO_Sawtooth",
      "LFO_Sine",
      "LFO_Square",
      "LFO_Triangle"
    ],
    {
      "title_aux": "Comfy-LFO"
    }
  ],
  "https://github.com/rklaffehn/rk-comfy-nodes": [
    [
      "RK_CivitAIAddHashes",
      "RK_CivitAIMetaChecker"
    ],
    {
      "title_aux": "rk-comfy-nodes"
    }
  ],
  "https://github.com/romeobuilderotti/ComfyUI-PNG-Metadata": [
    [
      "SetMetadataAll",
      "SetMetadataString"
    ],
    {
      "title_aux": "ComfyUI PNG Metadata"
    }
  ],
  "https://github.com/s1dlx/comfy_meh/raw/main/meh.py": [
    [
      "MergingExecutionHelper"
    ],
    {
      "title_aux": "comfy_meh"
    }
  ],
  "https://github.com/seanlynch/comfyui-optical-flow": [
    [
      "Apply optical flow",
      "Compute optical flow",
      "Visualize optical flow"
    ],
    {
      "title_aux": "ComfyUI Optical Flow"
    }
  ],
  "https://github.com/seanlynch/srl-nodes": [
    [
      "SRL Conditional Interrrupt",
      "SRL Eval",
      "SRL Filter Image List",
      "SRL Format String"
    ],
    {
      "title_aux": "SRL's nodes"
    }
  ],
  "https://github.com/sergekatzmann/ComfyUI_Nimbus-Pack": [
    [
      "ImageSquareAdapterNode"
    ],
    {
      "title_aux": "ComfyUI_Nimbus-Pack"
    }
  ],
  "https://github.com/shadowcz007/comfyui-mixlab-nodes": [
    [
      "AreaToMask",
      "CLIPSeg",
      "CombineMasks",
      "CombineSegMasks",
      "EnhanceImage",
      "FaceToMask",
      "FeatheredMask",
      "ImageCropByAlpha",
      "LoadImagesFromPath",
      "RandomPrompt",
      "ScreenShare",
      "SmoothMask",
      "SplitLongMask",
      "TransparentImage",
      "VAEDecodeConsistencyDecoder",
      "VAELoaderConsistencyDecoder"
    ],
    {
      "title_aux": "comfyui-mixlab-nodes [WIP]"
    }
  ],
  "https://github.com/shiimizu/ComfyUI_smZNodes": [
    [
      "smZ CLIPTextEncode",
      "smZ Settings"
    ],
    {
      "title_aux": "smZNodes"
    }
  ],
  "https://github.com/shingo1228/ComfyUI-SDXL-EmptyLatentImage": [
    [
      "SDXL Empty Latent Image"
    ],
    {
      "title_aux": "ComfyUI-SDXL-EmptyLatentImage"
    }
  ],
  "https://github.com/shingo1228/ComfyUI-send-eagle-slim": [
    [
      "Send Webp Image to Eagle"
    ],
    {
      "title_aux": "ComfyUI-send-Eagle(slim)"
    }
  ],
  "https://github.com/shockz0rz/ComfyUI_InterpolateEverything": [
    [
      "OpenposePreprocessorInterpolate"
    ],
    {
      "title_aux": "InterpolateEverything"
    }
  ],
  "https://github.com/sipherxyz/comfyui-art-venture": [
    [
      "AV_CheckpointMerge",
      "AV_CheckpointModelsToParametersPipe",
      "AV_CheckpointSave",
      "AV_ControlNetEfficientLoader",
      "AV_ControlNetEfficientLoaderAdvanced",
      "AV_ControlNetEfficientStacker",
      "AV_ControlNetEfficientStackerSimple",
      "AV_ControlNetLoader",
      "AV_ControlNetPreprocessor",
      "AV_LoraListLoader",
      "AV_LoraListStacker",
      "AV_LoraLoader",
      "AV_ParametersPipeToCheckpointModels",
      "AV_ParametersPipeToPrompts",
      "AV_PromptsToParametersPipe",
      "AV_SAMLoader",
      "AV_VAELoader",
      "AspectRatioSelector",
      "BLIPCaption",
      "BLIPLoader",
      "BooleanPrimitive",
      "ColorBlend",
      "ColorCorrect",
      "DeepDanbooruCaption",
      "DependenciesEdit",
      "Fooocus_KSampler",
      "Fooocus_KSamplerAdvanced",
      "GetBoolFromJson",
      "GetFloatFromJson",
      "GetIntFromJson",
      "GetObjectFromJson",
      "GetSAMEmbedding",
      "GetTextFromJson",
      "ISNetLoader",
      "ISNetSegment",
      "ImageAlphaComposite",
      "ImageApplyChannel",
      "ImageExtractChannel",
      "ImageGaussianBlur",
      "ImageMuxer",
      "ImageRepeat",
      "ImageScaleDown",
      "ImageScaleDownBy",
      "ImageScaleDownToSize",
      "ImageScaleToMegapixels",
      "LaMaInpaint",
      "LoadImageAsMaskFromUrl",
      "LoadImageFromUrl",
      "LoadJsonFromUrl",
      "MergeModels",
      "NumberScaler",
      "OverlayInpaintedImage",
      "OverlayInpaintedLatent",
      "PrepareImageAndMaskForInpaint",
      "QRCodeGenerator",
      "RandomFloat",
      "RandomInt",
      "SAMEmbeddingToImage",
      "SDXLAspectRatioSelector",
      "SDXLPromptStyler",
      "SeedSelector",
      "StringToInt",
      "StringToNumber"
    ],
    {
      "title_aux": "comfyui-art-venture"
    }
  ],
  "https://github.com/skfoo/ComfyUI-Coziness": [
    [
      "LoraTextExtractor-b1f83aa2",
      "MultiLoraLoader-70bf3d77"
    ],
    {
      "title_aux": "ComfyUI-Coziness"
    }
  ],
  "https://github.com/space-nuko/ComfyUI-Disco-Diffusion": [
    [
      "DiscoDiffusion_DiscoDiffusion",
      "DiscoDiffusion_DiscoDiffusionExtraSettings",
      "DiscoDiffusion_GuidedDiffusionLoader",
      "DiscoDiffusion_OpenAICLIPLoader"
    ],
    {
      "title_aux": "Disco Diffusion"
    }
  ],
  "https://github.com/space-nuko/ComfyUI-OpenPose-Editor": [
    [
      "Nui.OpenPoseEditor"
    ],
    {
      "title_aux": "OpenPose Editor"
    }
  ],
  "https://github.com/space-nuko/nui-suite": [
    [
      "Nui.DynamicPromptsTextGen",
      "Nui.FeelingLuckyTextGen",
      "Nui.OutputString"
    ],
    {
      "title_aux": "nui suite"
    }
  ],
  "https://github.com/spacepxl/ComfyUI-HQ-Image-Save": [
    [
      "LoadLatentEXR",
      "SaveEXR",
      "SaveLatentEXR",
      "SaveTiff"
    ],
    {
      "title_aux": "ComfyUI-HQ-Image-Save"
    }
  ],
  "https://github.com/spinagon/ComfyUI-seam-carving": [
    [
      "SeamCarving"
    ],
    {
      "title_aux": "ComfyUI-seam-carving"
    }
  ],
  "https://github.com/spinagon/ComfyUI-seamless-tiling": [
    [
      "CircularVAEDecode",
      "MakeCircularVAE",
      "OffsetImage",
      "SeamlessTile"
    ],
    {
      "title_aux": "Seamless tiling Node for ComfyUI"
    }
  ],
  "https://github.com/spro/comfyui-mirror": [
    [
      "LatentMirror"
    ],
    {
      "title_aux": "Latent Mirror node for ComfyUI"
    }
  ],
  "https://github.com/ssitu/ComfyUI_UltimateSDUpscale": [
    [
      "UltimateSDUpscale",
      "UltimateSDUpscaleNoUpscale"
    ],
    {
      "title_aux": "UltimateSDUpscale"
    }
  ],
  "https://github.com/ssitu/ComfyUI_fabric": [
    [
      "FABRICPatchModel",
      "FABRICPatchModelAdv",
      "KSamplerAdvFABRICAdv",
      "KSamplerFABRIC",
      "KSamplerFABRICAdv",
      "LatentBatch"
    ],
    {
      "title_aux": "ComfyUI fabric"
    }
  ],
  "https://github.com/ssitu/ComfyUI_restart_sampling": [
    [
      "KRestartSampler",
      "KRestartSamplerAdv",
      "KRestartSamplerSimple"
    ],
    {
      "title_aux": "Restart Sampling"
    }
  ],
  "https://github.com/ssitu/ComfyUI_roop": [
    [
      "RoopImproved",
      "roop"
    ],
    {
      "title_aux": "ComfyUI roop"
    }
  ],
  "https://github.com/storyicon/comfyui_segment_anything": [
    [
      "GroundingDinoModelLoader (segment anything)",
      "GroundingDinoSAMSegment (segment anything)",
      "InvertMask (segment anything)",
      "SAMModelLoader (segment anything)"
    ],
    {
      "title_aux": "segment anything"
    }
  ],
  "https://github.com/strimmlarn/ComfyUI_Strimmlarns_aesthetic_score": [
    [
      "AesthetlcScoreSorter",
      "CalculateAestheticScore",
      "LoadAesteticModel",
      "ScoreToNumber"
    ],
    {
      "title_aux": "ComfyUI_Strimmlarns_aesthetic_score"
    }
  ],
  "https://github.com/syllebra/bilbox-comfyui": [
    [
      "BilboXLut",
      "BilboXPhotoPrompt",
      "BilboXVignette"
    ],
    {
      "title_aux": "BilboX's ComfyUI Custom Nodes"
    }
  ],
  "https://github.com/sylym/comfy_vid2vid": [
    [
      "CheckpointLoaderSimpleSequence",
      "DdimInversionSequence",
      "KSamplerSequence",
      "LoadImageMaskSequence",
      "LoadImageSequence",
      "LoraLoaderSequence",
      "SetLatentNoiseSequence",
      "TrainUnetSequence",
      "VAEEncodeForInpaintSequence"
    ],
    {
      "title_aux": "Vid2vid"
    }
  ],
  "https://github.com/szhublox/ambw_comfyui": [
    [
      "Auto Merge Block Weighted",
      "CLIPMergeSimple",
      "CheckpointSave",
      "ModelMergeBlocks",
      "ModelMergeSimple"
    ],
    {
      "title_aux": "Auto-MBW"
    }
  ],
  "https://github.com/taabata/Comfy_Syrian_Falcon_Nodes/raw/main/SyrianFalconNodes.py": [
    [
      "CompositeImage",
      "KSamplerAlternate",
      "KSamplerPromptEdit",
      "KSamplerPromptEditAndAlternate",
      "LoopBack",
      "QRGenerate",
      "WordAsImage"
    ],
    {
      "title_aux": "Syrian Falcon Nodes"
    }
  ],
  "https://github.com/taabata/LCM_Inpaint-Outpaint_Comfy": [
    [
      "FreeU_LCM",
      "ImageOutputToComfyNodes",
      "ImageShuffle",
      "LCMGenerate",
      "LCMGenerate_ReferenceOnly",
      "LCMGenerate_img2img",
      "LCMGenerate_img2img_IPAdapter",
      "LCMGenerate_img2img_controlnet",
      "LCMGenerate_inpaintv2",
      "LCMGenerate_inpaintv3",
      "LCMLoader",
      "LCMLoader_RefInpaint",
      "LCMLoader_ReferenceOnly",
      "LCMLoader_controlnet",
      "LCMLoader_controlnet_inpaint",
      "LCMLoader_img2img",
      "LCMT2IAdapter",
      "LCM_IPAdapter",
      "LCM_IPAdapter_inpaint",
      "LCM_outpaint_prep",
      "LoadImageNode_LCM",
      "OutpaintCanvasTool",
      "SaveImage_LCM",
      "stitch"
    ],
    {
      "title_aux": "LCM_Inpaint-Outpaint_Comfy"
    }
  ],
  "https://github.com/theUpsider/ComfyUI-Logic": [
    [
      "Compare",
      "DebugPrint",
      "If ANY execute A else B",
      "Int",
      "String"
    ],
    {
      "title_aux": "ComfyUI-Logic"
    }
  ],
  "https://github.com/theUpsider/ComfyUI-Styles_CSV_Loader": [
    [
      "Load Styles CSV"
    ],
    {
      "title_aux": "Styles CSV Loader Extension for ComfyUI"
    }
  ],
  "https://github.com/thecooltechguy/ComfyUI-Stable-Video-Diffusion": [
    [
      "SVDDecoder",
      "SVDModelLoader",
      "SVDSampler",
      "SVDSimpleImg2Vid"
    ],
    {
      "title_aux": "ComfyUI Stable Video Diffusion"
    }
  ],
  "https://github.com/thedyze/save-image-extended-comfyui": [
    [
      "SaveImageExtended"
    ],
    {
      "title_aux": "Save Image Extended for ComfyUI"
    }
  ],
  "https://github.com/toyxyz/ComfyUI_toyxyz_test_nodes": [
    [
      "CaptureWebcam",
      "LoadWebcamImage",
      "SaveImagetoPath"
    ],
    {
      "title_aux": "ComfyUI_toyxyz_test_nodes"
    }
  ],
  "https://github.com/trojblue/trNodes": [
    [
      "JpgConvertNode",
      "trColorCorrection",
      "trLayering",
      "trRouter",
      "trRouterLonger"
    ],
    {
      "title_aux": "trNodes"
    }
  ],
  "https://github.com/tudal/Hakkun-ComfyUI-nodes/raw/main/hakkun_nodes.py": [
    [
      "Any Converter",
      "Calculate Upscale",
      "Image Resize To Height",
      "Image Resize To Width",
      "Image size to string",
      "Multi Text Merge",
      "Prompt Parser",
      "Random Line",
      "Random Line 4"
    ],
    {
      "title_aux": "Hakkun-ComfyUI-nodes"
    }
  ],
  "https://github.com/tusharbhutt/Endless-Nodes": [
    [
      "ESS Aesthetic Scoring",
      "ESS Aesthetic Scoring Auto",
      "ESS Combo Parameterizer",
      "ESS Combo Parameterizer & Prompts",
      "ESS Eight Input Random",
      "ESS Eight Input Text Switch",
      "ESS Float to Integer",
      "ESS Float to Number",
      "ESS Float to String",
      "ESS Float to X",
      "ESS Global Envoy",
      "ESS Image Reward",
      "ESS Image Reward Auto",
      "ESS Image Saver with JSON",
      "ESS Integer to Float",
      "ESS Integer to Number",
      "ESS Integer to String",
      "ESS Integer to X",
      "ESS Number to Float",
      "ESS Number to Integer",
      "ESS Number to String",
      "ESS Number to X",
      "ESS Parameterizer",
      "ESS Parameterizer & Prompts",
      "ESS Six Float Output",
      "ESS Six Input Random",
      "ESS Six Input Text Switch",
      "ESS Six Integer IO Switch",
      "ESS Six Integer IO Widget",
      "ESS String to Float",
      "ESS String to Integer",
      "ESS String to Num",
      "ESS String to X",
      "\u267E\uFE0F\u{1F30A}\u2728 Image Saver with JSON"
    ],
    {
      "author": "BiffMunky",
      "description": "A small set of nodes I created for various numerical and text inputs.  Features image saver with ability to have JSON saved to separate folder, parameter collection nodes, two aesthetic scoring models, switches for text and numbers, and conversion of string to numeric and vice versa.",
      "nickname": "\u267E\uFE0F\u{1F30A}\u2728",
      "title": "Endless \uFE0F\u{1F30A}\u2728 Nodes",
      "title_aux": "Endless \uFE0F\u{1F30A}\u2728 Nodes"
    }
  ],
  "https://github.com/twri/sdxl_prompt_styler": [
    [
      "SDXLPromptStyler",
      "SDXLPromptStylerAdvanced"
    ],
    {
      "title_aux": "SDXL Prompt Styler"
    }
  ],
  "https://github.com/uarefans/ComfyUI-Fans": [
    [
      "Fans Prompt Styler Negative",
      "Fans Prompt Styler Positive",
      "Fans Styler",
      "Fans Text Concatenate"
    ],
    {
      "title_aux": "ComfyUI-Fans"
    }
  ],
  "https://github.com/wallish77/wlsh_nodes": [
    [
      "Alternating KSampler (WLSH)",
      "Build Filename String (WLSH)",
      "CLIP +/- w/Text Unified (WLSH)",
      "CLIP Positive-Negative (WLSH)",
      "CLIP Positive-Negative XL (WLSH)",
      "CLIP Positive-Negative XL w/Text (WLSH)",
      "CLIP Positive-Negative w/Text (WLSH)",
      "Checkpoint Loader w/Name (WLSH)",
      "Empty Latent by Pixels (WLSH)",
      "Empty Latent by Ratio (WLSH)",
      "Empty Latent by Size (WLSH)",
      "Generate Border Mask (WLSH)",
      "Grayscale Image (WLSH)",
      "Image Load with Metadata (WLSH)",
      "Image Save with Prompt (WLSH)",
      "Image Save with Prompt File (WLSH)",
      "Image Save with Prompt/Info (WLSH)",
      "Image Save with Prompt/Info File (WLSH)",
      "Image Scale By Factor (WLSH)",
      "Image Scale by Shortside (WLSH)",
      "KSamplerAdvanced (WLSH)",
      "Multiply Integer (WLSH)",
      "Outpaint to Image (WLSH)",
      "Prompt Weight (WLSH)",
      "Quick Resolution Multiply (WLSH)",
      "Resolutions by Ratio (WLSH)",
      "SDXL Quick Empty Latent (WLSH)",
      "SDXL Quick Image Scale (WLSH)",
      "SDXL Resolutions (WLSH)",
      "SDXL Steps (WLSH)",
      "Save Positive Prompt(WLSH)",
      "Save Prompt (WLSH)",
      "Save Prompt/Info (WLSH)",
      "Seed and Int (WLSH)",
      "Seed to Number (WLSH)",
      "Simple Pattern Replace (WLSH)",
      "Simple String Combine (WLSH)",
      "Time String (WLSH)",
      "Upscale by Factor with Model (WLSH)",
      "VAE Encode for Inpaint w/Padding (WLSH)"
    ],
    {
      "title_aux": "wlsh_nodes"
    }
  ],
  "https://github.com/whatbirdisthat/cyberdolphin": [
    [
      "\u{1F42C} Gradio ChatInterface",
      "\u{1F42C} OpenAI Advanced",
      "\u{1F42C} OpenAI Compatible",
      "\u{1F42C} OpenAI DALL\xB7E",
      "\u{1F42C} OpenAI Simple"
    ],
    {
      "title_aux": "cyberdolphin"
    }
  ],
  "https://github.com/whmc76/ComfyUI-Openpose-Editor-Plus": [
    [
      "CDL.OpenPoseEditorPlus"
    ],
    {
      "title_aux": "ComfyUI-Openpose-Editor-Plus"
    }
  ],
  "https://github.com/wolfden/ComfyUi_PromptStylers": [
    [
      "SDXLPromptStylerAll",
      "SDXLPromptStylerHorror",
      "SDXLPromptStylerMisc",
      "SDXLPromptStylerbyArtist",
      "SDXLPromptStylerbyCamera",
      "SDXLPromptStylerbyComposition",
      "SDXLPromptStylerbyCyberpunkSurrealism",
      "SDXLPromptStylerbyDepth",
      "SDXLPromptStylerbyEnvironment",
      "SDXLPromptStylerbyFantasySetting",
      "SDXLPromptStylerbyFilter",
      "SDXLPromptStylerbyFocus",
      "SDXLPromptStylerbyImpressionism",
      "SDXLPromptStylerbyLighting",
      "SDXLPromptStylerbyMileHigh",
      "SDXLPromptStylerbyMood",
      "SDXLPromptStylerbyMythicalCreature",
      "SDXLPromptStylerbyOriginal",
      "SDXLPromptStylerbyQuantumRealism",
      "SDXLPromptStylerbySteamPunkRealism",
      "SDXLPromptStylerbySubject",
      "SDXLPromptStylerbySurrealism",
      "SDXLPromptStylerbyTheme",
      "SDXLPromptStylerbyTimeofDay",
      "SDXLPromptStylerbyWyvern",
      "SDXLPromptbyCelticArt",
      "SDXLPromptbyContemporaryNordicArt",
      "SDXLPromptbyFashionArt",
      "SDXLPromptbyGothicRevival",
      "SDXLPromptbyIrishFolkArt",
      "SDXLPromptbyRomanticNationalismArt",
      "SDXLPromptbySportsArt",
      "SDXLPromptbyStreetArt",
      "SDXLPromptbyVikingArt",
      "SDXLPromptbyWildlifeArt"
    ],
    {
      "title_aux": "SDXL Prompt Styler (customized version by wolfden)"
    }
  ],
  "https://github.com/wolfden/ComfyUi_String_Function_Tree": [
    [
      "StringFunction"
    ],
    {
      "title_aux": "ComfyUi_String_Function_Tree"
    }
  ],
  "https://github.com/wsippel/comfyui_ws/raw/main/sdxl_utility.py": [
    [
      "SDXLResolutionPresets"
    ],
    {
      "title_aux": "SDXLResolutionPresets"
    }
  ],
  "https://github.com/wutipong/ComfyUI-TextUtils": [
    [
      "Text Utils - Join N-Elements of String List",
      "Text Utils - Join String List",
      "Text Utils - Join Strings",
      "Text Utils - Split String to List"
    ],
    {
      "title_aux": "ComfyUI-TextUtils"
    }
  ],
  "https://github.com/xXAdonesXx/NodeGPT": [
    [
      "AppendAgent",
      "Assistant",
      "Chat",
      "ChatGPT",
      "CombineInput",
      "Conditioning",
      "CostumeAgent_1",
      "CostumeAgent_2",
      "CostumeMaster_1",
      "Critic",
      "DisplayString",
      "DisplayTextAsImage",
      "Engineer",
      "Executor",
      "GroupChat",
      "Image_generation_Conditioning",
      "LM_Studio",
      "LoadAPIconfig",
      "MemGPT",
      "Memory_Excel",
      "Model_1",
      "Ollama",
      "Output2String",
      "Planner",
      "Scientist",
      "TextCombine",
      "TextGeneration",
      "TextGenerator",
      "TextInput",
      "TextOutput",
      "UserProxy",
      "oobaboogaOpenAI"
    ],
    {
      "title_aux": "NodeGPT"
    }
  ],
  "https://github.com/yolanother/DTAIComfyImageSubmit": [
    [
      "DTSimpleSubmitImage",
      "DTSubmitImage"
    ],
    {
      "title_aux": "Comfy AI DoubTech.ai Image Sumission Node"
    }
  ],
  "https://github.com/yolanother/DTAIComfyLoaders": [
    [
      "DTCLIPLoader",
      "DTCLIPVisionLoader",
      "DTCheckpointLoader",
      "DTCheckpointLoaderSimple",
      "DTControlNetLoader",
      "DTDiffControlNetLoader",
      "DTDiffusersLoader",
      "DTGLIGENLoader",
      "DTLoadImage",
      "DTLoadImageMask",
      "DTLoadLatent",
      "DTLoraLoader",
      "DTLorasLoader",
      "DTStyleModelLoader",
      "DTUpscaleModelLoader",
      "DTVAELoader",
      "DTunCLIPCheckpointLoader"
    ],
    {
      "title_aux": "Comfy UI Online Loaders"
    }
  ],
  "https://github.com/yolanother/DTAIComfyPromptAgent": [
    [
      "DTPromptAgent",
      "DTPromptAgentString"
    ],
    {
      "title_aux": "Comfy UI Prompt Agent"
    }
  ],
  "https://github.com/yolanother/DTAIComfyQRCodes": [
    [
      "QRCode"
    ],
    {
      "title_aux": "Comfy UI QR Codes"
    }
  ],
  "https://github.com/yolanother/DTAIComfyVariables": [
    [
      "DTCLIPTextEncode",
      "DTSingleLineStringVariable",
      "DTSingleLineStringVariableNoClip",
      "FloatVariable",
      "IntVariable",
      "StringFormat",
      "StringFormatSingleLine",
      "StringVariable"
    ],
    {
      "title_aux": "Variables for Comfy UI"
    }
  ],
  "https://github.com/yolanother/DTAIImageToTextNode": [
    [
      "DTAIImageToTextNode",
      "DTAIImageUrlToTextNode"
    ],
    {
      "title_aux": "Image to Text Node"
    }
  ],
  "https://github.com/youyegit/tdxh_node_comfyui": [
    [
      "TdxhBoolNumber",
      "TdxhClipVison",
      "TdxhControlNetApply",
      "TdxhControlNetProcessor",
      "TdxhFloatInput",
      "TdxhImageToSize",
      "TdxhImageToSizeAdvanced",
      "TdxhImg2ImgLatent",
      "TdxhIntInput",
      "TdxhLoraLoader",
      "TdxhOnOrOff",
      "TdxhReference",
      "TdxhStringInput",
      "TdxhStringInputTranslator"
    ],
    {
      "title_aux": "tdxh_node_comfyui"
    }
  ],
  "https://github.com/zer0TF/cute-comfy": [
    [
      "Cute.Placeholder"
    ],
    {
      "title_aux": "Cute Comfy"
    }
  ],
  "https://raw.githubusercontent.com/throttlekitty/SDXLCustomAspectRatio/main/SDXLAspectRatio.py": [
    [
      "SDXLAspectRatio"
    ],
    {
      "title_aux": "SDXLCustomAspectRatio"
    }
  ]
};
var dist$1 = {};
var src = {};
var browser = { exports: {} };
var s = 1e3;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === "string" && val.length > 0) {
    return parse(val);
  } else if (type === "number" && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
  if (!match2) {
    return;
  }
  var n = parseFloat(match2[1]);
  var type = (match2[2] || "ms").toLowerCase();
  switch (type) {
    case "years":
    case "year":
    case "yrs":
    case "yr":
    case "y":
      return n * y;
    case "weeks":
    case "week":
    case "w":
      return n * w;
    case "days":
    case "day":
    case "d":
      return n * d;
    case "hours":
    case "hour":
    case "hrs":
    case "hr":
    case "h":
      return n * h;
    case "minutes":
    case "minute":
    case "mins":
    case "min":
    case "m":
      return n * m;
    case "seconds":
    case "second":
    case "secs":
    case "sec":
    case "s":
      return n * s;
    case "milliseconds":
    case "millisecond":
    case "msecs":
    case "msec":
    case "ms":
      return n;
    default:
      return void 0;
  }
}
function fmtShort(ms2) {
  var msAbs = Math.abs(ms2);
  if (msAbs >= d) {
    return Math.round(ms2 / d) + "d";
  }
  if (msAbs >= h) {
    return Math.round(ms2 / h) + "h";
  }
  if (msAbs >= m) {
    return Math.round(ms2 / m) + "m";
  }
  if (msAbs >= s) {
    return Math.round(ms2 / s) + "s";
  }
  return ms2 + "ms";
}
function fmtLong(ms2) {
  var msAbs = Math.abs(ms2);
  if (msAbs >= d) {
    return plural(ms2, msAbs, d, "day");
  }
  if (msAbs >= h) {
    return plural(ms2, msAbs, h, "hour");
  }
  if (msAbs >= m) {
    return plural(ms2, msAbs, m, "minute");
  }
  if (msAbs >= s) {
    return plural(ms2, msAbs, s, "second");
  }
  return ms2 + " ms";
}
function plural(ms2, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
}
function setup(env2) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = ms;
  createDebug.destroy = destroy2;
  Object.keys(env2).forEach((key) => {
    createDebug[key] = env2[key];
  });
  createDebug.names = [];
  createDebug.skips = [];
  createDebug.formatters = {};
  function selectColor(namespace) {
    let hash = 0;
    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }
  createDebug.selectColor = selectColor;
  function createDebug(namespace) {
    let prevTime;
    let enableOverride = null;
    let namespacesCache;
    let enabledCache;
    function debug2(...args) {
      if (!debug2.enabled) {
        return;
      }
      const self2 = debug2;
      const curr = Number(new Date());
      const ms2 = curr - (prevTime || curr);
      self2.diff = ms2;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
        if (match2 === "%%") {
          return "%";
        }
        index++;
        const formatter = createDebug.formatters[format];
        if (typeof formatter === "function") {
          const val = args[index];
          match2 = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match2;
      });
      createDebug.formatArgs.call(self2, args);
      const logFn = self2.log || createDebug.log;
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.useColors = createDebug.useColors();
    debug2.color = createDebug.selectColor(namespace);
    debug2.extend = extend;
    debug2.destroy = createDebug.destroy;
    Object.defineProperty(debug2, "enabled", {
      enumerable: true,
      configurable: false,
      get: () => {
        if (enableOverride !== null) {
          return enableOverride;
        }
        if (namespacesCache !== createDebug.namespaces) {
          namespacesCache = createDebug.namespaces;
          enabledCache = createDebug.enabled(namespace);
        }
        return enabledCache;
      },
      set: (v) => {
        enableOverride = v;
      }
    });
    if (typeof createDebug.init === "function") {
      createDebug.init(debug2);
    }
    return debug2;
  }
  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.namespaces = namespaces;
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    const len = split.length;
    for (i = 0; i < len; i++) {
      if (!split[i]) {
        continue;
      }
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
      } else {
        createDebug.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  }
  function disable() {
    const namespaces = [
      ...createDebug.names.map(toNamespace),
      ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
    ].join(",");
    createDebug.enable("");
    return namespaces;
  }
  function enabled(name) {
    if (name[name.length - 1] === "*") {
      return true;
    }
    let i;
    let len;
    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }
    return val;
  }
  function destroy2() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }
  createDebug.enable(createDebug.load());
  return createDebug;
}
var common = setup;
(function(module, exports) {
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load2;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match2) => {
      if (match2 === "%%") {
        return;
      }
      index++;
      if (match2 === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports.log = console.debug || console.log || (() => {
  });
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem("debug", namespaces);
      } else {
        exports.storage.removeItem("debug");
      }
    } catch (error) {
    }
  }
  function load2() {
    let r;
    try {
      r = exports.storage.getItem("debug");
    } catch (error) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = {}.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {
    }
  }
  module.exports = common(exports);
  const { formatters } = module.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
})(browser, browser.exports);
var debug = browser.exports;
(function(exports) {
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  const fs_1 = fs__default["default"];
  const debug_12 = __importDefault(browser.exports);
  const log2 = debug_12.default("@kwsites/file-exists");
  function check(path2, isFile, isDirectory) {
    log2(`checking %s`, path2);
    try {
      const stat = fs_1.statSync(path2);
      if (stat.isFile() && isFile) {
        log2(`[OK] path represents a file`);
        return true;
      }
      if (stat.isDirectory() && isDirectory) {
        log2(`[OK] path represents a directory`);
        return true;
      }
      log2(`[FAIL] path represents something other than a file or directory`);
      return false;
    } catch (e) {
      if (e.code === "ENOENT") {
        log2(`[FAIL] path is not accessible: %o`, e);
        return false;
      }
      log2(`[FATAL] %o`, e);
      throw e;
    }
  }
  function exists(path2, type = exports.READABLE) {
    return check(path2, (type & exports.FILE) > 0, (type & exports.FOLDER) > 0);
  }
  exports.exists = exists;
  exports.FILE = 1;
  exports.FOLDER = 2;
  exports.READABLE = exports.FILE + exports.FOLDER;
})(src);
(function(exports) {
  function __export2(m2) {
    for (var p in m2)
      if (!exports.hasOwnProperty(p))
        exports[p] = m2[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export2(src);
})(dist$1);
var dist = {};
Object.defineProperty(dist, "__esModule", { value: true });
var createDeferred = dist.createDeferred = deferred_1 = dist.deferred = void 0;
function deferred() {
  let done;
  let fail;
  let status = "pending";
  const promise = new Promise((_done, _fail) => {
    done = _done;
    fail = _fail;
  });
  return {
    promise,
    done(result) {
      if (status === "pending") {
        status = "resolved";
        done(result);
      }
    },
    fail(error) {
      if (status === "pending") {
        status = "rejected";
        fail(error);
      }
    },
    get fulfilled() {
      return status !== "pending";
    },
    get status() {
      return status;
    }
  };
}
var deferred_1 = dist.deferred = deferred;
createDeferred = dist.createDeferred = deferred;
dist.default = deferred;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module, copyDefault, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache2) => {
  return (module, temp) => {
    return cache2 && cache2.get(module) || (temp = __reExport(__markAsModule({}), module, 1), cache2 && cache2.set(module, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function pathspec(...paths) {
  const key = new String(paths);
  cache.set(key, paths);
  return key;
}
function isPathSpec(path2) {
  return path2 instanceof String && cache.has(path2);
}
function toPaths(pathSpec) {
  return cache.get(pathSpec) || [];
}
var cache;
var init_pathspec = __esm({
  "src/lib/args/pathspec.ts"() {
    cache = /* @__PURE__ */ new WeakMap();
  }
});
var GitError;
var init_git_error = __esm({
  "src/lib/errors/git-error.ts"() {
    GitError = class extends Error {
      constructor(task, message) {
        super(message);
        this.task = task;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
  }
});
var GitResponseError;
var init_git_response_error = __esm({
  "src/lib/errors/git-response-error.ts"() {
    init_git_error();
    GitResponseError = class extends GitError {
      constructor(git, message) {
        super(void 0, message || String(git));
        this.git = git;
      }
    };
  }
});
var TaskConfigurationError;
var init_task_configuration_error = __esm({
  "src/lib/errors/task-configuration-error.ts"() {
    init_git_error();
    TaskConfigurationError = class extends GitError {
      constructor(message) {
        super(void 0, message);
      }
    };
  }
});
function asFunction(source) {
  return typeof source === "function" ? source : NOOP;
}
function isUserFunction(source) {
  return typeof source === "function" && source !== NOOP;
}
function splitOn(input, char) {
  const index = input.indexOf(char);
  if (index <= 0) {
    return [input, ""];
  }
  return [input.substr(0, index), input.substr(index + 1)];
}
function first(input, offset = 0) {
  return isArrayLike(input) && input.length > offset ? input[offset] : void 0;
}
function last(input, offset = 0) {
  if (isArrayLike(input) && input.length > offset) {
    return input[input.length - 1 - offset];
  }
}
function isArrayLike(input) {
  return !!(input && typeof input.length === "number");
}
function toLinesWithContent(input = "", trimmed2 = true, separator = "\n") {
  return input.split(separator).reduce((output, line) => {
    const lineContent = trimmed2 ? line.trim() : line;
    if (lineContent) {
      output.push(lineContent);
    }
    return output;
  }, []);
}
function forEachLineWithContent(input, callback) {
  return toLinesWithContent(input, true).map((line) => callback(line));
}
function folderExists(path2) {
  return dist$1.exists(path2, dist$1.FOLDER);
}
function append(target, item) {
  if (Array.isArray(target)) {
    if (!target.includes(item)) {
      target.push(item);
    }
  } else {
    target.add(item);
  }
  return item;
}
function including(target, item) {
  if (Array.isArray(target) && !target.includes(item)) {
    target.push(item);
  }
  return target;
}
function remove(target, item) {
  if (Array.isArray(target)) {
    const index = target.indexOf(item);
    if (index >= 0) {
      target.splice(index, 1);
    }
  } else {
    target.delete(item);
  }
  return item;
}
function asArray(source) {
  return Array.isArray(source) ? source : [source];
}
function asStringArray(source) {
  return asArray(source).map(String);
}
function asNumber(source, onNaN = 0) {
  if (source == null) {
    return onNaN;
  }
  const num = parseInt(source, 10);
  return isNaN(num) ? onNaN : num;
}
function prefixedArray(input, prefix) {
  const output = [];
  for (let i = 0, max = input.length; i < max; i++) {
    output.push(prefix, input[i]);
  }
  return output;
}
function bufferToString(input) {
  return (Array.isArray(input) ? Buffer.concat(input) : input).toString("utf-8");
}
function pick(source, properties) {
  return Object.assign({}, ...properties.map((property) => property in source ? { [property]: source[property] } : {}));
}
function delay(duration = 0) {
  return new Promise((done) => setTimeout(done, duration));
}
var NULL, NOOP, objectToString;
var init_util = __esm({
  "src/lib/utils/util.ts"() {
    NULL = "\0";
    NOOP = () => {
    };
    objectToString = Object.prototype.toString.call.bind(Object.prototype.toString);
  }
});
function filterType(input, filter, def) {
  if (filter(input)) {
    return input;
  }
  return arguments.length > 2 ? def : void 0;
}
function filterPrimitives(input, omit) {
  const type = isPathSpec(input) ? "string" : typeof input;
  return /number|string|boolean/.test(type) && (!omit || !omit.includes(type));
}
function filterPlainObject(input) {
  return !!input && objectToString(input) === "[object Object]";
}
function filterFunction(input) {
  return typeof input === "function";
}
var filterArray, filterString, filterStringArray, filterStringOrStringArray, filterHasLength;
var init_argument_filters = __esm({
  "src/lib/utils/argument-filters.ts"() {
    init_util();
    init_pathspec();
    filterArray = (input) => {
      return Array.isArray(input);
    };
    filterString = (input) => {
      return typeof input === "string";
    };
    filterStringArray = (input) => {
      return Array.isArray(input) && input.every(filterString);
    };
    filterStringOrStringArray = (input) => {
      return filterString(input) || Array.isArray(input) && input.every(filterString);
    };
    filterHasLength = (input) => {
      if (input == null || "number|boolean|function".includes(typeof input)) {
        return false;
      }
      return Array.isArray(input) || typeof input === "string" || typeof input.length === "number";
    };
  }
});
var ExitCodes;
var init_exit_codes = __esm({
  "src/lib/utils/exit-codes.ts"() {
    ExitCodes = /* @__PURE__ */ ((ExitCodes2) => {
      ExitCodes2[ExitCodes2["SUCCESS"] = 0] = "SUCCESS";
      ExitCodes2[ExitCodes2["ERROR"] = 1] = "ERROR";
      ExitCodes2[ExitCodes2["NOT_FOUND"] = -2] = "NOT_FOUND";
      ExitCodes2[ExitCodes2["UNCLEAN"] = 128] = "UNCLEAN";
      return ExitCodes2;
    })(ExitCodes || {});
  }
});
var GitOutputStreams;
var init_git_output_streams = __esm({
  "src/lib/utils/git-output-streams.ts"() {
    GitOutputStreams = class {
      constructor(stdOut, stdErr) {
        this.stdOut = stdOut;
        this.stdErr = stdErr;
      }
      asStrings() {
        return new GitOutputStreams(this.stdOut.toString("utf8"), this.stdErr.toString("utf8"));
      }
    };
  }
});
var LineParser, RemoteLineParser;
var init_line_parser = __esm({
  "src/lib/utils/line-parser.ts"() {
    LineParser = class {
      constructor(regExp, useMatches) {
        this.matches = [];
        this.parse = (line, target) => {
          this.resetMatches();
          if (!this._regExp.every((reg, index) => this.addMatch(reg, index, line(index)))) {
            return false;
          }
          return this.useMatches(target, this.prepareMatches()) !== false;
        };
        this._regExp = Array.isArray(regExp) ? regExp : [regExp];
        if (useMatches) {
          this.useMatches = useMatches;
        }
      }
      useMatches(target, match2) {
        throw new Error(`LineParser:useMatches not implemented`);
      }
      resetMatches() {
        this.matches.length = 0;
      }
      prepareMatches() {
        return this.matches;
      }
      addMatch(reg, index, line) {
        const matched = line && reg.exec(line);
        if (matched) {
          this.pushMatch(index, matched);
        }
        return !!matched;
      }
      pushMatch(_index, matched) {
        this.matches.push(...matched.slice(1));
      }
    };
    RemoteLineParser = class extends LineParser {
      addMatch(reg, index, line) {
        return /^remote:\s/.test(String(line)) && super.addMatch(reg, index, line);
      }
      pushMatch(index, matched) {
        if (index > 0 || matched.length > 1) {
          super.pushMatch(index, matched);
        }
      }
    };
  }
});
function createInstanceConfig(...options) {
  const baseDir = process.cwd();
  const config = Object.assign(__spreadValues({ baseDir }, defaultOptions), ...options.filter((o) => typeof o === "object" && o));
  config.baseDir = config.baseDir || baseDir;
  config.trimmed = config.trimmed === true;
  return config;
}
var defaultOptions;
var init_simple_git_options = __esm({
  "src/lib/utils/simple-git-options.ts"() {
    defaultOptions = {
      binary: "git",
      maxConcurrentProcesses: 5,
      config: [],
      trimmed: false
    };
  }
});
function appendTaskOptions(options, commands = []) {
  if (!filterPlainObject(options)) {
    return commands;
  }
  return Object.keys(options).reduce((commands2, key) => {
    const value = options[key];
    if (isPathSpec(value)) {
      commands2.push(value);
    } else if (filterPrimitives(value, ["boolean"])) {
      commands2.push(key + "=" + value);
    } else {
      commands2.push(key);
    }
    return commands2;
  }, commands);
}
function getTrailingOptions(args, initialPrimitive = 0, objectOnly = false) {
  const command = [];
  for (let i = 0, max = initialPrimitive < 0 ? args.length : initialPrimitive; i < max; i++) {
    if ("string|number".includes(typeof args[i])) {
      command.push(String(args[i]));
    }
  }
  appendTaskOptions(trailingOptionsArgument(args), command);
  if (!objectOnly) {
    command.push(...trailingArrayArgument(args));
  }
  return command;
}
function trailingArrayArgument(args) {
  const hasTrailingCallback = typeof last(args) === "function";
  return filterType(last(args, hasTrailingCallback ? 1 : 0), filterArray, []);
}
function trailingOptionsArgument(args) {
  const hasTrailingCallback = filterFunction(last(args));
  return filterType(last(args, hasTrailingCallback ? 1 : 0), filterPlainObject);
}
function trailingFunctionArgument(args, includeNoop = true) {
  const callback = asFunction(last(args));
  return includeNoop || isUserFunction(callback) ? callback : void 0;
}
var init_task_options = __esm({
  "src/lib/utils/task-options.ts"() {
    init_argument_filters();
    init_util();
    init_pathspec();
  }
});
function callTaskParser(parser3, streams) {
  return parser3(streams.stdOut, streams.stdErr);
}
function parseStringResponse(result, parsers12, texts, trim = true) {
  asArray(texts).forEach((text) => {
    for (let lines = toLinesWithContent(text, trim), i = 0, max = lines.length; i < max; i++) {
      const line = (offset = 0) => {
        if (i + offset >= max) {
          return;
        }
        return lines[i + offset];
      };
      parsers12.some(({ parse: parse2 }) => parse2(line, result));
    }
  });
  return result;
}
var init_task_parser = __esm({
  "src/lib/utils/task-parser.ts"() {
    init_util();
  }
});
var utils_exports = {};
__export(utils_exports, {
  ExitCodes: () => ExitCodes,
  GitOutputStreams: () => GitOutputStreams,
  LineParser: () => LineParser,
  NOOP: () => NOOP,
  NULL: () => NULL,
  RemoteLineParser: () => RemoteLineParser,
  append: () => append,
  appendTaskOptions: () => appendTaskOptions,
  asArray: () => asArray,
  asFunction: () => asFunction,
  asNumber: () => asNumber,
  asStringArray: () => asStringArray,
  bufferToString: () => bufferToString,
  callTaskParser: () => callTaskParser,
  createInstanceConfig: () => createInstanceConfig,
  delay: () => delay,
  filterArray: () => filterArray,
  filterFunction: () => filterFunction,
  filterHasLength: () => filterHasLength,
  filterPlainObject: () => filterPlainObject,
  filterPrimitives: () => filterPrimitives,
  filterString: () => filterString,
  filterStringArray: () => filterStringArray,
  filterStringOrStringArray: () => filterStringOrStringArray,
  filterType: () => filterType,
  first: () => first,
  folderExists: () => folderExists,
  forEachLineWithContent: () => forEachLineWithContent,
  getTrailingOptions: () => getTrailingOptions,
  including: () => including,
  isUserFunction: () => isUserFunction,
  last: () => last,
  objectToString: () => objectToString,
  parseStringResponse: () => parseStringResponse,
  pick: () => pick,
  prefixedArray: () => prefixedArray,
  remove: () => remove,
  splitOn: () => splitOn,
  toLinesWithContent: () => toLinesWithContent,
  trailingFunctionArgument: () => trailingFunctionArgument,
  trailingOptionsArgument: () => trailingOptionsArgument
});
var init_utils = __esm({
  "src/lib/utils/index.ts"() {
    init_argument_filters();
    init_exit_codes();
    init_git_output_streams();
    init_line_parser();
    init_simple_git_options();
    init_task_options();
    init_task_parser();
    init_util();
  }
});
var check_is_repo_exports = {};
__export(check_is_repo_exports, {
  CheckRepoActions: () => CheckRepoActions,
  checkIsBareRepoTask: () => checkIsBareRepoTask,
  checkIsRepoRootTask: () => checkIsRepoRootTask,
  checkIsRepoTask: () => checkIsRepoTask
});
function checkIsRepoTask(action) {
  switch (action) {
    case "bare":
      return checkIsBareRepoTask();
    case "root":
      return checkIsRepoRootTask();
  }
  const commands = ["rev-parse", "--is-inside-work-tree"];
  return {
    commands,
    format: "utf-8",
    onError,
    parser
  };
}
function checkIsRepoRootTask() {
  const commands = ["rev-parse", "--git-dir"];
  return {
    commands,
    format: "utf-8",
    onError,
    parser(path2) {
      return /^\.(git)?$/.test(path2.trim());
    }
  };
}
function checkIsBareRepoTask() {
  const commands = ["rev-parse", "--is-bare-repository"];
  return {
    commands,
    format: "utf-8",
    onError,
    parser
  };
}
function isNotRepoMessage(error) {
  return /(Not a git repository|Kein Git-Repository)/i.test(String(error));
}
var CheckRepoActions, onError, parser;
var init_check_is_repo = __esm({
  "src/lib/tasks/check-is-repo.ts"() {
    init_utils();
    CheckRepoActions = /* @__PURE__ */ ((CheckRepoActions2) => {
      CheckRepoActions2["BARE"] = "bare";
      CheckRepoActions2["IN_TREE"] = "tree";
      CheckRepoActions2["IS_REPO_ROOT"] = "root";
      return CheckRepoActions2;
    })(CheckRepoActions || {});
    onError = ({ exitCode }, error, done, fail) => {
      if (exitCode === 128 && isNotRepoMessage(error)) {
        return done(Buffer.from("false"));
      }
      fail(error);
    };
    parser = (text) => {
      return text.trim() === "true";
    };
  }
});
function cleanSummaryParser(dryRun, text) {
  const summary = new CleanResponse(dryRun);
  const regexp = dryRun ? dryRunRemovalRegexp : removalRegexp;
  toLinesWithContent(text).forEach((line) => {
    const removed = line.replace(regexp, "");
    summary.paths.push(removed);
    (isFolderRegexp.test(removed) ? summary.folders : summary.files).push(removed);
  });
  return summary;
}
var CleanResponse, removalRegexp, dryRunRemovalRegexp, isFolderRegexp;
var init_CleanSummary = __esm({
  "src/lib/responses/CleanSummary.ts"() {
    init_utils();
    CleanResponse = class {
      constructor(dryRun) {
        this.dryRun = dryRun;
        this.paths = [];
        this.files = [];
        this.folders = [];
      }
    };
    removalRegexp = /^[a-z]+\s*/i;
    dryRunRemovalRegexp = /^[a-z]+\s+[a-z]+\s*/i;
    isFolderRegexp = /\/$/;
  }
});
var task_exports = {};
__export(task_exports, {
  EMPTY_COMMANDS: () => EMPTY_COMMANDS,
  adhocExecTask: () => adhocExecTask,
  configurationErrorTask: () => configurationErrorTask,
  isBufferTask: () => isBufferTask,
  isEmptyTask: () => isEmptyTask,
  straightThroughBufferTask: () => straightThroughBufferTask,
  straightThroughStringTask: () => straightThroughStringTask
});
function adhocExecTask(parser3) {
  return {
    commands: EMPTY_COMMANDS,
    format: "empty",
    parser: parser3
  };
}
function configurationErrorTask(error) {
  return {
    commands: EMPTY_COMMANDS,
    format: "empty",
    parser() {
      throw typeof error === "string" ? new TaskConfigurationError(error) : error;
    }
  };
}
function straightThroughStringTask(commands, trimmed2 = false) {
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return trimmed2 ? String(text).trim() : text;
    }
  };
}
function straightThroughBufferTask(commands) {
  return {
    commands,
    format: "buffer",
    parser(buffer) {
      return buffer;
    }
  };
}
function isBufferTask(task) {
  return task.format === "buffer";
}
function isEmptyTask(task) {
  return task.format === "empty" || !task.commands.length;
}
var EMPTY_COMMANDS;
var init_task = __esm({
  "src/lib/tasks/task.ts"() {
    init_task_configuration_error();
    EMPTY_COMMANDS = [];
  }
});
var clean_exports = {};
__export(clean_exports, {
  CONFIG_ERROR_INTERACTIVE_MODE: () => CONFIG_ERROR_INTERACTIVE_MODE,
  CONFIG_ERROR_MODE_REQUIRED: () => CONFIG_ERROR_MODE_REQUIRED,
  CONFIG_ERROR_UNKNOWN_OPTION: () => CONFIG_ERROR_UNKNOWN_OPTION,
  CleanOptions: () => CleanOptions,
  cleanTask: () => cleanTask,
  cleanWithOptionsTask: () => cleanWithOptionsTask,
  isCleanOptionsArray: () => isCleanOptionsArray
});
function cleanWithOptionsTask(mode, customArgs) {
  const { cleanMode, options, valid } = getCleanOptions(mode);
  if (!cleanMode) {
    return configurationErrorTask(CONFIG_ERROR_MODE_REQUIRED);
  }
  if (!valid.options) {
    return configurationErrorTask(CONFIG_ERROR_UNKNOWN_OPTION + JSON.stringify(mode));
  }
  options.push(...customArgs);
  if (options.some(isInteractiveMode)) {
    return configurationErrorTask(CONFIG_ERROR_INTERACTIVE_MODE);
  }
  return cleanTask(cleanMode, options);
}
function cleanTask(mode, customArgs) {
  const commands = ["clean", `-${mode}`, ...customArgs];
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return cleanSummaryParser(mode === "n", text);
    }
  };
}
function isCleanOptionsArray(input) {
  return Array.isArray(input) && input.every((test) => CleanOptionValues.has(test));
}
function getCleanOptions(input) {
  let cleanMode;
  let options = [];
  let valid = { cleanMode: false, options: true };
  input.replace(/[^a-z]i/g, "").split("").forEach((char) => {
    if (isCleanMode(char)) {
      cleanMode = char;
      valid.cleanMode = true;
    } else {
      valid.options = valid.options && isKnownOption(options[options.length] = `-${char}`);
    }
  });
  return {
    cleanMode,
    options,
    valid
  };
}
function isCleanMode(cleanMode) {
  return cleanMode === "f" || cleanMode === "n";
}
function isKnownOption(option) {
  return /^-[a-z]$/i.test(option) && CleanOptionValues.has(option.charAt(1));
}
function isInteractiveMode(option) {
  if (/^-[^\-]/.test(option)) {
    return option.indexOf("i") > 0;
  }
  return option === "--interactive";
}
var CONFIG_ERROR_INTERACTIVE_MODE, CONFIG_ERROR_MODE_REQUIRED, CONFIG_ERROR_UNKNOWN_OPTION, CleanOptions, CleanOptionValues;
var init_clean = __esm({
  "src/lib/tasks/clean.ts"() {
    init_CleanSummary();
    init_utils();
    init_task();
    CONFIG_ERROR_INTERACTIVE_MODE = "Git clean interactive mode is not supported";
    CONFIG_ERROR_MODE_REQUIRED = 'Git clean mode parameter ("n" or "f") is required';
    CONFIG_ERROR_UNKNOWN_OPTION = "Git clean unknown option found in: ";
    CleanOptions = /* @__PURE__ */ ((CleanOptions2) => {
      CleanOptions2["DRY_RUN"] = "n";
      CleanOptions2["FORCE"] = "f";
      CleanOptions2["IGNORED_INCLUDED"] = "x";
      CleanOptions2["IGNORED_ONLY"] = "X";
      CleanOptions2["EXCLUDING"] = "e";
      CleanOptions2["QUIET"] = "q";
      CleanOptions2["RECURSIVE"] = "d";
      return CleanOptions2;
    })(CleanOptions || {});
    CleanOptionValues = /* @__PURE__ */ new Set([
      "i",
      ...asStringArray(Object.values(CleanOptions))
    ]);
  }
});
function configListParser(text) {
  const config = new ConfigList();
  for (const item of configParser(text)) {
    config.addValue(item.file, String(item.key), item.value);
  }
  return config;
}
function configGetParser(text, key) {
  let value = null;
  const values = [];
  const scopes = /* @__PURE__ */ new Map();
  for (const item of configParser(text, key)) {
    if (item.key !== key) {
      continue;
    }
    values.push(value = item.value);
    if (!scopes.has(item.file)) {
      scopes.set(item.file, []);
    }
    scopes.get(item.file).push(value);
  }
  return {
    key,
    paths: Array.from(scopes.keys()),
    scopes,
    value,
    values
  };
}
function configFilePath(filePath) {
  return filePath.replace(/^(file):/, "");
}
function* configParser(text, requestedKey = null) {
  const lines = text.split("\0");
  for (let i = 0, max = lines.length - 1; i < max; ) {
    const file = configFilePath(lines[i++]);
    let value = lines[i++];
    let key = requestedKey;
    if (value.includes("\n")) {
      const line = splitOn(value, "\n");
      key = line[0];
      value = line[1];
    }
    yield { file, key, value };
  }
}
var ConfigList;
var init_ConfigList = __esm({
  "src/lib/responses/ConfigList.ts"() {
    init_utils();
    ConfigList = class {
      constructor() {
        this.files = [];
        this.values = /* @__PURE__ */ Object.create(null);
      }
      get all() {
        if (!this._all) {
          this._all = this.files.reduce((all, file) => {
            return Object.assign(all, this.values[file]);
          }, {});
        }
        return this._all;
      }
      addFile(file) {
        if (!(file in this.values)) {
          const latest = last(this.files);
          this.values[file] = latest ? Object.create(this.values[latest]) : {};
          this.files.push(file);
        }
        return this.values[file];
      }
      addValue(file, key, value) {
        const values = this.addFile(file);
        if (!values.hasOwnProperty(key)) {
          values[key] = value;
        } else if (Array.isArray(values[key])) {
          values[key].push(value);
        } else {
          values[key] = [values[key], value];
        }
        this._all = void 0;
      }
    };
  }
});
function asConfigScope(scope2, fallback) {
  if (typeof scope2 === "string" && GitConfigScope.hasOwnProperty(scope2)) {
    return scope2;
  }
  return fallback;
}
function addConfigTask(key, value, append2, scope2) {
  const commands = ["config", `--${scope2}`];
  if (append2) {
    commands.push("--add");
  }
  commands.push(key, value);
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return text;
    }
  };
}
function getConfigTask(key, scope2) {
  const commands = ["config", "--null", "--show-origin", "--get-all", key];
  if (scope2) {
    commands.splice(1, 0, `--${scope2}`);
  }
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return configGetParser(text, key);
    }
  };
}
function listConfigTask(scope2) {
  const commands = ["config", "--list", "--show-origin", "--null"];
  if (scope2) {
    commands.push(`--${scope2}`);
  }
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return configListParser(text);
    }
  };
}
function config_default() {
  return {
    addConfig(key, value, ...rest) {
      return this._runTask(addConfigTask(key, value, rest[0] === true, asConfigScope(rest[1], "local")), trailingFunctionArgument(arguments));
    },
    getConfig(key, scope2) {
      return this._runTask(getConfigTask(key, asConfigScope(scope2, void 0)), trailingFunctionArgument(arguments));
    },
    listConfig(...rest) {
      return this._runTask(listConfigTask(asConfigScope(rest[0], void 0)), trailingFunctionArgument(arguments));
    }
  };
}
var GitConfigScope;
var init_config = __esm({
  "src/lib/tasks/config.ts"() {
    init_ConfigList();
    init_utils();
    GitConfigScope = /* @__PURE__ */ ((GitConfigScope2) => {
      GitConfigScope2["system"] = "system";
      GitConfigScope2["global"] = "global";
      GitConfigScope2["local"] = "local";
      GitConfigScope2["worktree"] = "worktree";
      return GitConfigScope2;
    })(GitConfigScope || {});
  }
});
function grepQueryBuilder(...params) {
  return new GrepQuery().param(...params);
}
function parseGrep(grep) {
  const paths = /* @__PURE__ */ new Set();
  const results = {};
  forEachLineWithContent(grep, (input) => {
    const [path2, line, preview] = input.split(NULL);
    paths.add(path2);
    (results[path2] = results[path2] || []).push({
      line: asNumber(line),
      path: path2,
      preview
    });
  });
  return {
    paths,
    results
  };
}
function grep_default() {
  return {
    grep(searchTerm) {
      const then = trailingFunctionArgument(arguments);
      const options = getTrailingOptions(arguments);
      for (const option of disallowedOptions) {
        if (options.includes(option)) {
          return this._runTask(configurationErrorTask(`git.grep: use of "${option}" is not supported.`), then);
        }
      }
      if (typeof searchTerm === "string") {
        searchTerm = grepQueryBuilder().param(searchTerm);
      }
      const commands = ["grep", "--null", "-n", "--full-name", ...options, ...searchTerm];
      return this._runTask({
        commands,
        format: "utf-8",
        parser(stdOut) {
          return parseGrep(stdOut);
        }
      }, then);
    }
  };
}
var disallowedOptions, Query, _a, GrepQuery;
var init_grep = __esm({
  "src/lib/tasks/grep.ts"() {
    init_utils();
    init_task();
    disallowedOptions = ["-h"];
    Query = Symbol("grepQuery");
    GrepQuery = class {
      constructor() {
        this[_a] = [];
      }
      *[(_a = Query, Symbol.iterator)]() {
        for (const query of this[Query]) {
          yield query;
        }
      }
      and(...and) {
        and.length && this[Query].push("--and", "(", ...prefixedArray(and, "-e"), ")");
        return this;
      }
      param(...param) {
        this[Query].push(...prefixedArray(param, "-e"));
        return this;
      }
    };
  }
});
var reset_exports = {};
__export(reset_exports, {
  ResetMode: () => ResetMode,
  getResetMode: () => getResetMode,
  resetTask: () => resetTask
});
function resetTask(mode, customArgs) {
  const commands = ["reset"];
  if (isValidResetMode(mode)) {
    commands.push(`--${mode}`);
  }
  commands.push(...customArgs);
  return straightThroughStringTask(commands);
}
function getResetMode(mode) {
  if (isValidResetMode(mode)) {
    return mode;
  }
  switch (typeof mode) {
    case "string":
    case "undefined":
      return "soft";
  }
  return;
}
function isValidResetMode(mode) {
  return ResetModes.includes(mode);
}
var ResetMode, ResetModes;
var init_reset = __esm({
  "src/lib/tasks/reset.ts"() {
    init_task();
    ResetMode = /* @__PURE__ */ ((ResetMode2) => {
      ResetMode2["MIXED"] = "mixed";
      ResetMode2["SOFT"] = "soft";
      ResetMode2["HARD"] = "hard";
      ResetMode2["MERGE"] = "merge";
      ResetMode2["KEEP"] = "keep";
      return ResetMode2;
    })(ResetMode || {});
    ResetModes = Array.from(Object.values(ResetMode));
  }
});
function createLog() {
  return debug("simple-git");
}
function prefixedLogger(to, prefix, forward) {
  if (!prefix || !String(prefix).replace(/\s*/, "")) {
    return !forward ? to : (message, ...args) => {
      to(message, ...args);
      forward(message, ...args);
    };
  }
  return (message, ...args) => {
    to(`%s ${message}`, prefix, ...args);
    if (forward) {
      forward(message, ...args);
    }
  };
}
function childLoggerName(name, childDebugger, { namespace: parentNamespace }) {
  if (typeof name === "string") {
    return name;
  }
  const childNamespace = childDebugger && childDebugger.namespace || "";
  if (childNamespace.startsWith(parentNamespace)) {
    return childNamespace.substr(parentNamespace.length + 1);
  }
  return childNamespace || parentNamespace;
}
function createLogger(label, verbose, initialStep, infoDebugger = createLog()) {
  const labelPrefix = label && `[${label}]` || "";
  const spawned = [];
  const debugDebugger = typeof verbose === "string" ? infoDebugger.extend(verbose) : verbose;
  const key = childLoggerName(filterType(verbose, filterString), debugDebugger, infoDebugger);
  return step(initialStep);
  function sibling(name, initial) {
    return append(spawned, createLogger(label, key.replace(/^[^:]+/, name), initial, infoDebugger));
  }
  function step(phase) {
    const stepPrefix = phase && `[${phase}]` || "";
    const debug2 = debugDebugger && prefixedLogger(debugDebugger, stepPrefix) || NOOP;
    const info = prefixedLogger(infoDebugger, `${labelPrefix} ${stepPrefix}`, debug2);
    return Object.assign(debugDebugger ? debug2 : info, {
      label,
      sibling,
      info,
      step
    });
  }
}
var init_git_logger = __esm({
  "src/lib/git-logger.ts"() {
    init_utils();
    debug.formatters.L = (value) => String(filterHasLength(value) ? value.length : "-");
    debug.formatters.B = (value) => {
      if (Buffer.isBuffer(value)) {
        return value.toString("utf8");
      }
      return objectToString(value);
    };
  }
});
var _TasksPendingQueue, TasksPendingQueue;
var init_tasks_pending_queue = __esm({
  "src/lib/runners/tasks-pending-queue.ts"() {
    init_git_error();
    init_git_logger();
    _TasksPendingQueue = class {
      constructor(logLabel = "GitExecutor") {
        this.logLabel = logLabel;
        this._queue = /* @__PURE__ */ new Map();
      }
      withProgress(task) {
        return this._queue.get(task);
      }
      createProgress(task) {
        const name = _TasksPendingQueue.getName(task.commands[0]);
        const logger2 = createLogger(this.logLabel, name);
        return {
          task,
          logger: logger2,
          name
        };
      }
      push(task) {
        const progress = this.createProgress(task);
        progress.logger("Adding task to the queue, commands = %o", task.commands);
        this._queue.set(task, progress);
        return progress;
      }
      fatal(err) {
        for (const [task, { logger: logger2 }] of Array.from(this._queue.entries())) {
          if (task === err.task) {
            logger2.info(`Failed %o`, err);
            logger2(`Fatal exception, any as-yet un-started tasks run through this executor will not be attempted`);
          } else {
            logger2.info(`A fatal exception occurred in a previous task, the queue has been purged: %o`, err.message);
          }
          this.complete(task);
        }
        if (this._queue.size !== 0) {
          throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`);
        }
      }
      complete(task) {
        const progress = this.withProgress(task);
        if (progress) {
          this._queue.delete(task);
        }
      }
      attempt(task) {
        const progress = this.withProgress(task);
        if (!progress) {
          throw new GitError(void 0, "TasksPendingQueue: attempt called for an unknown task");
        }
        progress.logger("Starting task");
        return progress;
      }
      static getName(name = "empty") {
        return `task:${name}:${++_TasksPendingQueue.counter}`;
      }
    };
    TasksPendingQueue = _TasksPendingQueue;
    TasksPendingQueue.counter = 0;
  }
});
function pluginContext(task, commands) {
  return {
    method: first(task.commands) || "",
    commands
  };
}
function onErrorReceived(target, logger2) {
  return (err) => {
    logger2(`[ERROR] child process exception %o`, err);
    target.push(Buffer.from(String(err.stack), "ascii"));
  };
}
function onDataReceived(target, name, logger2, output) {
  return (buffer) => {
    logger2(`%s received %L bytes`, name, buffer);
    output(`%B`, buffer);
    target.push(buffer);
  };
}
var GitExecutorChain;
var init_git_executor_chain = __esm({
  "src/lib/runners/git-executor-chain.ts"() {
    init_git_error();
    init_task();
    init_utils();
    init_tasks_pending_queue();
    GitExecutorChain = class {
      constructor(_executor, _scheduler, _plugins) {
        this._executor = _executor;
        this._scheduler = _scheduler;
        this._plugins = _plugins;
        this._chain = Promise.resolve();
        this._queue = new TasksPendingQueue();
      }
      get binary() {
        return this._executor.binary;
      }
      get cwd() {
        return this._cwd || this._executor.cwd;
      }
      set cwd(cwd2) {
        this._cwd = cwd2;
      }
      get env() {
        return this._executor.env;
      }
      get outputHandler() {
        return this._executor.outputHandler;
      }
      chain() {
        return this;
      }
      push(task) {
        this._queue.push(task);
        return this._chain = this._chain.then(() => this.attemptTask(task));
      }
      attemptTask(task) {
        return __async(this, null, function* () {
          const onScheduleComplete = yield this._scheduler.next();
          const onQueueComplete = () => this._queue.complete(task);
          try {
            const { logger: logger2 } = this._queue.attempt(task);
            return yield isEmptyTask(task) ? this.attemptEmptyTask(task, logger2) : this.attemptRemoteTask(task, logger2);
          } catch (e) {
            throw this.onFatalException(task, e);
          } finally {
            onQueueComplete();
            onScheduleComplete();
          }
        });
      }
      onFatalException(task, e) {
        const gitError = e instanceof GitError ? Object.assign(e, { task }) : new GitError(task, e && String(e));
        this._chain = Promise.resolve();
        this._queue.fatal(gitError);
        return gitError;
      }
      attemptRemoteTask(task, logger2) {
        return __async(this, null, function* () {
          const args = this._plugins.exec("spawn.args", [...task.commands], pluginContext(task, task.commands));
          const raw = yield this.gitResponse(task, this.binary, args, this.outputHandler, logger2.step("SPAWN"));
          const outputStreams = yield this.handleTaskData(task, args, raw, logger2.step("HANDLE"));
          logger2(`passing response to task's parser as a %s`, task.format);
          if (isBufferTask(task)) {
            return callTaskParser(task.parser, outputStreams);
          }
          return callTaskParser(task.parser, outputStreams.asStrings());
        });
      }
      attemptEmptyTask(task, logger2) {
        return __async(this, null, function* () {
          logger2(`empty task bypassing child process to call to task's parser`);
          return task.parser(this);
        });
      }
      handleTaskData(task, args, result, logger2) {
        const { exitCode, rejection, stdOut, stdErr } = result;
        return new Promise((done, fail) => {
          logger2(`Preparing to handle process response exitCode=%d stdOut=`, exitCode);
          const { error } = this._plugins.exec("task.error", { error: rejection }, __spreadValues(__spreadValues({}, pluginContext(task, args)), result));
          if (error && task.onError) {
            logger2.info(`exitCode=%s handling with custom error handler`);
            return task.onError(result, error, (newStdOut) => {
              logger2.info(`custom error handler treated as success`);
              logger2(`custom error returned a %s`, objectToString(newStdOut));
              done(new GitOutputStreams(Array.isArray(newStdOut) ? Buffer.concat(newStdOut) : newStdOut, Buffer.concat(stdErr)));
            }, fail);
          }
          if (error) {
            logger2.info(`handling as error: exitCode=%s stdErr=%s rejection=%o`, exitCode, stdErr.length, rejection);
            return fail(error);
          }
          logger2.info(`retrieving task output complete`);
          done(new GitOutputStreams(Buffer.concat(stdOut), Buffer.concat(stdErr)));
        });
      }
      gitResponse(task, command, args, outputHandler, logger2) {
        return __async(this, null, function* () {
          const outputLogger = logger2.sibling("output");
          const spawnOptions = this._plugins.exec("spawn.options", {
            cwd: this.cwd,
            env: this.env,
            windowsHide: true
          }, pluginContext(task, task.commands));
          return new Promise((done) => {
            const stdOut = [];
            const stdErr = [];
            logger2.info(`%s %o`, command, args);
            logger2("%O", spawnOptions);
            let rejection = this._beforeSpawn(task, args);
            if (rejection) {
              return done({
                stdOut,
                stdErr,
                exitCode: 9901,
                rejection
              });
            }
            this._plugins.exec("spawn.before", void 0, __spreadProps(__spreadValues({}, pluginContext(task, args)), {
              kill(reason) {
                rejection = reason || rejection;
              }
            }));
            const spawned = child_process.spawn(command, args, spawnOptions);
            spawned.stdout.on("data", onDataReceived(stdOut, "stdOut", logger2, outputLogger.step("stdOut")));
            spawned.stderr.on("data", onDataReceived(stdErr, "stdErr", logger2, outputLogger.step("stdErr")));
            spawned.on("error", onErrorReceived(stdErr, logger2));
            if (outputHandler) {
              logger2(`Passing child process stdOut/stdErr to custom outputHandler`);
              outputHandler(command, spawned.stdout, spawned.stderr, [...args]);
            }
            this._plugins.exec("spawn.after", void 0, __spreadProps(__spreadValues({}, pluginContext(task, args)), {
              spawned,
              close(exitCode, reason) {
                done({
                  stdOut,
                  stdErr,
                  exitCode,
                  rejection: rejection || reason
                });
              },
              kill(reason) {
                if (spawned.killed) {
                  return;
                }
                rejection = reason;
                spawned.kill("SIGINT");
              }
            }));
          });
        });
      }
      _beforeSpawn(task, args) {
        let rejection;
        this._plugins.exec("spawn.before", void 0, __spreadProps(__spreadValues({}, pluginContext(task, args)), {
          kill(reason) {
            rejection = reason || rejection;
          }
        }));
        return rejection;
      }
    };
  }
});
var git_executor_exports = {};
__export(git_executor_exports, {
  GitExecutor: () => GitExecutor
});
var GitExecutor;
var init_git_executor = __esm({
  "src/lib/runners/git-executor.ts"() {
    init_git_executor_chain();
    GitExecutor = class {
      constructor(binary = "git", cwd2, _scheduler, _plugins) {
        this.binary = binary;
        this.cwd = cwd2;
        this._scheduler = _scheduler;
        this._plugins = _plugins;
        this._chain = new GitExecutorChain(this, this._scheduler, this._plugins);
      }
      chain() {
        return new GitExecutorChain(this, this._scheduler, this._plugins);
      }
      push(task) {
        return this._chain.push(task);
      }
    };
  }
});
function taskCallback(task, response, callback = NOOP) {
  const onSuccess = (data) => {
    callback(null, data);
  };
  const onError2 = (err) => {
    if ((err == null ? void 0 : err.task) === task) {
      callback(err instanceof GitResponseError ? addDeprecationNoticeToError(err) : err, void 0);
    }
  };
  response.then(onSuccess, onError2);
}
function addDeprecationNoticeToError(err) {
  let log2 = (name) => {
    console.warn(`simple-git deprecation notice: accessing GitResponseError.${name} should be GitResponseError.git.${name}, this will no longer be available in version 3`);
    log2 = NOOP;
  };
  return Object.create(err, Object.getOwnPropertyNames(err.git).reduce(descriptorReducer, {}));
  function descriptorReducer(all, name) {
    if (name in err) {
      return all;
    }
    all[name] = {
      enumerable: false,
      configurable: false,
      get() {
        log2(name);
        return err.git[name];
      }
    };
    return all;
  }
}
var init_task_callback = __esm({
  "src/lib/task-callback.ts"() {
    init_git_response_error();
    init_utils();
  }
});
function changeWorkingDirectoryTask(directory, root) {
  return adhocExecTask((instance) => {
    if (!folderExists(directory)) {
      throw new Error(`Git.cwd: cannot change to non-directory "${directory}"`);
    }
    return (root || instance).cwd = directory;
  });
}
var init_change_working_directory = __esm({
  "src/lib/tasks/change-working-directory.ts"() {
    init_utils();
    init_task();
  }
});
function checkoutTask(args) {
  const commands = ["checkout", ...args];
  if (commands[1] === "-b" && commands.includes("-B")) {
    commands[1] = remove(commands, "-B");
  }
  return straightThroughStringTask(commands);
}
function checkout_default() {
  return {
    checkout() {
      return this._runTask(checkoutTask(getTrailingOptions(arguments, 1)), trailingFunctionArgument(arguments));
    },
    checkoutBranch(branchName, startPoint) {
      return this._runTask(checkoutTask(["-b", branchName, startPoint, ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments));
    },
    checkoutLocalBranch(branchName) {
      return this._runTask(checkoutTask(["-b", branchName, ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments));
    }
  };
}
var init_checkout = __esm({
  "src/lib/tasks/checkout.ts"() {
    init_utils();
    init_task();
  }
});
function parseCommitResult(stdOut) {
  const result = {
    author: null,
    branch: "",
    commit: "",
    root: false,
    summary: {
      changes: 0,
      insertions: 0,
      deletions: 0
    }
  };
  return parseStringResponse(result, parsers, stdOut);
}
var parsers;
var init_parse_commit = __esm({
  "src/lib/parsers/parse-commit.ts"() {
    init_utils();
    parsers = [
      new LineParser(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/, (result, [branch, root, commit]) => {
        result.branch = branch;
        result.commit = commit;
        result.root = !!root;
      }),
      new LineParser(/\s*Author:\s(.+)/i, (result, [author]) => {
        const parts = author.split("<");
        const email = parts.pop();
        if (!email || !email.includes("@")) {
          return;
        }
        result.author = {
          email: email.substr(0, email.length - 1),
          name: parts.join("<").trim()
        };
      }),
      new LineParser(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g, (result, [changes, insertions, deletions]) => {
        result.summary.changes = parseInt(changes, 10) || 0;
        result.summary.insertions = parseInt(insertions, 10) || 0;
        result.summary.deletions = parseInt(deletions, 10) || 0;
      }),
      new LineParser(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/, (result, [changes, lines, direction]) => {
        result.summary.changes = parseInt(changes, 10) || 0;
        const count = parseInt(lines, 10) || 0;
        if (direction === "-") {
          result.summary.deletions = count;
        } else if (direction === "+") {
          result.summary.insertions = count;
        }
      })
    ];
  }
});
function commitTask(message, files, customArgs) {
  const commands = [
    "-c",
    "core.abbrev=40",
    "commit",
    ...prefixedArray(message, "-m"),
    ...files,
    ...customArgs
  ];
  return {
    commands,
    format: "utf-8",
    parser: parseCommitResult
  };
}
function commit_default() {
  return {
    commit(message, ...rest) {
      const next = trailingFunctionArgument(arguments);
      const task = rejectDeprecatedSignatures(message) || commitTask(asArray(message), asArray(filterType(rest[0], filterStringOrStringArray, [])), [...filterType(rest[1], filterArray, []), ...getTrailingOptions(arguments, 0, true)]);
      return this._runTask(task, next);
    }
  };
  function rejectDeprecatedSignatures(message) {
    return !filterStringOrStringArray(message) && configurationErrorTask(`git.commit: requires the commit message to be supplied as a string/string[]`);
  }
}
var init_commit = __esm({
  "src/lib/tasks/commit.ts"() {
    init_parse_commit();
    init_utils();
    init_task();
  }
});
function first_commit_default() {
  return {
    firstCommit() {
      return this._runTask(straightThroughStringTask(["rev-list", "--max-parents=0", "HEAD"], true), trailingFunctionArgument(arguments));
    }
  };
}
var init_first_commit = __esm({
  "src/lib/tasks/first-commit.ts"() {
    init_utils();
    init_task();
  }
});
function hashObjectTask(filePath, write) {
  const commands = ["hash-object", filePath];
  if (write) {
    commands.push("-w");
  }
  return straightThroughStringTask(commands, true);
}
var init_hash_object = __esm({
  "src/lib/tasks/hash-object.ts"() {
    init_task();
  }
});
function parseInit(bare, path2, text) {
  const response = String(text).trim();
  let result;
  if (result = initResponseRegex.exec(response)) {
    return new InitSummary(bare, path2, false, result[1]);
  }
  if (result = reInitResponseRegex.exec(response)) {
    return new InitSummary(bare, path2, true, result[1]);
  }
  let gitDir = "";
  const tokens = response.split(" ");
  while (tokens.length) {
    const token = tokens.shift();
    if (token === "in") {
      gitDir = tokens.join(" ");
      break;
    }
  }
  return new InitSummary(bare, path2, /^re/i.test(response), gitDir);
}
var InitSummary, initResponseRegex, reInitResponseRegex;
var init_InitSummary = __esm({
  "src/lib/responses/InitSummary.ts"() {
    InitSummary = class {
      constructor(bare, path2, existing, gitDir) {
        this.bare = bare;
        this.path = path2;
        this.existing = existing;
        this.gitDir = gitDir;
      }
    };
    initResponseRegex = /^Init.+ repository in (.+)$/;
    reInitResponseRegex = /^Rein.+ in (.+)$/;
  }
});
function hasBareCommand(command) {
  return command.includes(bareCommand);
}
function initTask(bare = false, path2, customArgs) {
  const commands = ["init", ...customArgs];
  if (bare && !hasBareCommand(commands)) {
    commands.splice(1, 0, bareCommand);
  }
  return {
    commands,
    format: "utf-8",
    parser(text) {
      return parseInit(commands.includes("--bare"), path2, text);
    }
  };
}
var bareCommand;
var init_init = __esm({
  "src/lib/tasks/init.ts"() {
    init_InitSummary();
    bareCommand = "--bare";
  }
});
function logFormatFromCommand(customArgs) {
  for (let i = 0; i < customArgs.length; i++) {
    const format = logFormatRegex.exec(customArgs[i]);
    if (format) {
      return `--${format[1]}`;
    }
  }
  return "";
}
function isLogFormat(customArg) {
  return logFormatRegex.test(customArg);
}
var logFormatRegex;
var init_log_format = __esm({
  "src/lib/args/log-format.ts"() {
    logFormatRegex = /^--(stat|numstat|name-only|name-status)(=|$)/;
  }
});
var DiffSummary;
var init_DiffSummary = __esm({
  "src/lib/responses/DiffSummary.ts"() {
    DiffSummary = class {
      constructor() {
        this.changed = 0;
        this.deletions = 0;
        this.insertions = 0;
        this.files = [];
      }
    };
  }
});
function getDiffParser(format = "") {
  const parser3 = diffSummaryParsers[format];
  return (stdOut) => parseStringResponse(new DiffSummary(), parser3, stdOut, false);
}
var statParser, numStatParser, nameOnlyParser, nameStatusParser, diffSummaryParsers;
var init_parse_diff_summary = __esm({
  "src/lib/parsers/parse-diff-summary.ts"() {
    init_log_format();
    init_DiffSummary();
    init_utils();
    statParser = [
      new LineParser(/(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/, (result, [file, changes, alterations = ""]) => {
        result.files.push({
          file: file.trim(),
          changes: asNumber(changes),
          insertions: alterations.replace(/[^+]/g, "").length,
          deletions: alterations.replace(/[^-]/g, "").length,
          binary: false
        });
      }),
      new LineParser(/(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/, (result, [file, before, after]) => {
        result.files.push({
          file: file.trim(),
          before: asNumber(before),
          after: asNumber(after),
          binary: true
        });
      }),
      new LineParser(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/, (result, [changed, summary]) => {
        const inserted = /(\d+) i/.exec(summary);
        const deleted = /(\d+) d/.exec(summary);
        result.changed = asNumber(changed);
        result.insertions = asNumber(inserted == null ? void 0 : inserted[1]);
        result.deletions = asNumber(deleted == null ? void 0 : deleted[1]);
      })
    ];
    numStatParser = [
      new LineParser(/(\d+)\t(\d+)\t(.+)$/, (result, [changesInsert, changesDelete, file]) => {
        const insertions = asNumber(changesInsert);
        const deletions = asNumber(changesDelete);
        result.changed++;
        result.insertions += insertions;
        result.deletions += deletions;
        result.files.push({
          file,
          changes: insertions + deletions,
          insertions,
          deletions,
          binary: false
        });
      }),
      new LineParser(/-\t-\t(.+)$/, (result, [file]) => {
        result.changed++;
        result.files.push({
          file,
          after: 0,
          before: 0,
          binary: true
        });
      })
    ];
    nameOnlyParser = [
      new LineParser(/(.+)$/, (result, [file]) => {
        result.changed++;
        result.files.push({
          file,
          changes: 0,
          insertions: 0,
          deletions: 0,
          binary: false
        });
      })
    ];
    nameStatusParser = [
      new LineParser(/([ACDMRTUXB])\s*(.+)$/, (result, [_status, file]) => {
        result.changed++;
        result.files.push({
          file,
          changes: 0,
          insertions: 0,
          deletions: 0,
          binary: false
        });
      })
    ];
    diffSummaryParsers = {
      [""]: statParser,
      ["--stat"]: statParser,
      ["--numstat"]: numStatParser,
      ["--name-status"]: nameStatusParser,
      ["--name-only"]: nameOnlyParser
    };
  }
});
function lineBuilder(tokens, fields) {
  return fields.reduce((line, field, index) => {
    line[field] = tokens[index] || "";
    return line;
  }, /* @__PURE__ */ Object.create({ diff: null }));
}
function createListLogSummaryParser(splitter = SPLITTER, fields = defaultFieldNames, logFormat = "") {
  const parseDiffResult = getDiffParser(logFormat);
  return function(stdOut) {
    const all = toLinesWithContent(stdOut, true, START_BOUNDARY).map(function(item) {
      const lineDetail = item.trim().split(COMMIT_BOUNDARY);
      const listLogLine = lineBuilder(lineDetail[0].trim().split(splitter), fields);
      if (lineDetail.length > 1 && !!lineDetail[1].trim()) {
        listLogLine.diff = parseDiffResult(lineDetail[1]);
      }
      return listLogLine;
    });
    return {
      all,
      latest: all.length && all[0] || null,
      total: all.length
    };
  };
}
var START_BOUNDARY, COMMIT_BOUNDARY, SPLITTER, defaultFieldNames;
var init_parse_list_log_summary = __esm({
  "src/lib/parsers/parse-list-log-summary.ts"() {
    init_utils();
    init_parse_diff_summary();
    init_log_format();
    START_BOUNDARY = "\xF2\xF2\xF2\xF2\xF2\xF2 ";
    COMMIT_BOUNDARY = " \xF2\xF2";
    SPLITTER = " \xF2 ";
    defaultFieldNames = ["hash", "date", "message", "refs", "author_name", "author_email"];
  }
});
var diff_exports = {};
__export(diff_exports, {
  diffSummaryTask: () => diffSummaryTask,
  validateLogFormatConfig: () => validateLogFormatConfig
});
function diffSummaryTask(customArgs) {
  let logFormat = logFormatFromCommand(customArgs);
  const commands = ["diff"];
  if (logFormat === "") {
    logFormat = "--stat";
    commands.push("--stat=4096");
  }
  commands.push(...customArgs);
  return validateLogFormatConfig(commands) || {
    commands,
    format: "utf-8",
    parser: getDiffParser(logFormat)
  };
}
function validateLogFormatConfig(customArgs) {
  const flags = customArgs.filter(isLogFormat);
  if (flags.length > 1) {
    return configurationErrorTask(`Summary flags are mutually exclusive - pick one of ${flags.join(",")}`);
  }
  if (flags.length && customArgs.includes("-z")) {
    return configurationErrorTask(`Summary flag ${flags} parsing is not compatible with null termination option '-z'`);
  }
}
var init_diff = __esm({
  "src/lib/tasks/diff.ts"() {
    init_log_format();
    init_parse_diff_summary();
    init_task();
  }
});
function prettyFormat(format, splitter) {
  const fields = [];
  const formatStr = [];
  Object.keys(format).forEach((field) => {
    fields.push(field);
    formatStr.push(String(format[field]));
  });
  return [fields, formatStr.join(splitter)];
}
function userOptions(input) {
  return Object.keys(input).reduce((out, key) => {
    if (!(key in excludeOptions)) {
      out[key] = input[key];
    }
    return out;
  }, {});
}
function parseLogOptions(opt = {}, customArgs = []) {
  const splitter = filterType(opt.splitter, filterString, SPLITTER);
  const format = !filterPrimitives(opt.format) && opt.format ? opt.format : {
    hash: "%H",
    date: opt.strictDate === false ? "%ai" : "%aI",
    message: "%s",
    refs: "%D",
    body: opt.multiLine ? "%B" : "%b",
    author_name: opt.mailMap !== false ? "%aN" : "%an",
    author_email: opt.mailMap !== false ? "%aE" : "%ae"
  };
  const [fields, formatStr] = prettyFormat(format, splitter);
  const suffix = [];
  const command = [
    `--pretty=format:${START_BOUNDARY}${formatStr}${COMMIT_BOUNDARY}`,
    ...customArgs
  ];
  const maxCount = opt.n || opt["max-count"] || opt.maxCount;
  if (maxCount) {
    command.push(`--max-count=${maxCount}`);
  }
  if (opt.from || opt.to) {
    const rangeOperator = opt.symmetric !== false ? "..." : "..";
    suffix.push(`${opt.from || ""}${rangeOperator}${opt.to || ""}`);
  }
  if (filterString(opt.file)) {
    command.push("--follow", pathspec(opt.file));
  }
  appendTaskOptions(userOptions(opt), command);
  return {
    fields,
    splitter,
    commands: [...command, ...suffix]
  };
}
function logTask(splitter, fields, customArgs) {
  const parser3 = createListLogSummaryParser(splitter, fields, logFormatFromCommand(customArgs));
  return {
    commands: ["log", ...customArgs],
    format: "utf-8",
    parser: parser3
  };
}
function log_default() {
  return {
    log(...rest) {
      const next = trailingFunctionArgument(arguments);
      const options = parseLogOptions(trailingOptionsArgument(arguments), filterType(arguments[0], filterArray));
      const task = rejectDeprecatedSignatures(...rest) || validateLogFormatConfig(options.commands) || createLogTask(options);
      return this._runTask(task, next);
    }
  };
  function createLogTask(options) {
    return logTask(options.splitter, options.fields, options.commands);
  }
  function rejectDeprecatedSignatures(from, to) {
    return filterString(from) && filterString(to) && configurationErrorTask(`git.log(string, string) should be replaced with git.log({ from: string, to: string })`);
  }
}
var excludeOptions;
var init_log = __esm({
  "src/lib/tasks/log.ts"() {
    init_log_format();
    init_pathspec();
    init_parse_list_log_summary();
    init_utils();
    init_task();
    init_diff();
    excludeOptions = /* @__PURE__ */ ((excludeOptions2) => {
      excludeOptions2[excludeOptions2["--pretty"] = 0] = "--pretty";
      excludeOptions2[excludeOptions2["max-count"] = 1] = "max-count";
      excludeOptions2[excludeOptions2["maxCount"] = 2] = "maxCount";
      excludeOptions2[excludeOptions2["n"] = 3] = "n";
      excludeOptions2[excludeOptions2["file"] = 4] = "file";
      excludeOptions2[excludeOptions2["format"] = 5] = "format";
      excludeOptions2[excludeOptions2["from"] = 6] = "from";
      excludeOptions2[excludeOptions2["to"] = 7] = "to";
      excludeOptions2[excludeOptions2["splitter"] = 8] = "splitter";
      excludeOptions2[excludeOptions2["symmetric"] = 9] = "symmetric";
      excludeOptions2[excludeOptions2["mailMap"] = 10] = "mailMap";
      excludeOptions2[excludeOptions2["multiLine"] = 11] = "multiLine";
      excludeOptions2[excludeOptions2["strictDate"] = 12] = "strictDate";
      return excludeOptions2;
    })(excludeOptions || {});
  }
});
var MergeSummaryConflict, MergeSummaryDetail;
var init_MergeSummary = __esm({
  "src/lib/responses/MergeSummary.ts"() {
    MergeSummaryConflict = class {
      constructor(reason, file = null, meta) {
        this.reason = reason;
        this.file = file;
        this.meta = meta;
      }
      toString() {
        return `${this.file}:${this.reason}`;
      }
    };
    MergeSummaryDetail = class {
      constructor() {
        this.conflicts = [];
        this.merges = [];
        this.result = "success";
      }
      get failed() {
        return this.conflicts.length > 0;
      }
      get reason() {
        return this.result;
      }
      toString() {
        if (this.conflicts.length) {
          return `CONFLICTS: ${this.conflicts.join(", ")}`;
        }
        return "OK";
      }
    };
  }
});
var PullSummary, PullFailedSummary;
var init_PullSummary = __esm({
  "src/lib/responses/PullSummary.ts"() {
    PullSummary = class {
      constructor() {
        this.remoteMessages = {
          all: []
        };
        this.created = [];
        this.deleted = [];
        this.files = [];
        this.deletions = {};
        this.insertions = {};
        this.summary = {
          changes: 0,
          deletions: 0,
          insertions: 0
        };
      }
    };
    PullFailedSummary = class {
      constructor() {
        this.remote = "";
        this.hash = {
          local: "",
          remote: ""
        };
        this.branch = {
          local: "",
          remote: ""
        };
        this.message = "";
      }
      toString() {
        return this.message;
      }
    };
  }
});
function objectEnumerationResult(remoteMessages) {
  return remoteMessages.objects = remoteMessages.objects || {
    compressing: 0,
    counting: 0,
    enumerating: 0,
    packReused: 0,
    reused: { count: 0, delta: 0 },
    total: { count: 0, delta: 0 }
  };
}
function asObjectCount(source) {
  const count = /^\s*(\d+)/.exec(source);
  const delta = /delta (\d+)/i.exec(source);
  return {
    count: asNumber(count && count[1] || "0"),
    delta: asNumber(delta && delta[1] || "0")
  };
}
var remoteMessagesObjectParsers;
var init_parse_remote_objects = __esm({
  "src/lib/parsers/parse-remote-objects.ts"() {
    init_utils();
    remoteMessagesObjectParsers = [
      new RemoteLineParser(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i, (result, [action, count]) => {
        const key = action.toLowerCase();
        const enumeration = objectEnumerationResult(result.remoteMessages);
        Object.assign(enumeration, { [key]: asNumber(count) });
      }),
      new RemoteLineParser(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i, (result, [action, count]) => {
        const key = action.toLowerCase();
        const enumeration = objectEnumerationResult(result.remoteMessages);
        Object.assign(enumeration, { [key]: asNumber(count) });
      }),
      new RemoteLineParser(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i, (result, [total, reused, packReused]) => {
        const objects = objectEnumerationResult(result.remoteMessages);
        objects.total = asObjectCount(total);
        objects.reused = asObjectCount(reused);
        objects.packReused = asNumber(packReused);
      })
    ];
  }
});
function parseRemoteMessages(_stdOut, stdErr) {
  return parseStringResponse({ remoteMessages: new RemoteMessageSummary() }, parsers2, stdErr);
}
var parsers2, RemoteMessageSummary;
var init_parse_remote_messages = __esm({
  "src/lib/parsers/parse-remote-messages.ts"() {
    init_utils();
    init_parse_remote_objects();
    parsers2 = [
      new RemoteLineParser(/^remote:\s*(.+)$/, (result, [text]) => {
        result.remoteMessages.all.push(text.trim());
        return false;
      }),
      ...remoteMessagesObjectParsers,
      new RemoteLineParser([/create a (?:pull|merge) request/i, /\s(https?:\/\/\S+)$/], (result, [pullRequestUrl]) => {
        result.remoteMessages.pullRequestUrl = pullRequestUrl;
      }),
      new RemoteLineParser([/found (\d+) vulnerabilities.+\(([^)]+)\)/i, /\s(https?:\/\/\S+)$/], (result, [count, summary, url2]) => {
        result.remoteMessages.vulnerabilities = {
          count: asNumber(count),
          summary,
          url: url2
        };
      })
    ];
    RemoteMessageSummary = class {
      constructor() {
        this.all = [];
      }
    };
  }
});
function parsePullErrorResult(stdOut, stdErr) {
  const pullError = parseStringResponse(new PullFailedSummary(), errorParsers, [stdOut, stdErr]);
  return pullError.message && pullError;
}
var FILE_UPDATE_REGEX, SUMMARY_REGEX, ACTION_REGEX, parsers3, errorParsers, parsePullDetail, parsePullResult;
var init_parse_pull = __esm({
  "src/lib/parsers/parse-pull.ts"() {
    init_PullSummary();
    init_utils();
    init_parse_remote_messages();
    FILE_UPDATE_REGEX = /^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/;
    SUMMARY_REGEX = /(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/;
    ACTION_REGEX = /^(create|delete) mode \d+ (.+)/;
    parsers3 = [
      new LineParser(FILE_UPDATE_REGEX, (result, [file, insertions, deletions]) => {
        result.files.push(file);
        if (insertions) {
          result.insertions[file] = insertions.length;
        }
        if (deletions) {
          result.deletions[file] = deletions.length;
        }
      }),
      new LineParser(SUMMARY_REGEX, (result, [changes, , insertions, , deletions]) => {
        if (insertions !== void 0 || deletions !== void 0) {
          result.summary.changes = +changes || 0;
          result.summary.insertions = +insertions || 0;
          result.summary.deletions = +deletions || 0;
          return true;
        }
        return false;
      }),
      new LineParser(ACTION_REGEX, (result, [action, file]) => {
        append(result.files, file);
        append(action === "create" ? result.created : result.deleted, file);
      })
    ];
    errorParsers = [
      new LineParser(/^from\s(.+)$/i, (result, [remote]) => void (result.remote = remote)),
      new LineParser(/^fatal:\s(.+)$/, (result, [message]) => void (result.message = message)),
      new LineParser(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/, (result, [hashLocal, hashRemote, branchLocal, branchRemote]) => {
        result.branch.local = branchLocal;
        result.hash.local = hashLocal;
        result.branch.remote = branchRemote;
        result.hash.remote = hashRemote;
      })
    ];
    parsePullDetail = (stdOut, stdErr) => {
      return parseStringResponse(new PullSummary(), parsers3, [stdOut, stdErr]);
    };
    parsePullResult = (stdOut, stdErr) => {
      return Object.assign(new PullSummary(), parsePullDetail(stdOut, stdErr), parseRemoteMessages(stdOut, stdErr));
    };
  }
});
var parsers4, parseMergeResult, parseMergeDetail;
var init_parse_merge = __esm({
  "src/lib/parsers/parse-merge.ts"() {
    init_MergeSummary();
    init_utils();
    init_parse_pull();
    parsers4 = [
      new LineParser(/^Auto-merging\s+(.+)$/, (summary, [autoMerge]) => {
        summary.merges.push(autoMerge);
      }),
      new LineParser(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/, (summary, [reason, file]) => {
        summary.conflicts.push(new MergeSummaryConflict(reason, file));
      }),
      new LineParser(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/, (summary, [reason, file, deleteRef]) => {
        summary.conflicts.push(new MergeSummaryConflict(reason, file, { deleteRef }));
      }),
      new LineParser(/^CONFLICT\s+\((.+)\):/, (summary, [reason]) => {
        summary.conflicts.push(new MergeSummaryConflict(reason, null));
      }),
      new LineParser(/^Automatic merge failed;\s+(.+)$/, (summary, [result]) => {
        summary.result = result;
      })
    ];
    parseMergeResult = (stdOut, stdErr) => {
      return Object.assign(parseMergeDetail(stdOut, stdErr), parsePullResult(stdOut, stdErr));
    };
    parseMergeDetail = (stdOut) => {
      return parseStringResponse(new MergeSummaryDetail(), parsers4, stdOut);
    };
  }
});
function mergeTask(customArgs) {
  if (!customArgs.length) {
    return configurationErrorTask("Git.merge requires at least one option");
  }
  return {
    commands: ["merge", ...customArgs],
    format: "utf-8",
    parser(stdOut, stdErr) {
      const merge = parseMergeResult(stdOut, stdErr);
      if (merge.failed) {
        throw new GitResponseError(merge);
      }
      return merge;
    }
  };
}
var init_merge = __esm({
  "src/lib/tasks/merge.ts"() {
    init_git_response_error();
    init_parse_merge();
    init_task();
  }
});
function pushResultPushedItem(local, remote, status) {
  const deleted = status.includes("deleted");
  const tag = status.includes("tag") || /^refs\/tags/.test(local);
  const alreadyUpdated = !status.includes("new");
  return {
    deleted,
    tag,
    branch: !tag,
    new: !alreadyUpdated,
    alreadyUpdated,
    local,
    remote
  };
}
var parsers5, parsePushResult, parsePushDetail;
var init_parse_push = __esm({
  "src/lib/parsers/parse-push.ts"() {
    init_utils();
    init_parse_remote_messages();
    parsers5 = [
      new LineParser(/^Pushing to (.+)$/, (result, [repo]) => {
        result.repo = repo;
      }),
      new LineParser(/^updating local tracking ref '(.+)'/, (result, [local]) => {
        result.ref = __spreadProps(__spreadValues({}, result.ref || {}), {
          local
        });
      }),
      new LineParser(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/, (result, [local, remote, type]) => {
        result.pushed.push(pushResultPushedItem(local, remote, type));
      }),
      new LineParser(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/, (result, [local, remote, remoteName]) => {
        result.branch = __spreadProps(__spreadValues({}, result.branch || {}), {
          local,
          remote,
          remoteName
        });
      }),
      new LineParser(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/, (result, [local, remote, from, to]) => {
        result.update = {
          head: {
            local,
            remote
          },
          hash: {
            from,
            to
          }
        };
      })
    ];
    parsePushResult = (stdOut, stdErr) => {
      const pushDetail = parsePushDetail(stdOut, stdErr);
      const responseDetail = parseRemoteMessages(stdOut, stdErr);
      return __spreadValues(__spreadValues({}, pushDetail), responseDetail);
    };
    parsePushDetail = (stdOut, stdErr) => {
      return parseStringResponse({ pushed: [] }, parsers5, [stdOut, stdErr]);
    };
  }
});
var push_exports = {};
__export(push_exports, {
  pushTagsTask: () => pushTagsTask,
  pushTask: () => pushTask
});
function pushTagsTask(ref = {}, customArgs) {
  append(customArgs, "--tags");
  return pushTask(ref, customArgs);
}
function pushTask(ref = {}, customArgs) {
  const commands = ["push", ...customArgs];
  if (ref.branch) {
    commands.splice(1, 0, ref.branch);
  }
  if (ref.remote) {
    commands.splice(1, 0, ref.remote);
  }
  remove(commands, "-v");
  append(commands, "--verbose");
  append(commands, "--porcelain");
  return {
    commands,
    format: "utf-8",
    parser: parsePushResult
  };
}
var init_push = __esm({
  "src/lib/tasks/push.ts"() {
    init_parse_push();
    init_utils();
  }
});
function show_default() {
  return {
    showBuffer() {
      const commands = ["show", ...getTrailingOptions(arguments, 1)];
      if (!commands.includes("--binary")) {
        commands.splice(1, 0, "--binary");
      }
      return this._runTask(straightThroughBufferTask(commands), trailingFunctionArgument(arguments));
    },
    show() {
      const commands = ["show", ...getTrailingOptions(arguments, 1)];
      return this._runTask(straightThroughStringTask(commands), trailingFunctionArgument(arguments));
    }
  };
}
var init_show = __esm({
  "src/lib/tasks/show.ts"() {
    init_utils();
    init_task();
  }
});
var fromPathRegex, FileStatusSummary;
var init_FileStatusSummary = __esm({
  "src/lib/responses/FileStatusSummary.ts"() {
    fromPathRegex = /^(.+) -> (.+)$/;
    FileStatusSummary = class {
      constructor(path2, index, working_dir) {
        this.path = path2;
        this.index = index;
        this.working_dir = working_dir;
        if (index + working_dir === "R") {
          const detail = fromPathRegex.exec(path2) || [null, path2, path2];
          this.from = detail[1] || "";
          this.path = detail[2] || "";
        }
      }
    };
  }
});
function renamedFile(line) {
  const [to, from] = line.split(NULL);
  return {
    from: from || to,
    to
  };
}
function parser2(indexX, indexY, handler) {
  return [`${indexX}${indexY}`, handler];
}
function conflicts(indexX, ...indexY) {
  return indexY.map((y2) => parser2(indexX, y2, (result, file) => append(result.conflicted, file)));
}
function splitLine(result, lineStr) {
  const trimmed2 = lineStr.trim();
  switch (" ") {
    case trimmed2.charAt(2):
      return data(trimmed2.charAt(0), trimmed2.charAt(1), trimmed2.substr(3));
    case trimmed2.charAt(1):
      return data(" ", trimmed2.charAt(0), trimmed2.substr(2));
    default:
      return;
  }
  function data(index, workingDir, path2) {
    const raw = `${index}${workingDir}`;
    const handler = parsers6.get(raw);
    if (handler) {
      handler(result, path2);
    }
    if (raw !== "##" && raw !== "!!") {
      result.files.push(new FileStatusSummary(path2.replace(/\0.+$/, ""), index, workingDir));
    }
  }
}
var StatusSummary, parsers6, parseStatusSummary;
var init_StatusSummary = __esm({
  "src/lib/responses/StatusSummary.ts"() {
    init_utils();
    init_FileStatusSummary();
    StatusSummary = class {
      constructor() {
        this.not_added = [];
        this.conflicted = [];
        this.created = [];
        this.deleted = [];
        this.ignored = void 0;
        this.modified = [];
        this.renamed = [];
        this.files = [];
        this.staged = [];
        this.ahead = 0;
        this.behind = 0;
        this.current = null;
        this.tracking = null;
        this.detached = false;
        this.isClean = () => {
          return !this.files.length;
        };
      }
    };
    parsers6 = new Map([
      parser2(" ", "A", (result, file) => append(result.created, file)),
      parser2(" ", "D", (result, file) => append(result.deleted, file)),
      parser2(" ", "M", (result, file) => append(result.modified, file)),
      parser2("A", " ", (result, file) => append(result.created, file) && append(result.staged, file)),
      parser2("A", "M", (result, file) => append(result.created, file) && append(result.staged, file) && append(result.modified, file)),
      parser2("D", " ", (result, file) => append(result.deleted, file) && append(result.staged, file)),
      parser2("M", " ", (result, file) => append(result.modified, file) && append(result.staged, file)),
      parser2("M", "M", (result, file) => append(result.modified, file) && append(result.staged, file)),
      parser2("R", " ", (result, file) => {
        append(result.renamed, renamedFile(file));
      }),
      parser2("R", "M", (result, file) => {
        const renamed = renamedFile(file);
        append(result.renamed, renamed);
        append(result.modified, renamed.to);
      }),
      parser2("!", "!", (_result, _file) => {
        append(_result.ignored = _result.ignored || [], _file);
      }),
      parser2("?", "?", (result, file) => append(result.not_added, file)),
      ...conflicts("A", "A", "U"),
      ...conflicts("D", "D", "U"),
      ...conflicts("U", "A", "D", "U"),
      [
        "##",
        (result, line) => {
          const aheadReg = /ahead (\d+)/;
          const behindReg = /behind (\d+)/;
          const currentReg = /^(.+?(?=(?:\.{3}|\s|$)))/;
          const trackingReg = /\.{3}(\S*)/;
          const onEmptyBranchReg = /\son\s([\S]+)$/;
          let regexResult;
          regexResult = aheadReg.exec(line);
          result.ahead = regexResult && +regexResult[1] || 0;
          regexResult = behindReg.exec(line);
          result.behind = regexResult && +regexResult[1] || 0;
          regexResult = currentReg.exec(line);
          result.current = regexResult && regexResult[1];
          regexResult = trackingReg.exec(line);
          result.tracking = regexResult && regexResult[1];
          regexResult = onEmptyBranchReg.exec(line);
          result.current = regexResult && regexResult[1] || result.current;
          result.detached = /\(no branch\)/.test(line);
        }
      ]
    ]);
    parseStatusSummary = function(text) {
      const lines = text.split(NULL);
      const status = new StatusSummary();
      for (let i = 0, l = lines.length; i < l; ) {
        let line = lines[i++].trim();
        if (!line) {
          continue;
        }
        if (line.charAt(0) === "R") {
          line += NULL + (lines[i++] || "");
        }
        splitLine(status, line);
      }
      return status;
    };
  }
});
function statusTask(customArgs) {
  const commands = [
    "status",
    "--porcelain",
    "-b",
    "-u",
    "--null",
    ...customArgs.filter((arg) => !ignoredOptions.includes(arg))
  ];
  return {
    format: "utf-8",
    commands,
    parser(text) {
      return parseStatusSummary(text);
    }
  };
}
var ignoredOptions;
var init_status = __esm({
  "src/lib/tasks/status.ts"() {
    init_StatusSummary();
    ignoredOptions = ["--null", "-z"];
  }
});
function versionResponse(major = 0, minor = 0, patch2 = 0, agent = "", installed = true) {
  return Object.defineProperty({
    major,
    minor,
    patch: patch2,
    agent,
    installed
  }, "toString", {
    value() {
      return `${this.major}.${this.minor}.${this.patch}`;
    },
    configurable: false,
    enumerable: false
  });
}
function notInstalledResponse() {
  return versionResponse(0, 0, 0, "", false);
}
function version_default() {
  return {
    version() {
      return this._runTask({
        commands: ["--version"],
        format: "utf-8",
        parser: versionParser,
        onError(result, error, done, fail) {
          if (result.exitCode === -2) {
            return done(Buffer.from(NOT_INSTALLED));
          }
          fail(error);
        }
      });
    }
  };
}
function versionParser(stdOut) {
  if (stdOut === NOT_INSTALLED) {
    return notInstalledResponse();
  }
  return parseStringResponse(versionResponse(0, 0, 0, stdOut), parsers7, stdOut);
}
var NOT_INSTALLED, parsers7;
var init_version = __esm({
  "src/lib/tasks/version.ts"() {
    init_utils();
    NOT_INSTALLED = "installed=false";
    parsers7 = [
      new LineParser(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/, (result, [major, minor, patch2, agent = ""]) => {
        Object.assign(result, versionResponse(asNumber(major), asNumber(minor), asNumber(patch2), agent));
      }),
      new LineParser(/version (\d+)\.(\d+)\.(\D+)(.+)?$/, (result, [major, minor, patch2, agent = ""]) => {
        Object.assign(result, versionResponse(asNumber(major), asNumber(minor), patch2, agent));
      })
    ];
  }
});
var simple_git_api_exports = {};
__export(simple_git_api_exports, {
  SimpleGitApi: () => SimpleGitApi
});
var SimpleGitApi;
var init_simple_git_api = __esm({
  "src/lib/simple-git-api.ts"() {
    init_task_callback();
    init_change_working_directory();
    init_checkout();
    init_commit();
    init_config();
    init_first_commit();
    init_grep();
    init_hash_object();
    init_init();
    init_log();
    init_merge();
    init_push();
    init_show();
    init_status();
    init_task();
    init_version();
    init_utils();
    SimpleGitApi = class {
      constructor(_executor) {
        this._executor = _executor;
      }
      _runTask(task, then) {
        const chain = this._executor.chain();
        const promise = chain.push(task);
        if (then) {
          taskCallback(task, promise, then);
        }
        return Object.create(this, {
          then: { value: promise.then.bind(promise) },
          catch: { value: promise.catch.bind(promise) },
          _executor: { value: chain }
        });
      }
      add(files) {
        return this._runTask(straightThroughStringTask(["add", ...asArray(files)]), trailingFunctionArgument(arguments));
      }
      cwd(directory) {
        const next = trailingFunctionArgument(arguments);
        if (typeof directory === "string") {
          return this._runTask(changeWorkingDirectoryTask(directory, this._executor), next);
        }
        if (typeof (directory == null ? void 0 : directory.path) === "string") {
          return this._runTask(changeWorkingDirectoryTask(directory.path, directory.root && this._executor || void 0), next);
        }
        return this._runTask(configurationErrorTask("Git.cwd: workingDirectory must be supplied as a string"), next);
      }
      hashObject(path2, write) {
        return this._runTask(hashObjectTask(path2, write === true), trailingFunctionArgument(arguments));
      }
      init(bare) {
        return this._runTask(initTask(bare === true, this._executor.cwd, getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
      }
      merge() {
        return this._runTask(mergeTask(getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
      }
      mergeFromTo(remote, branch) {
        if (!(filterString(remote) && filterString(branch))) {
          return this._runTask(configurationErrorTask(`Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings`));
        }
        return this._runTask(mergeTask([remote, branch, ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments, false));
      }
      outputHandler(handler) {
        this._executor.outputHandler = handler;
        return this;
      }
      push() {
        const task = pushTask({
          remote: filterType(arguments[0], filterString),
          branch: filterType(arguments[1], filterString)
        }, getTrailingOptions(arguments));
        return this._runTask(task, trailingFunctionArgument(arguments));
      }
      stash() {
        return this._runTask(straightThroughStringTask(["stash", ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments));
      }
      status() {
        return this._runTask(statusTask(getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
      }
    };
    Object.assign(SimpleGitApi.prototype, checkout_default(), commit_default(), config_default(), first_commit_default(), grep_default(), log_default(), show_default(), version_default());
  }
});
var scheduler_exports = {};
__export(scheduler_exports, {
  Scheduler: () => Scheduler
});
var createScheduledTask, Scheduler;
var init_scheduler = __esm({
  "src/lib/runners/scheduler.ts"() {
    init_utils();
    init_git_logger();
    createScheduledTask = (() => {
      let id = 0;
      return () => {
        id++;
        const { promise, done } = createDeferred();
        return {
          promise,
          done,
          id
        };
      };
    })();
    Scheduler = class {
      constructor(concurrency = 2) {
        this.concurrency = concurrency;
        this.logger = createLogger("", "scheduler");
        this.pending = [];
        this.running = [];
        this.logger(`Constructed, concurrency=%s`, concurrency);
      }
      schedule() {
        if (!this.pending.length || this.running.length >= this.concurrency) {
          this.logger(`Schedule attempt ignored, pending=%s running=%s concurrency=%s`, this.pending.length, this.running.length, this.concurrency);
          return;
        }
        const task = append(this.running, this.pending.shift());
        this.logger(`Attempting id=%s`, task.id);
        task.done(() => {
          this.logger(`Completing id=`, task.id);
          remove(this.running, task);
          this.schedule();
        });
      }
      next() {
        const { promise, id } = append(this.pending, createScheduledTask());
        this.logger(`Scheduling id=%s`, id);
        this.schedule();
        return promise;
      }
    };
  }
});
var apply_patch_exports = {};
__export(apply_patch_exports, {
  applyPatchTask: () => applyPatchTask
});
function applyPatchTask(patches, customArgs) {
  return straightThroughStringTask(["apply", ...customArgs, ...patches]);
}
var init_apply_patch = __esm({
  "src/lib/tasks/apply-patch.ts"() {
    init_task();
  }
});
function branchDeletionSuccess(branch, hash) {
  return {
    branch,
    hash,
    success: true
  };
}
function branchDeletionFailure(branch) {
  return {
    branch,
    hash: null,
    success: false
  };
}
var BranchDeletionBatch;
var init_BranchDeleteSummary = __esm({
  "src/lib/responses/BranchDeleteSummary.ts"() {
    BranchDeletionBatch = class {
      constructor() {
        this.all = [];
        this.branches = {};
        this.errors = [];
      }
      get success() {
        return !this.errors.length;
      }
    };
  }
});
function hasBranchDeletionError(data, processExitCode) {
  return processExitCode === 1 && deleteErrorRegex.test(data);
}
var deleteSuccessRegex, deleteErrorRegex, parsers8, parseBranchDeletions;
var init_parse_branch_delete = __esm({
  "src/lib/parsers/parse-branch-delete.ts"() {
    init_BranchDeleteSummary();
    init_utils();
    deleteSuccessRegex = /(\S+)\s+\(\S+\s([^)]+)\)/;
    deleteErrorRegex = /^error[^']+'([^']+)'/m;
    parsers8 = [
      new LineParser(deleteSuccessRegex, (result, [branch, hash]) => {
        const deletion = branchDeletionSuccess(branch, hash);
        result.all.push(deletion);
        result.branches[branch] = deletion;
      }),
      new LineParser(deleteErrorRegex, (result, [branch]) => {
        const deletion = branchDeletionFailure(branch);
        result.errors.push(deletion);
        result.all.push(deletion);
        result.branches[branch] = deletion;
      })
    ];
    parseBranchDeletions = (stdOut, stdErr) => {
      return parseStringResponse(new BranchDeletionBatch(), parsers8, [stdOut, stdErr]);
    };
  }
});
var BranchSummaryResult;
var init_BranchSummary = __esm({
  "src/lib/responses/BranchSummary.ts"() {
    BranchSummaryResult = class {
      constructor() {
        this.all = [];
        this.branches = {};
        this.current = "";
        this.detached = false;
      }
      push(status, detached, name, commit, label) {
        if (status === "*") {
          this.detached = detached;
          this.current = name;
        }
        this.all.push(name);
        this.branches[name] = {
          current: status === "*",
          linkedWorkTree: status === "+",
          name,
          commit,
          label
        };
      }
    };
  }
});
function branchStatus(input) {
  return input ? input.charAt(0) : "";
}
function parseBranchSummary(stdOut) {
  return parseStringResponse(new BranchSummaryResult(), parsers9, stdOut);
}
var parsers9;
var init_parse_branch = __esm({
  "src/lib/parsers/parse-branch.ts"() {
    init_BranchSummary();
    init_utils();
    parsers9 = [
      new LineParser(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/, (result, [current, name, commit, label]) => {
        result.push(branchStatus(current), true, name, commit, label);
      }),
      new LineParser(/^([*+]\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s, (result, [current, name, commit, label]) => {
        result.push(branchStatus(current), false, name, commit, label);
      })
    ];
  }
});
var branch_exports = {};
__export(branch_exports, {
  branchLocalTask: () => branchLocalTask,
  branchTask: () => branchTask,
  containsDeleteBranchCommand: () => containsDeleteBranchCommand,
  deleteBranchTask: () => deleteBranchTask,
  deleteBranchesTask: () => deleteBranchesTask
});
function containsDeleteBranchCommand(commands) {
  const deleteCommands = ["-d", "-D", "--delete"];
  return commands.some((command) => deleteCommands.includes(command));
}
function branchTask(customArgs) {
  const isDelete = containsDeleteBranchCommand(customArgs);
  const commands = ["branch", ...customArgs];
  if (commands.length === 1) {
    commands.push("-a");
  }
  if (!commands.includes("-v")) {
    commands.splice(1, 0, "-v");
  }
  return {
    format: "utf-8",
    commands,
    parser(stdOut, stdErr) {
      if (isDelete) {
        return parseBranchDeletions(stdOut, stdErr).all[0];
      }
      return parseBranchSummary(stdOut);
    }
  };
}
function branchLocalTask() {
  const parser3 = parseBranchSummary;
  return {
    format: "utf-8",
    commands: ["branch", "-v"],
    parser: parser3
  };
}
function deleteBranchesTask(branches, forceDelete = false) {
  return {
    format: "utf-8",
    commands: ["branch", "-v", forceDelete ? "-D" : "-d", ...branches],
    parser(stdOut, stdErr) {
      return parseBranchDeletions(stdOut, stdErr);
    },
    onError({ exitCode, stdOut }, error, done, fail) {
      if (!hasBranchDeletionError(String(error), exitCode)) {
        return fail(error);
      }
      done(stdOut);
    }
  };
}
function deleteBranchTask(branch, forceDelete = false) {
  const task = {
    format: "utf-8",
    commands: ["branch", "-v", forceDelete ? "-D" : "-d", branch],
    parser(stdOut, stdErr) {
      return parseBranchDeletions(stdOut, stdErr).branches[branch];
    },
    onError({ exitCode, stdErr, stdOut }, error, _, fail) {
      if (!hasBranchDeletionError(String(error), exitCode)) {
        return fail(error);
      }
      throw new GitResponseError(task.parser(bufferToString(stdOut), bufferToString(stdErr)), String(error));
    }
  };
  return task;
}
var init_branch = __esm({
  "src/lib/tasks/branch.ts"() {
    init_git_response_error();
    init_parse_branch_delete();
    init_parse_branch();
    init_utils();
  }
});
var parseCheckIgnore;
var init_CheckIgnore = __esm({
  "src/lib/responses/CheckIgnore.ts"() {
    parseCheckIgnore = (text) => {
      return text.split(/\n/g).map((line) => line.trim()).filter((file) => !!file);
    };
  }
});
var check_ignore_exports = {};
__export(check_ignore_exports, {
  checkIgnoreTask: () => checkIgnoreTask
});
function checkIgnoreTask(paths) {
  return {
    commands: ["check-ignore", ...paths],
    format: "utf-8",
    parser: parseCheckIgnore
  };
}
var init_check_ignore = __esm({
  "src/lib/tasks/check-ignore.ts"() {
    init_CheckIgnore();
  }
});
var clone_exports = {};
__export(clone_exports, {
  cloneMirrorTask: () => cloneMirrorTask,
  cloneTask: () => cloneTask
});
function disallowedCommand(command) {
  return /^--upload-pack(=|$)/.test(command);
}
function cloneTask(repo, directory, customArgs) {
  const commands = ["clone", ...customArgs];
  filterString(repo) && commands.push(repo);
  filterString(directory) && commands.push(directory);
  const banned = commands.find(disallowedCommand);
  if (banned) {
    return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);
  }
  return straightThroughStringTask(commands);
}
function cloneMirrorTask(repo, directory, customArgs) {
  append(customArgs, "--mirror");
  return cloneTask(repo, directory, customArgs);
}
var init_clone = __esm({
  "src/lib/tasks/clone.ts"() {
    init_task();
    init_utils();
  }
});
function parseFetchResult(stdOut, stdErr) {
  const result = {
    raw: stdOut,
    remote: null,
    branches: [],
    tags: [],
    updated: [],
    deleted: []
  };
  return parseStringResponse(result, parsers10, [stdOut, stdErr]);
}
var parsers10;
var init_parse_fetch = __esm({
  "src/lib/parsers/parse-fetch.ts"() {
    init_utils();
    parsers10 = [
      new LineParser(/From (.+)$/, (result, [remote]) => {
        result.remote = remote;
      }),
      new LineParser(/\* \[new branch]\s+(\S+)\s*-> (.+)$/, (result, [name, tracking]) => {
        result.branches.push({
          name,
          tracking
        });
      }),
      new LineParser(/\* \[new tag]\s+(\S+)\s*-> (.+)$/, (result, [name, tracking]) => {
        result.tags.push({
          name,
          tracking
        });
      }),
      new LineParser(/- \[deleted]\s+\S+\s*-> (.+)$/, (result, [tracking]) => {
        result.deleted.push({
          tracking
        });
      }),
      new LineParser(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/, (result, [from, to, name, tracking]) => {
        result.updated.push({
          name,
          tracking,
          to,
          from
        });
      })
    ];
  }
});
var fetch_exports = {};
__export(fetch_exports, {
  fetchTask: () => fetchTask
});
function disallowedCommand2(command) {
  return /^--upload-pack(=|$)/.test(command);
}
function fetchTask(remote, branch, customArgs) {
  const commands = ["fetch", ...customArgs];
  if (remote && branch) {
    commands.push(remote, branch);
  }
  const banned = commands.find(disallowedCommand2);
  if (banned) {
    return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);
  }
  return {
    commands,
    format: "utf-8",
    parser: parseFetchResult
  };
}
var init_fetch = __esm({
  "src/lib/tasks/fetch.ts"() {
    init_parse_fetch();
    init_task();
  }
});
function parseMoveResult(stdOut) {
  return parseStringResponse({ moves: [] }, parsers11, stdOut);
}
var parsers11;
var init_parse_move = __esm({
  "src/lib/parsers/parse-move.ts"() {
    init_utils();
    parsers11 = [
      new LineParser(/^Renaming (.+) to (.+)$/, (result, [from, to]) => {
        result.moves.push({ from, to });
      })
    ];
  }
});
var move_exports = {};
__export(move_exports, {
  moveTask: () => moveTask
});
function moveTask(from, to) {
  return {
    commands: ["mv", "-v", ...asArray(from), to],
    format: "utf-8",
    parser: parseMoveResult
  };
}
var init_move = __esm({
  "src/lib/tasks/move.ts"() {
    init_parse_move();
    init_utils();
  }
});
var pull_exports = {};
__export(pull_exports, {
  pullTask: () => pullTask
});
function pullTask(remote, branch, customArgs) {
  const commands = ["pull", ...customArgs];
  if (remote && branch) {
    commands.splice(1, 0, remote, branch);
  }
  return {
    commands,
    format: "utf-8",
    parser(stdOut, stdErr) {
      return parsePullResult(stdOut, stdErr);
    },
    onError(result, _error, _done, fail) {
      const pullError = parsePullErrorResult(bufferToString(result.stdOut), bufferToString(result.stdErr));
      if (pullError) {
        return fail(new GitResponseError(pullError));
      }
      fail(_error);
    }
  };
}
var init_pull = __esm({
  "src/lib/tasks/pull.ts"() {
    init_git_response_error();
    init_parse_pull();
    init_utils();
  }
});
function parseGetRemotes(text) {
  const remotes = {};
  forEach(text, ([name]) => remotes[name] = { name });
  return Object.values(remotes);
}
function parseGetRemotesVerbose(text) {
  const remotes = {};
  forEach(text, ([name, url2, purpose]) => {
    if (!remotes.hasOwnProperty(name)) {
      remotes[name] = {
        name,
        refs: { fetch: "", push: "" }
      };
    }
    if (purpose && url2) {
      remotes[name].refs[purpose.replace(/[^a-z]/g, "")] = url2;
    }
  });
  return Object.values(remotes);
}
function forEach(text, handler) {
  forEachLineWithContent(text, (line) => handler(line.split(/\s+/)));
}
var init_GetRemoteSummary = __esm({
  "src/lib/responses/GetRemoteSummary.ts"() {
    init_utils();
  }
});
var remote_exports = {};
__export(remote_exports, {
  addRemoteTask: () => addRemoteTask,
  getRemotesTask: () => getRemotesTask,
  listRemotesTask: () => listRemotesTask,
  remoteTask: () => remoteTask,
  removeRemoteTask: () => removeRemoteTask
});
function addRemoteTask(remoteName, remoteRepo, customArgs = []) {
  return straightThroughStringTask(["remote", "add", ...customArgs, remoteName, remoteRepo]);
}
function getRemotesTask(verbose) {
  const commands = ["remote"];
  if (verbose) {
    commands.push("-v");
  }
  return {
    commands,
    format: "utf-8",
    parser: verbose ? parseGetRemotesVerbose : parseGetRemotes
  };
}
function listRemotesTask(customArgs = []) {
  const commands = [...customArgs];
  if (commands[0] !== "ls-remote") {
    commands.unshift("ls-remote");
  }
  return straightThroughStringTask(commands);
}
function remoteTask(customArgs = []) {
  const commands = [...customArgs];
  if (commands[0] !== "remote") {
    commands.unshift("remote");
  }
  return straightThroughStringTask(commands);
}
function removeRemoteTask(remoteName) {
  return straightThroughStringTask(["remote", "remove", remoteName]);
}
var init_remote = __esm({
  "src/lib/tasks/remote.ts"() {
    init_GetRemoteSummary();
    init_task();
  }
});
var stash_list_exports = {};
__export(stash_list_exports, {
  stashListTask: () => stashListTask
});
function stashListTask(opt = {}, customArgs) {
  const options = parseLogOptions(opt);
  const commands = ["stash", "list", ...options.commands, ...customArgs];
  const parser3 = createListLogSummaryParser(options.splitter, options.fields, logFormatFromCommand(commands));
  return validateLogFormatConfig(commands) || {
    commands,
    format: "utf-8",
    parser: parser3
  };
}
var init_stash_list = __esm({
  "src/lib/tasks/stash-list.ts"() {
    init_log_format();
    init_parse_list_log_summary();
    init_diff();
    init_log();
  }
});
var sub_module_exports = {};
__export(sub_module_exports, {
  addSubModuleTask: () => addSubModuleTask,
  initSubModuleTask: () => initSubModuleTask,
  subModuleTask: () => subModuleTask,
  updateSubModuleTask: () => updateSubModuleTask
});
function addSubModuleTask(repo, path2) {
  return subModuleTask(["add", repo, path2]);
}
function initSubModuleTask(customArgs) {
  return subModuleTask(["init", ...customArgs]);
}
function subModuleTask(customArgs) {
  const commands = [...customArgs];
  if (commands[0] !== "submodule") {
    commands.unshift("submodule");
  }
  return straightThroughStringTask(commands);
}
function updateSubModuleTask(customArgs) {
  return subModuleTask(["update", ...customArgs]);
}
var init_sub_module = __esm({
  "src/lib/tasks/sub-module.ts"() {
    init_task();
  }
});
function singleSorted(a, b) {
  const aIsNum = isNaN(a);
  const bIsNum = isNaN(b);
  if (aIsNum !== bIsNum) {
    return aIsNum ? 1 : -1;
  }
  return aIsNum ? sorted(a, b) : 0;
}
function sorted(a, b) {
  return a === b ? 0 : a > b ? 1 : -1;
}
function trimmed(input) {
  return input.trim();
}
function toNumber(input) {
  if (typeof input === "string") {
    return parseInt(input.replace(/^\D+/g, ""), 10) || 0;
  }
  return 0;
}
var TagList, parseTagList;
var init_TagList = __esm({
  "src/lib/responses/TagList.ts"() {
    TagList = class {
      constructor(all, latest) {
        this.all = all;
        this.latest = latest;
      }
    };
    parseTagList = function(data, customSort = false) {
      const tags = data.split("\n").map(trimmed).filter(Boolean);
      if (!customSort) {
        tags.sort(function(tagA, tagB) {
          const partsA = tagA.split(".");
          const partsB = tagB.split(".");
          if (partsA.length === 1 || partsB.length === 1) {
            return singleSorted(toNumber(partsA[0]), toNumber(partsB[0]));
          }
          for (let i = 0, l = Math.max(partsA.length, partsB.length); i < l; i++) {
            const diff = sorted(toNumber(partsA[i]), toNumber(partsB[i]));
            if (diff) {
              return diff;
            }
          }
          return 0;
        });
      }
      const latest = customSort ? tags[0] : [...tags].reverse().find((tag) => tag.indexOf(".") >= 0);
      return new TagList(tags, latest);
    };
  }
});
var tag_exports = {};
__export(tag_exports, {
  addAnnotatedTagTask: () => addAnnotatedTagTask,
  addTagTask: () => addTagTask,
  tagListTask: () => tagListTask
});
function tagListTask(customArgs = []) {
  const hasCustomSort = customArgs.some((option) => /^--sort=/.test(option));
  return {
    format: "utf-8",
    commands: ["tag", "-l", ...customArgs],
    parser(text) {
      return parseTagList(text, hasCustomSort);
    }
  };
}
function addTagTask(name) {
  return {
    format: "utf-8",
    commands: ["tag", name],
    parser() {
      return { name };
    }
  };
}
function addAnnotatedTagTask(name, tagMessage) {
  return {
    format: "utf-8",
    commands: ["tag", "-a", "-m", tagMessage, name],
    parser() {
      return { name };
    }
  };
}
var init_tag = __esm({
  "src/lib/tasks/tag.ts"() {
    init_TagList();
  }
});
var require_git = __commonJS({
  "src/git.js"(exports, module) {
    var { GitExecutor: GitExecutor2 } = (init_git_executor(), __toCommonJS(git_executor_exports));
    var { SimpleGitApi: SimpleGitApi2 } = (init_simple_git_api(), __toCommonJS(simple_git_api_exports));
    var { Scheduler: Scheduler2 } = (init_scheduler(), __toCommonJS(scheduler_exports));
    var { configurationErrorTask: configurationErrorTask2 } = (init_task(), __toCommonJS(task_exports));
    var {
      asArray: asArray2,
      filterArray: filterArray2,
      filterPrimitives: filterPrimitives2,
      filterString: filterString2,
      filterStringOrStringArray: filterStringOrStringArray2,
      filterType: filterType2,
      getTrailingOptions: getTrailingOptions2,
      trailingFunctionArgument: trailingFunctionArgument2,
      trailingOptionsArgument: trailingOptionsArgument2
    } = (init_utils(), __toCommonJS(utils_exports));
    var { applyPatchTask: applyPatchTask2 } = (init_apply_patch(), __toCommonJS(apply_patch_exports));
    var {
      branchTask: branchTask2,
      branchLocalTask: branchLocalTask2,
      deleteBranchesTask: deleteBranchesTask2,
      deleteBranchTask: deleteBranchTask2
    } = (init_branch(), __toCommonJS(branch_exports));
    var { checkIgnoreTask: checkIgnoreTask2 } = (init_check_ignore(), __toCommonJS(check_ignore_exports));
    var { checkIsRepoTask: checkIsRepoTask2 } = (init_check_is_repo(), __toCommonJS(check_is_repo_exports));
    var { cloneTask: cloneTask2, cloneMirrorTask: cloneMirrorTask2 } = (init_clone(), __toCommonJS(clone_exports));
    var { cleanWithOptionsTask: cleanWithOptionsTask2, isCleanOptionsArray: isCleanOptionsArray2 } = (init_clean(), __toCommonJS(clean_exports));
    var { diffSummaryTask: diffSummaryTask2 } = (init_diff(), __toCommonJS(diff_exports));
    var { fetchTask: fetchTask2 } = (init_fetch(), __toCommonJS(fetch_exports));
    var { moveTask: moveTask2 } = (init_move(), __toCommonJS(move_exports));
    var { pullTask: pullTask2 } = (init_pull(), __toCommonJS(pull_exports));
    var { pushTagsTask: pushTagsTask2 } = (init_push(), __toCommonJS(push_exports));
    var {
      addRemoteTask: addRemoteTask2,
      getRemotesTask: getRemotesTask2,
      listRemotesTask: listRemotesTask2,
      remoteTask: remoteTask2,
      removeRemoteTask: removeRemoteTask2
    } = (init_remote(), __toCommonJS(remote_exports));
    var { getResetMode: getResetMode2, resetTask: resetTask2 } = (init_reset(), __toCommonJS(reset_exports));
    var { stashListTask: stashListTask2 } = (init_stash_list(), __toCommonJS(stash_list_exports));
    var {
      addSubModuleTask: addSubModuleTask2,
      initSubModuleTask: initSubModuleTask2,
      subModuleTask: subModuleTask2,
      updateSubModuleTask: updateSubModuleTask2
    } = (init_sub_module(), __toCommonJS(sub_module_exports));
    var { addAnnotatedTagTask: addAnnotatedTagTask2, addTagTask: addTagTask2, tagListTask: tagListTask2 } = (init_tag(), __toCommonJS(tag_exports));
    var { straightThroughBufferTask: straightThroughBufferTask2, straightThroughStringTask: straightThroughStringTask2 } = (init_task(), __toCommonJS(task_exports));
    function Git2(options, plugins) {
      this._executor = new GitExecutor2(options.binary, options.baseDir, new Scheduler2(options.maxConcurrentProcesses), plugins);
      this._trimmed = options.trimmed;
    }
    (Git2.prototype = Object.create(SimpleGitApi2.prototype)).constructor = Git2;
    Git2.prototype.customBinary = function(command) {
      this._executor.binary = command;
      return this;
    };
    Git2.prototype.env = function(name, value) {
      if (arguments.length === 1 && typeof name === "object") {
        this._executor.env = name;
      } else {
        (this._executor.env = this._executor.env || {})[name] = value;
      }
      return this;
    };
    Git2.prototype.stashList = function(options) {
      return this._runTask(stashListTask2(trailingOptionsArgument2(arguments) || {}, filterArray2(options) && options || []), trailingFunctionArgument2(arguments));
    };
    function createCloneTask(api, task, repoPath, localPath) {
      if (typeof repoPath !== "string") {
        return configurationErrorTask2(`git.${api}() requires a string 'repoPath'`);
      }
      return task(repoPath, filterType2(localPath, filterString2), getTrailingOptions2(arguments));
    }
    Git2.prototype.clone = function() {
      return this._runTask(createCloneTask("clone", cloneTask2, ...arguments), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.mirror = function() {
      return this._runTask(createCloneTask("mirror", cloneMirrorTask2, ...arguments), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.mv = function(from, to) {
      return this._runTask(moveTask2(from, to), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.checkoutLatestTag = function(then) {
      var git = this;
      return this.pull(function() {
        git.tags(function(err, tags) {
          git.checkout(tags.latest, then);
        });
      });
    };
    Git2.prototype.pull = function(remote, branch, options, then) {
      return this._runTask(pullTask2(filterType2(remote, filterString2), filterType2(branch, filterString2), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.fetch = function(remote, branch) {
      return this._runTask(fetchTask2(filterType2(remote, filterString2), filterType2(branch, filterString2), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.silent = function(silence) {
      console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3");
      return this;
    };
    Git2.prototype.tags = function(options, then) {
      return this._runTask(tagListTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.rebase = function() {
      return this._runTask(straightThroughStringTask2(["rebase", ...getTrailingOptions2(arguments)]), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.reset = function(mode) {
      return this._runTask(resetTask2(getResetMode2(mode), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.revert = function(commit) {
      const next = trailingFunctionArgument2(arguments);
      if (typeof commit !== "string") {
        return this._runTask(configurationErrorTask2("Commit must be a string"), next);
      }
      return this._runTask(straightThroughStringTask2(["revert", ...getTrailingOptions2(arguments, 0, true), commit]), next);
    };
    Git2.prototype.addTag = function(name) {
      const task = typeof name === "string" ? addTagTask2(name) : configurationErrorTask2("Git.addTag requires a tag name");
      return this._runTask(task, trailingFunctionArgument2(arguments));
    };
    Git2.prototype.addAnnotatedTag = function(tagName, tagMessage) {
      return this._runTask(addAnnotatedTagTask2(tagName, tagMessage), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.deleteLocalBranch = function(branchName, forceDelete, then) {
      return this._runTask(deleteBranchTask2(branchName, typeof forceDelete === "boolean" ? forceDelete : false), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.deleteLocalBranches = function(branchNames, forceDelete, then) {
      return this._runTask(deleteBranchesTask2(branchNames, typeof forceDelete === "boolean" ? forceDelete : false), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.branch = function(options, then) {
      return this._runTask(branchTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.branchLocal = function(then) {
      return this._runTask(branchLocalTask2(), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.raw = function(commands) {
      const createRestCommands = !Array.isArray(commands);
      const command = [].slice.call(createRestCommands ? arguments : commands, 0);
      for (let i = 0; i < command.length && createRestCommands; i++) {
        if (!filterPrimitives2(command[i])) {
          command.splice(i, command.length - i);
          break;
        }
      }
      command.push(...getTrailingOptions2(arguments, 0, true));
      var next = trailingFunctionArgument2(arguments);
      if (!command.length) {
        return this._runTask(configurationErrorTask2("Raw: must supply one or more command to execute"), next);
      }
      return this._runTask(straightThroughStringTask2(command, this._trimmed), next);
    };
    Git2.prototype.submoduleAdd = function(repo, path2, then) {
      return this._runTask(addSubModuleTask2(repo, path2), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.submoduleUpdate = function(args, then) {
      return this._runTask(updateSubModuleTask2(getTrailingOptions2(arguments, true)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.submoduleInit = function(args, then) {
      return this._runTask(initSubModuleTask2(getTrailingOptions2(arguments, true)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.subModule = function(options, then) {
      return this._runTask(subModuleTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.listRemote = function() {
      return this._runTask(listRemotesTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.addRemote = function(remoteName, remoteRepo, then) {
      return this._runTask(addRemoteTask2(remoteName, remoteRepo, getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.removeRemote = function(remoteName, then) {
      return this._runTask(removeRemoteTask2(remoteName), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.getRemotes = function(verbose, then) {
      return this._runTask(getRemotesTask2(verbose === true), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.remote = function(options, then) {
      return this._runTask(remoteTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.tag = function(options, then) {
      const command = getTrailingOptions2(arguments);
      if (command[0] !== "tag") {
        command.unshift("tag");
      }
      return this._runTask(straightThroughStringTask2(command), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.updateServerInfo = function(then) {
      return this._runTask(straightThroughStringTask2(["update-server-info"]), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.pushTags = function(remote, then) {
      const task = pushTagsTask2({ remote: filterType2(remote, filterString2) }, getTrailingOptions2(arguments));
      return this._runTask(task, trailingFunctionArgument2(arguments));
    };
    Git2.prototype.rm = function(files) {
      return this._runTask(straightThroughStringTask2(["rm", "-f", ...asArray2(files)]), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.rmKeepLocal = function(files) {
      return this._runTask(straightThroughStringTask2(["rm", "--cached", ...asArray2(files)]), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.catFile = function(options, then) {
      return this._catFile("utf-8", arguments);
    };
    Git2.prototype.binaryCatFile = function() {
      return this._catFile("buffer", arguments);
    };
    Git2.prototype._catFile = function(format, args) {
      var handler = trailingFunctionArgument2(args);
      var command = ["cat-file"];
      var options = args[0];
      if (typeof options === "string") {
        return this._runTask(configurationErrorTask2("Git.catFile: options must be supplied as an array of strings"), handler);
      }
      if (Array.isArray(options)) {
        command.push.apply(command, options);
      }
      const task = format === "buffer" ? straightThroughBufferTask2(command) : straightThroughStringTask2(command);
      return this._runTask(task, handler);
    };
    Git2.prototype.diff = function(options, then) {
      const task = filterString2(options) ? configurationErrorTask2("git.diff: supplying options as a single string is no longer supported, switch to an array of strings") : straightThroughStringTask2(["diff", ...getTrailingOptions2(arguments)]);
      return this._runTask(task, trailingFunctionArgument2(arguments));
    };
    Git2.prototype.diffSummary = function() {
      return this._runTask(diffSummaryTask2(getTrailingOptions2(arguments, 1)), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.applyPatch = function(patches) {
      const task = !filterStringOrStringArray2(patches) ? configurationErrorTask2(`git.applyPatch requires one or more string patches as the first argument`) : applyPatchTask2(asArray2(patches), getTrailingOptions2([].slice.call(arguments, 1)));
      return this._runTask(task, trailingFunctionArgument2(arguments));
    };
    Git2.prototype.revparse = function() {
      const commands = ["rev-parse", ...getTrailingOptions2(arguments, true)];
      return this._runTask(straightThroughStringTask2(commands, true), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.clean = function(mode, options, then) {
      const usingCleanOptionsArray = isCleanOptionsArray2(mode);
      const cleanMode = usingCleanOptionsArray && mode.join("") || filterType2(mode, filterString2) || "";
      const customArgs = getTrailingOptions2([].slice.call(arguments, usingCleanOptionsArray ? 1 : 0));
      return this._runTask(cleanWithOptionsTask2(cleanMode, customArgs), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.exec = function(then) {
      const task = {
        commands: [],
        format: "utf-8",
        parser() {
          if (typeof then === "function") {
            then();
          }
        }
      };
      return this._runTask(task);
    };
    Git2.prototype.clearQueue = function() {
      return this;
    };
    Git2.prototype.checkIgnore = function(pathnames, then) {
      return this._runTask(checkIgnoreTask2(asArray2(filterType2(pathnames, filterStringOrStringArray2, []))), trailingFunctionArgument2(arguments));
    };
    Git2.prototype.checkIsRepo = function(checkType, then) {
      return this._runTask(checkIsRepoTask2(filterType2(checkType, filterString2)), trailingFunctionArgument2(arguments));
    };
    module.exports = Git2;
  }
});
init_pathspec();
init_git_error();
var GitConstructError = class extends GitError {
  constructor(config, message) {
    super(void 0, message);
    this.config = config;
  }
};
init_git_error();
init_git_error();
var GitPluginError = class extends GitError {
  constructor(task, plugin, message) {
    super(task, message);
    this.task = task;
    this.plugin = plugin;
    Object.setPrototypeOf(this, new.target.prototype);
  }
};
init_git_response_error();
init_task_configuration_error();
init_check_is_repo();
init_clean();
init_config();
init_grep();
init_reset();
function abortPlugin(signal) {
  if (!signal) {
    return;
  }
  const onSpawnAfter = {
    type: "spawn.after",
    action(_data, context) {
      function kill() {
        context.kill(new GitPluginError(void 0, "abort", "Abort signal received"));
      }
      signal.addEventListener("abort", kill);
      context.spawned.on("close", () => signal.removeEventListener("abort", kill));
    }
  };
  const onSpawnBefore = {
    type: "spawn.before",
    action(_data, context) {
      if (signal.aborted) {
        context.kill(new GitPluginError(void 0, "abort", "Abort already signaled"));
      }
    }
  };
  return [onSpawnBefore, onSpawnAfter];
}
function isConfigSwitch(arg) {
  return typeof arg === "string" && arg.trim().toLowerCase() === "-c";
}
function preventProtocolOverride(arg, next) {
  if (!isConfigSwitch(arg)) {
    return;
  }
  if (!/^\s*protocol(.[a-z]+)?.allow/.test(next)) {
    return;
  }
  throw new GitPluginError(void 0, "unsafe", "Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol");
}
function preventUploadPack(arg, method) {
  if (/^\s*--(upload|receive)-pack/.test(arg)) {
    throw new GitPluginError(void 0, "unsafe", `Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack`);
  }
  if (method === "clone" && /^\s*-u\b/.test(arg)) {
    throw new GitPluginError(void 0, "unsafe", `Use of clone with option -u is not permitted without enabling allowUnsafePack`);
  }
  if (method === "push" && /^\s*--exec\b/.test(arg)) {
    throw new GitPluginError(void 0, "unsafe", `Use of push with option --exec is not permitted without enabling allowUnsafePack`);
  }
}
function blockUnsafeOperationsPlugin({
  allowUnsafeProtocolOverride = false,
  allowUnsafePack = false
} = {}) {
  return {
    type: "spawn.args",
    action(args, context) {
      args.forEach((current, index) => {
        const next = index < args.length ? args[index + 1] : "";
        allowUnsafeProtocolOverride || preventProtocolOverride(current, next);
        allowUnsafePack || preventUploadPack(current, context.method);
      });
      return args;
    }
  };
}
init_utils();
function commandConfigPrefixingPlugin(configuration) {
  const prefix = prefixedArray(configuration, "-c");
  return {
    type: "spawn.args",
    action(data) {
      return [...prefix, ...data];
    }
  };
}
init_utils();
var never = deferred_1().promise;
function completionDetectionPlugin({
  onClose = true,
  onExit: onExit2 = 50
} = {}) {
  function createEvents() {
    let exitCode = -1;
    const events2 = {
      close: deferred_1(),
      closeTimeout: deferred_1(),
      exit: deferred_1(),
      exitTimeout: deferred_1()
    };
    const result = Promise.race([
      onClose === false ? never : events2.closeTimeout.promise,
      onExit2 === false ? never : events2.exitTimeout.promise
    ]);
    configureTimeout(onClose, events2.close, events2.closeTimeout);
    configureTimeout(onExit2, events2.exit, events2.exitTimeout);
    return {
      close(code) {
        exitCode = code;
        events2.close.done();
      },
      exit(code) {
        exitCode = code;
        events2.exit.done();
      },
      get exitCode() {
        return exitCode;
      },
      result
    };
  }
  function configureTimeout(flag, event, timeout2) {
    if (flag === false) {
      return;
    }
    (flag === true ? event.promise : event.promise.then(() => delay(flag))).then(timeout2.done);
  }
  return {
    type: "spawn.after",
    action(_0, _1) {
      return __async(this, arguments, function* (_data, { spawned, close }) {
        var _a2, _b;
        const events2 = createEvents();
        let deferClose = true;
        let quickClose = () => void (deferClose = false);
        (_a2 = spawned.stdout) == null ? void 0 : _a2.on("data", quickClose);
        (_b = spawned.stderr) == null ? void 0 : _b.on("data", quickClose);
        spawned.on("error", quickClose);
        spawned.on("close", (code) => events2.close(code));
        spawned.on("exit", (code) => events2.exit(code));
        try {
          yield events2.result;
          if (deferClose) {
            yield delay(50);
          }
          close(events2.exitCode);
        } catch (err) {
          close(events2.exitCode, err);
        }
      });
    }
  };
}
init_git_error();
function isTaskError(result) {
  return !!(result.exitCode && result.stdErr.length);
}
function getErrorMessage(result) {
  return Buffer.concat([...result.stdOut, ...result.stdErr]);
}
function errorDetectionHandler(overwrite = false, isError = isTaskError, errorMessage = getErrorMessage) {
  return (error, result) => {
    if (!overwrite && error || !isError(result)) {
      return error;
    }
    return errorMessage(result);
  };
}
function errorDetectionPlugin(config) {
  return {
    type: "task.error",
    action(data, context) {
      const error = config(data.error, {
        stdErr: context.stdErr,
        stdOut: context.stdOut,
        exitCode: context.exitCode
      });
      if (Buffer.isBuffer(error)) {
        return { error: new GitError(void 0, error.toString("utf-8")) };
      }
      return {
        error
      };
    }
  };
}
init_utils();
var PluginStore = class {
  constructor() {
    this.plugins = /* @__PURE__ */ new Set();
  }
  add(plugin) {
    const plugins = [];
    asArray(plugin).forEach((plugin2) => plugin2 && this.plugins.add(append(plugins, plugin2)));
    return () => {
      plugins.forEach((plugin2) => this.plugins.delete(plugin2));
    };
  }
  exec(type, data, context) {
    let output = data;
    const contextual = Object.freeze(Object.create(context));
    for (const plugin of this.plugins) {
      if (plugin.type === type) {
        output = plugin.action(output, contextual);
      }
    }
    return output;
  }
};
init_utils();
function progressMonitorPlugin(progress) {
  const progressCommand = "--progress";
  const progressMethods = ["checkout", "clone", "fetch", "pull", "push"];
  const onProgress = {
    type: "spawn.after",
    action(_data, context) {
      var _a2;
      if (!context.commands.includes(progressCommand)) {
        return;
      }
      (_a2 = context.spawned.stderr) == null ? void 0 : _a2.on("data", (chunk) => {
        const message = /^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(chunk.toString("utf8"));
        if (!message) {
          return;
        }
        progress({
          method: context.method,
          stage: progressEventStage(message[1]),
          progress: asNumber(message[2]),
          processed: asNumber(message[3]),
          total: asNumber(message[4])
        });
      });
    }
  };
  const onArgs = {
    type: "spawn.args",
    action(args, context) {
      if (!progressMethods.includes(context.method)) {
        return args;
      }
      return including(args, progressCommand);
    }
  };
  return [onArgs, onProgress];
}
function progressEventStage(input) {
  return String(input.toLowerCase().split(" ", 1)) || "unknown";
}
init_utils();
function spawnOptionsPlugin(spawnOptions) {
  const options = pick(spawnOptions, ["uid", "gid"]);
  return {
    type: "spawn.options",
    action(data) {
      return __spreadValues(__spreadValues({}, options), data);
    }
  };
}
function timeoutPlugin({
  block,
  stdErr = true,
  stdOut = true
}) {
  if (block > 0) {
    return {
      type: "spawn.after",
      action(_data, context) {
        var _a2, _b;
        let timeout2;
        function wait() {
          timeout2 && clearTimeout(timeout2);
          timeout2 = setTimeout(kill, block);
        }
        function stop() {
          var _a3, _b2;
          (_a3 = context.spawned.stdout) == null ? void 0 : _a3.off("data", wait);
          (_b2 = context.spawned.stderr) == null ? void 0 : _b2.off("data", wait);
          context.spawned.off("exit", stop);
          context.spawned.off("close", stop);
          timeout2 && clearTimeout(timeout2);
        }
        function kill() {
          stop();
          context.kill(new GitPluginError(void 0, "timeout", `block timeout reached`));
        }
        stdOut && ((_a2 = context.spawned.stdout) == null ? void 0 : _a2.on("data", wait));
        stdErr && ((_b = context.spawned.stderr) == null ? void 0 : _b.on("data", wait));
        context.spawned.on("exit", stop);
        context.spawned.on("close", stop);
        wait();
      }
    };
  }
}
init_pathspec();
function suffixPathsPlugin() {
  return {
    type: "spawn.args",
    action(data) {
      const prefix = [];
      let suffix;
      function append2(args) {
        (suffix = suffix || []).push(...args);
      }
      for (let i = 0; i < data.length; i++) {
        const param = data[i];
        if (isPathSpec(param)) {
          append2(toPaths(param));
          continue;
        }
        if (param === "--") {
          append2(data.slice(i + 1).flatMap((item) => isPathSpec(item) && toPaths(item) || item));
          break;
        }
        prefix.push(param);
      }
      return !suffix ? prefix : [...prefix, "--", ...suffix.map(String)];
    }
  };
}
init_utils();
var Git = require_git();
function gitInstanceFactory(baseDir, options) {
  const plugins = new PluginStore();
  const config = createInstanceConfig(baseDir && (typeof baseDir === "string" ? { baseDir } : baseDir) || {}, options);
  if (!folderExists(config.baseDir)) {
    throw new GitConstructError(config, `Cannot use simple-git on a directory that does not exist`);
  }
  if (Array.isArray(config.config)) {
    plugins.add(commandConfigPrefixingPlugin(config.config));
  }
  plugins.add(blockUnsafeOperationsPlugin(config.unsafe));
  plugins.add(suffixPathsPlugin());
  plugins.add(completionDetectionPlugin(config.completion));
  config.abort && plugins.add(abortPlugin(config.abort));
  config.progress && plugins.add(progressMonitorPlugin(config.progress));
  config.timeout && plugins.add(timeoutPlugin(config.timeout));
  config.spawnOptions && plugins.add(spawnOptionsPlugin(config.spawnOptions));
  plugins.add(errorDetectionPlugin(errorDetectionHandler(true)));
  config.errors && plugins.add(errorDetectionPlugin(config.errors));
  return new Git(config, plugins);
}
init_git_response_error();
var esm_default = gitInstanceFactory;
const custom_nodes_path = "/path/to/custom_nodes";
const js_path = "/path/to/js";
async function gitRepoHasUpdates(dirPath, doFetch, doUpdate) {
  const git = esm_default(dirPath);
  if (doFetch) {
    await git.fetch();
  }
  const status = await git.status();
  if (status.behind > 0 || doUpdate && status.ahead > 0) {
    if (doUpdate) {
      await git.pull();
    }
    return true;
  }
  return false;
}
async function checkAExtensionInstalled(item, doFetch = false, doUpdateCheck = true, doUpdate = false) {
  item.installed = false;
  item.need_update = false;
  item.disabled = false;
  if (item.install_type === "git-clone" && item.files.length === 1) {
    let url2 = item.files[0];
    if (url2.endsWith("/")) {
      url2 = url2.slice(0, -1);
    }
    const dirName = path__namespace.parse(url2).name.replace(".git", "");
    const dirPath = path__namespace.join(custom_nodes_path, dirName);
    if (fs__namespace.existsSync(dirPath)) {
      try {
        if (doUpdateCheck && await gitRepoHasUpdates(dirPath, doFetch, doUpdate)) {
          item.need_update = true;
          item.installed = true;
        } else {
          item.installed = true;
        }
      } catch {
        item.installed = true;
      }
    } else if (fs__namespace.existsSync(dirPath + ".disabled")) {
      item.installed = true;
      item.disabled = true;
    } else {
      item.installed = false;
    }
  } else if (item.install_type === "copy" && item.files.length === 1) {
    const dirName = path__namespace.basename(item.files[0]);
    let base_path;
    if (item.files[0].endsWith(".py")) {
      base_path = custom_nodes_path;
    } else if (item.js_path) {
      base_path = path__namespace.join(js_path, item.js_path);
    } else {
      base_path = js_path;
    }
    const filePath = path__namespace.join(base_path, dirName);
    if (fs__namespace.existsSync(filePath)) {
      item.installed = true;
    } else if (fs__namespace.existsSync(filePath + ".disabled")) {
      item.installed = true;
      item.disabled = true;
    } else {
      item.installed = false;
    }
  }
}
async function checkExtensionsInstalled(extensions, doFetch = false, doUpdateCheck = true, doUpdate = false) {
  if (doFetch) {
    console.log("Start fetching...");
  } else if (doUpdate) {
    console.log("Start updating...");
  } else if (doUpdateCheck) {
    console.log("Start update check...");
  }
  async function processExtension(item) {
    await checkAExtensionInstalled(item, doFetch, doUpdateCheck, doUpdate);
  }
  await Promise.all(extensions.map(processExtension));
  if (doFetch) {
    console.log("[2K\rFetching done.");
  } else if (doUpdate) {
    const updateExists = extensions.some((item) => item.need_update);
    if (updateExists) {
      console.log("[2K\rUpdate done.");
    } else {
      console.log("[2K\rAll extensions are already up-to-date.");
    }
  } else if (doUpdateCheck) {
    console.log("[2K\rUpdate check done.");
  }
}
function getExtensionDir(name = "") {
  return path__namespace.join(appConfigManager.getConfigDir(), "comfyUI", "custom_nodes", name);
}
function getWebExtensionDir(name = "") {
  return path__namespace.join(appConfigManager.getConfigDir(), "comfyUI", "web", "extensions", name);
}
getExtensionDir();
getWebExtensionDir();
class ComfyExtensionManager {
  constructor() {
    ({
      baseDir: getExtensionDir(),
      binary: "git",
      maxConcurrentProcesses: 6,
      config: [],
      trimmed: false
    });
  }
  async downloadPlugin(plugin) {
  }
  async updatePlugin(pluginName) {
  }
  async updateAllPlugins() {
  }
  async listPlugins() {
    throw new Error("not implemented");
  }
  async removePlugin(pluginName) {
  }
  async getAllExtensions() {
    const ret = extensionList.extensions;
    checkExtensionsInstalled(ret);
    return ret;
  }
  async getExtensionNodeMap() {
    const mapping = extensionNodeMapping;
    const ret = {};
    for (const key in mapping) {
      const it = mapping[key];
      ret[it[1].title_aux] = it[0];
    }
    return ret;
  }
  async getExtensionNodes() {
    const ret = (await fetch("http://127.0.0.1:8188/object_info")).json();
    return ret;
  }
}
const comfyExtensionManager = new ComfyExtensionManager();
async function ApiRouteGetExtensions(req, res) {
  try {
    const extensions = await comfyExtensionManager.getAllExtensions();
    const extensionNodeMap = await comfyExtensionManager.getExtensionNodeMap();
    const extensionNodeList = await comfyExtensionManager.getExtensionNodes();
    res.send({
      success: true,
      data: {
        extensions,
        extensionNodeMap,
        extensionNodeList
      }
    });
  } catch (err) {
    res.send({
      success: false,
      error: err
    });
  }
}
async function startAppServer() {
  console.log("start server sd");
  const app2 = express__default["default"]();
  const port = 3333;
  app2.use(express__default["default"].json());
  app2.use(cors({
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    credentials: true
  }));
  const proxyMiddleware = dist$2.createProxyMiddleware("/comfyui", {
    target: "http://127.0.0.1:8188",
    changeOrigin: true,
    ws: true,
    pathRewrite: {
      "^/comfyui": ""
    }
  });
  app2.use("/comfyui", proxyMiddleware);
  app2.get("/", (req, res) => {
    res.send("Hello, Express + TypeScript! asdf");
  });
  app2.post("/api/data", (req, res) => {
    const { data } = req.body;
    res.json({ message: `Received data: ${data}` });
  });
  app2.get("/api/extension_infos", ApiRouteGetExtensions);
  app2.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
  });
}
const rendererPath = path__default["default"].join(__dirname, "../renderer");
console.log("started:", rendererPath);
require$$0$1.app.disableHardwareAcceleration();
require$$0$1.app.on("ready", async () => {
  await startAppServer();
  await windowManger.createMainWindow();
  startAutoUpdater();
});
require$$0$1.app.on("window-all-closed", require$$0$1.app.quit);
require$$0$1.app.on("activate", windowManger.restoreOrCreateWindow);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
