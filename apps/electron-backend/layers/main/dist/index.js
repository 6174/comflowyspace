"use strict";var z=Object.defineProperty,k=Object.defineProperties;var $=Object.getOwnPropertyDescriptors;var D=Object.getOwnPropertySymbols;var U=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var R=(r,e,t)=>e in r?z(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,h=(r,e)=>{for(var t in e||(e={}))U.call(e,t)&&R(r,t,e[t]);if(D)for(var t of D(e))x.call(e,t)&&R(r,t,e[t]);return r},v=(r,e)=>k(r,$(e));var S=(r,e)=>{var t={};for(var n in r)U.call(r,n)&&e.indexOf(n)<0&&(t[n]=r[n]);if(r!=null&&D)for(var n of D(r))e.indexOf(n)<0&&x.call(r,n)&&(t[n]=r[n]);return t};var B=require("path"),d=require("electron"),P=require("url");function _(r){return r&&typeof r=="object"&&"default"in r?r:{default:r}}var j=_(B),H=_(d);const E=H.default;if(typeof E=="string")throw new TypeError("Not running in an Electron environment!");const V=E.app||E.remote.app,W="ELECTRON_IS_DEV"in process.env,q=parseInt({}.ELECTRON_IS_DEV,10)===1;var f=W?q:!V.isPackaged;const I=process.platform==="darwin";let L;const N=new Uint8Array(16);function Q(){if(!L&&(L=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!L))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return L(N)}const l=[];for(let r=0;r<256;++r)l.push((r+256).toString(16).slice(1));function Y(r,e=0){return l[r[e+0]]+l[r[e+1]]+l[r[e+2]]+l[r[e+3]]+"-"+l[r[e+4]]+l[r[e+5]]+"-"+l[r[e+6]]+l[r[e+7]]+"-"+l[r[e+8]]+l[r[e+9]]+"-"+l[r[e+10]]+l[r[e+11]]+l[r[e+12]]+l[r[e+13]]+l[r[e+14]]+l[r[e+15]]}const J=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var T={randomUUID:J};function G(r,e,t){if(T.randomUUID&&!e&&!r)return T.randomUUID();r=r||{};const n=r.random||(r.rng||Q)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){t=t||0;for(let s=0;s<16;++s)e[t+s]=n[s];return e}return Y(n)}function K(){return G()}let y=[],p;const O=f?"http://localhost:8000":P.format({pathname:j.default.join(__dirname,"../renderer/out/index.html"),protocol:"file:",slashes:!0});async function X(){if(p)return p;const r=new d.BrowserWindow({show:!1,width:800,height:600,backgroundColor:I?"#D1D5DB":"#6B7280",titleBarStyle:I?"hiddenInset":"default",frame:I,webPreferences:{devTools:f,contextIsolation:!1,nodeIntegration:!1,preload:__dirname+"/preload.js",disableDialogs:!1,safeDialogs:!0,enableWebSQL:!1}});p=r,f&&p.webContents.openDevTools({mode:"detach"}),r.on("closed",()=>{p=null,y.forEach(t=>{var n;(n=t.window.webContents)==null||n.destroy()}),y=[]}),f?r.loadURL(`${O}/tabs`):r.loadURL("app://-/tabs"),r.show();const e=await Z(O);ee(e)}async function Z(r){const e=new d.BrowserView({webPreferences:{devTools:f,contextIsolation:!1,nodeIntegration:!1,preload:__dirname+"/preload.js",disableDialogs:!1,safeDialogs:!0,enableWebSQL:!1}});return e.webContents.loadURL(r),f&&e.webContents.openDevTools({mode:"detach"}),e.webContents.on("did-finish-load",()=>{}),y.push({window:e,name:`Tab-${K()}`}),p.webContents.send("tabChange",M()),e}function M(){var r;return{tabs:y.map(e=>e.name),active:((r=y.find(e=>{var t,n;return e.window.webContents.id===((n=(t=p.getBrowserView())==null?void 0:t.webContents)==null?void 0:n.id)}))==null?void 0:r.name)||""}}function ee(r){p.setBrowserView(r),r.setBounds({x:0,y:36,width:p.getBounds().width,height:p.getBounds().height-36}),r.setAutoResize({width:!0,height:!0,horizontal:!1,vertical:!1}),p.webContents.send("tabChange",M())}var C={exports:{}},te=ne;function ne(r){return Object.defineProperties(e,{defaultLabel:{value:"",writable:!0},labelPadding:{value:!0,writable:!0},maxLabelLength:{value:0,writable:!0},labelLength:{get(){switch(typeof e.labelPadding){case"boolean":return e.labelPadding?e.maxLabelLength:0;case"number":return e.labelPadding;default:return 0}}}});function e(t){e.maxLabelLength=Math.max(e.maxLabelLength,t.length);const n={};for(const s of[...r.levels,"log"])n[s]=(...i)=>r.logData(i,{level:s,scope:t});return n}}const re=te;class F{static instances={};errorHandler=null;eventLogger=null;functions={};hooks=[];isDev=!1;levels=null;logId=null;scope=null;transports={};variables={};constructor({allowUnknownLevel:e=!1,errorHandler:t,eventLogger:n,initializeFn:s,isDev:i=!1,levels:a=["error","warn","info","verbose","debug","silly"],logId:o,transportFactories:c={},variables:u}={}){this.addLevel=this.addLevel.bind(this),this.create=this.create.bind(this),this.logData=this.logData.bind(this),this.processMessage=this.processMessage.bind(this),this.allowUnknownLevel=e,this.initializeFn=s,this.isDev=i,this.levels=a,this.logId=o,this.transportFactories=c,this.variables=u||{},this.scope=re(this),this.addLevel("log",!1);for(const g of this.levels)this.addLevel(g,!1);this.errorHandler=t,t==null||t.setOptions({logFn:this.error}),this.eventLogger=n,n==null||n.setOptions({logger:this});for(const[g,w]of Object.entries(c))this.transports[g]=w(this);F.instances[o]=this}static getInstance({logId:e}){return this.instances[e]||this.instances.default}addLevel(e,t=this.levels.length){t!==!1&&this.levels.splice(t,0,e),this[e]=(...n)=>this.logData(n,{level:e}),this.functions[e]=this[e]}catchErrors(e){return this.processMessage({data:["log.catchErrors is deprecated. Use log.errorHandler instead"],level:"warn"},{transports:["console"]}),this.errorHandler.startCatching(e)}create(e){return typeof e=="string"&&(e={logId:e}),new F(v(h({},e),{errorHandler:this.errorHandler,initializeFn:this.initializeFn,isDev:this.isDev,transportFactories:this.transportFactories,variables:h({},this.variables)}))}compareLevels(e,t,n=this.levels){const s=n.indexOf(e),i=n.indexOf(t);return i===-1||s===-1?!0:i<=s}initialize({preload:e=!0,spyRendererConsole:t=!1}={}){this.initializeFn({logger:this,preload:e,spyRendererConsole:t})}logData(e,t={}){this.processMessage(h({data:e},t))}processMessage(e,{transports:t=this.transports}={}){if(e.cmd==="errorHandler"){this.errorHandler.handle(e.error,{errorName:e.errorName,processType:"renderer",showDialog:Boolean(e.showDialog)});return}let n=e.level;this.allowUnknownLevel||(n=this.levels.includes(e.level)?e.level:"info");const s=v(h({date:new Date},e),{level:n,variables:h(h({},this.variables),e.variables)});for(const[i,a]of this.transportEntries(t))if(!(typeof a!="function"||a.level===!1)&&!!this.compareLevels(a.level,e.level))try{const o=this.hooks.reduce((c,u)=>c&&u(c,a,i),s);o&&a(v(h({},o),{data:[...o.data]}))}catch(o){this.processInternalErrorFn(o)}}processInternalErrorFn(e){}transportEntries(e=this.transports){return(Array.isArray(e)?e:Object.entries(e)).map(n=>{switch(typeof n){case"string":return this.transports[n]?[n,this.transports[n]]:null;case"function":return[n.name,n];default:return Array.isArray(n)?n:null}}).filter(Boolean)}}var se=F;const oe=console.error;class ie{logFn=null;onError=null;showDialog=!1;preventDefault=!0;constructor({logFn:e=null}={}){this.handleError=this.handleError.bind(this),this.handleRejection=this.handleRejection.bind(this),this.startCatching=this.startCatching.bind(this),this.logFn=e}handle(e,{logFn:t=this.logFn,errorName:n="",onError:s=this.onError,showDialog:i=this.showDialog}={}){try{(s==null?void 0:s({error:e,errorName:n,processType:"renderer"}))!==!1&&t({error:e,errorName:n,showDialog:i})}catch{oe(e)}}setOptions({logFn:e,onError:t,preventDefault:n,showDialog:s}){typeof e=="function"&&(this.logFn=e),typeof t=="function"&&(this.onError=t),typeof n=="boolean"&&(this.preventDefault=n),typeof s=="boolean"&&(this.showDialog=s)}startCatching({onError:e,showDialog:t}={}){this.isActive||(this.isActive=!0,this.setOptions({onError:e,showDialog:t}),window.addEventListener("error",n=>{var s;this.preventDefault&&((s=n.preventDefault)==null||s.call(n)),this.handleError(n.error||n)}),window.addEventListener("unhandledrejection",n=>{var s;this.preventDefault&&((s=n.preventDefault)==null||s.call(n)),this.handleRejection(n.reason||n)}))}handleError(e){this.handle(e,{errorName:"Unhandled"})}handleRejection(e){const t=e instanceof Error?e:new Error(JSON.stringify(e));this.handle(t,{errorName:"Unhandled rejection"})}}var ae=ie,le=ce;const A={error:console.error,warn:console.warn,info:console.info,verbose:console.info,debug:console.debug,silly:console.debug,log:console.log};function ce(r){return Object.assign(e,{format:"{h}:{i}:{s}.{ms}{scope} \u203A {text}",formatDataFn(c){var u=c,{data:t=[],date:n=new Date,format:s=e.format,logId:i=r.logId,scope:a=r.scopeName}=u,o=S(u,["data","date","format","logId","scope"]);return typeof s=="function"?s(v(h({},o),{data:t,date:n,logId:i,scope:a})):(typeof s!="string"||(t.unshift(s),typeof t[1]=="string"&&t[1].match(/%[1cdfiOos]/)&&(t=[`${t[0]} ${t[1]}`,...t.slice(2)]),t[0]=t[0].replace(/\{(\w+)}/g,(g,w)=>{var b;switch(w){case"level":return o.level;case"logId":return i;case"scope":return a?` (${a})`:"";case"text":return"";case"y":return n.getFullYear().toString(10);case"m":return(n.getMonth()+1).toString(10).padStart(2,"0");case"d":return n.getDate().toString(10).padStart(2,"0");case"h":return n.getHours().toString(10).padStart(2,"0");case"i":return n.getMinutes().toString(10).padStart(2,"0");case"s":return n.getSeconds().toString(10).padStart(2,"0");case"ms":return n.getMilliseconds().toString(10).padStart(3,"0");case"iso":return n.toISOString();default:return((b=o.variables)==null?void 0:b[w])||g}}).trim()),t)},writeFn({message:{level:t,data:n}}){const s=A[t]||A.info;setTimeout(()=>s(...n))}});function e(t){e.writeFn({message:v(h({},t),{data:e.formatDataFn(t)})})}}var de=pe;const ue=new Set([Promise,WeakMap,WeakSet]);function pe(r){return Object.assign(e,{depth:5,serializeFn(t,{depth:n=5,seen:s=new WeakSet}={}){return n<1?`[${typeof t}]`:s.has(t)?t:["function","symbol"].includes(typeof t)?t.toString():Object(t)!==t?t:ue.has(t.constructor)?`[${t.constructor.name}]`:Array.isArray(t)?t.map(i=>e.serializeFn(i,{level:n-1,seen:s})):t instanceof Error?t.stack:t instanceof Map?new Map(Array.from(t).map(([i,a])=>[e.serializeFn(i,{level:n-1,seen:s}),e.serializeFn(a,{level:n-1,seen:s})])):t instanceof Set?new Set(Array.from(t).map(i=>e.serializeFn(i,{level:n-1,seen:s}))):(s.add(t),Object.fromEntries(Object.entries(t).map(([i,a])=>[i,e.serializeFn(a,{level:n-1,seen:s})])))}});function e(t){if(!window.__electronLog){r.processMessage({data:["electron-log: logger isn't initialized in the main process"],level:"error"},{transports:["console"]});return}try{__electronLog.sendToMain(e.serializeFn(t,{depth:e.depth}))}catch(n){r.transports.console({data:["electronLog.transports.ipc",n,"data:",t.data],level:"error"})}}}(function(r){const e=se,t=ae,n=le,s=de;r.exports=i(),r.exports.Logger=e,r.exports.default=r.exports;function i(){const a=new e({allowUnknownLevel:!0,errorHandler:new t,initializeFn:()=>{},logId:"default",transportFactories:{console:n,ipc:s},variables:{processType:"renderer"}});return a.errorHandler.setOptions({logFn({error:o,errorName:c,showDialog:u}){a.transports.console({data:[c,o].filter(Boolean),level:"error"}),a.transports.ipc({cmd:"errorHandler",error:{cause:o==null?void 0:o.cause,code:o==null?void 0:o.code,name:o==null?void 0:o.name,message:o==null?void 0:o.message,stack:o==null?void 0:o.stack},errorName:c,logId:a.logId,showDialog:u})}}),typeof window=="object"&&window.addEventListener("message",o=>{const b=o.data||{},{cmd:c,logId:u}=b,g=S(b,["cmd","logId"]),w=e.getInstance({logId:u});c==="message"&&w.processMessage(g,{transports:["console"]})}),new Proxy(a,{get(o,c){return typeof o[c]!="undefined"?o[c]:(...u)=>a.logData(u,{level:c})}})}})(C);var m=C.exports;f||(m.transports.file.level="verbose");process.on("unhandledRejection",m.error);function he(){if(require("electron-squirrel-startup")&&d.app.quit(),!f){const e=`https://refi-updater.vercel.app/update/${process.platform}/${d.app.getVersion()}`;d.autoUpdater.setFeedURL({url:e,serverType:"json"}),setInterval(()=>{d.autoUpdater.checkForUpdates()},6e4),d.autoUpdater.on("update-downloaded",(t,n,s)=>{m.debug("Downloaded new update");const i={type:"info",buttons:["Restart","Later"],title:"Application Update",message:process.platform==="win32"?n:s,detail:"A new version has been downloaded. Restart the application to apply the updates."};d.dialog.showMessageBox(i).then(a=>{a.response===0&&d.autoUpdater.quitAndInstall()})}),d.autoUpdater.on("error",t=>{m.error("There was a problem updating the application"),m.error(t)})}}const fe=j.default.join(__dirname,"../renderer");console.log("started:",fe);d.app.on("ready",async()=>{await X(),he()});d.app.on("window-all-closed",d.app.quit);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
